{-# LANGUAGE LambdaCase #-}

module FIX.CodeGen.Code where

import Data.Char as Char
import Path
import Path.IO
import Paths_fix_codegen (getDataDir)
import System.Process

copyDataFile :: Path Abs Dir -> FilePath -> IO ()
copyDataFile outputDir filePath = do
  dataDir <- getDataDir >>= resolveDir'
  fromFile <- resolveFile dataDir $ "data/" <> filePath
  contents <- readFile (fromAbsFile fromFile)
  messagesClassFile <- resolveFile outputDir filePath
  writeHaskellCode messagesClassFile contents

writeHaskellCode :: Path Abs File -> String -> IO ()
writeHaskellCode f source = do
  ensureDir (parent f)
  putStrLn $ unwords ["Writing", fromAbsFile f]
  writeFile (fromAbsFile f) $ disclaimer <> source
  runOrmoluOn f

disclaimer :: String
disclaimer =
  unlines
    [ "-- | This module has been GENERATED by fix-codegen.",
      "-- Any manual edits will be undone the next time fix-codegen is run."
    ]

runOrmoluOn :: Path Abs File -> IO ()
runOrmoluOn f = callProcess "ormolu" ["-i", "-c", fromAbsFile f]

lowerHead :: String -> String
lowerHead = \case
  [] -> []
  (c : cs) -> Char.toLower c : cs
