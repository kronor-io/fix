{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderSinglePartiesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartyIDs
import FIX.Fields.PartyID
import FIX.Fields.PartyIDSource
import FIX.Fields.PartyRole
import FIX.Fields.PartyRoleQualifier
import FIX.Groups.Class
import FIX.Groups.NewOrderSinglePartiesPartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderSingleParties"
--   , groupNumberField = "NoPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "PartyID" True
--       , MessagePieceField "PartyIDSource" False
--       , MessagePieceField "PartyRole" False
--       , MessagePieceField "PartyRoleQualifier" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewOrderSinglePartiesPartySubIDs"
--             , groupNumberField = "NoPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "PartySubID" True
--                 , MessagePieceField "PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data NewOrderSinglePartiesGroupElem = NewOrderSinglePartiesGroupElem
  { newOrderSinglePartiesGroupElemPartyID :: !PartyID,
    newOrderSinglePartiesGroupElemPartyIDSource :: !(Maybe PartyIDSource),
    newOrderSinglePartiesGroupElemPartyRole :: !(Maybe PartyRole),
    newOrderSinglePartiesGroupElemPartyRoleQualifier :: !(Maybe PartyRoleQualifier),
    newOrderSinglePartiesGroupElemNewOrderSinglePartiesPartySubIDsGroup :: ![NewOrderSinglePartiesPartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderSinglePartiesGroupElem

instance IsComponent NewOrderSinglePartiesGroupElem where
  toComponentFields ((NewOrderSinglePartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderSinglePartiesGroupElemPartyID,
        optionalFieldB newOrderSinglePartiesGroupElemPartyIDSource,
        optionalFieldB newOrderSinglePartiesGroupElemPartyRole,
        optionalFieldB newOrderSinglePartiesGroupElemPartyRoleQualifier,
        optionalGroupB newOrderSinglePartiesGroupElemNewOrderSinglePartiesPartySubIDsGroup
      ]
  fromComponentFields = do
    newOrderSinglePartiesGroupElemPartyID <- requiredFieldP
    newOrderSinglePartiesGroupElemPartyIDSource <- optionalFieldP
    newOrderSinglePartiesGroupElemPartyRole <- optionalFieldP
    newOrderSinglePartiesGroupElemPartyRoleQualifier <- optionalFieldP
    newOrderSinglePartiesGroupElemNewOrderSinglePartiesPartySubIDsGroup <- optionalGroupP
    pure (NewOrderSinglePartiesGroupElem {..})

instance IsGroupElement NewOrderSinglePartiesGroupElem where
  type GroupNumField NewOrderSinglePartiesGroupElem = NoPartyIDs
  mkGroupNum Proxy = NoPartyIDs
  countGroupNum Proxy = unNoPartyIDs

makeNewOrderSinglePartiesGroupElem :: PartyID -> NewOrderSinglePartiesGroupElem
makeNewOrderSinglePartiesGroupElem newOrderSinglePartiesGroupElemPartyID =
  let newOrderSinglePartiesGroupElemPartyIDSource = Nothing
      newOrderSinglePartiesGroupElemPartyRole = Nothing
      newOrderSinglePartiesGroupElemPartyRoleQualifier = Nothing
      newOrderSinglePartiesGroupElemNewOrderSinglePartiesPartySubIDsGroup = []
   in (NewOrderSinglePartiesGroupElem {..})
