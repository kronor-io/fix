{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NoHops where

import Data.Maybe (catMaybes)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.HopCompID
import FIX.Fields.HopRefID
import FIX.Fields.HopSendingTime
import FIX.Fields.MsgType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoHops"
--   , groupPieces =
--       [ MessagePieceField "HopCompID" False
--       , MessagePieceField "HopSendingTime" False
--       , MessagePieceField "HopRefID" False
--       ]
--   }
data NoHops = NoHops
  { noHopsHopCompID :: !(Maybe HopCompID),
    noHopsHopSendingTime :: !(Maybe HopSendingTime),
    noHopsHopRefID :: !(Maybe HopRefID)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NoHops

instance IsComponent NoHops where
  toComponentFields ((NoHops {..})) =
    catMaybes
      [ optionalFieldB noHopsHopCompID,
        optionalFieldB noHopsHopSendingTime,
        optionalFieldB noHopsHopRefID
      ]
  fromComponentFields = do
    noHopsHopCompID <- optionalFieldP
    noHopsHopSendingTime <- optionalFieldP
    noHopsHopRefID <- optionalFieldP
    pure (NoHops {..})
