{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteCancelPartiesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartyIDs
import FIX.Fields.PartyID
import FIX.Fields.PartyIDSource
import FIX.Fields.PartyRole
import FIX.Fields.PartyRoleQualifier
import FIX.Groups.Class
import FIX.Groups.QuoteCancelPartiesPartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteCancelParties"
--   , groupNumberField = "NoPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "PartyID" True
--       , MessagePieceField "PartyIDSource" False
--       , MessagePieceField "PartyRole" False
--       , MessagePieceField "PartyRoleQualifier" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuoteCancelPartiesPartySubIDs"
--             , groupNumberField = "NoPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "PartySubID" True
--                 , MessagePieceField "PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data QuoteCancelPartiesGroupElem = QuoteCancelPartiesGroupElem
  { quoteCancelPartiesGroupElemPartyID :: !PartyID,
    quoteCancelPartiesGroupElemPartyIDSource :: !(Maybe PartyIDSource),
    quoteCancelPartiesGroupElemPartyRole :: !(Maybe PartyRole),
    quoteCancelPartiesGroupElemPartyRoleQualifier :: !(Maybe PartyRoleQualifier),
    quoteCancelPartiesGroupElemQuoteCancelPartiesPartySubIDsGroup :: ![QuoteCancelPartiesPartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteCancelPartiesGroupElem

instance IsComponent QuoteCancelPartiesGroupElem where
  toComponentFields ((QuoteCancelPartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteCancelPartiesGroupElemPartyID,
        optionalFieldB quoteCancelPartiesGroupElemPartyIDSource,
        optionalFieldB quoteCancelPartiesGroupElemPartyRole,
        optionalFieldB quoteCancelPartiesGroupElemPartyRoleQualifier,
        optionalGroupB quoteCancelPartiesGroupElemQuoteCancelPartiesPartySubIDsGroup
      ]
  fromComponentFields = do
    quoteCancelPartiesGroupElemPartyID <- requiredFieldP
    quoteCancelPartiesGroupElemPartyIDSource <- optionalFieldP
    quoteCancelPartiesGroupElemPartyRole <- optionalFieldP
    quoteCancelPartiesGroupElemPartyRoleQualifier <- optionalFieldP
    quoteCancelPartiesGroupElemQuoteCancelPartiesPartySubIDsGroup <- optionalGroupP
    pure (QuoteCancelPartiesGroupElem {..})

instance IsGroupElement QuoteCancelPartiesGroupElem where
  type GroupNumField QuoteCancelPartiesGroupElem = NoPartyIDs
  mkGroupNum Proxy = NoPartyIDs
  countGroupNum Proxy = unNoPartyIDs

makeQuoteCancelPartiesGroupElem :: PartyID -> QuoteCancelPartiesGroupElem
makeQuoteCancelPartiesGroupElem quoteCancelPartiesGroupElemPartyID =
  let quoteCancelPartiesGroupElemPartyIDSource = Nothing
      quoteCancelPartiesGroupElemPartyRole = Nothing
      quoteCancelPartiesGroupElemPartyRoleQualifier = Nothing
      quoteCancelPartiesGroupElemQuoteCancelPartiesPartySubIDsGroup = []
   in (QuoteCancelPartiesGroupElem {..})
