{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.InstrAttribGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.InstrAttribType
import FIX.Fields.InstrAttribValue
import FIX.Fields.MsgType
import FIX.Fields.NoInstrAttrib
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoInstrAttrib"
--   , groupNumberField = "NoInstrAttrib"
--   , groupPieces =
--       [ MessagePieceField "InstrAttribType" True
--       , MessagePieceField "InstrAttribValue" False
--       ]
--   }
data InstrAttribGroupElem = InstrAttribGroupElem
  { instrAttribGroupElemInstrAttribType :: !InstrAttribType,
    instrAttribGroupElemInstrAttribValue :: !(Maybe InstrAttribValue)
  }
  deriving stock (Show, Eq, Generic)

instance Validity InstrAttribGroupElem

instance IsComponent InstrAttribGroupElem where
  toComponentFields ((InstrAttribGroupElem {..})) =
    mconcat
      [ requiredFieldB instrAttribGroupElemInstrAttribType,
        optionalFieldB instrAttribGroupElemInstrAttribValue
      ]
  fromComponentFields = do
    instrAttribGroupElemInstrAttribType <- requiredFieldP
    instrAttribGroupElemInstrAttribValue <- optionalFieldP
    pure (InstrAttribGroupElem {..})

instance IsGroupElement InstrAttribGroupElem where
  type GroupNumField InstrAttribGroupElem = NoInstrAttrib
  mkGroupNum Proxy = NoInstrAttrib
  countGroupNum Proxy = unNoInstrAttrib

makeInstrAttribGroupElem :: InstrAttribType -> InstrAttribGroupElem
makeInstrAttribGroupElem instrAttribGroupElemInstrAttribType =
  let instrAttribGroupElemInstrAttribValue = Nothing
   in (InstrAttribGroupElem {..})
