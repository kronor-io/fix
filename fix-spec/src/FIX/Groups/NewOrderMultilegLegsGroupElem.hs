{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderMultilegLegsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.InstrumentLeg
import FIX.Fields.LegCoveredOrUncovered
import FIX.Fields.LegPositionEffect
import FIX.Fields.LegPrice
import FIX.Fields.LegQty
import FIX.Fields.LegRefID
import FIX.Fields.LegSettlDate
import FIX.Fields.LegSettlType
import FIX.Fields.LegSplitSettlDate
import FIX.Fields.LegSwapType
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Groups.Class
import FIX.Groups.NewOrderMultilegLegsLegAllocsGroupElem
import FIX.Groups.NewOrderMultilegLegsLegStipulationsGroupElem
import FIX.Groups.NewOrderMultilegLegsNestedPartiesGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderMultilegLegs"
--   , groupNumberField = "NoLegs"
--   , groupPieces =
--       [ MessagePieceComponent "InstrumentLeg" True
--       , MessagePieceField "LegQty" False
--       , MessagePieceField "LegSwapType" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewOrderMultilegLegsLegStipulations"
--             , groupNumberField = "NoLegStipulations"
--             , groupPieces =
--                 [ MessagePieceField "LegStipulationType" True
--                 , MessagePieceField "LegStipulationValue" False
--                 ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewOrderMultilegLegsLegAllocs"
--             , groupNumberField = "NoLegAllocs"
--             , groupPieces =
--                 [ MessagePieceField "LegAllocAccount" True
--                 , MessagePieceField "LegIndividualAllocID" False
--                 , MessagePieceGroup
--                     GroupSpec
--                       { groupName = "NewOrderMultilegLegsLegAllocsNestedParties2"
--                       , groupNumberField = "NoNested2PartyIDs"
--                       , groupPieces =
--                           [ MessagePieceField "Nested2PartyID" True
--                           , MessagePieceField "Nested2PartyIDSource" False
--                           , MessagePieceField "Nested2PartyRole" False
--                           , MessagePieceGroup
--                               GroupSpec
--                                 { groupName =
--                                     "NewOrderMultilegLegsLegAllocsNestedParties2Nested2PartySubIDs"
--                                 , groupNumberField = "NoNested2PartySubIDs"
--                                 , groupPieces =
--                                     [ MessagePieceField "Nested2PartySubID" True
--                                     , MessagePieceField "Nested2PartySubIDType" False
--                                     ]
--                                 }
--                               False
--                           ]
--                       }
--                     False
--                 , MessagePieceField "LegAllocQty" False
--                 , MessagePieceField "LegAllocAcctIDSource" False
--                 , MessagePieceField "LegSettlCurrency" False
--                 ]
--             }
--           False
--       , MessagePieceField "LegPositionEffect" False
--       , MessagePieceField "LegCoveredOrUncovered" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewOrderMultilegLegsNestedParties"
--             , groupNumberField = "NoNestedPartyIDs"
--             , groupPieces =
--                 [ MessagePieceField "NestedPartyID" True
--                 , MessagePieceField "NestedPartyIDSource" False
--                 , MessagePieceField "NestedPartyRole" False
--                 , MessagePieceField "NestedPartyRoleQualifier" False
--                 , MessagePieceGroup
--                     GroupSpec
--                       { groupName = "NewOrderMultilegLegsNestedPartiesNestedPartySubIDs"
--                       , groupNumberField = "NoNestedPartySubIDs"
--                       , groupPieces =
--                           [ MessagePieceField "NestedPartySubID" True
--                           , MessagePieceField "NestedPartySubIDType" False
--                           ]
--                       }
--                     False
--                 ]
--             }
--           False
--       , MessagePieceField "LegSettlType" False
--       , MessagePieceField "LegSettlDate" False
--       , MessagePieceField "LegSplitSettlDate" False
--       , MessagePieceField "LegPrice" False
--       , MessagePieceField "LegRefID" False
--       ]
--   }
data NewOrderMultilegLegsGroupElem = NewOrderMultilegLegsGroupElem
  { newOrderMultilegLegsGroupElemInstrumentLeg :: !InstrumentLeg,
    newOrderMultilegLegsGroupElemLegQty :: !(Maybe LegQty),
    newOrderMultilegLegsGroupElemLegSwapType :: !(Maybe LegSwapType),
    newOrderMultilegLegsGroupElemNewOrderMultilegLegsLegStipulationsGroup :: ![NewOrderMultilegLegsLegStipulationsGroupElem],
    newOrderMultilegLegsGroupElemNewOrderMultilegLegsLegAllocsGroup :: ![NewOrderMultilegLegsLegAllocsGroupElem],
    newOrderMultilegLegsGroupElemLegPositionEffect :: !(Maybe LegPositionEffect),
    newOrderMultilegLegsGroupElemLegCoveredOrUncovered :: !(Maybe LegCoveredOrUncovered),
    newOrderMultilegLegsGroupElemNewOrderMultilegLegsNestedPartiesGroup :: ![NewOrderMultilegLegsNestedPartiesGroupElem],
    newOrderMultilegLegsGroupElemLegSettlType :: !(Maybe LegSettlType),
    newOrderMultilegLegsGroupElemLegSettlDate :: !(Maybe LegSettlDate),
    newOrderMultilegLegsGroupElemLegSplitSettlDate :: !(Maybe LegSplitSettlDate),
    newOrderMultilegLegsGroupElemLegPrice :: !(Maybe LegPrice),
    newOrderMultilegLegsGroupElemLegRefID :: !(Maybe LegRefID)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderMultilegLegsGroupElem

instance IsComponent NewOrderMultilegLegsGroupElem where
  toComponentFields ((NewOrderMultilegLegsGroupElem {..})) =
    mconcat
      [ requiredComponentB newOrderMultilegLegsGroupElemInstrumentLeg,
        optionalFieldB newOrderMultilegLegsGroupElemLegQty,
        optionalFieldB newOrderMultilegLegsGroupElemLegSwapType,
        optionalGroupB newOrderMultilegLegsGroupElemNewOrderMultilegLegsLegStipulationsGroup,
        optionalGroupB newOrderMultilegLegsGroupElemNewOrderMultilegLegsLegAllocsGroup,
        optionalFieldB newOrderMultilegLegsGroupElemLegPositionEffect,
        optionalFieldB newOrderMultilegLegsGroupElemLegCoveredOrUncovered,
        optionalGroupB newOrderMultilegLegsGroupElemNewOrderMultilegLegsNestedPartiesGroup,
        optionalFieldB newOrderMultilegLegsGroupElemLegSettlType,
        optionalFieldB newOrderMultilegLegsGroupElemLegSettlDate,
        optionalFieldB newOrderMultilegLegsGroupElemLegSplitSettlDate,
        optionalFieldB newOrderMultilegLegsGroupElemLegPrice,
        optionalFieldB newOrderMultilegLegsGroupElemLegRefID
      ]
  fromComponentFields = do
    newOrderMultilegLegsGroupElemInstrumentLeg <- requiredComponentP
    newOrderMultilegLegsGroupElemLegQty <- optionalFieldP
    newOrderMultilegLegsGroupElemLegSwapType <- optionalFieldP
    newOrderMultilegLegsGroupElemNewOrderMultilegLegsLegStipulationsGroup <- optionalGroupP
    newOrderMultilegLegsGroupElemNewOrderMultilegLegsLegAllocsGroup <- optionalGroupP
    newOrderMultilegLegsGroupElemLegPositionEffect <- optionalFieldP
    newOrderMultilegLegsGroupElemLegCoveredOrUncovered <- optionalFieldP
    newOrderMultilegLegsGroupElemNewOrderMultilegLegsNestedPartiesGroup <- optionalGroupP
    newOrderMultilegLegsGroupElemLegSettlType <- optionalFieldP
    newOrderMultilegLegsGroupElemLegSettlDate <- optionalFieldP
    newOrderMultilegLegsGroupElemLegSplitSettlDate <- optionalFieldP
    newOrderMultilegLegsGroupElemLegPrice <- optionalFieldP
    newOrderMultilegLegsGroupElemLegRefID <- optionalFieldP
    pure (NewOrderMultilegLegsGroupElem {..})

instance IsGroupElement NewOrderMultilegLegsGroupElem where
  type GroupNumField NewOrderMultilegLegsGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs

makeNewOrderMultilegLegsGroupElem :: InstrumentLeg -> NewOrderMultilegLegsGroupElem
makeNewOrderMultilegLegsGroupElem newOrderMultilegLegsGroupElemInstrumentLeg =
  let newOrderMultilegLegsGroupElemLegQty = Nothing
      newOrderMultilegLegsGroupElemLegSwapType = Nothing
      newOrderMultilegLegsGroupElemNewOrderMultilegLegsLegStipulationsGroup = []
      newOrderMultilegLegsGroupElemNewOrderMultilegLegsLegAllocsGroup = []
      newOrderMultilegLegsGroupElemLegPositionEffect = Nothing
      newOrderMultilegLegsGroupElemLegCoveredOrUncovered = Nothing
      newOrderMultilegLegsGroupElemNewOrderMultilegLegsNestedPartiesGroup = []
      newOrderMultilegLegsGroupElemLegSettlType = Nothing
      newOrderMultilegLegsGroupElemLegSettlDate = Nothing
      newOrderMultilegLegsGroupElemLegSplitSettlDate = Nothing
      newOrderMultilegLegsGroupElemLegPrice = Nothing
      newOrderMultilegLegsGroupElemLegRefID = Nothing
   in (NewOrderMultilegLegsGroupElem {..})
