{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewsRoutingIDsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoRoutingIDs
import FIX.Fields.RoutingID
import FIX.Fields.RoutingType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewsRoutingIDs"
--   , groupNumberField = "NoRoutingIDs"
--   , groupPieces =
--       [ MessagePieceField "RoutingType" True
--       , MessagePieceField "RoutingID" False
--       ]
--   }
data NewsRoutingIDsGroupElem = NewsRoutingIDsGroupElem
  { newsRoutingIDsGroupElemRoutingType :: !RoutingType,
    newsRoutingIDsGroupElemRoutingID :: !(Maybe RoutingID)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewsRoutingIDsGroupElem

instance IsComponent NewsRoutingIDsGroupElem where
  toComponentFields ((NewsRoutingIDsGroupElem {..})) =
    mconcat
      [ requiredFieldB newsRoutingIDsGroupElemRoutingType,
        optionalFieldB newsRoutingIDsGroupElemRoutingID
      ]
  fromComponentFields = do
    newsRoutingIDsGroupElemRoutingType <- requiredFieldP
    newsRoutingIDsGroupElemRoutingID <- optionalFieldP
    pure (NewsRoutingIDsGroupElem {..})

instance IsGroupElement NewsRoutingIDsGroupElem where
  type GroupNumField NewsRoutingIDsGroupElem = NoRoutingIDs
  mkGroupNum Proxy = NoRoutingIDs
  countGroupNum Proxy = unNoRoutingIDs

makeNewsRoutingIDsGroupElem :: RoutingType -> NewsRoutingIDsGroupElem
makeNewsRoutingIDsGroupElem newsRoutingIDsGroupElemRoutingType =
  let newsRoutingIDsGroupElemRoutingID = Nothing
   in (NewsRoutingIDsGroupElem {..})
