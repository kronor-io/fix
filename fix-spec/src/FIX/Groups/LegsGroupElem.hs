{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.LegsGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.BidPx2
import FIX.Fields.LegBidExAnteCost
import FIX.Fields.LegBidExAnteCostPercentage
import FIX.Fields.LegBidPx
import FIX.Fields.LegMaturityDate
import FIX.Fields.LegMidPx
import FIX.Fields.LegOfferExAnteCost
import FIX.Fields.LegOfferExAnteCostPercentage
import FIX.Fields.LegOfferPx
import FIX.Fields.LegQty
import FIX.Fields.LegRefID
import FIX.Fields.LegSettlDate
import FIX.Fields.LegSymbol
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Fields.OfferPx2
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoLegs"
--   , groupNumberField = "NoLegs"
--   , groupPieces =
--       [ MessagePieceField "LegSymbol" True
--       , MessagePieceField "LegMaturityDate" False
--       , MessagePieceField "LegQty" True
--       , MessagePieceField "LegSettlDate" False
--       , MessagePieceField "LegBidPx" False
--       , MessagePieceField "LegOfferPx" False
--       , MessagePieceField "LegRefID" True
--       , MessagePieceField "LegMidPx" False
--       , MessagePieceField "BidPx2" False
--       , MessagePieceField "OfferPx2" False
--       , MessagePieceField "LegBidExAnteCost" False
--       , MessagePieceField "LegOfferExAnteCost" False
--       , MessagePieceField "LegBidExAnteCostPercentage" False
--       , MessagePieceField "LegOfferExAnteCostPercentage" False
--       ]
--   }
data LegsGroupElem = LegsGroupElem
  { legsGroupElemLegSymbol :: !LegSymbol,
    legsGroupElemLegMaturityDate :: !(Maybe LegMaturityDate),
    legsGroupElemLegQty :: !LegQty,
    legsGroupElemLegSettlDate :: !(Maybe LegSettlDate),
    legsGroupElemLegBidPx :: !(Maybe LegBidPx),
    legsGroupElemLegOfferPx :: !(Maybe LegOfferPx),
    legsGroupElemLegRefID :: !LegRefID,
    legsGroupElemLegMidPx :: !(Maybe LegMidPx),
    legsGroupElemBidPx2 :: !(Maybe BidPx2),
    legsGroupElemOfferPx2 :: !(Maybe OfferPx2),
    legsGroupElemLegBidExAnteCost :: !(Maybe LegBidExAnteCost),
    legsGroupElemLegOfferExAnteCost :: !(Maybe LegOfferExAnteCost),
    legsGroupElemLegBidExAnteCostPercentage :: !(Maybe LegBidExAnteCostPercentage),
    legsGroupElemLegOfferExAnteCostPercentage :: !(Maybe LegOfferExAnteCostPercentage)
  }
  deriving stock (Show, Eq, Generic)

instance Validity LegsGroupElem

instance IsComponent LegsGroupElem where
  toComponentFields ((LegsGroupElem {..})) =
    mconcat
      [ requiredFieldB legsGroupElemLegSymbol,
        optionalFieldB legsGroupElemLegMaturityDate,
        requiredFieldB legsGroupElemLegQty,
        optionalFieldB legsGroupElemLegSettlDate,
        optionalFieldB legsGroupElemLegBidPx,
        optionalFieldB legsGroupElemLegOfferPx,
        requiredFieldB legsGroupElemLegRefID,
        optionalFieldB legsGroupElemLegMidPx,
        optionalFieldB legsGroupElemBidPx2,
        optionalFieldB legsGroupElemOfferPx2,
        optionalFieldB legsGroupElemLegBidExAnteCost,
        optionalFieldB legsGroupElemLegOfferExAnteCost,
        optionalFieldB legsGroupElemLegBidExAnteCostPercentage,
        optionalFieldB legsGroupElemLegOfferExAnteCostPercentage
      ]
  fromComponentFields = do
    legsGroupElemLegSymbol <- requiredFieldP
    legsGroupElemLegMaturityDate <- optionalFieldP
    legsGroupElemLegQty <- requiredFieldP
    legsGroupElemLegSettlDate <- optionalFieldP
    legsGroupElemLegBidPx <- optionalFieldP
    legsGroupElemLegOfferPx <- optionalFieldP
    legsGroupElemLegRefID <- requiredFieldP
    legsGroupElemLegMidPx <- optionalFieldP
    legsGroupElemBidPx2 <- optionalFieldP
    legsGroupElemOfferPx2 <- optionalFieldP
    legsGroupElemLegBidExAnteCost <- optionalFieldP
    legsGroupElemLegOfferExAnteCost <- optionalFieldP
    legsGroupElemLegBidExAnteCostPercentage <- optionalFieldP
    legsGroupElemLegOfferExAnteCostPercentage <- optionalFieldP
    pure (LegsGroupElem {..})

instance IsGroupElement LegsGroupElem where
  type GroupNumField LegsGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs

makeLegsGroupElem :: LegSymbol -> (LegQty -> (LegRefID -> LegsGroupElem))
makeLegsGroupElem legsGroupElemLegSymbol legsGroupElemLegQty legsGroupElemLegRefID =
  let legsGroupElemLegMaturityDate = Nothing
      legsGroupElemLegSettlDate = Nothing
      legsGroupElemLegBidPx = Nothing
      legsGroupElemLegOfferPx = Nothing
      legsGroupElemLegMidPx = Nothing
      legsGroupElemBidPx2 = Nothing
      legsGroupElemOfferPx2 = Nothing
      legsGroupElemLegBidExAnteCost = Nothing
      legsGroupElemLegOfferExAnteCost = Nothing
      legsGroupElemLegBidExAnteCostPercentage = Nothing
      legsGroupElemLegOfferExAnteCostPercentage = Nothing
   in (LegsGroupElem {..})
