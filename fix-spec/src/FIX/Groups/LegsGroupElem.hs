{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.LegsGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.InstrumentLeg
import FIX.Components.LegBenchmarkCurveData
import FIX.Components.LegStipulations
import FIX.Components.NestedParties
import FIX.Fields.LegQty
import FIX.Fields.LegSettlDate
import FIX.Fields.LegSettlType
import FIX.Fields.LegSwapType
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoLegs"
--   , groupPieces =
--       [ MessagePieceComponent "InstrumentLeg" True
--       , MessagePieceField "LegQty" False
--       , MessagePieceField "LegSwapType" False
--       , MessagePieceField "LegSettlType" False
--       , MessagePieceField "LegSettlDate" False
--       , MessagePieceComponent "LegStipulations" False
--       , MessagePieceComponent "NestedParties" False
--       , MessagePieceComponent "LegBenchmarkCurveData" False
--       ]
--   }
data LegsGroupElem = LegsGroupElem
  { legsGroupElemInstrumentLeg :: !InstrumentLeg,
    legsGroupElemLegQty :: !(Maybe LegQty),
    legsGroupElemLegSwapType :: !(Maybe LegSwapType),
    legsGroupElemLegSettlType :: !(Maybe LegSettlType),
    legsGroupElemLegSettlDate :: !(Maybe LegSettlDate),
    legsGroupElemLegStipulations :: !(Maybe LegStipulations),
    legsGroupElemNestedParties :: !(Maybe NestedParties),
    legsGroupElemLegBenchmarkCurveData :: !(Maybe LegBenchmarkCurveData)
  }
  deriving stock (Show, Eq, Generic)

instance Validity LegsGroupElem

instance IsComponent LegsGroupElem where
  toComponentFields ((LegsGroupElem {..})) =
    mconcat
      [ requiredComponentB legsGroupElemInstrumentLeg,
        optionalFieldB legsGroupElemLegQty,
        optionalFieldB legsGroupElemLegSwapType,
        optionalFieldB legsGroupElemLegSettlType,
        optionalFieldB legsGroupElemLegSettlDate,
        optionalComponentB legsGroupElemLegStipulations,
        optionalComponentB legsGroupElemNestedParties,
        optionalComponentB legsGroupElemLegBenchmarkCurveData
      ]
  fromComponentFields = do
    legsGroupElemInstrumentLeg <- requiredComponentP
    legsGroupElemLegQty <- optionalFieldP
    legsGroupElemLegSwapType <- optionalFieldP
    legsGroupElemLegSettlType <- optionalFieldP
    legsGroupElemLegSettlDate <- optionalFieldP
    legsGroupElemLegStipulations <- optionalComponentP
    legsGroupElemNestedParties <- optionalComponentP
    legsGroupElemLegBenchmarkCurveData <- optionalComponentP
    pure (LegsGroupElem {..})

instance IsGroupElement LegsGroupElem where
  type GroupNumField LegsGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs
