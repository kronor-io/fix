{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.LegsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.LegMaturityDate
import FIX.Fields.LegQty
import FIX.Fields.LegRefID
import FIX.Fields.LegSettlDate
import FIX.Fields.LegSide
import FIX.Fields.LegSplitSettlDate
import FIX.Fields.LegSymbol
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Groups.Class
import FIX.Groups.LegAllocsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoLegs"
--   , groupNumberField = "NoLegs"
--   , groupPieces =
--       [ MessagePieceField "LegSymbol" True
--       , MessagePieceField "LegMaturityDate" False
--       , MessagePieceField "LegSide" True
--       , MessagePieceField "LegQty" True
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NoLegAllocs"
--             , groupNumberField = "NoLegAllocs"
--             , groupPieces =
--                 [ MessagePieceField "LegAllocAccount" True
--                 , MessagePieceField "LegAllocQty" True
--                 , MessagePieceComponent "NestedParties" True
--                 ]
--             }
--           False
--       , MessagePieceField "LegRefID" True
--       , MessagePieceField "LegSettlDate" True
--       , MessagePieceField "LegSplitSettlDate" False
--       ]
--   }
data LegsGroupElem = LegsGroupElem
  { legsGroupElemLegSymbol :: !LegSymbol,
    legsGroupElemLegMaturityDate :: !(Maybe LegMaturityDate),
    legsGroupElemLegSide :: !LegSide,
    legsGroupElemLegQty :: !LegQty,
    legsGroupElemLegAllocsGroup :: ![LegAllocsGroupElem],
    legsGroupElemLegRefID :: !LegRefID,
    legsGroupElemLegSettlDate :: !LegSettlDate,
    legsGroupElemLegSplitSettlDate :: !(Maybe LegSplitSettlDate)
  }
  deriving stock (Show, Eq, Generic)

instance Validity LegsGroupElem

instance IsComponent LegsGroupElem where
  toComponentFields ((LegsGroupElem {..})) =
    mconcat
      [ requiredFieldB legsGroupElemLegSymbol,
        optionalFieldB legsGroupElemLegMaturityDate,
        requiredFieldB legsGroupElemLegSide,
        requiredFieldB legsGroupElemLegQty,
        optionalGroupB legsGroupElemLegAllocsGroup,
        requiredFieldB legsGroupElemLegRefID,
        requiredFieldB legsGroupElemLegSettlDate,
        optionalFieldB legsGroupElemLegSplitSettlDate
      ]
  fromComponentFields = do
    legsGroupElemLegSymbol <- requiredFieldP
    legsGroupElemLegMaturityDate <- optionalFieldP
    legsGroupElemLegSide <- requiredFieldP
    legsGroupElemLegQty <- requiredFieldP
    legsGroupElemLegAllocsGroup <- optionalGroupP
    legsGroupElemLegRefID <- requiredFieldP
    legsGroupElemLegSettlDate <- requiredFieldP
    legsGroupElemLegSplitSettlDate <- optionalFieldP
    pure (LegsGroupElem {..})

instance IsGroupElement LegsGroupElem where
  type GroupNumField LegsGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs

makeLegsGroupElem :: LegSymbol -> (LegSide -> (LegQty -> (LegRefID -> (LegSettlDate -> LegsGroupElem))))
makeLegsGroupElem legsGroupElemLegSymbol legsGroupElemLegSide legsGroupElemLegQty legsGroupElemLegRefID legsGroupElemLegSettlDate =
  let legsGroupElemLegMaturityDate = Nothing
      legsGroupElemLegAllocsGroup = []
      legsGroupElemLegSplitSettlDate = Nothing
   in (LegsGroupElem {..})
