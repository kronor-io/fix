{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.LegStipulationsGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.LegStipulationType
import FIX.Fields.LegStipulationValue
import FIX.Fields.MsgType
import FIX.Fields.NoLegStipulations
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "LegStipulations"
--   , groupNumberField = "NoLegStipulations"
--   , groupPieces =
--       [ MessagePieceField "LegStipulationType" True
--       , MessagePieceField "LegStipulationValue" False
--       ]
--   }
data LegStipulationsGroupElem = LegStipulationsGroupElem
  { legStipulationsGroupElemLegStipulationType :: !LegStipulationType,
    legStipulationsGroupElemLegStipulationValue :: !(Maybe LegStipulationValue)
  }
  deriving stock (Show, Eq, Generic)

instance Validity LegStipulationsGroupElem

instance IsComponent LegStipulationsGroupElem where
  toComponentFields ((LegStipulationsGroupElem {..})) =
    mconcat
      [ requiredFieldB legStipulationsGroupElemLegStipulationType,
        optionalFieldB legStipulationsGroupElemLegStipulationValue
      ]
  fromComponentFields = do
    legStipulationsGroupElemLegStipulationType <- requiredFieldP
    legStipulationsGroupElemLegStipulationValue <- optionalFieldP
    pure (LegStipulationsGroupElem {..})

instance IsGroupElement LegStipulationsGroupElem where
  type GroupNumField LegStipulationsGroupElem = NoLegStipulations
  mkGroupNum Proxy = NoLegStipulations
  countGroupNum Proxy = unNoLegStipulations

makeLegStipulationsGroupElem :: LegStipulationType -> LegStipulationsGroupElem
makeLegStipulationsGroupElem legStipulationsGroupElemLegStipulationType =
  let legStipulationsGroupElemLegStipulationValue = Nothing
   in (LegStipulationsGroupElem {..})
