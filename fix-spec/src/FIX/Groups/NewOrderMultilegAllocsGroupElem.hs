{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderMultilegAllocsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.AllocAccount
import FIX.Fields.AllocAcctIDSource
import FIX.Fields.AllocQty
import FIX.Fields.AllocSettlCurrency
import FIX.Fields.IndividualAllocID
import FIX.Fields.MsgType
import FIX.Fields.NoAllocs
import FIX.Groups.Class
import FIX.Groups.NewOrderMultilegAllocsNestedParties3GroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderMultilegAllocs"
--   , groupNumberField = "NoAllocs"
--   , groupPieces =
--       [ MessagePieceField "AllocAccount" True
--       , MessagePieceField "AllocAcctIDSource" False
--       , MessagePieceField "AllocSettlCurrency" False
--       , MessagePieceField "IndividualAllocID" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewOrderMultilegAllocsNestedParties3"
--             , groupNumberField = "NoNested3PartyIDs"
--             , groupPieces =
--                 [ MessagePieceField "Nested3PartyID" True
--                 , MessagePieceField "Nested3PartyIDSource" False
--                 , MessagePieceField "Nested3PartyRole" False
--                 , MessagePieceGroup
--                     GroupSpec
--                       { groupName =
--                           "NewOrderMultilegAllocsNestedParties3Nested3PartySubIDs"
--                       , groupNumberField = "NoNested3PartySubIDs"
--                       , groupPieces =
--                           [ MessagePieceField "Nested3PartySubID" True
--                           , MessagePieceField "Nested3PartySubIDType" False
--                           ]
--                       }
--                     False
--                 ]
--             }
--           False
--       , MessagePieceField "AllocQty" False
--       ]
--   }
data NewOrderMultilegAllocsGroupElem = NewOrderMultilegAllocsGroupElem
  { newOrderMultilegAllocsGroupElemAllocAccount :: !AllocAccount,
    newOrderMultilegAllocsGroupElemAllocAcctIDSource :: !(Maybe AllocAcctIDSource),
    newOrderMultilegAllocsGroupElemAllocSettlCurrency :: !(Maybe AllocSettlCurrency),
    newOrderMultilegAllocsGroupElemIndividualAllocID :: !(Maybe IndividualAllocID),
    newOrderMultilegAllocsGroupElemNewOrderMultilegAllocsNestedParties3Group :: ![NewOrderMultilegAllocsNestedParties3GroupElem],
    newOrderMultilegAllocsGroupElemAllocQty :: !(Maybe AllocQty)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderMultilegAllocsGroupElem

instance IsComponent NewOrderMultilegAllocsGroupElem where
  toComponentFields ((NewOrderMultilegAllocsGroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderMultilegAllocsGroupElemAllocAccount,
        optionalFieldB newOrderMultilegAllocsGroupElemAllocAcctIDSource,
        optionalFieldB newOrderMultilegAllocsGroupElemAllocSettlCurrency,
        optionalFieldB newOrderMultilegAllocsGroupElemIndividualAllocID,
        optionalGroupB newOrderMultilegAllocsGroupElemNewOrderMultilegAllocsNestedParties3Group,
        optionalFieldB newOrderMultilegAllocsGroupElemAllocQty
      ]
  fromComponentFields = do
    newOrderMultilegAllocsGroupElemAllocAccount <- requiredFieldP
    newOrderMultilegAllocsGroupElemAllocAcctIDSource <- optionalFieldP
    newOrderMultilegAllocsGroupElemAllocSettlCurrency <- optionalFieldP
    newOrderMultilegAllocsGroupElemIndividualAllocID <- optionalFieldP
    newOrderMultilegAllocsGroupElemNewOrderMultilegAllocsNestedParties3Group <- optionalGroupP
    newOrderMultilegAllocsGroupElemAllocQty <- optionalFieldP
    pure (NewOrderMultilegAllocsGroupElem {..})

instance IsGroupElement NewOrderMultilegAllocsGroupElem where
  type GroupNumField NewOrderMultilegAllocsGroupElem = NoAllocs
  mkGroupNum Proxy = NoAllocs
  countGroupNum Proxy = unNoAllocs

makeNewOrderMultilegAllocsGroupElem :: AllocAccount -> NewOrderMultilegAllocsGroupElem
makeNewOrderMultilegAllocsGroupElem newOrderMultilegAllocsGroupElemAllocAccount =
  let newOrderMultilegAllocsGroupElemAllocAcctIDSource = Nothing
      newOrderMultilegAllocsGroupElemAllocSettlCurrency = Nothing
      newOrderMultilegAllocsGroupElemIndividualAllocID = Nothing
      newOrderMultilegAllocsGroupElemNewOrderMultilegAllocsNestedParties3Group = []
      newOrderMultilegAllocsGroupElemAllocQty = Nothing
   in (NewOrderMultilegAllocsGroupElem {..})
