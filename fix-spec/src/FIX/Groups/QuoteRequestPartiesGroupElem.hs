{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteRequestPartiesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartyIDs
import FIX.Fields.PartyID
import FIX.Fields.PartyIDSource
import FIX.Fields.PartyRole
import FIX.Fields.PartyRoleQualifier
import FIX.Groups.Class
import FIX.Groups.QuoteRequestPartiesPartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteRequestParties"
--   , groupNumberField = "NoPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "PartyID" True
--       , MessagePieceField "PartyIDSource" False
--       , MessagePieceField "PartyRole" False
--       , MessagePieceField "PartyRoleQualifier" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuoteRequestPartiesPartySubIDs"
--             , groupNumberField = "NoPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "PartySubID" True
--                 , MessagePieceField "PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data QuoteRequestPartiesGroupElem = QuoteRequestPartiesGroupElem
  { quoteRequestPartiesGroupElemPartyID :: !PartyID,
    quoteRequestPartiesGroupElemPartyIDSource :: !(Maybe PartyIDSource),
    quoteRequestPartiesGroupElemPartyRole :: !(Maybe PartyRole),
    quoteRequestPartiesGroupElemPartyRoleQualifier :: !(Maybe PartyRoleQualifier),
    quoteRequestPartiesGroupElemQuoteRequestPartiesPartySubIDsGroup :: ![QuoteRequestPartiesPartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestPartiesGroupElem

instance IsComponent QuoteRequestPartiesGroupElem where
  toComponentFields ((QuoteRequestPartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteRequestPartiesGroupElemPartyID,
        optionalFieldB quoteRequestPartiesGroupElemPartyIDSource,
        optionalFieldB quoteRequestPartiesGroupElemPartyRole,
        optionalFieldB quoteRequestPartiesGroupElemPartyRoleQualifier,
        optionalGroupB quoteRequestPartiesGroupElemQuoteRequestPartiesPartySubIDsGroup
      ]
  fromComponentFields = do
    quoteRequestPartiesGroupElemPartyID <- requiredFieldP
    quoteRequestPartiesGroupElemPartyIDSource <- optionalFieldP
    quoteRequestPartiesGroupElemPartyRole <- optionalFieldP
    quoteRequestPartiesGroupElemPartyRoleQualifier <- optionalFieldP
    quoteRequestPartiesGroupElemQuoteRequestPartiesPartySubIDsGroup <- optionalGroupP
    pure (QuoteRequestPartiesGroupElem {..})

instance IsGroupElement QuoteRequestPartiesGroupElem where
  type GroupNumField QuoteRequestPartiesGroupElem = NoPartyIDs
  mkGroupNum Proxy = NoPartyIDs
  countGroupNum Proxy = unNoPartyIDs

makeQuoteRequestPartiesGroupElem :: PartyID -> QuoteRequestPartiesGroupElem
makeQuoteRequestPartiesGroupElem quoteRequestPartiesGroupElemPartyID =
  let quoteRequestPartiesGroupElemPartyIDSource = Nothing
      quoteRequestPartiesGroupElemPartyRole = Nothing
      quoteRequestPartiesGroupElemPartyRoleQualifier = Nothing
      quoteRequestPartiesGroupElemQuoteRequestPartiesPartySubIDsGroup = []
   in (QuoteRequestPartiesGroupElem {..})
