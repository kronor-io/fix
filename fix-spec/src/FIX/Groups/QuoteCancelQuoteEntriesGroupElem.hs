{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteCancelQuoteEntriesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.FinancingDetails
import FIX.Components.Instrument
import FIX.Fields.MsgType
import FIX.Fields.NoQuoteEntries
import FIX.Groups.Class
import FIX.Groups.QuoteCancelQuoteEntriesLegsGroupElem
import FIX.Groups.QuoteCancelQuoteEntriesUnderlyingsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteCancelQuoteEntries"
--   , groupNumberField = "NoQuoteEntries"
--   , groupPieces =
--       [ MessagePieceComponent "Instrument" True
--       , MessagePieceComponent "FinancingDetails" True
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuoteCancelQuoteEntriesUnderlyings"
--             , groupNumberField = "NoUnderlyings"
--             , groupPieces =
--                 [ MessagePieceComponent "UnderlyingInstrument" True ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuoteCancelQuoteEntriesLegs"
--             , groupNumberField = "NoLegs"
--             , groupPieces = [ MessagePieceComponent "InstrumentLeg" True ]
--             }
--           False
--       ]
--   }
data QuoteCancelQuoteEntriesGroupElem = QuoteCancelQuoteEntriesGroupElem
  { quoteCancelQuoteEntriesGroupElemInstrument :: !Instrument,
    quoteCancelQuoteEntriesGroupElemFinancingDetails :: !FinancingDetails,
    quoteCancelQuoteEntriesGroupElemQuoteCancelQuoteEntriesUnderlyingsGroup :: ![QuoteCancelQuoteEntriesUnderlyingsGroupElem],
    quoteCancelQuoteEntriesGroupElemQuoteCancelQuoteEntriesLegsGroup :: ![QuoteCancelQuoteEntriesLegsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteCancelQuoteEntriesGroupElem

instance IsComponent QuoteCancelQuoteEntriesGroupElem where
  toComponentFields ((QuoteCancelQuoteEntriesGroupElem {..})) =
    mconcat
      [ requiredComponentB quoteCancelQuoteEntriesGroupElemInstrument,
        requiredComponentB quoteCancelQuoteEntriesGroupElemFinancingDetails,
        optionalGroupB quoteCancelQuoteEntriesGroupElemQuoteCancelQuoteEntriesUnderlyingsGroup,
        optionalGroupB quoteCancelQuoteEntriesGroupElemQuoteCancelQuoteEntriesLegsGroup
      ]
  fromComponentFields = do
    quoteCancelQuoteEntriesGroupElemInstrument <- requiredComponentP
    quoteCancelQuoteEntriesGroupElemFinancingDetails <- requiredComponentP
    quoteCancelQuoteEntriesGroupElemQuoteCancelQuoteEntriesUnderlyingsGroup <- optionalGroupP
    quoteCancelQuoteEntriesGroupElemQuoteCancelQuoteEntriesLegsGroup <- optionalGroupP
    pure (QuoteCancelQuoteEntriesGroupElem {..})

instance IsGroupElement QuoteCancelQuoteEntriesGroupElem where
  type GroupNumField QuoteCancelQuoteEntriesGroupElem = NoQuoteEntries
  mkGroupNum Proxy = NoQuoteEntries
  countGroupNum Proxy = unNoQuoteEntries

makeQuoteCancelQuoteEntriesGroupElem :: Instrument -> (FinancingDetails -> QuoteCancelQuoteEntriesGroupElem)
makeQuoteCancelQuoteEntriesGroupElem quoteCancelQuoteEntriesGroupElemInstrument quoteCancelQuoteEntriesGroupElemFinancingDetails =
  let quoteCancelQuoteEntriesGroupElemQuoteCancelQuoteEntriesUnderlyingsGroup = []
      quoteCancelQuoteEntriesGroupElemQuoteCancelQuoteEntriesLegsGroup = []
   in (QuoteCancelQuoteEntriesGroupElem {..})
