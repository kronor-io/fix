{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteRequestRejectPartiesPartySubIDsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartySubIDs
import FIX.Fields.PartySubID
import FIX.Fields.PartySubIDType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteRequestRejectPartiesPartySubIDs"
--   , groupNumberField = "NoPartySubIDs"
--   , groupPieces =
--       [ MessagePieceField "PartySubID" True
--       , MessagePieceField "PartySubIDType" False
--       ]
--   }
data QuoteRequestRejectPartiesPartySubIDsGroupElem = QuoteRequestRejectPartiesPartySubIDsGroupElem
  { quoteRequestRejectPartiesPartySubIDsGroupElemPartySubID :: !PartySubID,
    quoteRequestRejectPartiesPartySubIDsGroupElemPartySubIDType :: !(Maybe PartySubIDType)
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestRejectPartiesPartySubIDsGroupElem

instance IsComponent QuoteRequestRejectPartiesPartySubIDsGroupElem where
  toComponentFields ((QuoteRequestRejectPartiesPartySubIDsGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteRequestRejectPartiesPartySubIDsGroupElemPartySubID,
        optionalFieldB quoteRequestRejectPartiesPartySubIDsGroupElemPartySubIDType
      ]
  fromComponentFields = do
    quoteRequestRejectPartiesPartySubIDsGroupElemPartySubID <- requiredFieldP
    quoteRequestRejectPartiesPartySubIDsGroupElemPartySubIDType <- optionalFieldP
    pure (QuoteRequestRejectPartiesPartySubIDsGroupElem {..})

instance IsGroupElement QuoteRequestRejectPartiesPartySubIDsGroupElem where
  type GroupNumField QuoteRequestRejectPartiesPartySubIDsGroupElem = NoPartySubIDs
  mkGroupNum Proxy = NoPartySubIDs
  countGroupNum Proxy = unNoPartySubIDs

makeQuoteRequestRejectPartiesPartySubIDsGroupElem :: PartySubID -> QuoteRequestRejectPartiesPartySubIDsGroupElem
makeQuoteRequestRejectPartiesPartySubIDsGroupElem quoteRequestRejectPartiesPartySubIDsGroupElemPartySubID =
  let quoteRequestRejectPartiesPartySubIDsGroupElemPartySubIDType = Nothing
   in (QuoteRequestRejectPartiesPartySubIDsGroupElem {..})
