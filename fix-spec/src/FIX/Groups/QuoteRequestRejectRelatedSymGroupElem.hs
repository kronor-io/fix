{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteRequestRejectRelatedSymGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.Currency
import FIX.Fields.MsgType
import FIX.Fields.NoRelatedSym
import FIX.Fields.QuoteType
import FIX.Fields.Symbol
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteRequestRejectRelatedSym"
--   , groupNumberField = "NoRelatedSym"
--   , groupPieces =
--       [ MessagePieceField "Symbol" True
--       , MessagePieceField "QuoteType" True
--       , MessagePieceField "Currency" False
--       ]
--   }
data QuoteRequestRejectRelatedSymGroupElem = QuoteRequestRejectRelatedSymGroupElem
  { quoteRequestRejectRelatedSymGroupElemSymbol :: !Symbol,
    quoteRequestRejectRelatedSymGroupElemQuoteType :: !QuoteType,
    quoteRequestRejectRelatedSymGroupElemCurrency :: !(Maybe Currency)
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestRejectRelatedSymGroupElem

instance IsComponent QuoteRequestRejectRelatedSymGroupElem where
  toComponentFields ((QuoteRequestRejectRelatedSymGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteRequestRejectRelatedSymGroupElemSymbol,
        requiredFieldB quoteRequestRejectRelatedSymGroupElemQuoteType,
        optionalFieldB quoteRequestRejectRelatedSymGroupElemCurrency
      ]
  fromComponentFields = do
    quoteRequestRejectRelatedSymGroupElemSymbol <- requiredFieldP
    quoteRequestRejectRelatedSymGroupElemQuoteType <- requiredFieldP
    quoteRequestRejectRelatedSymGroupElemCurrency <- optionalFieldP
    pure (QuoteRequestRejectRelatedSymGroupElem {..})

instance IsGroupElement QuoteRequestRejectRelatedSymGroupElem where
  type GroupNumField QuoteRequestRejectRelatedSymGroupElem = NoRelatedSym
  mkGroupNum Proxy = NoRelatedSym
  countGroupNum Proxy = unNoRelatedSym

makeQuoteRequestRejectRelatedSymGroupElem :: Symbol -> (QuoteType -> QuoteRequestRejectRelatedSymGroupElem)
makeQuoteRequestRejectRelatedSymGroupElem quoteRequestRejectRelatedSymGroupElemSymbol quoteRequestRejectRelatedSymGroupElemQuoteType =
  let quoteRequestRejectRelatedSymGroupElemCurrency = Nothing
   in (QuoteRequestRejectRelatedSymGroupElem {..})
