{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.ExecutionReportPartiesPartySubIDsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartySubIDs
import FIX.Fields.PartySubID
import FIX.Fields.PartySubIDType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "ExecutionReportPartiesPartySubIDs"
--   , groupNumberField = "NoPartySubIDs"
--   , groupPieces =
--       [ MessagePieceField "PartySubID" True
--       , MessagePieceField "PartySubIDType" False
--       ]
--   }
data ExecutionReportPartiesPartySubIDsGroupElem = ExecutionReportPartiesPartySubIDsGroupElem
  { executionReportPartiesPartySubIDsGroupElemPartySubID :: !PartySubID,
    executionReportPartiesPartySubIDsGroupElemPartySubIDType :: !(Maybe PartySubIDType)
  }
  deriving stock (Show, Eq, Generic)

instance Validity ExecutionReportPartiesPartySubIDsGroupElem

instance IsComponent ExecutionReportPartiesPartySubIDsGroupElem where
  toComponentFields ((ExecutionReportPartiesPartySubIDsGroupElem {..})) =
    mconcat
      [ requiredFieldB executionReportPartiesPartySubIDsGroupElemPartySubID,
        optionalFieldB executionReportPartiesPartySubIDsGroupElemPartySubIDType
      ]
  fromComponentFields = do
    executionReportPartiesPartySubIDsGroupElemPartySubID <- requiredFieldP
    executionReportPartiesPartySubIDsGroupElemPartySubIDType <- optionalFieldP
    pure (ExecutionReportPartiesPartySubIDsGroupElem {..})

instance IsGroupElement ExecutionReportPartiesPartySubIDsGroupElem where
  type GroupNumField ExecutionReportPartiesPartySubIDsGroupElem = NoPartySubIDs
  mkGroupNum Proxy = NoPartySubIDs
  countGroupNum Proxy = unNoPartySubIDs

makeExecutionReportPartiesPartySubIDsGroupElem :: PartySubID -> ExecutionReportPartiesPartySubIDsGroupElem
makeExecutionReportPartiesPartySubIDsGroupElem executionReportPartiesPartySubIDsGroupElemPartySubID =
  let executionReportPartiesPartySubIDsGroupElemPartySubIDType = Nothing
   in (ExecutionReportPartiesPartySubIDsGroupElem {..})
