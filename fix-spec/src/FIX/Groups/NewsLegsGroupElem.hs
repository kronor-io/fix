{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewsLegsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.InstrumentLeg
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewsLegs"
--   , groupNumberField = "NoLegs"
--   , groupPieces = [ MessagePieceComponent "InstrumentLeg" True ]
--   }
data NewsLegsGroupElem = NewsLegsGroupElem {newsLegsGroupElemInstrumentLeg :: !InstrumentLeg}
  deriving stock (Show, Eq, Generic)

instance Validity NewsLegsGroupElem

instance IsComponent NewsLegsGroupElem where
  toComponentFields ((NewsLegsGroupElem {..})) = mconcat [requiredComponentB newsLegsGroupElemInstrumentLeg]
  fromComponentFields = do
    newsLegsGroupElemInstrumentLeg <- requiredComponentP
    pure (NewsLegsGroupElem {..})

instance IsGroupElement NewsLegsGroupElem where
  type GroupNumField NewsLegsGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs

makeNewsLegsGroupElem :: InstrumentLeg -> NewsLegsGroupElem
makeNewsLegsGroupElem newsLegsGroupElemInstrumentLeg =
  let
   in (NewsLegsGroupElem {..})
