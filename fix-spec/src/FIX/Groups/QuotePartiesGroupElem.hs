{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuotePartiesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartyIDs
import FIX.Fields.PartyID
import FIX.Fields.PartyIDSource
import FIX.Fields.PartyRole
import FIX.Fields.PartyRoleQualifier
import FIX.Groups.Class
import FIX.Groups.QuotePartiesPartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteParties"
--   , groupNumberField = "NoPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "PartyID" True
--       , MessagePieceField "PartyIDSource" False
--       , MessagePieceField "PartyRole" False
--       , MessagePieceField "PartyRoleQualifier" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuotePartiesPartySubIDs"
--             , groupNumberField = "NoPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "PartySubID" True
--                 , MessagePieceField "PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data QuotePartiesGroupElem = QuotePartiesGroupElem
  { quotePartiesGroupElemPartyID :: !PartyID,
    quotePartiesGroupElemPartyIDSource :: !(Maybe PartyIDSource),
    quotePartiesGroupElemPartyRole :: !(Maybe PartyRole),
    quotePartiesGroupElemPartyRoleQualifier :: !(Maybe PartyRoleQualifier),
    quotePartiesGroupElemQuotePartiesPartySubIDsGroup :: ![QuotePartiesPartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuotePartiesGroupElem

instance IsComponent QuotePartiesGroupElem where
  toComponentFields ((QuotePartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB quotePartiesGroupElemPartyID,
        optionalFieldB quotePartiesGroupElemPartyIDSource,
        optionalFieldB quotePartiesGroupElemPartyRole,
        optionalFieldB quotePartiesGroupElemPartyRoleQualifier,
        optionalGroupB quotePartiesGroupElemQuotePartiesPartySubIDsGroup
      ]
  fromComponentFields = do
    quotePartiesGroupElemPartyID <- requiredFieldP
    quotePartiesGroupElemPartyIDSource <- optionalFieldP
    quotePartiesGroupElemPartyRole <- optionalFieldP
    quotePartiesGroupElemPartyRoleQualifier <- optionalFieldP
    quotePartiesGroupElemQuotePartiesPartySubIDsGroup <- optionalGroupP
    pure (QuotePartiesGroupElem {..})

instance IsGroupElement QuotePartiesGroupElem where
  type GroupNumField QuotePartiesGroupElem = NoPartyIDs
  mkGroupNum Proxy = NoPartyIDs
  countGroupNum Proxy = unNoPartyIDs

makeQuotePartiesGroupElem :: PartyID -> QuotePartiesGroupElem
makeQuotePartiesGroupElem quotePartiesGroupElemPartyID =
  let quotePartiesGroupElemPartyIDSource = Nothing
      quotePartiesGroupElemPartyRole = Nothing
      quotePartiesGroupElemPartyRoleQualifier = Nothing
      quotePartiesGroupElemQuotePartiesPartySubIDsGroup = []
   in (QuotePartiesGroupElem {..})
