{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.RoutingIDsGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoRoutingIDs
import FIX.Fields.RoutingID
import FIX.Fields.RoutingType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoRoutingIDs"
--   , groupNumberField = "NoRoutingIDs"
--   , groupPieces =
--       [ MessagePieceField "RoutingType" True
--       , MessagePieceField "RoutingID" False
--       ]
--   }
data RoutingIDsGroupElem = RoutingIDsGroupElem
  { routingIDsGroupElemRoutingType :: !RoutingType,
    routingIDsGroupElemRoutingID :: !(Maybe RoutingID)
  }
  deriving stock (Show, Eq, Generic)

instance Validity RoutingIDsGroupElem

instance IsComponent RoutingIDsGroupElem where
  toComponentFields ((RoutingIDsGroupElem {..})) =
    mconcat
      [ requiredFieldB routingIDsGroupElemRoutingType,
        optionalFieldB routingIDsGroupElemRoutingID
      ]
  fromComponentFields = do
    routingIDsGroupElemRoutingType <- requiredFieldP
    routingIDsGroupElemRoutingID <- optionalFieldP
    pure (RoutingIDsGroupElem {..})

instance IsGroupElement RoutingIDsGroupElem where
  type GroupNumField RoutingIDsGroupElem = NoRoutingIDs
  mkGroupNum Proxy = NoRoutingIDs
  countGroupNum Proxy = unNoRoutingIDs

makeRoutingIDsGroupElem :: RoutingType -> RoutingIDsGroupElem
makeRoutingIDsGroupElem routingIDsGroupElemRoutingType =
  let routingIDsGroupElemRoutingID = Nothing
   in (RoutingIDsGroupElem {..})
