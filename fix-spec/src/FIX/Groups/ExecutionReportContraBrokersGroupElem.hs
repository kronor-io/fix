{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.ExecutionReportContraBrokersGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.ContraBroker
import FIX.Fields.ContraLegRefID
import FIX.Fields.ContraTradeQty
import FIX.Fields.ContraTradeTime
import FIX.Fields.ContraTrader
import FIX.Fields.MsgType
import FIX.Fields.NoContraBrokers
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "ExecutionReportContraBrokers"
--   , groupNumberField = "NoContraBrokers"
--   , groupPieces =
--       [ MessagePieceField "ContraBroker" True
--       , MessagePieceField "ContraTrader" False
--       , MessagePieceField "ContraTradeQty" False
--       , MessagePieceField "ContraTradeTime" False
--       , MessagePieceField "ContraLegRefID" False
--       ]
--   }
data ExecutionReportContraBrokersGroupElem = ExecutionReportContraBrokersGroupElem
  { executionReportContraBrokersGroupElemContraBroker :: !ContraBroker,
    executionReportContraBrokersGroupElemContraTrader :: !(Maybe ContraTrader),
    executionReportContraBrokersGroupElemContraTradeQty :: !(Maybe ContraTradeQty),
    executionReportContraBrokersGroupElemContraTradeTime :: !(Maybe ContraTradeTime),
    executionReportContraBrokersGroupElemContraLegRefID :: !(Maybe ContraLegRefID)
  }
  deriving stock (Show, Eq, Generic)

instance Validity ExecutionReportContraBrokersGroupElem

instance IsComponent ExecutionReportContraBrokersGroupElem where
  toComponentFields ((ExecutionReportContraBrokersGroupElem {..})) =
    mconcat
      [ requiredFieldB executionReportContraBrokersGroupElemContraBroker,
        optionalFieldB executionReportContraBrokersGroupElemContraTrader,
        optionalFieldB executionReportContraBrokersGroupElemContraTradeQty,
        optionalFieldB executionReportContraBrokersGroupElemContraTradeTime,
        optionalFieldB executionReportContraBrokersGroupElemContraLegRefID
      ]
  fromComponentFields = do
    executionReportContraBrokersGroupElemContraBroker <- requiredFieldP
    executionReportContraBrokersGroupElemContraTrader <- optionalFieldP
    executionReportContraBrokersGroupElemContraTradeQty <- optionalFieldP
    executionReportContraBrokersGroupElemContraTradeTime <- optionalFieldP
    executionReportContraBrokersGroupElemContraLegRefID <- optionalFieldP
    pure (ExecutionReportContraBrokersGroupElem {..})

instance IsGroupElement ExecutionReportContraBrokersGroupElem where
  type GroupNumField ExecutionReportContraBrokersGroupElem = NoContraBrokers
  mkGroupNum Proxy = NoContraBrokers
  countGroupNum Proxy = unNoContraBrokers

makeExecutionReportContraBrokersGroupElem :: ContraBroker -> ExecutionReportContraBrokersGroupElem
makeExecutionReportContraBrokersGroupElem executionReportContraBrokersGroupElemContraBroker =
  let executionReportContraBrokersGroupElemContraTrader = Nothing
      executionReportContraBrokersGroupElemContraTradeQty = Nothing
      executionReportContraBrokersGroupElemContraTradeTime = Nothing
      executionReportContraBrokersGroupElemContraLegRefID = Nothing
   in (ExecutionReportContraBrokersGroupElem {..})
