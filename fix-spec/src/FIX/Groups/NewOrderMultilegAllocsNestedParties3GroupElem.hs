{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderMultilegAllocsNestedParties3GroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.Nested3PartyID
import FIX.Fields.Nested3PartyIDSource
import FIX.Fields.Nested3PartyRole
import FIX.Fields.NoNested3PartyIDs
import FIX.Groups.Class
import FIX.Groups.NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderMultilegAllocsNestedParties3"
--   , groupNumberField = "NoNested3PartyIDs"
--   , groupPieces =
--       [ MessagePieceField "Nested3PartyID" True
--       , MessagePieceField "Nested3PartyIDSource" False
--       , MessagePieceField "Nested3PartyRole" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName =
--                 "NewOrderMultilegAllocsNestedParties3Nested3PartySubIDs"
--             , groupNumberField = "NoNested3PartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "Nested3PartySubID" True
--                 , MessagePieceField "Nested3PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data NewOrderMultilegAllocsNestedParties3GroupElem = NewOrderMultilegAllocsNestedParties3GroupElem
  { newOrderMultilegAllocsNestedParties3GroupElemNested3PartyID :: !Nested3PartyID,
    newOrderMultilegAllocsNestedParties3GroupElemNested3PartyIDSource :: !(Maybe Nested3PartyIDSource),
    newOrderMultilegAllocsNestedParties3GroupElemNested3PartyRole :: !(Maybe Nested3PartyRole),
    newOrderMultilegAllocsNestedParties3GroupElemNewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroup :: ![NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderMultilegAllocsNestedParties3GroupElem

instance IsComponent NewOrderMultilegAllocsNestedParties3GroupElem where
  toComponentFields ((NewOrderMultilegAllocsNestedParties3GroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderMultilegAllocsNestedParties3GroupElemNested3PartyID,
        optionalFieldB newOrderMultilegAllocsNestedParties3GroupElemNested3PartyIDSource,
        optionalFieldB newOrderMultilegAllocsNestedParties3GroupElemNested3PartyRole,
        optionalGroupB newOrderMultilegAllocsNestedParties3GroupElemNewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroup
      ]
  fromComponentFields = do
    newOrderMultilegAllocsNestedParties3GroupElemNested3PartyID <- requiredFieldP
    newOrderMultilegAllocsNestedParties3GroupElemNested3PartyIDSource <- optionalFieldP
    newOrderMultilegAllocsNestedParties3GroupElemNested3PartyRole <- optionalFieldP
    newOrderMultilegAllocsNestedParties3GroupElemNewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroup <- optionalGroupP
    pure (NewOrderMultilegAllocsNestedParties3GroupElem {..})

instance IsGroupElement NewOrderMultilegAllocsNestedParties3GroupElem where
  type GroupNumField NewOrderMultilegAllocsNestedParties3GroupElem = NoNested3PartyIDs
  mkGroupNum Proxy = NoNested3PartyIDs
  countGroupNum Proxy = unNoNested3PartyIDs

makeNewOrderMultilegAllocsNestedParties3GroupElem :: Nested3PartyID -> NewOrderMultilegAllocsNestedParties3GroupElem
makeNewOrderMultilegAllocsNestedParties3GroupElem newOrderMultilegAllocsNestedParties3GroupElemNested3PartyID =
  let newOrderMultilegAllocsNestedParties3GroupElemNested3PartyIDSource = Nothing
      newOrderMultilegAllocsNestedParties3GroupElemNested3PartyRole = Nothing
      newOrderMultilegAllocsNestedParties3GroupElemNewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroup = []
   in (NewOrderMultilegAllocsNestedParties3GroupElem {..})
