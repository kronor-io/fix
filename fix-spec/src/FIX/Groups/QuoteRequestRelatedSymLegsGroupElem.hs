{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteRequestRelatedSymLegsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.LegMaturityDate
import FIX.Fields.LegQty
import FIX.Fields.LegRefID
import FIX.Fields.LegSettlDate
import FIX.Fields.LegSide
import FIX.Fields.LegSplitSettlDate
import FIX.Fields.LegSymbol
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Groups.Class
import FIX.Groups.QuoteRequestRelatedSymLegsLegAllocsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteRequestRelatedSymLegs"
--   , groupNumberField = "NoLegs"
--   , groupPieces =
--       [ MessagePieceField "LegSymbol" True
--       , MessagePieceField "LegMaturityDate" False
--       , MessagePieceField "LegSide" True
--       , MessagePieceField "LegQty" True
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuoteRequestRelatedSymLegsLegAllocs"
--             , groupNumberField = "NoLegAllocs"
--             , groupPieces =
--                 [ MessagePieceField "LegAllocAccount" True
--                 , MessagePieceField "LegAllocQty" True
--                 , MessagePieceGroup
--                     GroupSpec
--                       { groupName = "QuoteRequestRelatedSymLegsLegAllocsNestedParties"
--                       , groupNumberField = "NoNestedPartyIDs"
--                       , groupPieces =
--                           [ MessagePieceField "NestedPartyID" True
--                           , MessagePieceField "NestedPartyIDSource" False
--                           , MessagePieceField "NestedPartyRole" False
--                           , MessagePieceField "NestedPartyRoleQualifier" False
--                           , MessagePieceGroup
--                               GroupSpec
--                                 { groupName =
--                                     "QuoteRequestRelatedSymLegsLegAllocsNestedPartiesNestedPartySubIDs"
--                                 , groupNumberField = "NoNestedPartySubIDs"
--                                 , groupPieces =
--                                     [ MessagePieceField "NestedPartySubID" True
--                                     , MessagePieceField "NestedPartySubIDType" False
--                                     ]
--                                 }
--                               False
--                           ]
--                       }
--                     False
--                 ]
--             }
--           False
--       , MessagePieceField "LegRefID" True
--       , MessagePieceField "LegSettlDate" True
--       , MessagePieceField "LegSplitSettlDate" False
--       ]
--   }
data QuoteRequestRelatedSymLegsGroupElem = QuoteRequestRelatedSymLegsGroupElem
  { quoteRequestRelatedSymLegsGroupElemLegSymbol :: !LegSymbol,
    quoteRequestRelatedSymLegsGroupElemLegMaturityDate :: !(Maybe LegMaturityDate),
    quoteRequestRelatedSymLegsGroupElemLegSide :: !LegSide,
    quoteRequestRelatedSymLegsGroupElemLegQty :: !LegQty,
    quoteRequestRelatedSymLegsGroupElemQuoteRequestRelatedSymLegsLegAllocsGroup :: ![QuoteRequestRelatedSymLegsLegAllocsGroupElem],
    quoteRequestRelatedSymLegsGroupElemLegRefID :: !LegRefID,
    quoteRequestRelatedSymLegsGroupElemLegSettlDate :: !LegSettlDate,
    quoteRequestRelatedSymLegsGroupElemLegSplitSettlDate :: !(Maybe LegSplitSettlDate)
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestRelatedSymLegsGroupElem

instance IsComponent QuoteRequestRelatedSymLegsGroupElem where
  toComponentFields ((QuoteRequestRelatedSymLegsGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteRequestRelatedSymLegsGroupElemLegSymbol,
        optionalFieldB quoteRequestRelatedSymLegsGroupElemLegMaturityDate,
        requiredFieldB quoteRequestRelatedSymLegsGroupElemLegSide,
        requiredFieldB quoteRequestRelatedSymLegsGroupElemLegQty,
        optionalGroupB quoteRequestRelatedSymLegsGroupElemQuoteRequestRelatedSymLegsLegAllocsGroup,
        requiredFieldB quoteRequestRelatedSymLegsGroupElemLegRefID,
        requiredFieldB quoteRequestRelatedSymLegsGroupElemLegSettlDate,
        optionalFieldB quoteRequestRelatedSymLegsGroupElemLegSplitSettlDate
      ]
  fromComponentFields = do
    quoteRequestRelatedSymLegsGroupElemLegSymbol <- requiredFieldP
    quoteRequestRelatedSymLegsGroupElemLegMaturityDate <- optionalFieldP
    quoteRequestRelatedSymLegsGroupElemLegSide <- requiredFieldP
    quoteRequestRelatedSymLegsGroupElemLegQty <- requiredFieldP
    quoteRequestRelatedSymLegsGroupElemQuoteRequestRelatedSymLegsLegAllocsGroup <- optionalGroupP
    quoteRequestRelatedSymLegsGroupElemLegRefID <- requiredFieldP
    quoteRequestRelatedSymLegsGroupElemLegSettlDate <- requiredFieldP
    quoteRequestRelatedSymLegsGroupElemLegSplitSettlDate <- optionalFieldP
    pure (QuoteRequestRelatedSymLegsGroupElem {..})

instance IsGroupElement QuoteRequestRelatedSymLegsGroupElem where
  type GroupNumField QuoteRequestRelatedSymLegsGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs

makeQuoteRequestRelatedSymLegsGroupElem :: LegSymbol -> (LegSide -> (LegQty -> (LegRefID -> (LegSettlDate -> QuoteRequestRelatedSymLegsGroupElem))))
makeQuoteRequestRelatedSymLegsGroupElem quoteRequestRelatedSymLegsGroupElemLegSymbol quoteRequestRelatedSymLegsGroupElemLegSide quoteRequestRelatedSymLegsGroupElemLegQty quoteRequestRelatedSymLegsGroupElemLegRefID quoteRequestRelatedSymLegsGroupElemLegSettlDate =
  let quoteRequestRelatedSymLegsGroupElemLegMaturityDate = Nothing
      quoteRequestRelatedSymLegsGroupElemQuoteRequestRelatedSymLegsLegAllocsGroup = []
      quoteRequestRelatedSymLegsGroupElemLegSplitSettlDate = Nothing
   in (QuoteRequestRelatedSymLegsGroupElem {..})
