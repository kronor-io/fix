{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderSingleStipulationsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoStipulations
import FIX.Fields.StipulationType
import FIX.Fields.StipulationValue
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderSingleStipulations"
--   , groupNumberField = "NoStipulations"
--   , groupPieces =
--       [ MessagePieceField "StipulationType" True
--       , MessagePieceField "StipulationValue" False
--       ]
--   }
data NewOrderSingleStipulationsGroupElem = NewOrderSingleStipulationsGroupElem
  { newOrderSingleStipulationsGroupElemStipulationType :: !StipulationType,
    newOrderSingleStipulationsGroupElemStipulationValue :: !(Maybe StipulationValue)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderSingleStipulationsGroupElem

instance IsComponent NewOrderSingleStipulationsGroupElem where
  toComponentFields ((NewOrderSingleStipulationsGroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderSingleStipulationsGroupElemStipulationType,
        optionalFieldB newOrderSingleStipulationsGroupElemStipulationValue
      ]
  fromComponentFields = do
    newOrderSingleStipulationsGroupElemStipulationType <- requiredFieldP
    newOrderSingleStipulationsGroupElemStipulationValue <- optionalFieldP
    pure (NewOrderSingleStipulationsGroupElem {..})

instance IsGroupElement NewOrderSingleStipulationsGroupElem where
  type GroupNumField NewOrderSingleStipulationsGroupElem = NoStipulations
  mkGroupNum Proxy = NoStipulations
  countGroupNum Proxy = unNoStipulations

makeNewOrderSingleStipulationsGroupElem :: StipulationType -> NewOrderSingleStipulationsGroupElem
makeNewOrderSingleStipulationsGroupElem newOrderSingleStipulationsGroupElemStipulationType =
  let newOrderSingleStipulationsGroupElemStipulationValue = Nothing
   in (NewOrderSingleStipulationsGroupElem {..})
