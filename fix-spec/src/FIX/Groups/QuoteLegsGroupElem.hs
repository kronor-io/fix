{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteLegsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.InstrumentLeg
import FIX.Components.LegBenchmarkCurveData
import FIX.Components.LegExAnteData
import FIX.Fields.LegBidPx
import FIX.Fields.LegMidPx
import FIX.Fields.LegOfferPx
import FIX.Fields.LegPriceType
import FIX.Fields.LegQty
import FIX.Fields.LegRefID
import FIX.Fields.LegSettlDate
import FIX.Fields.LegSettlType
import FIX.Fields.LegSwapType
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Groups.Class
import FIX.Groups.QuoteLegsLegStipulationsGroupElem
import FIX.Groups.QuoteLegsNestedPartiesGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteLegs"
--   , groupNumberField = "NoLegs"
--   , groupPieces =
--       [ MessagePieceComponent "InstrumentLeg" True
--       , MessagePieceField "LegQty" False
--       , MessagePieceField "LegSwapType" False
--       , MessagePieceField "LegSettlType" False
--       , MessagePieceField "LegSettlDate" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuoteLegsLegStipulations"
--             , groupNumberField = "NoLegStipulations"
--             , groupPieces =
--                 [ MessagePieceField "LegStipulationType" True
--                 , MessagePieceField "LegStipulationValue" False
--                 ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuoteLegsNestedParties"
--             , groupNumberField = "NoNestedPartyIDs"
--             , groupPieces =
--                 [ MessagePieceField "NestedPartyID" True
--                 , MessagePieceField "NestedPartyIDSource" False
--                 , MessagePieceField "NestedPartyRole" False
--                 , MessagePieceField "NestedPartyRoleQualifier" False
--                 , MessagePieceGroup
--                     GroupSpec
--                       { groupName = "QuoteLegsNestedPartiesNestedPartySubIDs"
--                       , groupNumberField = "NoNestedPartySubIDs"
--                       , groupPieces =
--                           [ MessagePieceField "NestedPartySubID" True
--                           , MessagePieceField "NestedPartySubIDType" False
--                           ]
--                       }
--                     False
--                 ]
--             }
--           False
--       , MessagePieceField "LegPriceType" False
--       , MessagePieceField "LegBidPx" False
--       , MessagePieceField "LegOfferPx" False
--       , MessagePieceField "LegRefID" False
--       , MessagePieceField "LegMidPx" False
--       , MessagePieceComponent "LegExAnteData" True
--       , MessagePieceComponent "LegBenchmarkCurveData" True
--       ]
--   }
data QuoteLegsGroupElem = QuoteLegsGroupElem
  { quoteLegsGroupElemInstrumentLeg :: !InstrumentLeg,
    quoteLegsGroupElemLegQty :: !(Maybe LegQty),
    quoteLegsGroupElemLegSwapType :: !(Maybe LegSwapType),
    quoteLegsGroupElemLegSettlType :: !(Maybe LegSettlType),
    quoteLegsGroupElemLegSettlDate :: !(Maybe LegSettlDate),
    quoteLegsGroupElemQuoteLegsLegStipulationsGroup :: ![QuoteLegsLegStipulationsGroupElem],
    quoteLegsGroupElemQuoteLegsNestedPartiesGroup :: ![QuoteLegsNestedPartiesGroupElem],
    quoteLegsGroupElemLegPriceType :: !(Maybe LegPriceType),
    quoteLegsGroupElemLegBidPx :: !(Maybe LegBidPx),
    quoteLegsGroupElemLegOfferPx :: !(Maybe LegOfferPx),
    quoteLegsGroupElemLegRefID :: !(Maybe LegRefID),
    quoteLegsGroupElemLegMidPx :: !(Maybe LegMidPx),
    quoteLegsGroupElemLegExAnteData :: !LegExAnteData,
    quoteLegsGroupElemLegBenchmarkCurveData :: !LegBenchmarkCurveData
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteLegsGroupElem

instance IsComponent QuoteLegsGroupElem where
  toComponentFields ((QuoteLegsGroupElem {..})) =
    mconcat
      [ requiredComponentB quoteLegsGroupElemInstrumentLeg,
        optionalFieldB quoteLegsGroupElemLegQty,
        optionalFieldB quoteLegsGroupElemLegSwapType,
        optionalFieldB quoteLegsGroupElemLegSettlType,
        optionalFieldB quoteLegsGroupElemLegSettlDate,
        optionalGroupB quoteLegsGroupElemQuoteLegsLegStipulationsGroup,
        optionalGroupB quoteLegsGroupElemQuoteLegsNestedPartiesGroup,
        optionalFieldB quoteLegsGroupElemLegPriceType,
        optionalFieldB quoteLegsGroupElemLegBidPx,
        optionalFieldB quoteLegsGroupElemLegOfferPx,
        optionalFieldB quoteLegsGroupElemLegRefID,
        optionalFieldB quoteLegsGroupElemLegMidPx,
        requiredComponentB quoteLegsGroupElemLegExAnteData,
        requiredComponentB quoteLegsGroupElemLegBenchmarkCurveData
      ]
  fromComponentFields = do
    quoteLegsGroupElemInstrumentLeg <- requiredComponentP
    quoteLegsGroupElemLegQty <- optionalFieldP
    quoteLegsGroupElemLegSwapType <- optionalFieldP
    quoteLegsGroupElemLegSettlType <- optionalFieldP
    quoteLegsGroupElemLegSettlDate <- optionalFieldP
    quoteLegsGroupElemQuoteLegsLegStipulationsGroup <- optionalGroupP
    quoteLegsGroupElemQuoteLegsNestedPartiesGroup <- optionalGroupP
    quoteLegsGroupElemLegPriceType <- optionalFieldP
    quoteLegsGroupElemLegBidPx <- optionalFieldP
    quoteLegsGroupElemLegOfferPx <- optionalFieldP
    quoteLegsGroupElemLegRefID <- optionalFieldP
    quoteLegsGroupElemLegMidPx <- optionalFieldP
    quoteLegsGroupElemLegExAnteData <- requiredComponentP
    quoteLegsGroupElemLegBenchmarkCurveData <- requiredComponentP
    pure (QuoteLegsGroupElem {..})

instance IsGroupElement QuoteLegsGroupElem where
  type GroupNumField QuoteLegsGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs

makeQuoteLegsGroupElem :: InstrumentLeg -> (LegExAnteData -> (LegBenchmarkCurveData -> QuoteLegsGroupElem))
makeQuoteLegsGroupElem quoteLegsGroupElemInstrumentLeg quoteLegsGroupElemLegExAnteData quoteLegsGroupElemLegBenchmarkCurveData =
  let quoteLegsGroupElemLegQty = Nothing
      quoteLegsGroupElemLegSwapType = Nothing
      quoteLegsGroupElemLegSettlType = Nothing
      quoteLegsGroupElemLegSettlDate = Nothing
      quoteLegsGroupElemQuoteLegsLegStipulationsGroup = []
      quoteLegsGroupElemQuoteLegsNestedPartiesGroup = []
      quoteLegsGroupElemLegPriceType = Nothing
      quoteLegsGroupElemLegBidPx = Nothing
      quoteLegsGroupElemLegOfferPx = Nothing
      quoteLegsGroupElemLegRefID = Nothing
      quoteLegsGroupElemLegMidPx = Nothing
   in (QuoteLegsGroupElem {..})
