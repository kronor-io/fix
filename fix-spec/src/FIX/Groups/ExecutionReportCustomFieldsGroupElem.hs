{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.ExecutionReportCustomFieldsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.CustomFieldsContext
import FIX.Fields.CustomFieldsName
import FIX.Fields.CustomFieldsValue
import FIX.Fields.MsgType
import FIX.Fields.NoCustomFields
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "ExecutionReportCustomFields"
--   , groupNumberField = "NoCustomFields"
--   , groupPieces =
--       [ MessagePieceField "CustomFieldsName" True
--       , MessagePieceField "CustomFieldsValue" False
--       , MessagePieceField "CustomFieldsContext" False
--       ]
--   }
data ExecutionReportCustomFieldsGroupElem = ExecutionReportCustomFieldsGroupElem
  { executionReportCustomFieldsGroupElemCustomFieldsName :: !CustomFieldsName,
    executionReportCustomFieldsGroupElemCustomFieldsValue :: !(Maybe CustomFieldsValue),
    executionReportCustomFieldsGroupElemCustomFieldsContext :: !(Maybe CustomFieldsContext)
  }
  deriving stock (Show, Eq, Generic)

instance Validity ExecutionReportCustomFieldsGroupElem

instance IsComponent ExecutionReportCustomFieldsGroupElem where
  toComponentFields ((ExecutionReportCustomFieldsGroupElem {..})) =
    mconcat
      [ requiredFieldB executionReportCustomFieldsGroupElemCustomFieldsName,
        optionalFieldB executionReportCustomFieldsGroupElemCustomFieldsValue,
        optionalFieldB executionReportCustomFieldsGroupElemCustomFieldsContext
      ]
  fromComponentFields = do
    executionReportCustomFieldsGroupElemCustomFieldsName <- requiredFieldP
    executionReportCustomFieldsGroupElemCustomFieldsValue <- optionalFieldP
    executionReportCustomFieldsGroupElemCustomFieldsContext <- optionalFieldP
    pure (ExecutionReportCustomFieldsGroupElem {..})

instance IsGroupElement ExecutionReportCustomFieldsGroupElem where
  type GroupNumField ExecutionReportCustomFieldsGroupElem = NoCustomFields
  mkGroupNum Proxy = NoCustomFields
  countGroupNum Proxy = unNoCustomFields

makeExecutionReportCustomFieldsGroupElem :: CustomFieldsName -> ExecutionReportCustomFieldsGroupElem
makeExecutionReportCustomFieldsGroupElem executionReportCustomFieldsGroupElemCustomFieldsName =
  let executionReportCustomFieldsGroupElemCustomFieldsValue = Nothing
      executionReportCustomFieldsGroupElemCustomFieldsContext = Nothing
   in (ExecutionReportCustomFieldsGroupElem {..})
