{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NestedPartiesGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NestedPartyID
import FIX.Fields.NestedPartyIDSource
import FIX.Fields.NestedPartyRole
import FIX.Fields.NoNestedPartyIDs
import FIX.Groups.Class
import FIX.Groups.NstdPtysSubGrpGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NestedParties"
--   , groupNumberField = "NoNestedPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "NestedPartyID" True
--       , MessagePieceField "NestedPartyIDSource" False
--       , MessagePieceField "NestedPartyRole" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NstdPtysSubGrp"
--             , groupNumberField = "NoNestedPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "NestedPartySubID" True
--                 , MessagePieceField "NestedPartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data NestedPartiesGroupElem = NestedPartiesGroupElem
  { nestedPartiesGroupElemNestedPartyID :: !NestedPartyID,
    nestedPartiesGroupElemNestedPartyIDSource :: !(Maybe NestedPartyIDSource),
    nestedPartiesGroupElemNestedPartyRole :: !(Maybe NestedPartyRole),
    nestedPartiesGroupElemNstdPtysSubGrpGroup :: ![NstdPtysSubGrpGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartiesGroupElem

instance IsComponent NestedPartiesGroupElem where
  toComponentFields ((NestedPartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB nestedPartiesGroupElemNestedPartyID,
        optionalFieldB nestedPartiesGroupElemNestedPartyIDSource,
        optionalFieldB nestedPartiesGroupElemNestedPartyRole,
        optionalGroupB nestedPartiesGroupElemNstdPtysSubGrpGroup
      ]
  fromComponentFields = do
    nestedPartiesGroupElemNestedPartyID <- requiredFieldP
    nestedPartiesGroupElemNestedPartyIDSource <- optionalFieldP
    nestedPartiesGroupElemNestedPartyRole <- optionalFieldP
    nestedPartiesGroupElemNstdPtysSubGrpGroup <- optionalGroupP
    pure (NestedPartiesGroupElem {..})

instance IsGroupElement NestedPartiesGroupElem where
  type GroupNumField NestedPartiesGroupElem = NoNestedPartyIDs
  mkGroupNum Proxy = NoNestedPartyIDs
  countGroupNum Proxy = unNoNestedPartyIDs
