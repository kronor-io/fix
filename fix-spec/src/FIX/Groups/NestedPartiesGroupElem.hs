{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NestedPartiesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NestedPartyID
import FIX.Fields.NestedPartyIDSource
import FIX.Fields.NestedPartyRole
import FIX.Fields.NestedPartyRoleQualifier
import FIX.Fields.NoNestedPartyIDs
import FIX.Groups.Class
import FIX.Groups.NestedPartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NestedParties"
--   , groupNumberField = "NoNestedPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "NestedPartyID" True
--       , MessagePieceField "NestedPartyIDSource" False
--       , MessagePieceField "NestedPartyRole" False
--       , MessagePieceField "NestedPartyRoleQualifier" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NoNestedPartySubIDs"
--             , groupNumberField = "NoNestedPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "NestedPartySubID" True
--                 , MessagePieceField "NestedPartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data NestedPartiesGroupElem = NestedPartiesGroupElem
  { nestedPartiesGroupElemNestedPartyID :: !NestedPartyID,
    nestedPartiesGroupElemNestedPartyIDSource :: !(Maybe NestedPartyIDSource),
    nestedPartiesGroupElemNestedPartyRole :: !(Maybe NestedPartyRole),
    nestedPartiesGroupElemNestedPartyRoleQualifier :: !(Maybe NestedPartyRoleQualifier),
    nestedPartiesGroupElemNestedPartySubIDsGroup :: ![NestedPartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartiesGroupElem

instance IsComponent NestedPartiesGroupElem where
  toComponentFields ((NestedPartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB nestedPartiesGroupElemNestedPartyID,
        optionalFieldB nestedPartiesGroupElemNestedPartyIDSource,
        optionalFieldB nestedPartiesGroupElemNestedPartyRole,
        optionalFieldB nestedPartiesGroupElemNestedPartyRoleQualifier,
        optionalGroupB nestedPartiesGroupElemNestedPartySubIDsGroup
      ]
  fromComponentFields = do
    nestedPartiesGroupElemNestedPartyID <- requiredFieldP
    nestedPartiesGroupElemNestedPartyIDSource <- optionalFieldP
    nestedPartiesGroupElemNestedPartyRole <- optionalFieldP
    nestedPartiesGroupElemNestedPartyRoleQualifier <- optionalFieldP
    nestedPartiesGroupElemNestedPartySubIDsGroup <- optionalGroupP
    pure (NestedPartiesGroupElem {..})

instance IsGroupElement NestedPartiesGroupElem where
  type GroupNumField NestedPartiesGroupElem = NoNestedPartyIDs
  mkGroupNum Proxy = NoNestedPartyIDs
  countGroupNum Proxy = unNoNestedPartyIDs

makeNestedPartiesGroupElem :: NestedPartyID -> NestedPartiesGroupElem
makeNestedPartiesGroupElem nestedPartiesGroupElemNestedPartyID =
  let nestedPartiesGroupElemNestedPartyIDSource = Nothing
      nestedPartiesGroupElemNestedPartyRole = Nothing
      nestedPartiesGroupElemNestedPartyRoleQualifier = Nothing
      nestedPartiesGroupElemNestedPartySubIDsGroup = []
   in (NestedPartiesGroupElem {..})
