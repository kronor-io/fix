{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteLegsNestedPartiesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NestedPartyID
import FIX.Fields.NestedPartyIDSource
import FIX.Fields.NestedPartyRole
import FIX.Fields.NestedPartyRoleQualifier
import FIX.Fields.NoNestedPartyIDs
import FIX.Groups.Class
import FIX.Groups.QuoteLegsNestedPartiesNestedPartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteLegsNestedParties"
--   , groupNumberField = "NoNestedPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "NestedPartyID" True
--       , MessagePieceField "NestedPartyIDSource" False
--       , MessagePieceField "NestedPartyRole" False
--       , MessagePieceField "NestedPartyRoleQualifier" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuoteLegsNestedPartiesNestedPartySubIDs"
--             , groupNumberField = "NoNestedPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "NestedPartySubID" True
--                 , MessagePieceField "NestedPartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data QuoteLegsNestedPartiesGroupElem = QuoteLegsNestedPartiesGroupElem
  { quoteLegsNestedPartiesGroupElemNestedPartyID :: !NestedPartyID,
    quoteLegsNestedPartiesGroupElemNestedPartyIDSource :: !(Maybe NestedPartyIDSource),
    quoteLegsNestedPartiesGroupElemNestedPartyRole :: !(Maybe NestedPartyRole),
    quoteLegsNestedPartiesGroupElemNestedPartyRoleQualifier :: !(Maybe NestedPartyRoleQualifier),
    quoteLegsNestedPartiesGroupElemQuoteLegsNestedPartiesNestedPartySubIDsGroup :: ![QuoteLegsNestedPartiesNestedPartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteLegsNestedPartiesGroupElem

instance IsComponent QuoteLegsNestedPartiesGroupElem where
  toComponentFields ((QuoteLegsNestedPartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteLegsNestedPartiesGroupElemNestedPartyID,
        optionalFieldB quoteLegsNestedPartiesGroupElemNestedPartyIDSource,
        optionalFieldB quoteLegsNestedPartiesGroupElemNestedPartyRole,
        optionalFieldB quoteLegsNestedPartiesGroupElemNestedPartyRoleQualifier,
        optionalGroupB quoteLegsNestedPartiesGroupElemQuoteLegsNestedPartiesNestedPartySubIDsGroup
      ]
  fromComponentFields = do
    quoteLegsNestedPartiesGroupElemNestedPartyID <- requiredFieldP
    quoteLegsNestedPartiesGroupElemNestedPartyIDSource <- optionalFieldP
    quoteLegsNestedPartiesGroupElemNestedPartyRole <- optionalFieldP
    quoteLegsNestedPartiesGroupElemNestedPartyRoleQualifier <- optionalFieldP
    quoteLegsNestedPartiesGroupElemQuoteLegsNestedPartiesNestedPartySubIDsGroup <- optionalGroupP
    pure (QuoteLegsNestedPartiesGroupElem {..})

instance IsGroupElement QuoteLegsNestedPartiesGroupElem where
  type GroupNumField QuoteLegsNestedPartiesGroupElem = NoNestedPartyIDs
  mkGroupNum Proxy = NoNestedPartyIDs
  countGroupNum Proxy = unNoNestedPartyIDs

makeQuoteLegsNestedPartiesGroupElem :: NestedPartyID -> QuoteLegsNestedPartiesGroupElem
makeQuoteLegsNestedPartiesGroupElem quoteLegsNestedPartiesGroupElemNestedPartyID =
  let quoteLegsNestedPartiesGroupElemNestedPartyIDSource = Nothing
      quoteLegsNestedPartiesGroupElemNestedPartyRole = Nothing
      quoteLegsNestedPartiesGroupElemNestedPartyRoleQualifier = Nothing
      quoteLegsNestedPartiesGroupElemQuoteLegsNestedPartiesNestedPartySubIDsGroup = []
   in (QuoteLegsNestedPartiesGroupElem {..})
