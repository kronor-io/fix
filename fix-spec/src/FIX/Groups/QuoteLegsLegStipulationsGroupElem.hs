{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteLegsLegStipulationsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.LegStipulationType
import FIX.Fields.LegStipulationValue
import FIX.Fields.MsgType
import FIX.Fields.NoLegStipulations
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteLegsLegStipulations"
--   , groupNumberField = "NoLegStipulations"
--   , groupPieces =
--       [ MessagePieceField "LegStipulationType" True
--       , MessagePieceField "LegStipulationValue" False
--       ]
--   }
data QuoteLegsLegStipulationsGroupElem = QuoteLegsLegStipulationsGroupElem
  { quoteLegsLegStipulationsGroupElemLegStipulationType :: !LegStipulationType,
    quoteLegsLegStipulationsGroupElemLegStipulationValue :: !(Maybe LegStipulationValue)
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteLegsLegStipulationsGroupElem

instance IsComponent QuoteLegsLegStipulationsGroupElem where
  toComponentFields ((QuoteLegsLegStipulationsGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteLegsLegStipulationsGroupElemLegStipulationType,
        optionalFieldB quoteLegsLegStipulationsGroupElemLegStipulationValue
      ]
  fromComponentFields = do
    quoteLegsLegStipulationsGroupElemLegStipulationType <- requiredFieldP
    quoteLegsLegStipulationsGroupElemLegStipulationValue <- optionalFieldP
    pure (QuoteLegsLegStipulationsGroupElem {..})

instance IsGroupElement QuoteLegsLegStipulationsGroupElem where
  type GroupNumField QuoteLegsLegStipulationsGroupElem = NoLegStipulations
  mkGroupNum Proxy = NoLegStipulations
  countGroupNum Proxy = unNoLegStipulations

makeQuoteLegsLegStipulationsGroupElem :: LegStipulationType -> QuoteLegsLegStipulationsGroupElem
makeQuoteLegsLegStipulationsGroupElem quoteLegsLegStipulationsGroupElemLegStipulationType =
  let quoteLegsLegStipulationsGroupElemLegStipulationValue = Nothing
   in (QuoteLegsLegStipulationsGroupElem {..})
