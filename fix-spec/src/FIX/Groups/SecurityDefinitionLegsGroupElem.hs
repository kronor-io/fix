{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.SecurityDefinitionLegsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.InstrumentLeg
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "SecurityDefinitionLegs"
--   , groupNumberField = "NoLegs"
--   , groupPieces = [ MessagePieceComponent "InstrumentLeg" True ]
--   }
data SecurityDefinitionLegsGroupElem = SecurityDefinitionLegsGroupElem {securityDefinitionLegsGroupElemInstrumentLeg :: !InstrumentLeg}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityDefinitionLegsGroupElem

instance IsComponent SecurityDefinitionLegsGroupElem where
  toComponentFields ((SecurityDefinitionLegsGroupElem {..})) = mconcat [requiredComponentB securityDefinitionLegsGroupElemInstrumentLeg]
  fromComponentFields = do
    securityDefinitionLegsGroupElemInstrumentLeg <- requiredComponentP
    pure (SecurityDefinitionLegsGroupElem {..})

instance IsGroupElement SecurityDefinitionLegsGroupElem where
  type GroupNumField SecurityDefinitionLegsGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs

makeSecurityDefinitionLegsGroupElem :: InstrumentLeg -> SecurityDefinitionLegsGroupElem
makeSecurityDefinitionLegsGroupElem securityDefinitionLegsGroupElemInstrumentLeg =
  let
   in (SecurityDefinitionLegsGroupElem {..})
