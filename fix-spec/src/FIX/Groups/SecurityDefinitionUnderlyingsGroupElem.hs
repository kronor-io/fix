{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.SecurityDefinitionUnderlyingsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoUnderlyings
import FIX.Fields.UnderlyingMaturityDate
import FIX.Fields.UnderlyingSecurityDesc
import FIX.Fields.UnderlyingSecurityID
import FIX.Fields.UnderlyingSymbol
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "SecurityDefinitionUnderlyings"
--   , groupNumberField = "NoUnderlyings"
--   , groupPieces =
--       [ MessagePieceField "UnderlyingSymbol" True
--       , MessagePieceField "UnderlyingSecurityID" True
--       , MessagePieceField "UnderlyingMaturityDate" True
--       , MessagePieceField "UnderlyingSecurityDesc" True
--       ]
--   }
data SecurityDefinitionUnderlyingsGroupElem = SecurityDefinitionUnderlyingsGroupElem
  { securityDefinitionUnderlyingsGroupElemUnderlyingSymbol :: !UnderlyingSymbol,
    securityDefinitionUnderlyingsGroupElemUnderlyingSecurityID :: !UnderlyingSecurityID,
    securityDefinitionUnderlyingsGroupElemUnderlyingMaturityDate :: !UnderlyingMaturityDate,
    securityDefinitionUnderlyingsGroupElemUnderlyingSecurityDesc :: !UnderlyingSecurityDesc
  }
  deriving stock (Show, Eq, Generic)

instance Validity SecurityDefinitionUnderlyingsGroupElem

instance IsComponent SecurityDefinitionUnderlyingsGroupElem where
  toComponentFields ((SecurityDefinitionUnderlyingsGroupElem {..})) =
    mconcat
      [ requiredFieldB securityDefinitionUnderlyingsGroupElemUnderlyingSymbol,
        requiredFieldB securityDefinitionUnderlyingsGroupElemUnderlyingSecurityID,
        requiredFieldB securityDefinitionUnderlyingsGroupElemUnderlyingMaturityDate,
        requiredFieldB securityDefinitionUnderlyingsGroupElemUnderlyingSecurityDesc
      ]
  fromComponentFields = do
    securityDefinitionUnderlyingsGroupElemUnderlyingSymbol <- requiredFieldP
    securityDefinitionUnderlyingsGroupElemUnderlyingSecurityID <- requiredFieldP
    securityDefinitionUnderlyingsGroupElemUnderlyingMaturityDate <- requiredFieldP
    securityDefinitionUnderlyingsGroupElemUnderlyingSecurityDesc <- requiredFieldP
    pure (SecurityDefinitionUnderlyingsGroupElem {..})

instance IsGroupElement SecurityDefinitionUnderlyingsGroupElem where
  type GroupNumField SecurityDefinitionUnderlyingsGroupElem = NoUnderlyings
  mkGroupNum Proxy = NoUnderlyings
  countGroupNum Proxy = unNoUnderlyings

makeSecurityDefinitionUnderlyingsGroupElem :: UnderlyingSymbol -> (UnderlyingSecurityID -> (UnderlyingMaturityDate -> (UnderlyingSecurityDesc -> SecurityDefinitionUnderlyingsGroupElem)))
makeSecurityDefinitionUnderlyingsGroupElem securityDefinitionUnderlyingsGroupElemUnderlyingSymbol securityDefinitionUnderlyingsGroupElemUnderlyingSecurityID securityDefinitionUnderlyingsGroupElemUnderlyingMaturityDate securityDefinitionUnderlyingsGroupElemUnderlyingSecurityDesc =
  let
   in (SecurityDefinitionUnderlyingsGroupElem {..})
