{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuotQualGrpGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoQuoteQualifiers
import FIX.Fields.QuoteQualifier
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuotQualGrp"
--   , groupNumberField = "NoQuoteQualifiers"
--   , groupPieces = [ MessagePieceField "QuoteQualifier" True ]
--   }
data QuotQualGrpGroupElem = QuotQualGrpGroupElem {quotQualGrpGroupElemQuoteQualifier :: !QuoteQualifier}
  deriving stock (Show, Eq, Generic)

instance Validity QuotQualGrpGroupElem

instance IsComponent QuotQualGrpGroupElem where
  toComponentFields ((QuotQualGrpGroupElem {..})) = mconcat [requiredFieldB quotQualGrpGroupElemQuoteQualifier]
  fromComponentFields = do
    quotQualGrpGroupElemQuoteQualifier <- requiredFieldP
    pure (QuotQualGrpGroupElem {..})

instance IsGroupElement QuotQualGrpGroupElem where
  type GroupNumField QuotQualGrpGroupElem = NoQuoteQualifiers
  mkGroupNum Proxy = NoQuoteQualifiers
  countGroupNum Proxy = unNoQuoteQualifiers
