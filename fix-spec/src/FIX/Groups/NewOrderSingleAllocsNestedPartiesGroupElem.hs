{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderSingleAllocsNestedPartiesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NestedPartyID
import FIX.Fields.NestedPartyIDSource
import FIX.Fields.NestedPartyRole
import FIX.Fields.NestedPartyRoleQualifier
import FIX.Fields.NoNestedPartyIDs
import FIX.Groups.Class
import FIX.Groups.NewOrderSingleAllocsNestedPartiesNestedPartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderSingleAllocsNestedParties"
--   , groupNumberField = "NoNestedPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "NestedPartyID" True
--       , MessagePieceField "NestedPartyIDSource" False
--       , MessagePieceField "NestedPartyRole" False
--       , MessagePieceField "NestedPartyRoleQualifier" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewOrderSingleAllocsNestedPartiesNestedPartySubIDs"
--             , groupNumberField = "NoNestedPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "NestedPartySubID" True
--                 , MessagePieceField "NestedPartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data NewOrderSingleAllocsNestedPartiesGroupElem = NewOrderSingleAllocsNestedPartiesGroupElem
  { newOrderSingleAllocsNestedPartiesGroupElemNestedPartyID :: !NestedPartyID,
    newOrderSingleAllocsNestedPartiesGroupElemNestedPartyIDSource :: !(Maybe NestedPartyIDSource),
    newOrderSingleAllocsNestedPartiesGroupElemNestedPartyRole :: !(Maybe NestedPartyRole),
    newOrderSingleAllocsNestedPartiesGroupElemNestedPartyRoleQualifier :: !(Maybe NestedPartyRoleQualifier),
    newOrderSingleAllocsNestedPartiesGroupElemNewOrderSingleAllocsNestedPartiesNestedPartySubIDsGroup :: ![NewOrderSingleAllocsNestedPartiesNestedPartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderSingleAllocsNestedPartiesGroupElem

instance IsComponent NewOrderSingleAllocsNestedPartiesGroupElem where
  toComponentFields ((NewOrderSingleAllocsNestedPartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderSingleAllocsNestedPartiesGroupElemNestedPartyID,
        optionalFieldB newOrderSingleAllocsNestedPartiesGroupElemNestedPartyIDSource,
        optionalFieldB newOrderSingleAllocsNestedPartiesGroupElemNestedPartyRole,
        optionalFieldB newOrderSingleAllocsNestedPartiesGroupElemNestedPartyRoleQualifier,
        optionalGroupB newOrderSingleAllocsNestedPartiesGroupElemNewOrderSingleAllocsNestedPartiesNestedPartySubIDsGroup
      ]
  fromComponentFields = do
    newOrderSingleAllocsNestedPartiesGroupElemNestedPartyID <- requiredFieldP
    newOrderSingleAllocsNestedPartiesGroupElemNestedPartyIDSource <- optionalFieldP
    newOrderSingleAllocsNestedPartiesGroupElemNestedPartyRole <- optionalFieldP
    newOrderSingleAllocsNestedPartiesGroupElemNestedPartyRoleQualifier <- optionalFieldP
    newOrderSingleAllocsNestedPartiesGroupElemNewOrderSingleAllocsNestedPartiesNestedPartySubIDsGroup <- optionalGroupP
    pure (NewOrderSingleAllocsNestedPartiesGroupElem {..})

instance IsGroupElement NewOrderSingleAllocsNestedPartiesGroupElem where
  type GroupNumField NewOrderSingleAllocsNestedPartiesGroupElem = NoNestedPartyIDs
  mkGroupNum Proxy = NoNestedPartyIDs
  countGroupNum Proxy = unNoNestedPartyIDs

makeNewOrderSingleAllocsNestedPartiesGroupElem :: NestedPartyID -> NewOrderSingleAllocsNestedPartiesGroupElem
makeNewOrderSingleAllocsNestedPartiesGroupElem newOrderSingleAllocsNestedPartiesGroupElemNestedPartyID =
  let newOrderSingleAllocsNestedPartiesGroupElemNestedPartyIDSource = Nothing
      newOrderSingleAllocsNestedPartiesGroupElemNestedPartyRole = Nothing
      newOrderSingleAllocsNestedPartiesGroupElemNestedPartyRoleQualifier = Nothing
      newOrderSingleAllocsNestedPartiesGroupElemNewOrderSingleAllocsNestedPartiesNestedPartySubIDsGroup = []
   in (NewOrderSingleAllocsNestedPartiesGroupElem {..})
