{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteRequestRejectQuoteQualifiersGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoQuoteQualifiers
import FIX.Fields.QuoteQualifier
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteRequestRejectQuoteQualifiers"
--   , groupNumberField = "NoQuoteQualifiers"
--   , groupPieces = [ MessagePieceField "QuoteQualifier" True ]
--   }
data QuoteRequestRejectQuoteQualifiersGroupElem = QuoteRequestRejectQuoteQualifiersGroupElem {quoteRequestRejectQuoteQualifiersGroupElemQuoteQualifier :: !QuoteQualifier}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestRejectQuoteQualifiersGroupElem

instance IsComponent QuoteRequestRejectQuoteQualifiersGroupElem where
  toComponentFields ((QuoteRequestRejectQuoteQualifiersGroupElem {..})) = mconcat [requiredFieldB quoteRequestRejectQuoteQualifiersGroupElemQuoteQualifier]
  fromComponentFields = do
    quoteRequestRejectQuoteQualifiersGroupElemQuoteQualifier <- requiredFieldP
    pure (QuoteRequestRejectQuoteQualifiersGroupElem {..})

instance IsGroupElement QuoteRequestRejectQuoteQualifiersGroupElem where
  type GroupNumField QuoteRequestRejectQuoteQualifiersGroupElem = NoQuoteQualifiers
  mkGroupNum Proxy = NoQuoteQualifiers
  countGroupNum Proxy = unNoQuoteQualifiers

makeQuoteRequestRejectQuoteQualifiersGroupElem :: QuoteQualifier -> QuoteRequestRejectQuoteQualifiersGroupElem
makeQuoteRequestRejectQuoteQualifiersGroupElem quoteRequestRejectQuoteQualifiersGroupElemQuoteQualifier =
  let
   in (QuoteRequestRejectQuoteQualifiersGroupElem {..})
