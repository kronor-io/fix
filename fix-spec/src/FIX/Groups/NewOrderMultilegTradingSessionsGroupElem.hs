{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderMultilegTradingSessionsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoTradingSessions
import FIX.Fields.TradingSessionID
import FIX.Fields.TradingSessionSubID
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderMultilegTradingSessions"
--   , groupNumberField = "NoTradingSessions"
--   , groupPieces =
--       [ MessagePieceField "TradingSessionID" True
--       , MessagePieceField "TradingSessionSubID" False
--       ]
--   }
data NewOrderMultilegTradingSessionsGroupElem = NewOrderMultilegTradingSessionsGroupElem
  { newOrderMultilegTradingSessionsGroupElemTradingSessionID :: !TradingSessionID,
    newOrderMultilegTradingSessionsGroupElemTradingSessionSubID :: !(Maybe TradingSessionSubID)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderMultilegTradingSessionsGroupElem

instance IsComponent NewOrderMultilegTradingSessionsGroupElem where
  toComponentFields ((NewOrderMultilegTradingSessionsGroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderMultilegTradingSessionsGroupElemTradingSessionID,
        optionalFieldB newOrderMultilegTradingSessionsGroupElemTradingSessionSubID
      ]
  fromComponentFields = do
    newOrderMultilegTradingSessionsGroupElemTradingSessionID <- requiredFieldP
    newOrderMultilegTradingSessionsGroupElemTradingSessionSubID <- optionalFieldP
    pure (NewOrderMultilegTradingSessionsGroupElem {..})

instance IsGroupElement NewOrderMultilegTradingSessionsGroupElem where
  type GroupNumField NewOrderMultilegTradingSessionsGroupElem = NoTradingSessions
  mkGroupNum Proxy = NoTradingSessions
  countGroupNum Proxy = unNoTradingSessions

makeNewOrderMultilegTradingSessionsGroupElem :: TradingSessionID -> NewOrderMultilegTradingSessionsGroupElem
makeNewOrderMultilegTradingSessionsGroupElem newOrderMultilegTradingSessionsGroupElemTradingSessionID =
  let newOrderMultilegTradingSessionsGroupElemTradingSessionSubID = Nothing
   in (NewOrderMultilegTradingSessionsGroupElem {..})
