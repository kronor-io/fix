{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteRequestPartiesPartySubIDsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartySubIDs
import FIX.Fields.PartySubID
import FIX.Fields.PartySubIDType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteRequestPartiesPartySubIDs"
--   , groupNumberField = "NoPartySubIDs"
--   , groupPieces =
--       [ MessagePieceField "PartySubID" True
--       , MessagePieceField "PartySubIDType" False
--       ]
--   }
data QuoteRequestPartiesPartySubIDsGroupElem = QuoteRequestPartiesPartySubIDsGroupElem
  { quoteRequestPartiesPartySubIDsGroupElemPartySubID :: !PartySubID,
    quoteRequestPartiesPartySubIDsGroupElemPartySubIDType :: !(Maybe PartySubIDType)
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestPartiesPartySubIDsGroupElem

instance IsComponent QuoteRequestPartiesPartySubIDsGroupElem where
  toComponentFields ((QuoteRequestPartiesPartySubIDsGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteRequestPartiesPartySubIDsGroupElemPartySubID,
        optionalFieldB quoteRequestPartiesPartySubIDsGroupElemPartySubIDType
      ]
  fromComponentFields = do
    quoteRequestPartiesPartySubIDsGroupElemPartySubID <- requiredFieldP
    quoteRequestPartiesPartySubIDsGroupElemPartySubIDType <- optionalFieldP
    pure (QuoteRequestPartiesPartySubIDsGroupElem {..})

instance IsGroupElement QuoteRequestPartiesPartySubIDsGroupElem where
  type GroupNumField QuoteRequestPartiesPartySubIDsGroupElem = NoPartySubIDs
  mkGroupNum Proxy = NoPartySubIDs
  countGroupNum Proxy = unNoPartySubIDs

makeQuoteRequestPartiesPartySubIDsGroupElem :: PartySubID -> QuoteRequestPartiesPartySubIDsGroupElem
makeQuoteRequestPartiesPartySubIDsGroupElem quoteRequestPartiesPartySubIDsGroupElemPartySubID =
  let quoteRequestPartiesPartySubIDsGroupElemPartySubIDType = Nothing
   in (QuoteRequestPartiesPartySubIDsGroupElem {..})
