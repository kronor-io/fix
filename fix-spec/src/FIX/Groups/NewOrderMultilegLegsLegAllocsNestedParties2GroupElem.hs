{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderMultilegLegsLegAllocsNestedParties2GroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.Nested2PartyID
import FIX.Fields.Nested2PartyIDSource
import FIX.Fields.Nested2PartyRole
import FIX.Fields.NoNested2PartyIDs
import FIX.Groups.Class
import FIX.Groups.NewOrderMultilegLegsLegAllocsNestedParties2Nested2PartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderMultilegLegsLegAllocsNestedParties2"
--   , groupNumberField = "NoNested2PartyIDs"
--   , groupPieces =
--       [ MessagePieceField "Nested2PartyID" True
--       , MessagePieceField "Nested2PartyIDSource" False
--       , MessagePieceField "Nested2PartyRole" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName =
--                 "NewOrderMultilegLegsLegAllocsNestedParties2Nested2PartySubIDs"
--             , groupNumberField = "NoNested2PartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "Nested2PartySubID" True
--                 , MessagePieceField "Nested2PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data NewOrderMultilegLegsLegAllocsNestedParties2GroupElem = NewOrderMultilegLegsLegAllocsNestedParties2GroupElem
  { newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyID :: !Nested2PartyID,
    newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyIDSource :: !(Maybe Nested2PartyIDSource),
    newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyRole :: !(Maybe Nested2PartyRole),
    newOrderMultilegLegsLegAllocsNestedParties2GroupElemNewOrderMultilegLegsLegAllocsNestedParties2Nested2PartySubIDsGroup :: ![NewOrderMultilegLegsLegAllocsNestedParties2Nested2PartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderMultilegLegsLegAllocsNestedParties2GroupElem

instance IsComponent NewOrderMultilegLegsLegAllocsNestedParties2GroupElem where
  toComponentFields ((NewOrderMultilegLegsLegAllocsNestedParties2GroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyID,
        optionalFieldB newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyIDSource,
        optionalFieldB newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyRole,
        optionalGroupB newOrderMultilegLegsLegAllocsNestedParties2GroupElemNewOrderMultilegLegsLegAllocsNestedParties2Nested2PartySubIDsGroup
      ]
  fromComponentFields = do
    newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyID <- requiredFieldP
    newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyIDSource <- optionalFieldP
    newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyRole <- optionalFieldP
    newOrderMultilegLegsLegAllocsNestedParties2GroupElemNewOrderMultilegLegsLegAllocsNestedParties2Nested2PartySubIDsGroup <- optionalGroupP
    pure (NewOrderMultilegLegsLegAllocsNestedParties2GroupElem {..})

instance IsGroupElement NewOrderMultilegLegsLegAllocsNestedParties2GroupElem where
  type GroupNumField NewOrderMultilegLegsLegAllocsNestedParties2GroupElem = NoNested2PartyIDs
  mkGroupNum Proxy = NoNested2PartyIDs
  countGroupNum Proxy = unNoNested2PartyIDs

makeNewOrderMultilegLegsLegAllocsNestedParties2GroupElem :: Nested2PartyID -> NewOrderMultilegLegsLegAllocsNestedParties2GroupElem
makeNewOrderMultilegLegsLegAllocsNestedParties2GroupElem newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyID =
  let newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyIDSource = Nothing
      newOrderMultilegLegsLegAllocsNestedParties2GroupElemNested2PartyRole = Nothing
      newOrderMultilegLegsLegAllocsNestedParties2GroupElemNewOrderMultilegLegsLegAllocsNestedParties2Nested2PartySubIDsGroup = []
   in (NewOrderMultilegLegsLegAllocsNestedParties2GroupElem {..})
