{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.CustomFieldsGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.CustomFieldName
import FIX.Fields.CustomFieldValue
import FIX.Fields.MsgType
import FIX.Fields.NoCustomFields
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoCustomFields"
--   , groupNumberField = "NoCustomFields"
--   , groupPieces =
--       [ MessagePieceField "CustomFieldName" True
--       , MessagePieceField "CustomFieldValue" True
--       ]
--   }
data CustomFieldsGroupElem = CustomFieldsGroupElem
  { customFieldsGroupElemCustomFieldName :: !CustomFieldName,
    customFieldsGroupElemCustomFieldValue :: !CustomFieldValue
  }
  deriving stock (Show, Eq, Generic)

instance Validity CustomFieldsGroupElem

instance IsComponent CustomFieldsGroupElem where
  toComponentFields ((CustomFieldsGroupElem {..})) =
    mconcat
      [ requiredFieldB customFieldsGroupElemCustomFieldName,
        requiredFieldB customFieldsGroupElemCustomFieldValue
      ]
  fromComponentFields = do
    customFieldsGroupElemCustomFieldName <- requiredFieldP
    customFieldsGroupElemCustomFieldValue <- requiredFieldP
    pure (CustomFieldsGroupElem {..})

instance IsGroupElement CustomFieldsGroupElem where
  type GroupNumField CustomFieldsGroupElem = NoCustomFields
  mkGroupNum Proxy = NoCustomFields
  countGroupNum Proxy = unNoCustomFields

makeCustomFieldsGroupElem :: CustomFieldName -> (CustomFieldValue -> CustomFieldsGroupElem)
makeCustomFieldsGroupElem customFieldsGroupElemCustomFieldName customFieldsGroupElemCustomFieldValue =
  let
   in (CustomFieldsGroupElem {..})
