{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.CustomFieldsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.CustomFieldsName
import FIX.Fields.CustomFieldsValue
import FIX.Fields.MsgType
import FIX.Fields.NoCustomFields
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoCustomFields"
--   , groupNumberField = "NoCustomFields"
--   , groupPieces =
--       [ MessagePieceField "CustomFieldsName" True
--       , MessagePieceField "CustomFieldsValue" False
--       ]
--   }
data CustomFieldsGroupElem = CustomFieldsGroupElem
  { customFieldsGroupElemCustomFieldsName :: !CustomFieldsName,
    customFieldsGroupElemCustomFieldsValue :: !(Maybe CustomFieldsValue)
  }
  deriving stock (Show, Eq, Generic)

instance Validity CustomFieldsGroupElem

instance IsComponent CustomFieldsGroupElem where
  toComponentFields ((CustomFieldsGroupElem {..})) =
    mconcat
      [ requiredFieldB customFieldsGroupElemCustomFieldsName,
        optionalFieldB customFieldsGroupElemCustomFieldsValue
      ]
  fromComponentFields = do
    customFieldsGroupElemCustomFieldsName <- requiredFieldP
    customFieldsGroupElemCustomFieldsValue <- optionalFieldP
    pure (CustomFieldsGroupElem {..})

instance IsGroupElement CustomFieldsGroupElem where
  type GroupNumField CustomFieldsGroupElem = NoCustomFields
  mkGroupNum Proxy = NoCustomFields
  countGroupNum Proxy = unNoCustomFields

makeCustomFieldsGroupElem :: CustomFieldsName -> CustomFieldsGroupElem
makeCustomFieldsGroupElem customFieldsGroupElemCustomFieldsName =
  let customFieldsGroupElemCustomFieldsValue = Nothing
   in (CustomFieldsGroupElem {..})
