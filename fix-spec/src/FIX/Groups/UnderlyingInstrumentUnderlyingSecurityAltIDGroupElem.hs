{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoUnderlyingSecurityAltID
import FIX.Fields.UnderlyingSecurityAltID
import FIX.Fields.UnderlyingSecurityAltIDSource
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "UnderlyingInstrumentUnderlyingSecurityAltID"
--   , groupNumberField = "NoUnderlyingSecurityAltID"
--   , groupPieces =
--       [ MessagePieceField "UnderlyingSecurityAltID" True
--       , MessagePieceField "UnderlyingSecurityAltIDSource" False
--       ]
--   }
data UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem = UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem
  { underlyingInstrumentUnderlyingSecurityAltIDGroupElemUnderlyingSecurityAltID :: !UnderlyingSecurityAltID,
    underlyingInstrumentUnderlyingSecurityAltIDGroupElemUnderlyingSecurityAltIDSource :: !(Maybe UnderlyingSecurityAltIDSource)
  }
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem

instance IsComponent UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem where
  toComponentFields ((UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem {..})) =
    mconcat
      [ requiredFieldB underlyingInstrumentUnderlyingSecurityAltIDGroupElemUnderlyingSecurityAltID,
        optionalFieldB underlyingInstrumentUnderlyingSecurityAltIDGroupElemUnderlyingSecurityAltIDSource
      ]
  fromComponentFields = do
    underlyingInstrumentUnderlyingSecurityAltIDGroupElemUnderlyingSecurityAltID <- requiredFieldP
    underlyingInstrumentUnderlyingSecurityAltIDGroupElemUnderlyingSecurityAltIDSource <- optionalFieldP
    pure (UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem {..})

instance IsGroupElement UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem where
  type GroupNumField UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem = NoUnderlyingSecurityAltID
  mkGroupNum Proxy = NoUnderlyingSecurityAltID
  countGroupNum Proxy = unNoUnderlyingSecurityAltID

makeUnderlyingInstrumentUnderlyingSecurityAltIDGroupElem :: UnderlyingSecurityAltID -> UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem
makeUnderlyingInstrumentUnderlyingSecurityAltIDGroupElem underlyingInstrumentUnderlyingSecurityAltIDGroupElemUnderlyingSecurityAltID =
  let underlyingInstrumentUnderlyingSecurityAltIDGroupElemUnderlyingSecurityAltIDSource = Nothing
   in (UnderlyingInstrumentUnderlyingSecurityAltIDGroupElem {..})
