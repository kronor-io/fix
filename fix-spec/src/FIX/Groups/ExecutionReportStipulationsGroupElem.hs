{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.ExecutionReportStipulationsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoStipulations
import FIX.Fields.StipulationType
import FIX.Fields.StipulationValue
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "ExecutionReportStipulations"
--   , groupNumberField = "NoStipulations"
--   , groupPieces =
--       [ MessagePieceField "StipulationType" True
--       , MessagePieceField "StipulationValue" False
--       ]
--   }
data ExecutionReportStipulationsGroupElem = ExecutionReportStipulationsGroupElem
  { executionReportStipulationsGroupElemStipulationType :: !StipulationType,
    executionReportStipulationsGroupElemStipulationValue :: !(Maybe StipulationValue)
  }
  deriving stock (Show, Eq, Generic)

instance Validity ExecutionReportStipulationsGroupElem

instance IsComponent ExecutionReportStipulationsGroupElem where
  toComponentFields ((ExecutionReportStipulationsGroupElem {..})) =
    mconcat
      [ requiredFieldB executionReportStipulationsGroupElemStipulationType,
        optionalFieldB executionReportStipulationsGroupElemStipulationValue
      ]
  fromComponentFields = do
    executionReportStipulationsGroupElemStipulationType <- requiredFieldP
    executionReportStipulationsGroupElemStipulationValue <- optionalFieldP
    pure (ExecutionReportStipulationsGroupElem {..})

instance IsGroupElement ExecutionReportStipulationsGroupElem where
  type GroupNumField ExecutionReportStipulationsGroupElem = NoStipulations
  mkGroupNum Proxy = NoStipulations
  countGroupNum Proxy = unNoStipulations

makeExecutionReportStipulationsGroupElem :: StipulationType -> ExecutionReportStipulationsGroupElem
makeExecutionReportStipulationsGroupElem executionReportStipulationsGroupElemStipulationType =
  let executionReportStipulationsGroupElemStipulationValue = Nothing
   in (ExecutionReportStipulationsGroupElem {..})
