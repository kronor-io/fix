{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.Nested3PartySubID
import FIX.Fields.Nested3PartySubIDType
import FIX.Fields.NoNested3PartySubIDs
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName =
--       "NewOrderMultilegAllocsNestedParties3Nested3PartySubIDs"
--   , groupNumberField = "NoNested3PartySubIDs"
--   , groupPieces =
--       [ MessagePieceField "Nested3PartySubID" True
--       , MessagePieceField "Nested3PartySubIDType" False
--       ]
--   }
data NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem = NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem
  { newOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElemNested3PartySubID :: !Nested3PartySubID,
    newOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElemNested3PartySubIDType :: !(Maybe Nested3PartySubIDType)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem

instance IsComponent NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem where
  toComponentFields ((NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElemNested3PartySubID,
        optionalFieldB newOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElemNested3PartySubIDType
      ]
  fromComponentFields = do
    newOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElemNested3PartySubID <- requiredFieldP
    newOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElemNested3PartySubIDType <- optionalFieldP
    pure (NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem {..})

instance IsGroupElement NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem where
  type GroupNumField NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem = NoNested3PartySubIDs
  mkGroupNum Proxy = NoNested3PartySubIDs
  countGroupNum Proxy = unNoNested3PartySubIDs

makeNewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem :: Nested3PartySubID -> NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem
makeNewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem newOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElemNested3PartySubID =
  let newOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElemNested3PartySubIDType = Nothing
   in (NewOrderMultilegAllocsNestedParties3Nested3PartySubIDsGroupElem {..})
