{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewsLinesOfTextGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.EncodedText
import FIX.Fields.LinesOfText
import FIX.Fields.MsgType
import FIX.Fields.Text
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewsLinesOfText"
--   , groupNumberField = "LinesOfText"
--   , groupPieces =
--       [ MessagePieceField "Text" True
--       , MessagePieceField "EncodedText" False
--       ]
--   }
data NewsLinesOfTextGroupElem = NewsLinesOfTextGroupElem
  { newsLinesOfTextGroupElemText :: !Text,
    newsLinesOfTextGroupElemEncodedText :: !(Maybe EncodedText)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewsLinesOfTextGroupElem

instance IsComponent NewsLinesOfTextGroupElem where
  toComponentFields ((NewsLinesOfTextGroupElem {..})) =
    mconcat
      [ requiredFieldB newsLinesOfTextGroupElemText,
        optionalFieldB newsLinesOfTextGroupElemEncodedText
      ]
  fromComponentFields = do
    newsLinesOfTextGroupElemText <- requiredFieldP
    newsLinesOfTextGroupElemEncodedText <- optionalFieldP
    pure (NewsLinesOfTextGroupElem {..})

instance IsGroupElement NewsLinesOfTextGroupElem where
  type GroupNumField NewsLinesOfTextGroupElem = LinesOfText
  mkGroupNum Proxy = LinesOfText
  countGroupNum Proxy = unLinesOfText

makeNewsLinesOfTextGroupElem :: Text -> NewsLinesOfTextGroupElem
makeNewsLinesOfTextGroupElem newsLinesOfTextGroupElemText =
  let newsLinesOfTextGroupElemEncodedText = Nothing
   in (NewsLinesOfTextGroupElem {..})
