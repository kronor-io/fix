{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteRequestRejectPartiesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartyIDs
import FIX.Fields.PartyID
import FIX.Fields.PartyIDSource
import FIX.Fields.PartyRole
import FIX.Fields.PartyRoleQualifier
import FIX.Groups.Class
import FIX.Groups.QuoteRequestRejectPartiesPartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteRequestRejectParties"
--   , groupNumberField = "NoPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "PartyID" True
--       , MessagePieceField "PartyIDSource" False
--       , MessagePieceField "PartyRole" False
--       , MessagePieceField "PartyRoleQualifier" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "QuoteRequestRejectPartiesPartySubIDs"
--             , groupNumberField = "NoPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "PartySubID" True
--                 , MessagePieceField "PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data QuoteRequestRejectPartiesGroupElem = QuoteRequestRejectPartiesGroupElem
  { quoteRequestRejectPartiesGroupElemPartyID :: !PartyID,
    quoteRequestRejectPartiesGroupElemPartyIDSource :: !(Maybe PartyIDSource),
    quoteRequestRejectPartiesGroupElemPartyRole :: !(Maybe PartyRole),
    quoteRequestRejectPartiesGroupElemPartyRoleQualifier :: !(Maybe PartyRoleQualifier),
    quoteRequestRejectPartiesGroupElemQuoteRequestRejectPartiesPartySubIDsGroup :: ![QuoteRequestRejectPartiesPartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestRejectPartiesGroupElem

instance IsComponent QuoteRequestRejectPartiesGroupElem where
  toComponentFields ((QuoteRequestRejectPartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteRequestRejectPartiesGroupElemPartyID,
        optionalFieldB quoteRequestRejectPartiesGroupElemPartyIDSource,
        optionalFieldB quoteRequestRejectPartiesGroupElemPartyRole,
        optionalFieldB quoteRequestRejectPartiesGroupElemPartyRoleQualifier,
        optionalGroupB quoteRequestRejectPartiesGroupElemQuoteRequestRejectPartiesPartySubIDsGroup
      ]
  fromComponentFields = do
    quoteRequestRejectPartiesGroupElemPartyID <- requiredFieldP
    quoteRequestRejectPartiesGroupElemPartyIDSource <- optionalFieldP
    quoteRequestRejectPartiesGroupElemPartyRole <- optionalFieldP
    quoteRequestRejectPartiesGroupElemPartyRoleQualifier <- optionalFieldP
    quoteRequestRejectPartiesGroupElemQuoteRequestRejectPartiesPartySubIDsGroup <- optionalGroupP
    pure (QuoteRequestRejectPartiesGroupElem {..})

instance IsGroupElement QuoteRequestRejectPartiesGroupElem where
  type GroupNumField QuoteRequestRejectPartiesGroupElem = NoPartyIDs
  mkGroupNum Proxy = NoPartyIDs
  countGroupNum Proxy = unNoPartyIDs

makeQuoteRequestRejectPartiesGroupElem :: PartyID -> QuoteRequestRejectPartiesGroupElem
makeQuoteRequestRejectPartiesGroupElem quoteRequestRejectPartiesGroupElemPartyID =
  let quoteRequestRejectPartiesGroupElemPartyIDSource = Nothing
      quoteRequestRejectPartiesGroupElemPartyRole = Nothing
      quoteRequestRejectPartiesGroupElemPartyRoleQualifier = Nothing
      quoteRequestRejectPartiesGroupElemQuoteRequestRejectPartiesPartySubIDsGroup = []
   in (QuoteRequestRejectPartiesGroupElem {..})
