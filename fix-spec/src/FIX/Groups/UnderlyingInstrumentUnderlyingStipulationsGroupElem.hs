{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.UnderlyingInstrumentUnderlyingStipulationsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoUnderlyingStips
import FIX.Fields.UnderlyingStipType
import FIX.Fields.UnderlyingStipValue
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "UnderlyingInstrumentUnderlyingStipulations"
--   , groupNumberField = "NoUnderlyingStips"
--   , groupPieces =
--       [ MessagePieceField "UnderlyingStipType" True
--       , MessagePieceField "UnderlyingStipValue" False
--       ]
--   }
data UnderlyingInstrumentUnderlyingStipulationsGroupElem = UnderlyingInstrumentUnderlyingStipulationsGroupElem
  { underlyingInstrumentUnderlyingStipulationsGroupElemUnderlyingStipType :: !UnderlyingStipType,
    underlyingInstrumentUnderlyingStipulationsGroupElemUnderlyingStipValue :: !(Maybe UnderlyingStipValue)
  }
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingInstrumentUnderlyingStipulationsGroupElem

instance IsComponent UnderlyingInstrumentUnderlyingStipulationsGroupElem where
  toComponentFields ((UnderlyingInstrumentUnderlyingStipulationsGroupElem {..})) =
    mconcat
      [ requiredFieldB underlyingInstrumentUnderlyingStipulationsGroupElemUnderlyingStipType,
        optionalFieldB underlyingInstrumentUnderlyingStipulationsGroupElemUnderlyingStipValue
      ]
  fromComponentFields = do
    underlyingInstrumentUnderlyingStipulationsGroupElemUnderlyingStipType <- requiredFieldP
    underlyingInstrumentUnderlyingStipulationsGroupElemUnderlyingStipValue <- optionalFieldP
    pure (UnderlyingInstrumentUnderlyingStipulationsGroupElem {..})

instance IsGroupElement UnderlyingInstrumentUnderlyingStipulationsGroupElem where
  type GroupNumField UnderlyingInstrumentUnderlyingStipulationsGroupElem = NoUnderlyingStips
  mkGroupNum Proxy = NoUnderlyingStips
  countGroupNum Proxy = unNoUnderlyingStips

makeUnderlyingInstrumentUnderlyingStipulationsGroupElem :: UnderlyingStipType -> UnderlyingInstrumentUnderlyingStipulationsGroupElem
makeUnderlyingInstrumentUnderlyingStipulationsGroupElem underlyingInstrumentUnderlyingStipulationsGroupElemUnderlyingStipType =
  let underlyingInstrumentUnderlyingStipulationsGroupElemUnderlyingStipValue = Nothing
   in (UnderlyingInstrumentUnderlyingStipulationsGroupElem {..})
