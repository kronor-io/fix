{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewsRelatedSymGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.Instrument
import FIX.Fields.MsgType
import FIX.Fields.NoRelatedSym
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewsRelatedSym"
--   , groupNumberField = "NoRelatedSym"
--   , groupPieces = [ MessagePieceComponent "Instrument" True ]
--   }
data NewsRelatedSymGroupElem = NewsRelatedSymGroupElem {newsRelatedSymGroupElemInstrument :: !Instrument}
  deriving stock (Show, Eq, Generic)

instance Validity NewsRelatedSymGroupElem

instance IsComponent NewsRelatedSymGroupElem where
  toComponentFields ((NewsRelatedSymGroupElem {..})) = mconcat [requiredComponentB newsRelatedSymGroupElemInstrument]
  fromComponentFields = do
    newsRelatedSymGroupElemInstrument <- requiredComponentP
    pure (NewsRelatedSymGroupElem {..})

instance IsGroupElement NewsRelatedSymGroupElem where
  type GroupNumField NewsRelatedSymGroupElem = NoRelatedSym
  mkGroupNum Proxy = NoRelatedSym
  countGroupNum Proxy = unNoRelatedSym

makeNewsRelatedSymGroupElem :: Instrument -> NewsRelatedSymGroupElem
makeNewsRelatedSymGroupElem newsRelatedSymGroupElemInstrument =
  let
   in (NewsRelatedSymGroupElem {..})
