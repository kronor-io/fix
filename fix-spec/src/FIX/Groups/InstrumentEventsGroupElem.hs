{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.InstrumentEventsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.EventDate
import FIX.Fields.EventPx
import FIX.Fields.EventText
import FIX.Fields.EventType
import FIX.Fields.MsgType
import FIX.Fields.NoEvents
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "InstrumentEvents"
--   , groupNumberField = "NoEvents"
--   , groupPieces =
--       [ MessagePieceField "EventType" True
--       , MessagePieceField "EventDate" False
--       , MessagePieceField "EventPx" False
--       , MessagePieceField "EventText" False
--       ]
--   }
data InstrumentEventsGroupElem = InstrumentEventsGroupElem
  { instrumentEventsGroupElemEventType :: !EventType,
    instrumentEventsGroupElemEventDate :: !(Maybe EventDate),
    instrumentEventsGroupElemEventPx :: !(Maybe EventPx),
    instrumentEventsGroupElemEventText :: !(Maybe EventText)
  }
  deriving stock (Show, Eq, Generic)

instance Validity InstrumentEventsGroupElem

instance IsComponent InstrumentEventsGroupElem where
  toComponentFields ((InstrumentEventsGroupElem {..})) =
    mconcat
      [ requiredFieldB instrumentEventsGroupElemEventType,
        optionalFieldB instrumentEventsGroupElemEventDate,
        optionalFieldB instrumentEventsGroupElemEventPx,
        optionalFieldB instrumentEventsGroupElemEventText
      ]
  fromComponentFields = do
    instrumentEventsGroupElemEventType <- requiredFieldP
    instrumentEventsGroupElemEventDate <- optionalFieldP
    instrumentEventsGroupElemEventPx <- optionalFieldP
    instrumentEventsGroupElemEventText <- optionalFieldP
    pure (InstrumentEventsGroupElem {..})

instance IsGroupElement InstrumentEventsGroupElem where
  type GroupNumField InstrumentEventsGroupElem = NoEvents
  mkGroupNum Proxy = NoEvents
  countGroupNum Proxy = unNoEvents

makeInstrumentEventsGroupElem :: EventType -> InstrumentEventsGroupElem
makeInstrumentEventsGroupElem instrumentEventsGroupElemEventType =
  let instrumentEventsGroupElemEventDate = Nothing
      instrumentEventsGroupElemEventPx = Nothing
      instrumentEventsGroupElemEventText = Nothing
   in (InstrumentEventsGroupElem {..})
