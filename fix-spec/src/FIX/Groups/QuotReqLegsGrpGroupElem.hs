{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuotReqLegsGrpGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.InstrumentLeg
import FIX.Components.LegBenchmarkCurveData
import FIX.Fields.LegQty
import FIX.Fields.LegSettlDate
import FIX.Fields.LegSettlType
import FIX.Fields.LegSwapType
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Groups.Class
import FIX.Groups.LegStipulationsGroupElem
import FIX.Groups.NestedPartiesGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuotReqLegsGrp"
--   , groupNumberField = "NoLegs"
--   , groupPieces =
--       [ MessagePieceComponent "InstrumentLeg" True
--       , MessagePieceField "LegQty" False
--       , MessagePieceField "LegSwapType" False
--       , MessagePieceField "LegSettlType" False
--       , MessagePieceField "LegSettlDate" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "LegStipulations"
--             , groupNumberField = "NoLegStipulations"
--             , groupPieces =
--                 [ MessagePieceField "LegStipulationType" True
--                 , MessagePieceField "LegStipulationValue" False
--                 ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NestedParties"
--             , groupNumberField = "NoNestedPartyIDs"
--             , groupPieces =
--                 [ MessagePieceField "NestedPartyID" True
--                 , MessagePieceField "NestedPartyIDSource" False
--                 , MessagePieceField "NestedPartyRole" False
--                 , MessagePieceGroup
--                     GroupSpec
--                       { groupName = "NstdPtysSubGrp"
--                       , groupNumberField = "NoNestedPartySubIDs"
--                       , groupPieces =
--                           [ MessagePieceField "NestedPartySubID" True
--                           , MessagePieceField "NestedPartySubIDType" False
--                           ]
--                       }
--                     False
--                 ]
--             }
--           False
--       , MessagePieceComponent "LegBenchmarkCurveData" True
--       ]
--   }
data QuotReqLegsGrpGroupElem = QuotReqLegsGrpGroupElem
  { quotReqLegsGrpGroupElemInstrumentLeg :: !InstrumentLeg,
    quotReqLegsGrpGroupElemLegQty :: !(Maybe LegQty),
    quotReqLegsGrpGroupElemLegSwapType :: !(Maybe LegSwapType),
    quotReqLegsGrpGroupElemLegSettlType :: !(Maybe LegSettlType),
    quotReqLegsGrpGroupElemLegSettlDate :: !(Maybe LegSettlDate),
    quotReqLegsGrpGroupElemLegStipulationsGroup :: ![LegStipulationsGroupElem],
    quotReqLegsGrpGroupElemNestedPartiesGroup :: ![NestedPartiesGroupElem],
    quotReqLegsGrpGroupElemLegBenchmarkCurveData :: !LegBenchmarkCurveData
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuotReqLegsGrpGroupElem

instance IsComponent QuotReqLegsGrpGroupElem where
  toComponentFields ((QuotReqLegsGrpGroupElem {..})) =
    mconcat
      [ requiredComponentB quotReqLegsGrpGroupElemInstrumentLeg,
        optionalFieldB quotReqLegsGrpGroupElemLegQty,
        optionalFieldB quotReqLegsGrpGroupElemLegSwapType,
        optionalFieldB quotReqLegsGrpGroupElemLegSettlType,
        optionalFieldB quotReqLegsGrpGroupElemLegSettlDate,
        optionalGroupB quotReqLegsGrpGroupElemLegStipulationsGroup,
        optionalGroupB quotReqLegsGrpGroupElemNestedPartiesGroup,
        requiredComponentB quotReqLegsGrpGroupElemLegBenchmarkCurveData
      ]
  fromComponentFields = do
    quotReqLegsGrpGroupElemInstrumentLeg <- requiredComponentP
    quotReqLegsGrpGroupElemLegQty <- optionalFieldP
    quotReqLegsGrpGroupElemLegSwapType <- optionalFieldP
    quotReqLegsGrpGroupElemLegSettlType <- optionalFieldP
    quotReqLegsGrpGroupElemLegSettlDate <- optionalFieldP
    quotReqLegsGrpGroupElemLegStipulationsGroup <- optionalGroupP
    quotReqLegsGrpGroupElemNestedPartiesGroup <- optionalGroupP
    quotReqLegsGrpGroupElemLegBenchmarkCurveData <- requiredComponentP
    pure (QuotReqLegsGrpGroupElem {..})

instance IsGroupElement QuotReqLegsGrpGroupElem where
  type GroupNumField QuotReqLegsGrpGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs
