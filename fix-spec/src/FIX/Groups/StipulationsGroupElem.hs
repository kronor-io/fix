{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.StipulationsGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoStipulations
import FIX.Fields.StipulationType
import FIX.Fields.StipulationValue
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "Stipulations"
--   , groupNumberField = "NoStipulations"
--   , groupPieces =
--       [ MessagePieceField "StipulationType" True
--       , MessagePieceField "StipulationValue" False
--       ]
--   }
data StipulationsGroupElem = StipulationsGroupElem
  { stipulationsGroupElemStipulationType :: !StipulationType,
    stipulationsGroupElemStipulationValue :: !(Maybe StipulationValue)
  }
  deriving stock (Show, Eq, Generic)

instance Validity StipulationsGroupElem

instance IsComponent StipulationsGroupElem where
  toComponentFields ((StipulationsGroupElem {..})) =
    mconcat
      [ requiredFieldB stipulationsGroupElemStipulationType,
        optionalFieldB stipulationsGroupElemStipulationValue
      ]
  fromComponentFields = do
    stipulationsGroupElemStipulationType <- requiredFieldP
    stipulationsGroupElemStipulationValue <- optionalFieldP
    pure (StipulationsGroupElem {..})

instance IsGroupElement StipulationsGroupElem where
  type GroupNumField StipulationsGroupElem = NoStipulations
  mkGroupNum Proxy = NoStipulations
  countGroupNum Proxy = unNoStipulations
