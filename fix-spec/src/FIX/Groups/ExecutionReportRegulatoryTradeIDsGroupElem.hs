{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.ExecutionReportRegulatoryTradeIDsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoRegulatoryTradeIDs
import FIX.Fields.RegulatoryLegRefID
import FIX.Fields.RegulatoryTradeID
import FIX.Fields.RegulatoryTradeIDSource
import FIX.Fields.RegulatoryTradeIDType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "ExecutionReportRegulatoryTradeIDs"
--   , groupNumberField = "NoRegulatoryTradeIDs"
--   , groupPieces =
--       [ MessagePieceField "RegulatoryTradeID" True
--       , MessagePieceField "RegulatoryTradeIDSource" False
--       , MessagePieceField "RegulatoryTradeIDType" False
--       , MessagePieceField "RegulatoryLegRefID" False
--       ]
--   }
data ExecutionReportRegulatoryTradeIDsGroupElem = ExecutionReportRegulatoryTradeIDsGroupElem
  { executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeID :: !RegulatoryTradeID,
    executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeIDSource :: !(Maybe RegulatoryTradeIDSource),
    executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeIDType :: !(Maybe RegulatoryTradeIDType),
    executionReportRegulatoryTradeIDsGroupElemRegulatoryLegRefID :: !(Maybe RegulatoryLegRefID)
  }
  deriving stock (Show, Eq, Generic)

instance Validity ExecutionReportRegulatoryTradeIDsGroupElem

instance IsComponent ExecutionReportRegulatoryTradeIDsGroupElem where
  toComponentFields ((ExecutionReportRegulatoryTradeIDsGroupElem {..})) =
    mconcat
      [ requiredFieldB executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeID,
        optionalFieldB executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeIDSource,
        optionalFieldB executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeIDType,
        optionalFieldB executionReportRegulatoryTradeIDsGroupElemRegulatoryLegRefID
      ]
  fromComponentFields = do
    executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeID <- requiredFieldP
    executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeIDSource <- optionalFieldP
    executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeIDType <- optionalFieldP
    executionReportRegulatoryTradeIDsGroupElemRegulatoryLegRefID <- optionalFieldP
    pure (ExecutionReportRegulatoryTradeIDsGroupElem {..})

instance IsGroupElement ExecutionReportRegulatoryTradeIDsGroupElem where
  type GroupNumField ExecutionReportRegulatoryTradeIDsGroupElem = NoRegulatoryTradeIDs
  mkGroupNum Proxy = NoRegulatoryTradeIDs
  countGroupNum Proxy = unNoRegulatoryTradeIDs

makeExecutionReportRegulatoryTradeIDsGroupElem :: RegulatoryTradeID -> ExecutionReportRegulatoryTradeIDsGroupElem
makeExecutionReportRegulatoryTradeIDsGroupElem executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeID =
  let executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeIDSource = Nothing
      executionReportRegulatoryTradeIDsGroupElemRegulatoryTradeIDType = Nothing
      executionReportRegulatoryTradeIDsGroupElemRegulatoryLegRefID = Nothing
   in (ExecutionReportRegulatoryTradeIDsGroupElem {..})
