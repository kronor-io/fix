{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.LinesOfTextGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoLinesOfText
import FIX.Fields.Text
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoLinesOfText"
--   , groupNumberField = "NoLinesOfText"
--   , groupPieces = [ MessagePieceField "Text" True ]
--   }
data LinesOfTextGroupElem = LinesOfTextGroupElem {linesOfTextGroupElemText :: !Text}
  deriving stock (Show, Eq, Generic)

instance Validity LinesOfTextGroupElem

instance IsComponent LinesOfTextGroupElem where
  toComponentFields ((LinesOfTextGroupElem {..})) = mconcat [requiredFieldB linesOfTextGroupElemText]
  fromComponentFields = do
    linesOfTextGroupElemText <- requiredFieldP
    pure (LinesOfTextGroupElem {..})

instance IsGroupElement LinesOfTextGroupElem where
  type GroupNumField LinesOfTextGroupElem = NoLinesOfText
  mkGroupNum Proxy = NoLinesOfText
  countGroupNum Proxy = unNoLinesOfText

makeLinesOfTextGroupElem :: Text -> LinesOfTextGroupElem
makeLinesOfTextGroupElem linesOfTextGroupElemText =
  let
   in (LinesOfTextGroupElem {..})
