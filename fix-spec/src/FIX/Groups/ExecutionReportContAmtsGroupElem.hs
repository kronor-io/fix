{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.ExecutionReportContAmtsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.ContAmtCurr
import FIX.Fields.ContAmtType
import FIX.Fields.ContAmtValue
import FIX.Fields.MsgType
import FIX.Fields.NoContAmts
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "ExecutionReportContAmts"
--   , groupNumberField = "NoContAmts"
--   , groupPieces =
--       [ MessagePieceField "ContAmtType" True
--       , MessagePieceField "ContAmtValue" False
--       , MessagePieceField "ContAmtCurr" False
--       ]
--   }
data ExecutionReportContAmtsGroupElem = ExecutionReportContAmtsGroupElem
  { executionReportContAmtsGroupElemContAmtType :: !ContAmtType,
    executionReportContAmtsGroupElemContAmtValue :: !(Maybe ContAmtValue),
    executionReportContAmtsGroupElemContAmtCurr :: !(Maybe ContAmtCurr)
  }
  deriving stock (Show, Eq, Generic)

instance Validity ExecutionReportContAmtsGroupElem

instance IsComponent ExecutionReportContAmtsGroupElem where
  toComponentFields ((ExecutionReportContAmtsGroupElem {..})) =
    mconcat
      [ requiredFieldB executionReportContAmtsGroupElemContAmtType,
        optionalFieldB executionReportContAmtsGroupElemContAmtValue,
        optionalFieldB executionReportContAmtsGroupElemContAmtCurr
      ]
  fromComponentFields = do
    executionReportContAmtsGroupElemContAmtType <- requiredFieldP
    executionReportContAmtsGroupElemContAmtValue <- optionalFieldP
    executionReportContAmtsGroupElemContAmtCurr <- optionalFieldP
    pure (ExecutionReportContAmtsGroupElem {..})

instance IsGroupElement ExecutionReportContAmtsGroupElem where
  type GroupNumField ExecutionReportContAmtsGroupElem = NoContAmts
  mkGroupNum Proxy = NoContAmts
  countGroupNum Proxy = unNoContAmts

makeExecutionReportContAmtsGroupElem :: ContAmtType -> ExecutionReportContAmtsGroupElem
makeExecutionReportContAmtsGroupElem executionReportContAmtsGroupElemContAmtType =
  let executionReportContAmtsGroupElemContAmtValue = Nothing
      executionReportContAmtsGroupElemContAmtCurr = Nothing
   in (ExecutionReportContAmtsGroupElem {..})
