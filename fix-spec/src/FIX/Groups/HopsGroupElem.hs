{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.HopsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.HopCompID
import FIX.Fields.HopRefID
import FIX.Fields.HopSendingTime
import FIX.Fields.MsgType
import FIX.Fields.NoHops
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "Hops"
--   , groupNumberField = "NoHops"
--   , groupPieces =
--       [ MessagePieceField "HopCompID" True
--       , MessagePieceField "HopSendingTime" False
--       , MessagePieceField "HopRefID" False
--       ]
--   }
data HopsGroupElem = HopsGroupElem
  { hopsGroupElemHopCompID :: !HopCompID,
    hopsGroupElemHopSendingTime :: !(Maybe HopSendingTime),
    hopsGroupElemHopRefID :: !(Maybe HopRefID)
  }
  deriving stock (Show, Eq, Generic)

instance Validity HopsGroupElem

instance IsComponent HopsGroupElem where
  toComponentFields ((HopsGroupElem {..})) =
    mconcat
      [ requiredFieldB hopsGroupElemHopCompID,
        optionalFieldB hopsGroupElemHopSendingTime,
        optionalFieldB hopsGroupElemHopRefID
      ]
  fromComponentFields = do
    hopsGroupElemHopCompID <- requiredFieldP
    hopsGroupElemHopSendingTime <- optionalFieldP
    hopsGroupElemHopRefID <- optionalFieldP
    pure (HopsGroupElem {..})

instance IsGroupElement HopsGroupElem where
  type GroupNumField HopsGroupElem = NoHops
  mkGroupNum Proxy = NoHops
  countGroupNum Proxy = unNoHops

makeHopsGroupElem :: HopCompID -> HopsGroupElem
makeHopsGroupElem hopsGroupElemHopCompID =
  let hopsGroupElemHopSendingTime = Nothing
      hopsGroupElemHopRefID = Nothing
   in (HopsGroupElem {..})
