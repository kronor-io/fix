{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteEntriesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.FinancingDetails
import FIX.Components.Instrument
import FIX.Fields.MsgType
import FIX.Fields.NoQuoteEntries
import FIX.Groups.Class
import FIX.Groups.LegsGroupElem
import FIX.Groups.UnderlyingsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteEntries"
--   , groupNumberField = "NoQuoteEntries"
--   , groupPieces =
--       [ MessagePieceComponent "Instrument" True
--       , MessagePieceComponent "FinancingDetails" True
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "Underlyings"
--             , groupNumberField = "NoUnderlyings"
--             , groupPieces =
--                 [ MessagePieceComponent "UnderlyingInstrument" True ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "Legs"
--             , groupNumberField = "NoLegs"
--             , groupPieces = [ MessagePieceComponent "InstrumentLeg" True ]
--             }
--           False
--       ]
--   }
data QuoteEntriesGroupElem = QuoteEntriesGroupElem
  { quoteEntriesGroupElemInstrument :: !Instrument,
    quoteEntriesGroupElemFinancingDetails :: !FinancingDetails,
    quoteEntriesGroupElemUnderlyingsGroup :: ![UnderlyingsGroupElem],
    quoteEntriesGroupElemLegsGroup :: ![LegsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteEntriesGroupElem

instance IsComponent QuoteEntriesGroupElem where
  toComponentFields ((QuoteEntriesGroupElem {..})) =
    mconcat
      [ requiredComponentB quoteEntriesGroupElemInstrument,
        requiredComponentB quoteEntriesGroupElemFinancingDetails,
        optionalGroupB quoteEntriesGroupElemUnderlyingsGroup,
        optionalGroupB quoteEntriesGroupElemLegsGroup
      ]
  fromComponentFields = do
    quoteEntriesGroupElemInstrument <- requiredComponentP
    quoteEntriesGroupElemFinancingDetails <- requiredComponentP
    quoteEntriesGroupElemUnderlyingsGroup <- optionalGroupP
    quoteEntriesGroupElemLegsGroup <- optionalGroupP
    pure (QuoteEntriesGroupElem {..})

instance IsGroupElement QuoteEntriesGroupElem where
  type GroupNumField QuoteEntriesGroupElem = NoQuoteEntries
  mkGroupNum Proxy = NoQuoteEntries
  countGroupNum Proxy = unNoQuoteEntries

makeQuoteEntriesGroupElem :: Instrument -> (FinancingDetails -> QuoteEntriesGroupElem)
makeQuoteEntriesGroupElem quoteEntriesGroupElemInstrument quoteEntriesGroupElemFinancingDetails =
  let quoteEntriesGroupElemUnderlyingsGroup = []
      quoteEntriesGroupElemLegsGroup = []
   in (QuoteEntriesGroupElem {..})
