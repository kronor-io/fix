{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderMultilegLegsLegStipulationsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.LegStipulationType
import FIX.Fields.LegStipulationValue
import FIX.Fields.MsgType
import FIX.Fields.NoLegStipulations
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderMultilegLegsLegStipulations"
--   , groupNumberField = "NoLegStipulations"
--   , groupPieces =
--       [ MessagePieceField "LegStipulationType" True
--       , MessagePieceField "LegStipulationValue" False
--       ]
--   }
data NewOrderMultilegLegsLegStipulationsGroupElem = NewOrderMultilegLegsLegStipulationsGroupElem
  { newOrderMultilegLegsLegStipulationsGroupElemLegStipulationType :: !LegStipulationType,
    newOrderMultilegLegsLegStipulationsGroupElemLegStipulationValue :: !(Maybe LegStipulationValue)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderMultilegLegsLegStipulationsGroupElem

instance IsComponent NewOrderMultilegLegsLegStipulationsGroupElem where
  toComponentFields ((NewOrderMultilegLegsLegStipulationsGroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderMultilegLegsLegStipulationsGroupElemLegStipulationType,
        optionalFieldB newOrderMultilegLegsLegStipulationsGroupElemLegStipulationValue
      ]
  fromComponentFields = do
    newOrderMultilegLegsLegStipulationsGroupElemLegStipulationType <- requiredFieldP
    newOrderMultilegLegsLegStipulationsGroupElemLegStipulationValue <- optionalFieldP
    pure (NewOrderMultilegLegsLegStipulationsGroupElem {..})

instance IsGroupElement NewOrderMultilegLegsLegStipulationsGroupElem where
  type GroupNumField NewOrderMultilegLegsLegStipulationsGroupElem = NoLegStipulations
  mkGroupNum Proxy = NoLegStipulations
  countGroupNum Proxy = unNoLegStipulations

makeNewOrderMultilegLegsLegStipulationsGroupElem :: LegStipulationType -> NewOrderMultilegLegsLegStipulationsGroupElem
makeNewOrderMultilegLegsLegStipulationsGroupElem newOrderMultilegLegsLegStipulationsGroupElemLegStipulationType =
  let newOrderMultilegLegsLegStipulationsGroupElemLegStipulationValue = Nothing
   in (NewOrderMultilegLegsLegStipulationsGroupElem {..})
