{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.LegSecAltIDGrpGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.LegSecurityAltID
import FIX.Fields.LegSecurityAltIDSource
import FIX.Fields.MsgType
import FIX.Fields.NoLegSecurityAltID
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "LegSecAltIDGrp"
--   , groupNumberField = "NoLegSecurityAltID"
--   , groupPieces =
--       [ MessagePieceField "LegSecurityAltID" True
--       , MessagePieceField "LegSecurityAltIDSource" False
--       ]
--   }
data LegSecAltIDGrpGroupElem = LegSecAltIDGrpGroupElem
  { legSecAltIDGrpGroupElemLegSecurityAltID :: !LegSecurityAltID,
    legSecAltIDGrpGroupElemLegSecurityAltIDSource :: !(Maybe LegSecurityAltIDSource)
  }
  deriving stock (Show, Eq, Generic)

instance Validity LegSecAltIDGrpGroupElem

instance IsComponent LegSecAltIDGrpGroupElem where
  toComponentFields ((LegSecAltIDGrpGroupElem {..})) =
    mconcat
      [ requiredFieldB legSecAltIDGrpGroupElemLegSecurityAltID,
        optionalFieldB legSecAltIDGrpGroupElemLegSecurityAltIDSource
      ]
  fromComponentFields = do
    legSecAltIDGrpGroupElemLegSecurityAltID <- requiredFieldP
    legSecAltIDGrpGroupElemLegSecurityAltIDSource <- optionalFieldP
    pure (LegSecAltIDGrpGroupElem {..})

instance IsGroupElement LegSecAltIDGrpGroupElem where
  type GroupNumField LegSecAltIDGrpGroupElem = NoLegSecurityAltID
  mkGroupNum Proxy = NoLegSecurityAltID
  countGroupNum Proxy = unNoLegSecurityAltID
