{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderSingleAllocsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.AllocAccount
import FIX.Fields.AllocAcctIDSource
import FIX.Fields.AllocQty
import FIX.Fields.AllocSettlCurrency
import FIX.Fields.IndividualAllocID
import FIX.Fields.MsgType
import FIX.Fields.NoAllocs
import FIX.Groups.Class
import FIX.Groups.NewOrderSingleAllocsNestedPartiesGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderSingleAllocs"
--   , groupNumberField = "NoAllocs"
--   , groupPieces =
--       [ MessagePieceField "AllocAccount" True
--       , MessagePieceField "AllocAcctIDSource" False
--       , MessagePieceField "AllocSettlCurrency" False
--       , MessagePieceField "IndividualAllocID" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewOrderSingleAllocsNestedParties"
--             , groupNumberField = "NoNestedPartyIDs"
--             , groupPieces =
--                 [ MessagePieceField "NestedPartyID" True
--                 , MessagePieceField "NestedPartyIDSource" False
--                 , MessagePieceField "NestedPartyRole" False
--                 , MessagePieceField "NestedPartyRoleQualifier" False
--                 , MessagePieceGroup
--                     GroupSpec
--                       { groupName = "NewOrderSingleAllocsNestedPartiesNestedPartySubIDs"
--                       , groupNumberField = "NoNestedPartySubIDs"
--                       , groupPieces =
--                           [ MessagePieceField "NestedPartySubID" True
--                           , MessagePieceField "NestedPartySubIDType" False
--                           ]
--                       }
--                     False
--                 ]
--             }
--           False
--       , MessagePieceField "AllocQty" False
--       ]
--   }
data NewOrderSingleAllocsGroupElem = NewOrderSingleAllocsGroupElem
  { newOrderSingleAllocsGroupElemAllocAccount :: !AllocAccount,
    newOrderSingleAllocsGroupElemAllocAcctIDSource :: !(Maybe AllocAcctIDSource),
    newOrderSingleAllocsGroupElemAllocSettlCurrency :: !(Maybe AllocSettlCurrency),
    newOrderSingleAllocsGroupElemIndividualAllocID :: !(Maybe IndividualAllocID),
    newOrderSingleAllocsGroupElemNewOrderSingleAllocsNestedPartiesGroup :: ![NewOrderSingleAllocsNestedPartiesGroupElem],
    newOrderSingleAllocsGroupElemAllocQty :: !(Maybe AllocQty)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderSingleAllocsGroupElem

instance IsComponent NewOrderSingleAllocsGroupElem where
  toComponentFields ((NewOrderSingleAllocsGroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderSingleAllocsGroupElemAllocAccount,
        optionalFieldB newOrderSingleAllocsGroupElemAllocAcctIDSource,
        optionalFieldB newOrderSingleAllocsGroupElemAllocSettlCurrency,
        optionalFieldB newOrderSingleAllocsGroupElemIndividualAllocID,
        optionalGroupB newOrderSingleAllocsGroupElemNewOrderSingleAllocsNestedPartiesGroup,
        optionalFieldB newOrderSingleAllocsGroupElemAllocQty
      ]
  fromComponentFields = do
    newOrderSingleAllocsGroupElemAllocAccount <- requiredFieldP
    newOrderSingleAllocsGroupElemAllocAcctIDSource <- optionalFieldP
    newOrderSingleAllocsGroupElemAllocSettlCurrency <- optionalFieldP
    newOrderSingleAllocsGroupElemIndividualAllocID <- optionalFieldP
    newOrderSingleAllocsGroupElemNewOrderSingleAllocsNestedPartiesGroup <- optionalGroupP
    newOrderSingleAllocsGroupElemAllocQty <- optionalFieldP
    pure (NewOrderSingleAllocsGroupElem {..})

instance IsGroupElement NewOrderSingleAllocsGroupElem where
  type GroupNumField NewOrderSingleAllocsGroupElem = NoAllocs
  mkGroupNum Proxy = NoAllocs
  countGroupNum Proxy = unNoAllocs

makeNewOrderSingleAllocsGroupElem :: AllocAccount -> NewOrderSingleAllocsGroupElem
makeNewOrderSingleAllocsGroupElem newOrderSingleAllocsGroupElemAllocAccount =
  let newOrderSingleAllocsGroupElemAllocAcctIDSource = Nothing
      newOrderSingleAllocsGroupElemAllocSettlCurrency = Nothing
      newOrderSingleAllocsGroupElemIndividualAllocID = Nothing
      newOrderSingleAllocsGroupElemNewOrderSingleAllocsNestedPartiesGroup = []
      newOrderSingleAllocsGroupElemAllocQty = Nothing
   in (NewOrderSingleAllocsGroupElem {..})
