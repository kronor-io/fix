{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.InstrumentSecurityAltIDGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoSecurityAltID
import FIX.Fields.SecurityAltID
import FIX.Fields.SecurityAltIDSource
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "InstrumentSecurityAltID"
--   , groupNumberField = "NoSecurityAltID"
--   , groupPieces =
--       [ MessagePieceField "SecurityAltID" True
--       , MessagePieceField "SecurityAltIDSource" False
--       ]
--   }
data InstrumentSecurityAltIDGroupElem = InstrumentSecurityAltIDGroupElem
  { instrumentSecurityAltIDGroupElemSecurityAltID :: !SecurityAltID,
    instrumentSecurityAltIDGroupElemSecurityAltIDSource :: !(Maybe SecurityAltIDSource)
  }
  deriving stock (Show, Eq, Generic)

instance Validity InstrumentSecurityAltIDGroupElem

instance IsComponent InstrumentSecurityAltIDGroupElem where
  toComponentFields ((InstrumentSecurityAltIDGroupElem {..})) =
    mconcat
      [ requiredFieldB instrumentSecurityAltIDGroupElemSecurityAltID,
        optionalFieldB instrumentSecurityAltIDGroupElemSecurityAltIDSource
      ]
  fromComponentFields = do
    instrumentSecurityAltIDGroupElemSecurityAltID <- requiredFieldP
    instrumentSecurityAltIDGroupElemSecurityAltIDSource <- optionalFieldP
    pure (InstrumentSecurityAltIDGroupElem {..})

instance IsGroupElement InstrumentSecurityAltIDGroupElem where
  type GroupNumField InstrumentSecurityAltIDGroupElem = NoSecurityAltID
  mkGroupNum Proxy = NoSecurityAltID
  countGroupNum Proxy = unNoSecurityAltID

makeInstrumentSecurityAltIDGroupElem :: SecurityAltID -> InstrumentSecurityAltIDGroupElem
makeInstrumentSecurityAltIDGroupElem instrumentSecurityAltIDGroupElemSecurityAltID =
  let instrumentSecurityAltIDGroupElemSecurityAltIDSource = Nothing
   in (InstrumentSecurityAltIDGroupElem {..})
