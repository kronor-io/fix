{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.PartiesGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartyIDs
import FIX.Fields.PartyID
import FIX.Fields.PartyIDSource
import FIX.Fields.PartyRole
import FIX.Groups.Class
import FIX.Groups.PtysSubGrpGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "Parties"
--   , groupNumberField = "NoPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "PartyID" True
--       , MessagePieceField "PartyIDSource" False
--       , MessagePieceField "PartyRole" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "PtysSubGrp"
--             , groupNumberField = "NoPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "PartySubID" True
--                 , MessagePieceField "PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data PartiesGroupElem = PartiesGroupElem
  { partiesGroupElemPartyID :: !PartyID,
    partiesGroupElemPartyIDSource :: !(Maybe PartyIDSource),
    partiesGroupElemPartyRole :: !(Maybe PartyRole),
    partiesGroupElemPtysSubGrpGroup :: ![PtysSubGrpGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity PartiesGroupElem

instance IsComponent PartiesGroupElem where
  toComponentFields ((PartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB partiesGroupElemPartyID,
        optionalFieldB partiesGroupElemPartyIDSource,
        optionalFieldB partiesGroupElemPartyRole,
        optionalGroupB partiesGroupElemPtysSubGrpGroup
      ]
  fromComponentFields = do
    partiesGroupElemPartyID <- requiredFieldP
    partiesGroupElemPartyIDSource <- optionalFieldP
    partiesGroupElemPartyRole <- optionalFieldP
    partiesGroupElemPtysSubGrpGroup <- optionalGroupP
    pure (PartiesGroupElem {..})

instance IsGroupElement PartiesGroupElem where
  type GroupNumField PartiesGroupElem = NoPartyIDs
  mkGroupNum Proxy = NoPartyIDs
  countGroupNum Proxy = unNoPartyIDs

makePartiesGroupElem :: PartyID -> PartiesGroupElem
makePartiesGroupElem partiesGroupElemPartyID =
  let partiesGroupElemPartyIDSource = Nothing
      partiesGroupElemPartyRole = Nothing
      partiesGroupElemPtysSubGrpGroup = []
   in (PartiesGroupElem {..})
