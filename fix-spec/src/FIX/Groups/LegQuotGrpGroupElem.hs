{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.LegQuotGrpGroupElem where

import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.InstrumentLeg
import FIX.Components.LegBenchmarkCurveData
import FIX.Fields.LegBidPx
import FIX.Fields.LegOfferPx
import FIX.Fields.LegPriceType
import FIX.Fields.LegQty
import FIX.Fields.LegSettlDate
import FIX.Fields.LegSettlType
import FIX.Fields.LegSwapType
import FIX.Fields.MsgType
import FIX.Fields.NoLegs
import FIX.Groups.Class
import FIX.Groups.LegStipulationsGroupElem
import FIX.Groups.NestedPartiesGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "LegQuotGrp"
--   , groupNumberField = "NoLegs"
--   , groupPieces =
--       [ MessagePieceComponent "InstrumentLeg" True
--       , MessagePieceField "LegQty" False
--       , MessagePieceField "LegSwapType" False
--       , MessagePieceField "LegSettlType" False
--       , MessagePieceField "LegSettlDate" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "LegStipulations"
--             , groupNumberField = "NoLegStipulations"
--             , groupPieces =
--                 [ MessagePieceField "LegStipulationType" True
--                 , MessagePieceField "LegStipulationValue" False
--                 ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NestedParties"
--             , groupNumberField = "NoNestedPartyIDs"
--             , groupPieces =
--                 [ MessagePieceField "NestedPartyID" True
--                 , MessagePieceField "NestedPartyIDSource" False
--                 , MessagePieceField "NestedPartyRole" False
--                 , MessagePieceGroup
--                     GroupSpec
--                       { groupName = "NstdPtysSubGrp"
--                       , groupNumberField = "NoNestedPartySubIDs"
--                       , groupPieces =
--                           [ MessagePieceField "NestedPartySubID" True
--                           , MessagePieceField "NestedPartySubIDType" False
--                           ]
--                       }
--                     False
--                 ]
--             }
--           False
--       , MessagePieceField "LegPriceType" False
--       , MessagePieceField "LegBidPx" False
--       , MessagePieceField "LegOfferPx" False
--       , MessagePieceComponent "LegBenchmarkCurveData" True
--       ]
--   }
data LegQuotGrpGroupElem = LegQuotGrpGroupElem
  { legQuotGrpGroupElemInstrumentLeg :: !InstrumentLeg,
    legQuotGrpGroupElemLegQty :: !(Maybe LegQty),
    legQuotGrpGroupElemLegSwapType :: !(Maybe LegSwapType),
    legQuotGrpGroupElemLegSettlType :: !(Maybe LegSettlType),
    legQuotGrpGroupElemLegSettlDate :: !(Maybe LegSettlDate),
    legQuotGrpGroupElemLegStipulationsGroup :: ![LegStipulationsGroupElem],
    legQuotGrpGroupElemNestedPartiesGroup :: ![NestedPartiesGroupElem],
    legQuotGrpGroupElemLegPriceType :: !(Maybe LegPriceType),
    legQuotGrpGroupElemLegBidPx :: !(Maybe LegBidPx),
    legQuotGrpGroupElemLegOfferPx :: !(Maybe LegOfferPx),
    legQuotGrpGroupElemLegBenchmarkCurveData :: !LegBenchmarkCurveData
  }
  deriving stock (Show, Eq, Generic)

instance Validity LegQuotGrpGroupElem

instance IsComponent LegQuotGrpGroupElem where
  toComponentFields ((LegQuotGrpGroupElem {..})) =
    mconcat
      [ requiredComponentB legQuotGrpGroupElemInstrumentLeg,
        optionalFieldB legQuotGrpGroupElemLegQty,
        optionalFieldB legQuotGrpGroupElemLegSwapType,
        optionalFieldB legQuotGrpGroupElemLegSettlType,
        optionalFieldB legQuotGrpGroupElemLegSettlDate,
        optionalGroupB legQuotGrpGroupElemLegStipulationsGroup,
        optionalGroupB legQuotGrpGroupElemNestedPartiesGroup,
        optionalFieldB legQuotGrpGroupElemLegPriceType,
        optionalFieldB legQuotGrpGroupElemLegBidPx,
        optionalFieldB legQuotGrpGroupElemLegOfferPx,
        requiredComponentB legQuotGrpGroupElemLegBenchmarkCurveData
      ]
  fromComponentFields = do
    legQuotGrpGroupElemInstrumentLeg <- requiredComponentP
    legQuotGrpGroupElemLegQty <- optionalFieldP
    legQuotGrpGroupElemLegSwapType <- optionalFieldP
    legQuotGrpGroupElemLegSettlType <- optionalFieldP
    legQuotGrpGroupElemLegSettlDate <- optionalFieldP
    legQuotGrpGroupElemLegStipulationsGroup <- optionalGroupP
    legQuotGrpGroupElemNestedPartiesGroup <- optionalGroupP
    legQuotGrpGroupElemLegPriceType <- optionalFieldP
    legQuotGrpGroupElemLegBidPx <- optionalFieldP
    legQuotGrpGroupElemLegOfferPx <- optionalFieldP
    legQuotGrpGroupElemLegBenchmarkCurveData <- requiredComponentP
    pure (LegQuotGrpGroupElem {..})

instance IsGroupElement LegQuotGrpGroupElem where
  type GroupNumField LegQuotGrpGroupElem = NoLegs
  mkGroupNum Proxy = NoLegs
  countGroupNum Proxy = unNoLegs

makeLegQuotGrpGroupElem :: InstrumentLeg -> (LegBenchmarkCurveData -> LegQuotGrpGroupElem)
makeLegQuotGrpGroupElem legQuotGrpGroupElemInstrumentLeg legQuotGrpGroupElemLegBenchmarkCurveData =
  let legQuotGrpGroupElemLegQty = Nothing
      legQuotGrpGroupElemLegSwapType = Nothing
      legQuotGrpGroupElemLegSettlType = Nothing
      legQuotGrpGroupElemLegSettlDate = Nothing
      legQuotGrpGroupElemLegStipulationsGroup = []
      legQuotGrpGroupElemNestedPartiesGroup = []
      legQuotGrpGroupElemLegPriceType = Nothing
      legQuotGrpGroupElemLegBidPx = Nothing
      legQuotGrpGroupElemLegOfferPx = Nothing
   in (LegQuotGrpGroupElem {..})
