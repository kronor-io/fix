{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NestedPartySubID
import FIX.Fields.NestedPartySubIDType
import FIX.Fields.NoNestedPartySubIDs
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName =
--       "QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDs"
--   , groupNumberField = "NoNestedPartySubIDs"
--   , groupPieces =
--       [ MessagePieceField "NestedPartySubID" True
--       , MessagePieceField "NestedPartySubIDType" False
--       ]
--   }
data QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem = QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem
  { quoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElemNestedPartySubID :: !NestedPartySubID,
    quoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElemNestedPartySubIDType :: !(Maybe NestedPartySubIDType)
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem

instance IsComponent QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem where
  toComponentFields ((QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElemNestedPartySubID,
        optionalFieldB quoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElemNestedPartySubIDType
      ]
  fromComponentFields = do
    quoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElemNestedPartySubID <- requiredFieldP
    quoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElemNestedPartySubIDType <- optionalFieldP
    pure (QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem {..})

instance IsGroupElement QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem where
  type GroupNumField QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem = NoNestedPartySubIDs
  mkGroupNum Proxy = NoNestedPartySubIDs
  countGroupNum Proxy = unNoNestedPartySubIDs

makeQuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem :: NestedPartySubID -> QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem
makeQuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem quoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElemNestedPartySubID =
  let quoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElemNestedPartySubIDType = Nothing
   in (QuoteRequestRejectRelatedSymLegsNestedPartiesNestedPartySubIDsGroupElem {..})
