{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.NewOrderMultilegPartiesGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoPartyIDs
import FIX.Fields.PartyID
import FIX.Fields.PartyIDSource
import FIX.Fields.PartyRole
import FIX.Fields.PartyRoleQualifier
import FIX.Groups.Class
import FIX.Groups.NewOrderMultilegPartiesPartySubIDsGroupElem
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NewOrderMultilegParties"
--   , groupNumberField = "NoPartyIDs"
--   , groupPieces =
--       [ MessagePieceField "PartyID" True
--       , MessagePieceField "PartyIDSource" False
--       , MessagePieceField "PartyRole" False
--       , MessagePieceField "PartyRoleQualifier" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewOrderMultilegPartiesPartySubIDs"
--             , groupNumberField = "NoPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "PartySubID" True
--                 , MessagePieceField "PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data NewOrderMultilegPartiesGroupElem = NewOrderMultilegPartiesGroupElem
  { newOrderMultilegPartiesGroupElemPartyID :: !PartyID,
    newOrderMultilegPartiesGroupElemPartyIDSource :: !(Maybe PartyIDSource),
    newOrderMultilegPartiesGroupElemPartyRole :: !(Maybe PartyRole),
    newOrderMultilegPartiesGroupElemPartyRoleQualifier :: !(Maybe PartyRoleQualifier),
    newOrderMultilegPartiesGroupElemNewOrderMultilegPartiesPartySubIDsGroup :: ![NewOrderMultilegPartiesPartySubIDsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderMultilegPartiesGroupElem

instance IsComponent NewOrderMultilegPartiesGroupElem where
  toComponentFields ((NewOrderMultilegPartiesGroupElem {..})) =
    mconcat
      [ requiredFieldB newOrderMultilegPartiesGroupElemPartyID,
        optionalFieldB newOrderMultilegPartiesGroupElemPartyIDSource,
        optionalFieldB newOrderMultilegPartiesGroupElemPartyRole,
        optionalFieldB newOrderMultilegPartiesGroupElemPartyRoleQualifier,
        optionalGroupB newOrderMultilegPartiesGroupElemNewOrderMultilegPartiesPartySubIDsGroup
      ]
  fromComponentFields = do
    newOrderMultilegPartiesGroupElemPartyID <- requiredFieldP
    newOrderMultilegPartiesGroupElemPartyIDSource <- optionalFieldP
    newOrderMultilegPartiesGroupElemPartyRole <- optionalFieldP
    newOrderMultilegPartiesGroupElemPartyRoleQualifier <- optionalFieldP
    newOrderMultilegPartiesGroupElemNewOrderMultilegPartiesPartySubIDsGroup <- optionalGroupP
    pure (NewOrderMultilegPartiesGroupElem {..})

instance IsGroupElement NewOrderMultilegPartiesGroupElem where
  type GroupNumField NewOrderMultilegPartiesGroupElem = NoPartyIDs
  mkGroupNum Proxy = NoPartyIDs
  countGroupNum Proxy = unNoPartyIDs

makeNewOrderMultilegPartiesGroupElem :: PartyID -> NewOrderMultilegPartiesGroupElem
makeNewOrderMultilegPartiesGroupElem newOrderMultilegPartiesGroupElemPartyID =
  let newOrderMultilegPartiesGroupElemPartyIDSource = Nothing
      newOrderMultilegPartiesGroupElemPartyRole = Nothing
      newOrderMultilegPartiesGroupElemPartyRoleQualifier = Nothing
      newOrderMultilegPartiesGroupElemNewOrderMultilegPartiesPartySubIDsGroup = []
   in (NewOrderMultilegPartiesGroupElem {..})
