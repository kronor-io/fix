{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.QuoteRequestRegulatoryTradeIDsGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NoRegulatoryTradeIDs
import FIX.Fields.RegulatoryTradeID
import FIX.Fields.RegulatoryTradeIDType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "QuoteRequestRegulatoryTradeIDs"
--   , groupNumberField = "NoRegulatoryTradeIDs"
--   , groupPieces =
--       [ MessagePieceField "RegulatoryTradeID" True
--       , MessagePieceField "RegulatoryTradeIDType" False
--       ]
--   }
data QuoteRequestRegulatoryTradeIDsGroupElem = QuoteRequestRegulatoryTradeIDsGroupElem
  { quoteRequestRegulatoryTradeIDsGroupElemRegulatoryTradeID :: !RegulatoryTradeID,
    quoteRequestRegulatoryTradeIDsGroupElemRegulatoryTradeIDType :: !(Maybe RegulatoryTradeIDType)
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestRegulatoryTradeIDsGroupElem

instance IsComponent QuoteRequestRegulatoryTradeIDsGroupElem where
  toComponentFields ((QuoteRequestRegulatoryTradeIDsGroupElem {..})) =
    mconcat
      [ requiredFieldB quoteRequestRegulatoryTradeIDsGroupElemRegulatoryTradeID,
        optionalFieldB quoteRequestRegulatoryTradeIDsGroupElemRegulatoryTradeIDType
      ]
  fromComponentFields = do
    quoteRequestRegulatoryTradeIDsGroupElemRegulatoryTradeID <- requiredFieldP
    quoteRequestRegulatoryTradeIDsGroupElemRegulatoryTradeIDType <- optionalFieldP
    pure (QuoteRequestRegulatoryTradeIDsGroupElem {..})

instance IsGroupElement QuoteRequestRegulatoryTradeIDsGroupElem where
  type GroupNumField QuoteRequestRegulatoryTradeIDsGroupElem = NoRegulatoryTradeIDs
  mkGroupNum Proxy = NoRegulatoryTradeIDs
  countGroupNum Proxy = unNoRegulatoryTradeIDs

makeQuoteRequestRegulatoryTradeIDsGroupElem :: RegulatoryTradeID -> QuoteRequestRegulatoryTradeIDsGroupElem
makeQuoteRequestRegulatoryTradeIDsGroupElem quoteRequestRegulatoryTradeIDsGroupElemRegulatoryTradeID =
  let quoteRequestRegulatoryTradeIDsGroupElemRegulatoryTradeIDType = Nothing
   in (QuoteRequestRegulatoryTradeIDsGroupElem {..})
