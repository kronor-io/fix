{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Groups.RelatedSymGroupElem where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.Instrument
import FIX.Fields.MsgType
import FIX.Fields.NoRelatedSym
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | GroupSpec
--   { groupName = "NoRelatedSym"
--   , groupNumberField = "NoRelatedSym"
--   , groupPieces = [ MessagePieceComponent "Instrument" True ]
--   }
data RelatedSymGroupElem = RelatedSymGroupElem {relatedSymGroupElemInstrument :: !Instrument}
  deriving stock (Show, Eq, Generic)

instance Validity RelatedSymGroupElem

instance IsComponent RelatedSymGroupElem where
  toComponentFields ((RelatedSymGroupElem {..})) = mconcat [requiredComponentB relatedSymGroupElemInstrument]
  fromComponentFields = do
    relatedSymGroupElemInstrument <- requiredComponentP
    pure (RelatedSymGroupElem {..})

instance IsGroupElement RelatedSymGroupElem where
  type GroupNumField RelatedSymGroupElem = NoRelatedSym
  mkGroupNum Proxy = NoRelatedSym
  countGroupNum Proxy = unNoRelatedSym

makeRelatedSymGroupElem :: Instrument -> RelatedSymGroupElem
makeRelatedSymGroupElem relatedSymGroupElemInstrument =
  let
   in (RelatedSymGroupElem {..})
