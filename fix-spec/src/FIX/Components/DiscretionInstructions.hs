{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Components.DiscretionInstructions where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.DiscretionInst
import FIX.Fields.DiscretionLimitType
import FIX.Fields.DiscretionMoveType
import FIX.Fields.DiscretionOffsetType
import FIX.Fields.DiscretionOffsetValue
import FIX.Fields.DiscretionRoundDirection
import FIX.Fields.DiscretionScope
import FIX.Fields.MsgType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | ComponentSpec
--   { componentName = "DiscretionInstructions"
--   , componentPieces =
--       [ MessagePieceField "DiscretionInst" False
--       , MessagePieceField "DiscretionOffsetValue" False
--       , MessagePieceField "DiscretionMoveType" False
--       , MessagePieceField "DiscretionOffsetType" False
--       , MessagePieceField "DiscretionLimitType" False
--       , MessagePieceField "DiscretionRoundDirection" False
--       , MessagePieceField "DiscretionScope" False
--       ]
--   }
data DiscretionInstructions = DiscretionInstructions
  { discretionInstructionsDiscretionInst :: !(Maybe DiscretionInst),
    discretionInstructionsDiscretionOffsetValue :: !(Maybe DiscretionOffsetValue),
    discretionInstructionsDiscretionMoveType :: !(Maybe DiscretionMoveType),
    discretionInstructionsDiscretionOffsetType :: !(Maybe DiscretionOffsetType),
    discretionInstructionsDiscretionLimitType :: !(Maybe DiscretionLimitType),
    discretionInstructionsDiscretionRoundDirection :: !(Maybe DiscretionRoundDirection),
    discretionInstructionsDiscretionScope :: !(Maybe DiscretionScope)
  }
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionInstructions

instance IsComponent DiscretionInstructions where
  toComponentFields ((DiscretionInstructions {..})) =
    mconcat
      [ optionalFieldB discretionInstructionsDiscretionInst,
        optionalFieldB discretionInstructionsDiscretionOffsetValue,
        optionalFieldB discretionInstructionsDiscretionMoveType,
        optionalFieldB discretionInstructionsDiscretionOffsetType,
        optionalFieldB discretionInstructionsDiscretionLimitType,
        optionalFieldB discretionInstructionsDiscretionRoundDirection,
        optionalFieldB discretionInstructionsDiscretionScope
      ]
  fromComponentFields = do
    discretionInstructionsDiscretionInst <- optionalFieldP
    discretionInstructionsDiscretionOffsetValue <- optionalFieldP
    discretionInstructionsDiscretionMoveType <- optionalFieldP
    discretionInstructionsDiscretionOffsetType <- optionalFieldP
    discretionInstructionsDiscretionLimitType <- optionalFieldP
    discretionInstructionsDiscretionRoundDirection <- optionalFieldP
    discretionInstructionsDiscretionScope <- optionalFieldP
    pure (DiscretionInstructions {..})

makeDiscretionInstructions :: DiscretionInstructions
makeDiscretionInstructions =
  let discretionInstructionsDiscretionInst = Nothing
      discretionInstructionsDiscretionOffsetValue = Nothing
      discretionInstructionsDiscretionMoveType = Nothing
      discretionInstructionsDiscretionOffsetType = Nothing
      discretionInstructionsDiscretionLimitType = Nothing
      discretionInstructionsDiscretionRoundDirection = Nothing
      discretionInstructionsDiscretionScope = Nothing
   in (DiscretionInstructions {..})
