{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Components.PegInstructions where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.PegLimitType
import FIX.Fields.PegMoveType
import FIX.Fields.PegOffsetType
import FIX.Fields.PegOffsetValue
import FIX.Fields.PegRoundDirection
import FIX.Fields.PegScope
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | ComponentSpec
--   { componentName = "PegInstructions"
--   , componentPieces =
--       [ MessagePieceField "PegOffsetValue" False
--       , MessagePieceField "PegMoveType" False
--       , MessagePieceField "PegOffsetType" False
--       , MessagePieceField "PegLimitType" False
--       , MessagePieceField "PegRoundDirection" False
--       , MessagePieceField "PegScope" False
--       ]
--   }
data PegInstructions = PegInstructions
  { pegInstructionsPegOffsetValue :: !(Maybe PegOffsetValue),
    pegInstructionsPegMoveType :: !(Maybe PegMoveType),
    pegInstructionsPegOffsetType :: !(Maybe PegOffsetType),
    pegInstructionsPegLimitType :: !(Maybe PegLimitType),
    pegInstructionsPegRoundDirection :: !(Maybe PegRoundDirection),
    pegInstructionsPegScope :: !(Maybe PegScope)
  }
  deriving stock (Show, Eq, Generic)

instance Validity PegInstructions

instance IsComponent PegInstructions where
  toComponentFields ((PegInstructions {..})) =
    mconcat
      [ optionalFieldB pegInstructionsPegOffsetValue,
        optionalFieldB pegInstructionsPegMoveType,
        optionalFieldB pegInstructionsPegOffsetType,
        optionalFieldB pegInstructionsPegLimitType,
        optionalFieldB pegInstructionsPegRoundDirection,
        optionalFieldB pegInstructionsPegScope
      ]
  fromComponentFields = do
    pegInstructionsPegOffsetValue <- optionalFieldP
    pegInstructionsPegMoveType <- optionalFieldP
    pegInstructionsPegOffsetType <- optionalFieldP
    pegInstructionsPegLimitType <- optionalFieldP
    pegInstructionsPegRoundDirection <- optionalFieldP
    pegInstructionsPegScope <- optionalFieldP
    pure (PegInstructions {..})

makePegInstructions :: PegInstructions
makePegInstructions =
  let pegInstructionsPegOffsetValue = Nothing
      pegInstructionsPegMoveType = Nothing
      pegInstructionsPegOffsetType = Nothing
      pegInstructionsPegLimitType = Nothing
      pegInstructionsPegRoundDirection = Nothing
      pegInstructionsPegScope = Nothing
   in (PegInstructions {..})
