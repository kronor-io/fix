{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Components.LegExAnteData where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.LegBidExAnteCost
import FIX.Fields.LegBidExAnteCostPercentage
import FIX.Fields.LegOfferExAnteCost
import FIX.Fields.LegOfferExAnteCostPercentage
import FIX.Fields.MsgType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | ComponentSpec
--   { componentName = "LegExAnteData"
--   , componentPieces =
--       [ MessagePieceField "LegBidExAnteCost" False
--       , MessagePieceField "LegOfferExAnteCost" False
--       , MessagePieceField "LegBidExAnteCostPercentage" False
--       , MessagePieceField "LegOfferExAnteCostPercentage" False
--       ]
--   }
data LegExAnteData = LegExAnteData
  { legExAnteDataLegBidExAnteCost :: !(Maybe LegBidExAnteCost),
    legExAnteDataLegOfferExAnteCost :: !(Maybe LegOfferExAnteCost),
    legExAnteDataLegBidExAnteCostPercentage :: !(Maybe LegBidExAnteCostPercentage),
    legExAnteDataLegOfferExAnteCostPercentage :: !(Maybe LegOfferExAnteCostPercentage)
  }
  deriving stock (Show, Eq, Generic)

instance Validity LegExAnteData

instance IsComponent LegExAnteData where
  toComponentFields ((LegExAnteData {..})) =
    mconcat
      [ optionalFieldB legExAnteDataLegBidExAnteCost,
        optionalFieldB legExAnteDataLegOfferExAnteCost,
        optionalFieldB legExAnteDataLegBidExAnteCostPercentage,
        optionalFieldB legExAnteDataLegOfferExAnteCostPercentage
      ]
  fromComponentFields = do
    legExAnteDataLegBidExAnteCost <- optionalFieldP
    legExAnteDataLegOfferExAnteCost <- optionalFieldP
    legExAnteDataLegBidExAnteCostPercentage <- optionalFieldP
    legExAnteDataLegOfferExAnteCostPercentage <- optionalFieldP
    pure (LegExAnteData {..})

makeLegExAnteData :: LegExAnteData
makeLegExAnteData =
  let legExAnteDataLegBidExAnteCost = Nothing
      legExAnteDataLegOfferExAnteCost = Nothing
      legExAnteDataLegBidExAnteCostPercentage = Nothing
      legExAnteDataLegOfferExAnteCostPercentage = Nothing
   in (LegExAnteData {..})
