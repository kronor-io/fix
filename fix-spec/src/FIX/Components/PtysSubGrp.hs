{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Components.PtysSubGrp where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Groups.Class
import FIX.Groups.PartySubIDsGroupElem
import GHC.Generics (Generic)

-- | ComponentSpec
--   { componentName = "PtysSubGrp"
--   , componentPieces =
--       [ MessagePieceGroup
--           GroupSpec
--             { groupName = "NoPartySubIDs"
--             , groupPieces =
--                 [ MessagePieceField "PartySubID" True
--                 , MessagePieceField "PartySubIDType" False
--                 ]
--             }
--           False
--       ]
--   }
data PtysSubGrp = PtysSubGrp {ptysSubGrpPartySubIDsGroup :: ![PartySubIDsGroupElem]}
  deriving stock (Show, Eq, Generic)

instance Validity PtysSubGrp

instance IsComponent PtysSubGrp where
  toComponentFields ((PtysSubGrp {..})) = mconcat [optionalGroupB ptysSubGrpPartySubIDsGroup]
  fromComponentFields = do
    ptysSubGrpPartySubIDsGroup <- optionalGroupP
    pure (PtysSubGrp {..})
