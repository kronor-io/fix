{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Components.QuotReqLegsGrp where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Groups.Class
import FIX.Groups.LegsGroupElem
import GHC.Generics (Generic)

-- | ComponentSpec
--   { componentName = "QuotReqLegsGrp"
--   , componentPieces =
--       [ MessagePieceGroup
--           GroupSpec
--             { groupName = "NoLegs"
--             , groupPieces =
--                 [ MessagePieceComponent "InstrumentLeg" True
--                 , MessagePieceField "LegQty" False
--                 , MessagePieceField "LegSwapType" False
--                 , MessagePieceField "LegSettlType" False
--                 , MessagePieceField "LegSettlDate" False
--                 , MessagePieceComponent "LegStipulations" True
--                 , MessagePieceComponent "NestedParties" True
--                 , MessagePieceComponent "LegBenchmarkCurveData" True
--                 ]
--             }
--           False
--       ]
--   }
data QuotReqLegsGrp = QuotReqLegsGrp {quotReqLegsGrpLegsGroup :: ![LegsGroupElem]}
  deriving stock (Show, Eq, Generic)

instance Validity QuotReqLegsGrp

instance IsComponent QuotReqLegsGrp where
  toComponentFields ((QuotReqLegsGrp {..})) = mconcat [optionalGroupB quotReqLegsGrpLegsGroup]
  fromComponentFields = do
    quotReqLegsGrpLegsGroup <- optionalGroupP
    pure (QuotReqLegsGrp {..})
