{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Components.FinancingDetails where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.AgreementCurrency
import FIX.Fields.AgreementDate
import FIX.Fields.AgreementDesc
import FIX.Fields.AgreementID
import FIX.Fields.DeliveryType
import FIX.Fields.EndDate
import FIX.Fields.MarginRatio
import FIX.Fields.MsgType
import FIX.Fields.StartDate
import FIX.Fields.TerminationType
import FIX.Groups.Class
import GHC.Generics (Generic)

-- | ComponentSpec
--   { componentName = "FinancingDetails"
--   , componentPieces =
--       [ MessagePieceField "AgreementDesc" False
--       , MessagePieceField "AgreementID" False
--       , MessagePieceField "AgreementDate" False
--       , MessagePieceField "AgreementCurrency" False
--       , MessagePieceField "TerminationType" False
--       , MessagePieceField "StartDate" False
--       , MessagePieceField "EndDate" False
--       , MessagePieceField "DeliveryType" False
--       , MessagePieceField "MarginRatio" False
--       ]
--   }
data FinancingDetails = FinancingDetails
  { financingDetailsAgreementDesc :: !(Maybe AgreementDesc),
    financingDetailsAgreementID :: !(Maybe AgreementID),
    financingDetailsAgreementDate :: !(Maybe AgreementDate),
    financingDetailsAgreementCurrency :: !(Maybe AgreementCurrency),
    financingDetailsTerminationType :: !(Maybe TerminationType),
    financingDetailsStartDate :: !(Maybe StartDate),
    financingDetailsEndDate :: !(Maybe EndDate),
    financingDetailsDeliveryType :: !(Maybe DeliveryType),
    financingDetailsMarginRatio :: !(Maybe MarginRatio)
  }
  deriving stock (Show, Eq, Generic)

instance Validity FinancingDetails

instance IsComponent FinancingDetails where
  toComponentFields ((FinancingDetails {..})) =
    mconcat
      [ optionalFieldB financingDetailsAgreementDesc,
        optionalFieldB financingDetailsAgreementID,
        optionalFieldB financingDetailsAgreementDate,
        optionalFieldB financingDetailsAgreementCurrency,
        optionalFieldB financingDetailsTerminationType,
        optionalFieldB financingDetailsStartDate,
        optionalFieldB financingDetailsEndDate,
        optionalFieldB financingDetailsDeliveryType,
        optionalFieldB financingDetailsMarginRatio
      ]
  fromComponentFields = do
    financingDetailsAgreementDesc <- optionalFieldP
    financingDetailsAgreementID <- optionalFieldP
    financingDetailsAgreementDate <- optionalFieldP
    financingDetailsAgreementCurrency <- optionalFieldP
    financingDetailsTerminationType <- optionalFieldP
    financingDetailsStartDate <- optionalFieldP
    financingDetailsEndDate <- optionalFieldP
    financingDetailsDeliveryType <- optionalFieldP
    financingDetailsMarginRatio <- optionalFieldP
    pure (FinancingDetails {..})

makeFinancingDetails :: FinancingDetails
makeFinancingDetails =
  let financingDetailsAgreementDesc = Nothing
      financingDetailsAgreementID = Nothing
      financingDetailsAgreementDate = Nothing
      financingDetailsAgreementCurrency = Nothing
      financingDetailsTerminationType = Nothing
      financingDetailsStartDate = Nothing
      financingDetailsEndDate = Nothing
      financingDetailsDeliveryType = Nothing
      financingDetailsMarginRatio = Nothing
   in (FinancingDetails {..})
