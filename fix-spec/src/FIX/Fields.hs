{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

-- FieldSpec {fieldNumber = 1, fieldName = "Account", fieldType = FieldTypeString, fieldValues = []}
newtype Account = Account {unAccount :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Account

instance IsField Account where
  fieldTag Proxy = 1
  fieldIsData Proxy = False
  fieldToValue = toValue . unAccount
  fieldFromValue = fromValue >=> (prettyValidate . Account)

-- FieldSpec {fieldNumber = 2, fieldName = "AdvId", fieldType = FieldTypeString, fieldValues = []}
newtype AdvId = AdvId {unAdvId :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AdvId

instance IsField AdvId where
  fieldTag Proxy = 2
  fieldIsData Proxy = False
  fieldToValue = toValue . unAdvId
  fieldFromValue = fromValue >=> (prettyValidate . AdvId)

-- FieldSpec {fieldNumber = 3, fieldName = "AdvRefID", fieldType = FieldTypeString, fieldValues = []}
newtype AdvRefID = AdvRefID {unAdvRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AdvRefID

instance IsField AdvRefID where
  fieldTag Proxy = 3
  fieldIsData Proxy = False
  fieldToValue = toValue . unAdvRefID
  fieldFromValue = fromValue >=> (prettyValidate . AdvRefID)

-- FieldSpec {fieldNumber = 4, fieldName = "AdvSide", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "BUY"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SELL"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "CROSS"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "TRADE"}]}
data AdvSide
  = AdvSide_BUY
  | AdvSide_SELL
  | AdvSide_CROSS
  | AdvSide_TRADE
  deriving stock (Show, Eq, Generic)

instance Validity AdvSide

instance IsField AdvSide where
  fieldTag Proxy = 4
  fieldIsData Proxy = False
  fieldToValue = \case
    AdvSide_BUY -> "B"
    AdvSide_SELL -> "S"
    AdvSide_CROSS -> "X"
    AdvSide_TRADE -> "T"
  fieldFromValue = \case
    "B" -> Right AdvSide_BUY
    "S" -> Right AdvSide_SELL
    "X" -> Right AdvSide_CROSS
    "T" -> Right AdvSide_TRADE
    v -> Left ("Unknown AdvSide: " <> show v)

-- FieldSpec {fieldNumber = 5, fieldName = "AdvTransType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REPLACE"}]}
data AdvTransType
  = AdvTransType_NEW
  | AdvTransType_CANCEL
  | AdvTransType_REPLACE
  deriving stock (Show, Eq, Generic)

instance Validity AdvTransType

instance IsField AdvTransType where
  fieldTag Proxy = 5
  fieldIsData Proxy = False
  fieldToValue = \case
    AdvTransType_NEW -> "N"
    AdvTransType_CANCEL -> "C"
    AdvTransType_REPLACE -> "R"
  fieldFromValue = \case
    "N" -> Right AdvTransType_NEW
    "C" -> Right AdvTransType_CANCEL
    "R" -> Right AdvTransType_REPLACE
    v -> Left ("Unknown AdvTransType: " <> show v)

-- FieldSpec {fieldNumber = 6, fieldName = "AvgPx", fieldType = FieldTypePrice, fieldValues = []}
newtype AvgPx = AvgPx {unAvgPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AvgPx

instance IsField AvgPx where
  fieldTag Proxy = 6
  fieldIsData Proxy = False
  fieldToValue = toValue . unAvgPx
  fieldFromValue = fromValue >=> (prettyValidate . AvgPx)

-- FieldSpec {fieldNumber = 7, fieldName = "BeginSeqNo", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype BeginSeqNo = BeginSeqNo {unBeginSeqNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BeginSeqNo

instance IsField BeginSeqNo where
  fieldTag Proxy = 7
  fieldIsData Proxy = False
  fieldToValue = toValue . unBeginSeqNo
  fieldFromValue = fromValue >=> (prettyValidate . BeginSeqNo)

-- FieldSpec {fieldNumber = 8, fieldName = "BeginString", fieldType = FieldTypeString, fieldValues = []}
newtype BeginString = BeginString {unBeginString :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BeginString

instance IsField BeginString where
  fieldTag Proxy = 8
  fieldIsData Proxy = False
  fieldToValue = toValue . unBeginString
  fieldFromValue = fromValue >=> (prettyValidate . BeginString)

-- FieldSpec {fieldNumber = 9, fieldName = "BodyLength", fieldType = FieldTypeLength, fieldValues = []}
newtype BodyLength = BodyLength {unBodyLength :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BodyLength

instance IsField BodyLength where
  fieldTag Proxy = 9
  fieldIsData Proxy = False
  fieldToValue = toValue . unBodyLength
  fieldFromValue = fromValue >=> (prettyValidate . BodyLength)

-- FieldSpec {fieldNumber = 10, fieldName = "CheckSum", fieldType = FieldTypeString, fieldValues = []}
newtype CheckSum = CheckSum {unCheckSum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CheckSum

instance IsField CheckSum where
  fieldTag Proxy = 10
  fieldIsData Proxy = False
  fieldToValue = toValue . unCheckSum
  fieldFromValue = fromValue >=> (prettyValidate . CheckSum)

-- FieldSpec {fieldNumber = 11, fieldName = "ClOrdID", fieldType = FieldTypeString, fieldValues = []}
newtype ClOrdID = ClOrdID {unClOrdID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClOrdID

instance IsField ClOrdID where
  fieldTag Proxy = 11
  fieldIsData Proxy = False
  fieldToValue = toValue . unClOrdID
  fieldFromValue = fromValue >=> (prettyValidate . ClOrdID)

-- FieldSpec {fieldNumber = 12, fieldName = "Commission", fieldType = FieldTypeAMT, fieldValues = []}
newtype Commission = Commission {unCommission :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Commission

instance IsField Commission where
  fieldTag Proxy = 12
  fieldIsData Proxy = False
  fieldToValue = toValue . unCommission
  fieldFromValue = fromValue >=> (prettyValidate . Commission)

-- FieldSpec {fieldNumber = 13, fieldName = "CommType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PER_UNIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PERCENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ABSOLUTE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PERCENTAGE_WAIVED_CASH_DISCOUNT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PERCENTAGE_WAIVED_ENHANCED_UNITS"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "POINTS_PER_BOND_OR_CONTRACT"}]}
data CommType
  = CommType_PER_UNIT
  | CommType_PERCENT
  | CommType_ABSOLUTE
  | CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT
  | CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS
  | CommType_POINTS_PER_BOND_OR_CONTRACT
  deriving stock (Show, Eq, Generic)

instance Validity CommType

instance IsField CommType where
  fieldTag Proxy = 13
  fieldIsData Proxy = False
  fieldToValue = \case
    CommType_PER_UNIT -> "1"
    CommType_PERCENT -> "2"
    CommType_ABSOLUTE -> "3"
    CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT -> "4"
    CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS -> "5"
    CommType_POINTS_PER_BOND_OR_CONTRACT -> "6"
  fieldFromValue = \case
    "1" -> Right CommType_PER_UNIT
    "2" -> Right CommType_PERCENT
    "3" -> Right CommType_ABSOLUTE
    "4" -> Right CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT
    "5" -> Right CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS
    "6" -> Right CommType_POINTS_PER_BOND_OR_CONTRACT
    v -> Left ("Unknown CommType: " <> show v)

-- FieldSpec {fieldNumber = 14, fieldName = "CumQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype CumQty = CumQty {unCumQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CumQty

instance IsField CumQty where
  fieldTag Proxy = 14
  fieldIsData Proxy = False
  fieldToValue = toValue . unCumQty
  fieldFromValue = fromValue >=> (prettyValidate . CumQty)

-- FieldSpec {fieldNumber = 15, fieldName = "Currency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype Currency = Currency {unCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Currency

instance IsField Currency where
  fieldTag Proxy = 15
  fieldIsData Proxy = False
  fieldToValue = toValue . unCurrency
  fieldFromValue = fromValue >=> (prettyValidate . Currency)

-- FieldSpec {fieldNumber = 16, fieldName = "EndSeqNo", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype EndSeqNo = EndSeqNo {unEndSeqNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EndSeqNo

instance IsField EndSeqNo where
  fieldTag Proxy = 16
  fieldIsData Proxy = False
  fieldToValue = toValue . unEndSeqNo
  fieldFromValue = fromValue >=> (prettyValidate . EndSeqNo)

-- FieldSpec {fieldNumber = 17, fieldName = "ExecID", fieldType = FieldTypeString, fieldValues = []}
newtype ExecID = ExecID {unExecID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecID

instance IsField ExecID where
  fieldTag Proxy = 17
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecID
  fieldFromValue = fromValue >=> (prettyValidate . ExecID)

-- FieldSpec {fieldNumber = 18, fieldName = "ExecInst", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NOT_HELD"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "WORK"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GO_ALONG"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OVER_THE_DAY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "HELD"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PARTICIPATE_DO_NOT_INITIATE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STRICT_SCALE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TRY_TO_SCALE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "STAY_ON_BID_SIDE"},FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "STAY_ON_OFFER_SIDE"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "NO_CROSS"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "OK_TO_CROSS"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CALL_FIRST"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "PERCENT_OF_VOLUME"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "DO_NOT_INCREASE"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "DO_NOT_REDUCE"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "ALL_OR_NONE"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "REINSTATE_ON_SYSTEM_FAILURE"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "INSTITUTIONS_ONLY"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "REINSTATE_ON_TRADING_HALT"},FieldValueSpec {fieldValueEnum = "K", fieldValueDescription = "CANCEL_ON_TRADING_HALT"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LAST_PEG"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MID_PRICE_PEG"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NON_NEGOTIABLE"},FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "OPENING_PEG"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "MARKET_PEG"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "CANCEL_ON_SYSTEM_FAILURE"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "PRIMARY_PEG"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SUSPEND"},FieldValueSpec {fieldValueEnum = "U", fieldValueDescription = "CUSTOMER_DISPLAY_INSTRUCTION"},FieldValueSpec {fieldValueEnum = "V", fieldValueDescription = "NETTING"},FieldValueSpec {fieldValueEnum = "W", fieldValueDescription = "PEG_TO_VWAP"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "TRADE_ALONG"},FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "TRY_TO_STOP"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "CANCEL_IF_NOT_BEST"},FieldValueSpec {fieldValueEnum = "a", fieldValueDescription = "TRAILING_STOP_PEG"},FieldValueSpec {fieldValueEnum = "b", fieldValueDescription = "STRICT_LIMIT"},FieldValueSpec {fieldValueEnum = "c", fieldValueDescription = "IGNORE_PRICE_VALIDITY_CHECKS"},FieldValueSpec {fieldValueEnum = "d", fieldValueDescription = "PEG_TO_LIMIT_PRICE"},FieldValueSpec {fieldValueEnum = "e", fieldValueDescription = "WORK_TO_TARGET_STRATEGY"}]}
data ExecInst
  = ExecInst_NOT_HELD
  | ExecInst_WORK
  | ExecInst_GO_ALONG
  | ExecInst_OVER_THE_DAY
  | ExecInst_HELD
  | ExecInst_PARTICIPATE_DO_NOT_INITIATE
  | ExecInst_STRICT_SCALE
  | ExecInst_TRY_TO_SCALE
  | ExecInst_STAY_ON_BID_SIDE
  | ExecInst_STAY_ON_OFFER_SIDE
  | ExecInst_NO_CROSS
  | ExecInst_OK_TO_CROSS
  | ExecInst_CALL_FIRST
  | ExecInst_PERCENT_OF_VOLUME
  | ExecInst_DO_NOT_INCREASE
  | ExecInst_DO_NOT_REDUCE
  | ExecInst_ALL_OR_NONE
  | ExecInst_REINSTATE_ON_SYSTEM_FAILURE
  | ExecInst_INSTITUTIONS_ONLY
  | ExecInst_REINSTATE_ON_TRADING_HALT
  | ExecInst_CANCEL_ON_TRADING_HALT
  | ExecInst_LAST_PEG
  | ExecInst_MID_PRICE_PEG
  | ExecInst_NON_NEGOTIABLE
  | ExecInst_OPENING_PEG
  | ExecInst_MARKET_PEG
  | ExecInst_CANCEL_ON_SYSTEM_FAILURE
  | ExecInst_PRIMARY_PEG
  | ExecInst_SUSPEND
  | ExecInst_CUSTOMER_DISPLAY_INSTRUCTION
  | ExecInst_NETTING
  | ExecInst_PEG_TO_VWAP
  | ExecInst_TRADE_ALONG
  | ExecInst_TRY_TO_STOP
  | ExecInst_CANCEL_IF_NOT_BEST
  | ExecInst_TRAILING_STOP_PEG
  | ExecInst_STRICT_LIMIT
  | ExecInst_IGNORE_PRICE_VALIDITY_CHECKS
  | ExecInst_PEG_TO_LIMIT_PRICE
  | ExecInst_WORK_TO_TARGET_STRATEGY
  deriving stock (Show, Eq, Generic)

instance Validity ExecInst

instance IsField ExecInst where
  fieldTag Proxy = 18
  fieldIsData Proxy = False
  fieldToValue = \case
    ExecInst_NOT_HELD -> "1"
    ExecInst_WORK -> "2"
    ExecInst_GO_ALONG -> "3"
    ExecInst_OVER_THE_DAY -> "4"
    ExecInst_HELD -> "5"
    ExecInst_PARTICIPATE_DO_NOT_INITIATE -> "6"
    ExecInst_STRICT_SCALE -> "7"
    ExecInst_TRY_TO_SCALE -> "8"
    ExecInst_STAY_ON_BID_SIDE -> "9"
    ExecInst_STAY_ON_OFFER_SIDE -> "0"
    ExecInst_NO_CROSS -> "A"
    ExecInst_OK_TO_CROSS -> "B"
    ExecInst_CALL_FIRST -> "C"
    ExecInst_PERCENT_OF_VOLUME -> "D"
    ExecInst_DO_NOT_INCREASE -> "E"
    ExecInst_DO_NOT_REDUCE -> "F"
    ExecInst_ALL_OR_NONE -> "G"
    ExecInst_REINSTATE_ON_SYSTEM_FAILURE -> "H"
    ExecInst_INSTITUTIONS_ONLY -> "I"
    ExecInst_REINSTATE_ON_TRADING_HALT -> "J"
    ExecInst_CANCEL_ON_TRADING_HALT -> "K"
    ExecInst_LAST_PEG -> "L"
    ExecInst_MID_PRICE_PEG -> "M"
    ExecInst_NON_NEGOTIABLE -> "N"
    ExecInst_OPENING_PEG -> "O"
    ExecInst_MARKET_PEG -> "P"
    ExecInst_CANCEL_ON_SYSTEM_FAILURE -> "Q"
    ExecInst_PRIMARY_PEG -> "R"
    ExecInst_SUSPEND -> "S"
    ExecInst_CUSTOMER_DISPLAY_INSTRUCTION -> "U"
    ExecInst_NETTING -> "V"
    ExecInst_PEG_TO_VWAP -> "W"
    ExecInst_TRADE_ALONG -> "X"
    ExecInst_TRY_TO_STOP -> "Y"
    ExecInst_CANCEL_IF_NOT_BEST -> "Z"
    ExecInst_TRAILING_STOP_PEG -> "a"
    ExecInst_STRICT_LIMIT -> "b"
    ExecInst_IGNORE_PRICE_VALIDITY_CHECKS -> "c"
    ExecInst_PEG_TO_LIMIT_PRICE -> "d"
    ExecInst_WORK_TO_TARGET_STRATEGY -> "e"
  fieldFromValue = \case
    "1" -> Right ExecInst_NOT_HELD
    "2" -> Right ExecInst_WORK
    "3" -> Right ExecInst_GO_ALONG
    "4" -> Right ExecInst_OVER_THE_DAY
    "5" -> Right ExecInst_HELD
    "6" -> Right ExecInst_PARTICIPATE_DO_NOT_INITIATE
    "7" -> Right ExecInst_STRICT_SCALE
    "8" -> Right ExecInst_TRY_TO_SCALE
    "9" -> Right ExecInst_STAY_ON_BID_SIDE
    "0" -> Right ExecInst_STAY_ON_OFFER_SIDE
    "A" -> Right ExecInst_NO_CROSS
    "B" -> Right ExecInst_OK_TO_CROSS
    "C" -> Right ExecInst_CALL_FIRST
    "D" -> Right ExecInst_PERCENT_OF_VOLUME
    "E" -> Right ExecInst_DO_NOT_INCREASE
    "F" -> Right ExecInst_DO_NOT_REDUCE
    "G" -> Right ExecInst_ALL_OR_NONE
    "H" -> Right ExecInst_REINSTATE_ON_SYSTEM_FAILURE
    "I" -> Right ExecInst_INSTITUTIONS_ONLY
    "J" -> Right ExecInst_REINSTATE_ON_TRADING_HALT
    "K" -> Right ExecInst_CANCEL_ON_TRADING_HALT
    "L" -> Right ExecInst_LAST_PEG
    "M" -> Right ExecInst_MID_PRICE_PEG
    "N" -> Right ExecInst_NON_NEGOTIABLE
    "O" -> Right ExecInst_OPENING_PEG
    "P" -> Right ExecInst_MARKET_PEG
    "Q" -> Right ExecInst_CANCEL_ON_SYSTEM_FAILURE
    "R" -> Right ExecInst_PRIMARY_PEG
    "S" -> Right ExecInst_SUSPEND
    "U" -> Right ExecInst_CUSTOMER_DISPLAY_INSTRUCTION
    "V" -> Right ExecInst_NETTING
    "W" -> Right ExecInst_PEG_TO_VWAP
    "X" -> Right ExecInst_TRADE_ALONG
    "Y" -> Right ExecInst_TRY_TO_STOP
    "Z" -> Right ExecInst_CANCEL_IF_NOT_BEST
    "a" -> Right ExecInst_TRAILING_STOP_PEG
    "b" -> Right ExecInst_STRICT_LIMIT
    "c" -> Right ExecInst_IGNORE_PRICE_VALIDITY_CHECKS
    "d" -> Right ExecInst_PEG_TO_LIMIT_PRICE
    "e" -> Right ExecInst_WORK_TO_TARGET_STRATEGY
    v -> Left ("Unknown ExecInst: " <> show v)

-- FieldSpec {fieldNumber = 19, fieldName = "ExecRefID", fieldType = FieldTypeString, fieldValues = []}
newtype ExecRefID = ExecRefID {unExecRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecRefID

instance IsField ExecRefID where
  fieldTag Proxy = 19
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecRefID
  fieldFromValue = fromValue >=> (prettyValidate . ExecRefID)

-- FieldSpec {fieldNumber = 21, fieldName = "HandlInst", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "AUTOMATED_EXECUTION_NO_INTERVENTION"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "AUTOMATED_EXECUTION_INTERVENTION_OK"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MANUAL_ORDER"}]}
data HandlInst
  = HandlInst_AUTOMATED_EXECUTION_NO_INTERVENTION
  | HandlInst_AUTOMATED_EXECUTION_INTERVENTION_OK
  | HandlInst_MANUAL_ORDER
  deriving stock (Show, Eq, Generic)

instance Validity HandlInst

instance IsField HandlInst where
  fieldTag Proxy = 21
  fieldIsData Proxy = False
  fieldToValue = \case
    HandlInst_AUTOMATED_EXECUTION_NO_INTERVENTION -> "1"
    HandlInst_AUTOMATED_EXECUTION_INTERVENTION_OK -> "2"
    HandlInst_MANUAL_ORDER -> "3"
  fieldFromValue = \case
    "1" -> Right HandlInst_AUTOMATED_EXECUTION_NO_INTERVENTION
    "2" -> Right HandlInst_AUTOMATED_EXECUTION_INTERVENTION_OK
    "3" -> Right HandlInst_MANUAL_ORDER
    v -> Left ("Unknown HandlInst: " <> show v)

-- FieldSpec {fieldNumber = 22, fieldName = "SecurityIDSource", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CUSIP"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SEDOL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "QUIK"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ISIN_NUMBER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "RIC_CODE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ISO_CURRENCY_CODE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "ISO_COUNTRY_CODE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "EXCHANGE_SYMBOL"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CONSOLIDATED_TAPE_ASSOCIATION"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "BLOOMBERG_SYMBOL"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "WERTPAPIER"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "DUTCH"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "VALOREN"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "SICOVAM"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "BELGIAN"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "COMMON"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "CLEARING_HOUSE"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "ISDA_FP_ML_SPECIFICATION"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "OPTION_PRICE_REPORTING_AUTHORITY"}]}
data SecurityIDSource
  = SecurityIDSource_CUSIP
  | SecurityIDSource_SEDOL
  | SecurityIDSource_QUIK
  | SecurityIDSource_ISIN_NUMBER
  | SecurityIDSource_RIC_CODE
  | SecurityIDSource_ISO_CURRENCY_CODE
  | SecurityIDSource_ISO_COUNTRY_CODE
  | SecurityIDSource_EXCHANGE_SYMBOL
  | SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION
  | SecurityIDSource_BLOOMBERG_SYMBOL
  | SecurityIDSource_WERTPAPIER
  | SecurityIDSource_DUTCH
  | SecurityIDSource_VALOREN
  | SecurityIDSource_SICOVAM
  | SecurityIDSource_BELGIAN
  | SecurityIDSource_COMMON
  | SecurityIDSource_CLEARING_HOUSE
  | SecurityIDSource_ISDA_FP_ML_SPECIFICATION
  | SecurityIDSource_OPTION_PRICE_REPORTING_AUTHORITY
  deriving stock (Show, Eq, Generic)

instance Validity SecurityIDSource

instance IsField SecurityIDSource where
  fieldTag Proxy = 22
  fieldIsData Proxy = False
  fieldToValue = \case
    SecurityIDSource_CUSIP -> "1"
    SecurityIDSource_SEDOL -> "2"
    SecurityIDSource_QUIK -> "3"
    SecurityIDSource_ISIN_NUMBER -> "4"
    SecurityIDSource_RIC_CODE -> "5"
    SecurityIDSource_ISO_CURRENCY_CODE -> "6"
    SecurityIDSource_ISO_COUNTRY_CODE -> "7"
    SecurityIDSource_EXCHANGE_SYMBOL -> "8"
    SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION -> "9"
    SecurityIDSource_BLOOMBERG_SYMBOL -> "A"
    SecurityIDSource_WERTPAPIER -> "B"
    SecurityIDSource_DUTCH -> "C"
    SecurityIDSource_VALOREN -> "D"
    SecurityIDSource_SICOVAM -> "E"
    SecurityIDSource_BELGIAN -> "F"
    SecurityIDSource_COMMON -> "G"
    SecurityIDSource_CLEARING_HOUSE -> "H"
    SecurityIDSource_ISDA_FP_ML_SPECIFICATION -> "I"
    SecurityIDSource_OPTION_PRICE_REPORTING_AUTHORITY -> "J"
  fieldFromValue = \case
    "1" -> Right SecurityIDSource_CUSIP
    "2" -> Right SecurityIDSource_SEDOL
    "3" -> Right SecurityIDSource_QUIK
    "4" -> Right SecurityIDSource_ISIN_NUMBER
    "5" -> Right SecurityIDSource_RIC_CODE
    "6" -> Right SecurityIDSource_ISO_CURRENCY_CODE
    "7" -> Right SecurityIDSource_ISO_COUNTRY_CODE
    "8" -> Right SecurityIDSource_EXCHANGE_SYMBOL
    "9" -> Right SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION
    "A" -> Right SecurityIDSource_BLOOMBERG_SYMBOL
    "B" -> Right SecurityIDSource_WERTPAPIER
    "C" -> Right SecurityIDSource_DUTCH
    "D" -> Right SecurityIDSource_VALOREN
    "E" -> Right SecurityIDSource_SICOVAM
    "F" -> Right SecurityIDSource_BELGIAN
    "G" -> Right SecurityIDSource_COMMON
    "H" -> Right SecurityIDSource_CLEARING_HOUSE
    "I" -> Right SecurityIDSource_ISDA_FP_ML_SPECIFICATION
    "J" -> Right SecurityIDSource_OPTION_PRICE_REPORTING_AUTHORITY
    v -> Left ("Unknown SecurityIDSource: " <> show v)

-- FieldSpec {fieldNumber = 23, fieldName = "IOIID", fieldType = FieldTypeString, fieldValues = []}
newtype IOIID = IOIID {unIOIID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IOIID

instance IsField IOIID where
  fieldTag Proxy = 23
  fieldIsData Proxy = False
  fieldToValue = toValue . unIOIID
  fieldFromValue = fromValue >=> (prettyValidate . IOIID)

-- FieldSpec {fieldNumber = 25, fieldName = "IOIQltyInd", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LOW"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MEDIUM"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "HIGH"}]}
data IOIQltyInd
  = IOIQltyInd_LOW
  | IOIQltyInd_MEDIUM
  | IOIQltyInd_HIGH
  deriving stock (Show, Eq, Generic)

instance Validity IOIQltyInd

instance IsField IOIQltyInd where
  fieldTag Proxy = 25
  fieldIsData Proxy = False
  fieldToValue = \case
    IOIQltyInd_LOW -> "L"
    IOIQltyInd_MEDIUM -> "M"
    IOIQltyInd_HIGH -> "H"
  fieldFromValue = \case
    "L" -> Right IOIQltyInd_LOW
    "M" -> Right IOIQltyInd_MEDIUM
    "H" -> Right IOIQltyInd_HIGH
    v -> Left ("Unknown IOIQltyInd: " <> show v)

-- FieldSpec {fieldNumber = 26, fieldName = "IOIRefID", fieldType = FieldTypeString, fieldValues = []}
newtype IOIRefID = IOIRefID {unIOIRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IOIRefID

instance IsField IOIRefID where
  fieldTag Proxy = 26
  fieldIsData Proxy = False
  fieldToValue = toValue . unIOIRefID
  fieldFromValue = fromValue >=> (prettyValidate . IOIRefID)

-- FieldSpec {fieldNumber = 27, fieldName = "IOIQty", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SMALL"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MEDIUM"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LARGE"}]}
data IOIQty
  = IOIQty_SMALL
  | IOIQty_MEDIUM
  | IOIQty_LARGE
  deriving stock (Show, Eq, Generic)

instance Validity IOIQty

instance IsField IOIQty where
  fieldTag Proxy = 27
  fieldIsData Proxy = False
  fieldToValue = \case
    IOIQty_SMALL -> "S"
    IOIQty_MEDIUM -> "M"
    IOIQty_LARGE -> "L"
  fieldFromValue = \case
    "S" -> Right IOIQty_SMALL
    "M" -> Right IOIQty_MEDIUM
    "L" -> Right IOIQty_LARGE
    v -> Left ("Unknown IOIQty: " <> show v)

-- FieldSpec {fieldNumber = 28, fieldName = "IOITransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REPLACE"}]}
data IOITransType
  = IOITransType_NEW
  | IOITransType_CANCEL
  | IOITransType_REPLACE
  deriving stock (Show, Eq, Generic)

instance Validity IOITransType

instance IsField IOITransType where
  fieldTag Proxy = 28
  fieldIsData Proxy = False
  fieldToValue = \case
    IOITransType_NEW -> "N"
    IOITransType_CANCEL -> "C"
    IOITransType_REPLACE -> "R"
  fieldFromValue = \case
    "N" -> Right IOITransType_NEW
    "C" -> Right IOITransType_CANCEL
    "R" -> Right IOITransType_REPLACE
    v -> Left ("Unknown IOITransType: " <> show v)

-- FieldSpec {fieldNumber = 29, fieldName = "LastCapacity", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "AGENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CROSS_AS_AGENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CROSS_AS_PRINCIPAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PRINCIPAL"}]}
data LastCapacity
  = LastCapacity_AGENT
  | LastCapacity_CROSS_AS_AGENT
  | LastCapacity_CROSS_AS_PRINCIPAL
  | LastCapacity_PRINCIPAL
  deriving stock (Show, Eq, Generic)

instance Validity LastCapacity

instance IsField LastCapacity where
  fieldTag Proxy = 29
  fieldIsData Proxy = False
  fieldToValue = \case
    LastCapacity_AGENT -> "1"
    LastCapacity_CROSS_AS_AGENT -> "2"
    LastCapacity_CROSS_AS_PRINCIPAL -> "3"
    LastCapacity_PRINCIPAL -> "4"
  fieldFromValue = \case
    "1" -> Right LastCapacity_AGENT
    "2" -> Right LastCapacity_CROSS_AS_AGENT
    "3" -> Right LastCapacity_CROSS_AS_PRINCIPAL
    "4" -> Right LastCapacity_PRINCIPAL
    v -> Left ("Unknown LastCapacity: " <> show v)

-- FieldSpec {fieldNumber = 30, fieldName = "LastMkt", fieldType = FieldTypeExchange, fieldValues = []}
newtype LastMkt = LastMkt {unLastMkt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastMkt

instance IsField LastMkt where
  fieldTag Proxy = 30
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastMkt
  fieldFromValue = fromValue >=> (prettyValidate . LastMkt)

-- FieldSpec {fieldNumber = 31, fieldName = "LastPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LastPx = LastPx {unLastPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastPx

instance IsField LastPx where
  fieldTag Proxy = 31
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastPx
  fieldFromValue = fromValue >=> (prettyValidate . LastPx)

-- FieldSpec {fieldNumber = 32, fieldName = "LastQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LastQty = LastQty {unLastQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastQty

instance IsField LastQty where
  fieldTag Proxy = 32
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastQty
  fieldFromValue = fromValue >=> (prettyValidate . LastQty)

-- FieldSpec {fieldNumber = 33, fieldName = "NoLinesOfText", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLinesOfText = NoLinesOfText {unNoLinesOfText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLinesOfText

instance IsField NoLinesOfText where
  fieldTag Proxy = 33
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLinesOfText
  fieldFromValue = fromValue >=> (prettyValidate . NoLinesOfText)

-- FieldSpec {fieldNumber = 34, fieldName = "MsgSeqNum", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype MsgSeqNum = MsgSeqNum {unMsgSeqNum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MsgSeqNum

instance IsField MsgSeqNum where
  fieldTag Proxy = 34
  fieldIsData Proxy = False
  fieldToValue = toValue . unMsgSeqNum
  fieldFromValue = fromValue >=> (prettyValidate . MsgSeqNum)

-- FieldSpec {fieldNumber = 35, fieldName = "MsgType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "HEARTBEAT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TEST_REQUEST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RESEND_REQUEST"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REJECT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SEQUENCE_RESET"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "LOGOUT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "IOI"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "ADVERTISEMENT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "EXECUTION_REPORT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "ORDER_CANCEL_REJECT"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "LOGON"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "NEWS"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EMAIL"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NEW_ORDER_SINGLE"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "NEW_ORDER_LIST"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "ORDER_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "ORDER_CANCEL_REPLACE_REQUEST"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "ORDER_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "ALLOCATION_INSTRUCTION"},FieldValueSpec {fieldValueEnum = "K", fieldValueDescription = "LIST_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LIST_EXECUTE"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "LIST_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "LIST_STATUS"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "ALLOCATION_INSTRUCTION_ACK"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "DONT_KNOW_TRADE"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "QUOTE_REQUEST"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "QUOTE"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "SETTLEMENT_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "V", fieldValueDescription = "MARKET_DATA_REQUEST"},FieldValueSpec {fieldValueEnum = "W", fieldValueDescription = "MARKET_DATA_SNAPSHOT_FULL_REFRESH"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "MARKET_DATA_INCREMENTAL_REFRESH"},FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "MARKET_DATA_REQUEST_REJECT"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "QUOTE_CANCEL"},FieldValueSpec {fieldValueEnum = "a", fieldValueDescription = "QUOTE_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "b", fieldValueDescription = "MASS_QUOTE_ACKNOWLEDGEMENT"},FieldValueSpec {fieldValueEnum = "c", fieldValueDescription = "SECURITY_DEFINITION_REQUEST"},FieldValueSpec {fieldValueEnum = "d", fieldValueDescription = "SECURITY_DEFINITION"},FieldValueSpec {fieldValueEnum = "e", fieldValueDescription = "SECURITY_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "f", fieldValueDescription = "SECURITY_STATUS"},FieldValueSpec {fieldValueEnum = "g", fieldValueDescription = "TRADING_SESSION_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "h", fieldValueDescription = "TRADING_SESSION_STATUS"},FieldValueSpec {fieldValueEnum = "i", fieldValueDescription = "MASS_QUOTE"},FieldValueSpec {fieldValueEnum = "j", fieldValueDescription = "BUSINESS_MESSAGE_REJECT"},FieldValueSpec {fieldValueEnum = "k", fieldValueDescription = "BID_REQUEST"},FieldValueSpec {fieldValueEnum = "l", fieldValueDescription = "BID_RESPONSE"},FieldValueSpec {fieldValueEnum = "m", fieldValueDescription = "LIST_STRIKE_PRICE"},FieldValueSpec {fieldValueEnum = "n", fieldValueDescription = "XML_NON_FIX"},FieldValueSpec {fieldValueEnum = "o", fieldValueDescription = "REGISTRATION_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "p", fieldValueDescription = "REGISTRATION_INSTRUCTIONS_RESPONSE"},FieldValueSpec {fieldValueEnum = "q", fieldValueDescription = "ORDER_MASS_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "r", fieldValueDescription = "ORDER_MASS_CANCEL_REPORT"},FieldValueSpec {fieldValueEnum = "s", fieldValueDescription = "NEW_ORDER_CROSS"},FieldValueSpec {fieldValueEnum = "t", fieldValueDescription = "CROSS_ORDER_CANCEL_REPLACE_REQUEST"},FieldValueSpec {fieldValueEnum = "u", fieldValueDescription = "CROSS_ORDER_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "v", fieldValueDescription = "SECURITY_TYPE_REQUEST"},FieldValueSpec {fieldValueEnum = "w", fieldValueDescription = "SECURITY_TYPES"},FieldValueSpec {fieldValueEnum = "x", fieldValueDescription = "SECURITY_LIST_REQUEST"},FieldValueSpec {fieldValueEnum = "y", fieldValueDescription = "SECURITY_LIST"},FieldValueSpec {fieldValueEnum = "z", fieldValueDescription = "DERIVATIVE_SECURITY_LIST_REQUEST"},FieldValueSpec {fieldValueEnum = "AA", fieldValueDescription = "DERIVATIVE_SECURITY_LIST"},FieldValueSpec {fieldValueEnum = "AB", fieldValueDescription = "NEW_ORDER_MULTILEG"},FieldValueSpec {fieldValueEnum = "AC", fieldValueDescription = "MULTILEG_ORDER_CANCEL_REPLACE"},FieldValueSpec {fieldValueEnum = "AD", fieldValueDescription = "TRADE_CAPTURE_REPORT_REQUEST"},FieldValueSpec {fieldValueEnum = "AE", fieldValueDescription = "TRADE_CAPTURE_REPORT"},FieldValueSpec {fieldValueEnum = "AF", fieldValueDescription = "ORDER_MASS_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "AG", fieldValueDescription = "QUOTE_REQUEST_REJECT"},FieldValueSpec {fieldValueEnum = "AH", fieldValueDescription = "RFQ_REQUEST"},FieldValueSpec {fieldValueEnum = "AI", fieldValueDescription = "QUOTE_STATUS_REPORT"},FieldValueSpec {fieldValueEnum = "AJ", fieldValueDescription = "QUOTE_RESPONSE"},FieldValueSpec {fieldValueEnum = "AK", fieldValueDescription = "CONFIRMATION"},FieldValueSpec {fieldValueEnum = "AL", fieldValueDescription = "POSITION_MAINTENANCE_REQUEST"},FieldValueSpec {fieldValueEnum = "AM", fieldValueDescription = "POSITION_MAINTENANCE_REPORT"},FieldValueSpec {fieldValueEnum = "AN", fieldValueDescription = "REQUEST_FOR_POSITIONS"},FieldValueSpec {fieldValueEnum = "AO", fieldValueDescription = "REQUEST_FOR_POSITIONS_ACK"},FieldValueSpec {fieldValueEnum = "AP", fieldValueDescription = "POSITION_REPORT"},FieldValueSpec {fieldValueEnum = "AQ", fieldValueDescription = "TRADE_CAPTURE_REPORT_REQUEST_ACK"},FieldValueSpec {fieldValueEnum = "AR", fieldValueDescription = "TRADE_CAPTURE_REPORT_ACK"},FieldValueSpec {fieldValueEnum = "AS", fieldValueDescription = "ALLOCATION_REPORT"},FieldValueSpec {fieldValueEnum = "AT", fieldValueDescription = "ALLOCATION_REPORT_ACK"},FieldValueSpec {fieldValueEnum = "AU", fieldValueDescription = "CONFIRMATION_ACK"},FieldValueSpec {fieldValueEnum = "AV", fieldValueDescription = "SETTLEMENT_INSTRUCTION_REQUEST"},FieldValueSpec {fieldValueEnum = "AW", fieldValueDescription = "ASSIGNMENT_REPORT"},FieldValueSpec {fieldValueEnum = "AX", fieldValueDescription = "COLLATERAL_REQUEST"},FieldValueSpec {fieldValueEnum = "AY", fieldValueDescription = "COLLATERAL_ASSIGNMENT"},FieldValueSpec {fieldValueEnum = "AZ", fieldValueDescription = "COLLATERAL_RESPONSE"},FieldValueSpec {fieldValueEnum = "BA", fieldValueDescription = "COLLATERAL_REPORT"},FieldValueSpec {fieldValueEnum = "BB", fieldValueDescription = "COLLATERAL_INQUIRY"},FieldValueSpec {fieldValueEnum = "BC", fieldValueDescription = "NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "BD", fieldValueDescription = "NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE"},FieldValueSpec {fieldValueEnum = "BE", fieldValueDescription = "USER_REQUEST"},FieldValueSpec {fieldValueEnum = "BF", fieldValueDescription = "USER_RESPONSE"},FieldValueSpec {fieldValueEnum = "BG", fieldValueDescription = "COLLATERAL_INQUIRY_ACK"},FieldValueSpec {fieldValueEnum = "BH", fieldValueDescription = "CONFIRMATION_REQUEST"}]}
data MsgType
  = MsgType_HEARTBEAT
  | MsgType_TEST_REQUEST
  | MsgType_RESEND_REQUEST
  | MsgType_REJECT
  | MsgType_SEQUENCE_RESET
  | MsgType_LOGOUT
  | MsgType_IOI
  | MsgType_ADVERTISEMENT
  | MsgType_EXECUTION_REPORT
  | MsgType_ORDER_CANCEL_REJECT
  | MsgType_LOGON
  | MsgType_NEWS
  | MsgType_EMAIL
  | MsgType_NEW_ORDER_SINGLE
  | MsgType_NEW_ORDER_LIST
  | MsgType_ORDER_CANCEL_REQUEST
  | MsgType_ORDER_CANCEL_REPLACE_REQUEST
  | MsgType_ORDER_STATUS_REQUEST
  | MsgType_ALLOCATION_INSTRUCTION
  | MsgType_LIST_CANCEL_REQUEST
  | MsgType_LIST_EXECUTE
  | MsgType_LIST_STATUS_REQUEST
  | MsgType_LIST_STATUS
  | MsgType_ALLOCATION_INSTRUCTION_ACK
  | MsgType_DONT_KNOW_TRADE
  | MsgType_QUOTE_REQUEST
  | MsgType_QUOTE
  | MsgType_SETTLEMENT_INSTRUCTIONS
  | MsgType_MARKET_DATA_REQUEST
  | MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH
  | MsgType_MARKET_DATA_INCREMENTAL_REFRESH
  | MsgType_MARKET_DATA_REQUEST_REJECT
  | MsgType_QUOTE_CANCEL
  | MsgType_QUOTE_STATUS_REQUEST
  | MsgType_MASS_QUOTE_ACKNOWLEDGEMENT
  | MsgType_SECURITY_DEFINITION_REQUEST
  | MsgType_SECURITY_DEFINITION
  | MsgType_SECURITY_STATUS_REQUEST
  | MsgType_SECURITY_STATUS
  | MsgType_TRADING_SESSION_STATUS_REQUEST
  | MsgType_TRADING_SESSION_STATUS
  | MsgType_MASS_QUOTE
  | MsgType_BUSINESS_MESSAGE_REJECT
  | MsgType_BID_REQUEST
  | MsgType_BID_RESPONSE
  | MsgType_LIST_STRIKE_PRICE
  | MsgType_XML_NON_FIX
  | MsgType_REGISTRATION_INSTRUCTIONS
  | MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE
  | MsgType_ORDER_MASS_CANCEL_REQUEST
  | MsgType_ORDER_MASS_CANCEL_REPORT
  | MsgType_NEW_ORDER_CROSS
  | MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST
  | MsgType_CROSS_ORDER_CANCEL_REQUEST
  | MsgType_SECURITY_TYPE_REQUEST
  | MsgType_SECURITY_TYPES
  | MsgType_SECURITY_LIST_REQUEST
  | MsgType_SECURITY_LIST
  | MsgType_DERIVATIVE_SECURITY_LIST_REQUEST
  | MsgType_DERIVATIVE_SECURITY_LIST
  | MsgType_NEW_ORDER_MULTILEG
  | MsgType_MULTILEG_ORDER_CANCEL_REPLACE
  | MsgType_TRADE_CAPTURE_REPORT_REQUEST
  | MsgType_TRADE_CAPTURE_REPORT
  | MsgType_ORDER_MASS_STATUS_REQUEST
  | MsgType_QUOTE_REQUEST_REJECT
  | MsgType_RFQ_REQUEST
  | MsgType_QUOTE_STATUS_REPORT
  | MsgType_QUOTE_RESPONSE
  | MsgType_CONFIRMATION
  | MsgType_POSITION_MAINTENANCE_REQUEST
  | MsgType_POSITION_MAINTENANCE_REPORT
  | MsgType_REQUEST_FOR_POSITIONS
  | MsgType_REQUEST_FOR_POSITIONS_ACK
  | MsgType_POSITION_REPORT
  | MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK
  | MsgType_TRADE_CAPTURE_REPORT_ACK
  | MsgType_ALLOCATION_REPORT
  | MsgType_ALLOCATION_REPORT_ACK
  | MsgType_CONFIRMATION_ACK
  | MsgType_SETTLEMENT_INSTRUCTION_REQUEST
  | MsgType_ASSIGNMENT_REPORT
  | MsgType_COLLATERAL_REQUEST
  | MsgType_COLLATERAL_ASSIGNMENT
  | MsgType_COLLATERAL_RESPONSE
  | MsgType_COLLATERAL_REPORT
  | MsgType_COLLATERAL_INQUIRY
  | MsgType_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST
  | MsgType_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE
  | MsgType_USER_REQUEST
  | MsgType_USER_RESPONSE
  | MsgType_COLLATERAL_INQUIRY_ACK
  | MsgType_CONFIRMATION_REQUEST
  deriving stock (Show, Eq, Generic)

instance Validity MsgType

instance IsField MsgType where
  fieldTag Proxy = 35
  fieldIsData Proxy = False
  fieldToValue = \case
    MsgType_HEARTBEAT -> "0"
    MsgType_TEST_REQUEST -> "1"
    MsgType_RESEND_REQUEST -> "2"
    MsgType_REJECT -> "3"
    MsgType_SEQUENCE_RESET -> "4"
    MsgType_LOGOUT -> "5"
    MsgType_IOI -> "6"
    MsgType_ADVERTISEMENT -> "7"
    MsgType_EXECUTION_REPORT -> "8"
    MsgType_ORDER_CANCEL_REJECT -> "9"
    MsgType_LOGON -> "A"
    MsgType_NEWS -> "B"
    MsgType_EMAIL -> "C"
    MsgType_NEW_ORDER_SINGLE -> "D"
    MsgType_NEW_ORDER_LIST -> "E"
    MsgType_ORDER_CANCEL_REQUEST -> "F"
    MsgType_ORDER_CANCEL_REPLACE_REQUEST -> "G"
    MsgType_ORDER_STATUS_REQUEST -> "H"
    MsgType_ALLOCATION_INSTRUCTION -> "J"
    MsgType_LIST_CANCEL_REQUEST -> "K"
    MsgType_LIST_EXECUTE -> "L"
    MsgType_LIST_STATUS_REQUEST -> "M"
    MsgType_LIST_STATUS -> "N"
    MsgType_ALLOCATION_INSTRUCTION_ACK -> "P"
    MsgType_DONT_KNOW_TRADE -> "Q"
    MsgType_QUOTE_REQUEST -> "R"
    MsgType_QUOTE -> "S"
    MsgType_SETTLEMENT_INSTRUCTIONS -> "T"
    MsgType_MARKET_DATA_REQUEST -> "V"
    MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH -> "W"
    MsgType_MARKET_DATA_INCREMENTAL_REFRESH -> "X"
    MsgType_MARKET_DATA_REQUEST_REJECT -> "Y"
    MsgType_QUOTE_CANCEL -> "Z"
    MsgType_QUOTE_STATUS_REQUEST -> "a"
    MsgType_MASS_QUOTE_ACKNOWLEDGEMENT -> "b"
    MsgType_SECURITY_DEFINITION_REQUEST -> "c"
    MsgType_SECURITY_DEFINITION -> "d"
    MsgType_SECURITY_STATUS_REQUEST -> "e"
    MsgType_SECURITY_STATUS -> "f"
    MsgType_TRADING_SESSION_STATUS_REQUEST -> "g"
    MsgType_TRADING_SESSION_STATUS -> "h"
    MsgType_MASS_QUOTE -> "i"
    MsgType_BUSINESS_MESSAGE_REJECT -> "j"
    MsgType_BID_REQUEST -> "k"
    MsgType_BID_RESPONSE -> "l"
    MsgType_LIST_STRIKE_PRICE -> "m"
    MsgType_XML_NON_FIX -> "n"
    MsgType_REGISTRATION_INSTRUCTIONS -> "o"
    MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE -> "p"
    MsgType_ORDER_MASS_CANCEL_REQUEST -> "q"
    MsgType_ORDER_MASS_CANCEL_REPORT -> "r"
    MsgType_NEW_ORDER_CROSS -> "s"
    MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST -> "t"
    MsgType_CROSS_ORDER_CANCEL_REQUEST -> "u"
    MsgType_SECURITY_TYPE_REQUEST -> "v"
    MsgType_SECURITY_TYPES -> "w"
    MsgType_SECURITY_LIST_REQUEST -> "x"
    MsgType_SECURITY_LIST -> "y"
    MsgType_DERIVATIVE_SECURITY_LIST_REQUEST -> "z"
    MsgType_DERIVATIVE_SECURITY_LIST -> "AA"
    MsgType_NEW_ORDER_MULTILEG -> "AB"
    MsgType_MULTILEG_ORDER_CANCEL_REPLACE -> "AC"
    MsgType_TRADE_CAPTURE_REPORT_REQUEST -> "AD"
    MsgType_TRADE_CAPTURE_REPORT -> "AE"
    MsgType_ORDER_MASS_STATUS_REQUEST -> "AF"
    MsgType_QUOTE_REQUEST_REJECT -> "AG"
    MsgType_RFQ_REQUEST -> "AH"
    MsgType_QUOTE_STATUS_REPORT -> "AI"
    MsgType_QUOTE_RESPONSE -> "AJ"
    MsgType_CONFIRMATION -> "AK"
    MsgType_POSITION_MAINTENANCE_REQUEST -> "AL"
    MsgType_POSITION_MAINTENANCE_REPORT -> "AM"
    MsgType_REQUEST_FOR_POSITIONS -> "AN"
    MsgType_REQUEST_FOR_POSITIONS_ACK -> "AO"
    MsgType_POSITION_REPORT -> "AP"
    MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK -> "AQ"
    MsgType_TRADE_CAPTURE_REPORT_ACK -> "AR"
    MsgType_ALLOCATION_REPORT -> "AS"
    MsgType_ALLOCATION_REPORT_ACK -> "AT"
    MsgType_CONFIRMATION_ACK -> "AU"
    MsgType_SETTLEMENT_INSTRUCTION_REQUEST -> "AV"
    MsgType_ASSIGNMENT_REPORT -> "AW"
    MsgType_COLLATERAL_REQUEST -> "AX"
    MsgType_COLLATERAL_ASSIGNMENT -> "AY"
    MsgType_COLLATERAL_RESPONSE -> "AZ"
    MsgType_COLLATERAL_REPORT -> "BA"
    MsgType_COLLATERAL_INQUIRY -> "BB"
    MsgType_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST -> "BC"
    MsgType_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE -> "BD"
    MsgType_USER_REQUEST -> "BE"
    MsgType_USER_RESPONSE -> "BF"
    MsgType_COLLATERAL_INQUIRY_ACK -> "BG"
    MsgType_CONFIRMATION_REQUEST -> "BH"
  fieldFromValue = \case
    "0" -> Right MsgType_HEARTBEAT
    "1" -> Right MsgType_TEST_REQUEST
    "2" -> Right MsgType_RESEND_REQUEST
    "3" -> Right MsgType_REJECT
    "4" -> Right MsgType_SEQUENCE_RESET
    "5" -> Right MsgType_LOGOUT
    "6" -> Right MsgType_IOI
    "7" -> Right MsgType_ADVERTISEMENT
    "8" -> Right MsgType_EXECUTION_REPORT
    "9" -> Right MsgType_ORDER_CANCEL_REJECT
    "A" -> Right MsgType_LOGON
    "B" -> Right MsgType_NEWS
    "C" -> Right MsgType_EMAIL
    "D" -> Right MsgType_NEW_ORDER_SINGLE
    "E" -> Right MsgType_NEW_ORDER_LIST
    "F" -> Right MsgType_ORDER_CANCEL_REQUEST
    "G" -> Right MsgType_ORDER_CANCEL_REPLACE_REQUEST
    "H" -> Right MsgType_ORDER_STATUS_REQUEST
    "J" -> Right MsgType_ALLOCATION_INSTRUCTION
    "K" -> Right MsgType_LIST_CANCEL_REQUEST
    "L" -> Right MsgType_LIST_EXECUTE
    "M" -> Right MsgType_LIST_STATUS_REQUEST
    "N" -> Right MsgType_LIST_STATUS
    "P" -> Right MsgType_ALLOCATION_INSTRUCTION_ACK
    "Q" -> Right MsgType_DONT_KNOW_TRADE
    "R" -> Right MsgType_QUOTE_REQUEST
    "S" -> Right MsgType_QUOTE
    "T" -> Right MsgType_SETTLEMENT_INSTRUCTIONS
    "V" -> Right MsgType_MARKET_DATA_REQUEST
    "W" -> Right MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH
    "X" -> Right MsgType_MARKET_DATA_INCREMENTAL_REFRESH
    "Y" -> Right MsgType_MARKET_DATA_REQUEST_REJECT
    "Z" -> Right MsgType_QUOTE_CANCEL
    "a" -> Right MsgType_QUOTE_STATUS_REQUEST
    "b" -> Right MsgType_MASS_QUOTE_ACKNOWLEDGEMENT
    "c" -> Right MsgType_SECURITY_DEFINITION_REQUEST
    "d" -> Right MsgType_SECURITY_DEFINITION
    "e" -> Right MsgType_SECURITY_STATUS_REQUEST
    "f" -> Right MsgType_SECURITY_STATUS
    "g" -> Right MsgType_TRADING_SESSION_STATUS_REQUEST
    "h" -> Right MsgType_TRADING_SESSION_STATUS
    "i" -> Right MsgType_MASS_QUOTE
    "j" -> Right MsgType_BUSINESS_MESSAGE_REJECT
    "k" -> Right MsgType_BID_REQUEST
    "l" -> Right MsgType_BID_RESPONSE
    "m" -> Right MsgType_LIST_STRIKE_PRICE
    "n" -> Right MsgType_XML_NON_FIX
    "o" -> Right MsgType_REGISTRATION_INSTRUCTIONS
    "p" -> Right MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE
    "q" -> Right MsgType_ORDER_MASS_CANCEL_REQUEST
    "r" -> Right MsgType_ORDER_MASS_CANCEL_REPORT
    "s" -> Right MsgType_NEW_ORDER_CROSS
    "t" -> Right MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST
    "u" -> Right MsgType_CROSS_ORDER_CANCEL_REQUEST
    "v" -> Right MsgType_SECURITY_TYPE_REQUEST
    "w" -> Right MsgType_SECURITY_TYPES
    "x" -> Right MsgType_SECURITY_LIST_REQUEST
    "y" -> Right MsgType_SECURITY_LIST
    "z" -> Right MsgType_DERIVATIVE_SECURITY_LIST_REQUEST
    "AA" -> Right MsgType_DERIVATIVE_SECURITY_LIST
    "AB" -> Right MsgType_NEW_ORDER_MULTILEG
    "AC" -> Right MsgType_MULTILEG_ORDER_CANCEL_REPLACE
    "AD" -> Right MsgType_TRADE_CAPTURE_REPORT_REQUEST
    "AE" -> Right MsgType_TRADE_CAPTURE_REPORT
    "AF" -> Right MsgType_ORDER_MASS_STATUS_REQUEST
    "AG" -> Right MsgType_QUOTE_REQUEST_REJECT
    "AH" -> Right MsgType_RFQ_REQUEST
    "AI" -> Right MsgType_QUOTE_STATUS_REPORT
    "AJ" -> Right MsgType_QUOTE_RESPONSE
    "AK" -> Right MsgType_CONFIRMATION
    "AL" -> Right MsgType_POSITION_MAINTENANCE_REQUEST
    "AM" -> Right MsgType_POSITION_MAINTENANCE_REPORT
    "AN" -> Right MsgType_REQUEST_FOR_POSITIONS
    "AO" -> Right MsgType_REQUEST_FOR_POSITIONS_ACK
    "AP" -> Right MsgType_POSITION_REPORT
    "AQ" -> Right MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK
    "AR" -> Right MsgType_TRADE_CAPTURE_REPORT_ACK
    "AS" -> Right MsgType_ALLOCATION_REPORT
    "AT" -> Right MsgType_ALLOCATION_REPORT_ACK
    "AU" -> Right MsgType_CONFIRMATION_ACK
    "AV" -> Right MsgType_SETTLEMENT_INSTRUCTION_REQUEST
    "AW" -> Right MsgType_ASSIGNMENT_REPORT
    "AX" -> Right MsgType_COLLATERAL_REQUEST
    "AY" -> Right MsgType_COLLATERAL_ASSIGNMENT
    "AZ" -> Right MsgType_COLLATERAL_RESPONSE
    "BA" -> Right MsgType_COLLATERAL_REPORT
    "BB" -> Right MsgType_COLLATERAL_INQUIRY
    "BC" -> Right MsgType_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST
    "BD" -> Right MsgType_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE
    "BE" -> Right MsgType_USER_REQUEST
    "BF" -> Right MsgType_USER_RESPONSE
    "BG" -> Right MsgType_COLLATERAL_INQUIRY_ACK
    "BH" -> Right MsgType_CONFIRMATION_REQUEST
    v -> Left ("Unknown MsgType: " <> show v)

-- FieldSpec {fieldNumber = 36, fieldName = "NewSeqNo", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype NewSeqNo = NewSeqNo {unNewSeqNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NewSeqNo

instance IsField NewSeqNo where
  fieldTag Proxy = 36
  fieldIsData Proxy = False
  fieldToValue = toValue . unNewSeqNo
  fieldFromValue = fromValue >=> (prettyValidate . NewSeqNo)

-- FieldSpec {fieldNumber = 37, fieldName = "OrderID", fieldType = FieldTypeString, fieldValues = []}
newtype OrderID = OrderID {unOrderID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderID

instance IsField OrderID where
  fieldTag Proxy = 37
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderID
  fieldFromValue = fromValue >=> (prettyValidate . OrderID)

-- FieldSpec {fieldNumber = 38, fieldName = "OrderQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype OrderQty = OrderQty {unOrderQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderQty

instance IsField OrderQty where
  fieldTag Proxy = 38
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderQty
  fieldFromValue = fromValue >=> (prettyValidate . OrderQty)

-- FieldSpec {fieldNumber = 39, fieldName = "OrdStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PARTIALLY_FILLED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "FILLED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "DONE_FOR_DAY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCELED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PENDING_CANCEL"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STOPPED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "SUSPENDED"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "PENDING_NEW"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "CALCULATED"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EXPIRED"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "ACCEPTED_FOR_BIDDING"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "PENDING_REPLACE"}]}
data OrdStatus
  = OrdStatus_NEW
  | OrdStatus_PARTIALLY_FILLED
  | OrdStatus_FILLED
  | OrdStatus_DONE_FOR_DAY
  | OrdStatus_CANCELED
  | OrdStatus_PENDING_CANCEL
  | OrdStatus_STOPPED
  | OrdStatus_REJECTED
  | OrdStatus_SUSPENDED
  | OrdStatus_PENDING_NEW
  | OrdStatus_CALCULATED
  | OrdStatus_EXPIRED
  | OrdStatus_ACCEPTED_FOR_BIDDING
  | OrdStatus_PENDING_REPLACE
  deriving stock (Show, Eq, Generic)

instance Validity OrdStatus

instance IsField OrdStatus where
  fieldTag Proxy = 39
  fieldIsData Proxy = False
  fieldToValue = \case
    OrdStatus_NEW -> "0"
    OrdStatus_PARTIALLY_FILLED -> "1"
    OrdStatus_FILLED -> "2"
    OrdStatus_DONE_FOR_DAY -> "3"
    OrdStatus_CANCELED -> "4"
    OrdStatus_PENDING_CANCEL -> "6"
    OrdStatus_STOPPED -> "7"
    OrdStatus_REJECTED -> "8"
    OrdStatus_SUSPENDED -> "9"
    OrdStatus_PENDING_NEW -> "A"
    OrdStatus_CALCULATED -> "B"
    OrdStatus_EXPIRED -> "C"
    OrdStatus_ACCEPTED_FOR_BIDDING -> "D"
    OrdStatus_PENDING_REPLACE -> "E"
  fieldFromValue = \case
    "0" -> Right OrdStatus_NEW
    "1" -> Right OrdStatus_PARTIALLY_FILLED
    "2" -> Right OrdStatus_FILLED
    "3" -> Right OrdStatus_DONE_FOR_DAY
    "4" -> Right OrdStatus_CANCELED
    "6" -> Right OrdStatus_PENDING_CANCEL
    "7" -> Right OrdStatus_STOPPED
    "8" -> Right OrdStatus_REJECTED
    "9" -> Right OrdStatus_SUSPENDED
    "A" -> Right OrdStatus_PENDING_NEW
    "B" -> Right OrdStatus_CALCULATED
    "C" -> Right OrdStatus_EXPIRED
    "D" -> Right OrdStatus_ACCEPTED_FOR_BIDDING
    "E" -> Right OrdStatus_PENDING_REPLACE
    v -> Left ("Unknown OrdStatus: " <> show v)

-- FieldSpec {fieldNumber = 40, fieldName = "OrdType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MARKET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "LIMIT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "STOP"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "STOP_LIMIT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "WITH_OR_WITHOUT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "LIMIT_OR_BETTER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LIMIT_WITH_OR_WITHOUT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "ON_BASIS"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "PREVIOUSLY_QUOTED"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "PREVIOUSLY_INDICATED"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "FOREX_SWAP"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "FUNARI"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "MARKET_IF_TOUCHED"},FieldValueSpec {fieldValueEnum = "K", fieldValueDescription = "MARKET_WITH_LEFT_OVER_AS_LIMIT"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "PREVIOUS_FUND_VALUATION_POINT"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "NEXT_FUND_VALUATION_POINT"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "PEGGED"}]}
data OrdType
  = OrdType_MARKET
  | OrdType_LIMIT
  | OrdType_STOP
  | OrdType_STOP_LIMIT
  | OrdType_WITH_OR_WITHOUT
  | OrdType_LIMIT_OR_BETTER
  | OrdType_LIMIT_WITH_OR_WITHOUT
  | OrdType_ON_BASIS
  | OrdType_PREVIOUSLY_QUOTED
  | OrdType_PREVIOUSLY_INDICATED
  | OrdType_FOREX_SWAP
  | OrdType_FUNARI
  | OrdType_MARKET_IF_TOUCHED
  | OrdType_MARKET_WITH_LEFT_OVER_AS_LIMIT
  | OrdType_PREVIOUS_FUND_VALUATION_POINT
  | OrdType_NEXT_FUND_VALUATION_POINT
  | OrdType_PEGGED
  deriving stock (Show, Eq, Generic)

instance Validity OrdType

instance IsField OrdType where
  fieldTag Proxy = 40
  fieldIsData Proxy = False
  fieldToValue = \case
    OrdType_MARKET -> "1"
    OrdType_LIMIT -> "2"
    OrdType_STOP -> "3"
    OrdType_STOP_LIMIT -> "4"
    OrdType_WITH_OR_WITHOUT -> "6"
    OrdType_LIMIT_OR_BETTER -> "7"
    OrdType_LIMIT_WITH_OR_WITHOUT -> "8"
    OrdType_ON_BASIS -> "9"
    OrdType_PREVIOUSLY_QUOTED -> "D"
    OrdType_PREVIOUSLY_INDICATED -> "E"
    OrdType_FOREX_SWAP -> "G"
    OrdType_FUNARI -> "I"
    OrdType_MARKET_IF_TOUCHED -> "J"
    OrdType_MARKET_WITH_LEFT_OVER_AS_LIMIT -> "K"
    OrdType_PREVIOUS_FUND_VALUATION_POINT -> "L"
    OrdType_NEXT_FUND_VALUATION_POINT -> "M"
    OrdType_PEGGED -> "P"
  fieldFromValue = \case
    "1" -> Right OrdType_MARKET
    "2" -> Right OrdType_LIMIT
    "3" -> Right OrdType_STOP
    "4" -> Right OrdType_STOP_LIMIT
    "6" -> Right OrdType_WITH_OR_WITHOUT
    "7" -> Right OrdType_LIMIT_OR_BETTER
    "8" -> Right OrdType_LIMIT_WITH_OR_WITHOUT
    "9" -> Right OrdType_ON_BASIS
    "D" -> Right OrdType_PREVIOUSLY_QUOTED
    "E" -> Right OrdType_PREVIOUSLY_INDICATED
    "G" -> Right OrdType_FOREX_SWAP
    "I" -> Right OrdType_FUNARI
    "J" -> Right OrdType_MARKET_IF_TOUCHED
    "K" -> Right OrdType_MARKET_WITH_LEFT_OVER_AS_LIMIT
    "L" -> Right OrdType_PREVIOUS_FUND_VALUATION_POINT
    "M" -> Right OrdType_NEXT_FUND_VALUATION_POINT
    "P" -> Right OrdType_PEGGED
    v -> Left ("Unknown OrdType: " <> show v)

-- FieldSpec {fieldNumber = 41, fieldName = "OrigClOrdID", fieldType = FieldTypeString, fieldValues = []}
newtype OrigClOrdID = OrigClOrdID {unOrigClOrdID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigClOrdID

instance IsField OrigClOrdID where
  fieldTag Proxy = 41
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigClOrdID
  fieldFromValue = fromValue >=> (prettyValidate . OrigClOrdID)

-- FieldSpec {fieldNumber = 42, fieldName = "OrigTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype OrigTime = OrigTime {unOrigTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigTime

instance IsField OrigTime where
  fieldTag Proxy = 42
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigTime
  fieldFromValue = fromValue >=> (prettyValidate . OrigTime)

-- FieldSpec {fieldNumber = 43, fieldName = "PossDupFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data PossDupFlag
  = PossDupFlag_YES
  | PossDupFlag_NO
  deriving stock (Show, Eq, Generic)

instance Validity PossDupFlag

instance IsField PossDupFlag where
  fieldTag Proxy = 43
  fieldIsData Proxy = False
  fieldToValue = \case
    PossDupFlag_YES -> "Y"
    PossDupFlag_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right PossDupFlag_YES
    "N" -> Right PossDupFlag_NO
    v -> Left ("Unknown PossDupFlag: " <> show v)

-- FieldSpec {fieldNumber = 44, fieldName = "Price", fieldType = FieldTypePrice, fieldValues = []}
newtype Price = Price {unPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Price

instance IsField Price where
  fieldTag Proxy = 44
  fieldIsData Proxy = False
  fieldToValue = toValue . unPrice
  fieldFromValue = fromValue >=> (prettyValidate . Price)

-- FieldSpec {fieldNumber = 45, fieldName = "RefSeqNum", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype RefSeqNum = RefSeqNum {unRefSeqNum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefSeqNum

instance IsField RefSeqNum where
  fieldTag Proxy = 45
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefSeqNum
  fieldFromValue = fromValue >=> (prettyValidate . RefSeqNum)

-- FieldSpec {fieldNumber = 48, fieldName = "SecurityID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityID = SecurityID {unSecurityID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityID

instance IsField SecurityID where
  fieldTag Proxy = 48
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityID)

-- FieldSpec {fieldNumber = 49, fieldName = "SenderCompID", fieldType = FieldTypeString, fieldValues = []}
newtype SenderCompID = SenderCompID {unSenderCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SenderCompID

instance IsField SenderCompID where
  fieldTag Proxy = 49
  fieldIsData Proxy = False
  fieldToValue = toValue . unSenderCompID
  fieldFromValue = fromValue >=> (prettyValidate . SenderCompID)

-- FieldSpec {fieldNumber = 50, fieldName = "SenderSubID", fieldType = FieldTypeString, fieldValues = []}
newtype SenderSubID = SenderSubID {unSenderSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SenderSubID

instance IsField SenderSubID where
  fieldTag Proxy = 50
  fieldIsData Proxy = False
  fieldToValue = toValue . unSenderSubID
  fieldFromValue = fromValue >=> (prettyValidate . SenderSubID)

-- FieldSpec {fieldNumber = 52, fieldName = "SendingTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype SendingTime = SendingTime {unSendingTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SendingTime

instance IsField SendingTime where
  fieldTag Proxy = 52
  fieldIsData Proxy = False
  fieldToValue = toValue . unSendingTime
  fieldFromValue = fromValue >=> (prettyValidate . SendingTime)

-- FieldSpec {fieldNumber = 53, fieldName = "Quantity", fieldType = FieldTypeQTY, fieldValues = []}
newtype Quantity = Quantity {unQuantity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Quantity

instance IsField Quantity where
  fieldTag Proxy = 53
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuantity
  fieldFromValue = fromValue >=> (prettyValidate . Quantity)

-- FieldSpec {fieldNumber = 54, fieldName = "Side", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BUY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SELL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "BUY_MINUS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SELL_PLUS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "SELL_SHORT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "SELL_SHORT_EXEMPT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "UNDISCLOSED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "CROSS"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CROSS_SHORT"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "CROSS_SHORT_EXEMPT"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "AS_DEFINED"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "OPPOSITE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "SUBSCRIBE"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "REDEEM"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "LEND"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "BORROW"}]}
data Side
  = Side_BUY
  | Side_SELL
  | Side_BUY_MINUS
  | Side_SELL_PLUS
  | Side_SELL_SHORT
  | Side_SELL_SHORT_EXEMPT
  | Side_UNDISCLOSED
  | Side_CROSS
  | Side_CROSS_SHORT
  | Side_CROSS_SHORT_EXEMPT
  | Side_AS_DEFINED
  | Side_OPPOSITE
  | Side_SUBSCRIBE
  | Side_REDEEM
  | Side_LEND
  | Side_BORROW
  deriving stock (Show, Eq, Generic)

instance Validity Side

instance IsField Side where
  fieldTag Proxy = 54
  fieldIsData Proxy = False
  fieldToValue = \case
    Side_BUY -> "1"
    Side_SELL -> "2"
    Side_BUY_MINUS -> "3"
    Side_SELL_PLUS -> "4"
    Side_SELL_SHORT -> "5"
    Side_SELL_SHORT_EXEMPT -> "6"
    Side_UNDISCLOSED -> "7"
    Side_CROSS -> "8"
    Side_CROSS_SHORT -> "9"
    Side_CROSS_SHORT_EXEMPT -> "A"
    Side_AS_DEFINED -> "B"
    Side_OPPOSITE -> "C"
    Side_SUBSCRIBE -> "D"
    Side_REDEEM -> "E"
    Side_LEND -> "F"
    Side_BORROW -> "G"
  fieldFromValue = \case
    "1" -> Right Side_BUY
    "2" -> Right Side_SELL
    "3" -> Right Side_BUY_MINUS
    "4" -> Right Side_SELL_PLUS
    "5" -> Right Side_SELL_SHORT
    "6" -> Right Side_SELL_SHORT_EXEMPT
    "7" -> Right Side_UNDISCLOSED
    "8" -> Right Side_CROSS
    "9" -> Right Side_CROSS_SHORT
    "A" -> Right Side_CROSS_SHORT_EXEMPT
    "B" -> Right Side_AS_DEFINED
    "C" -> Right Side_OPPOSITE
    "D" -> Right Side_SUBSCRIBE
    "E" -> Right Side_REDEEM
    "F" -> Right Side_LEND
    "G" -> Right Side_BORROW
    v -> Left ("Unknown Side: " <> show v)

-- FieldSpec {fieldNumber = 55, fieldName = "Symbol", fieldType = FieldTypeString, fieldValues = []}
newtype Symbol = Symbol {unSymbol :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Symbol

instance IsField Symbol where
  fieldTag Proxy = 55
  fieldIsData Proxy = False
  fieldToValue = toValue . unSymbol
  fieldFromValue = fromValue >=> (prettyValidate . Symbol)

-- FieldSpec {fieldNumber = 56, fieldName = "TargetCompID", fieldType = FieldTypeString, fieldValues = []}
newtype TargetCompID = TargetCompID {unTargetCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetCompID

instance IsField TargetCompID where
  fieldTag Proxy = 56
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetCompID
  fieldFromValue = fromValue >=> (prettyValidate . TargetCompID)

-- FieldSpec {fieldNumber = 57, fieldName = "TargetSubID", fieldType = FieldTypeString, fieldValues = []}
newtype TargetSubID = TargetSubID {unTargetSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetSubID

instance IsField TargetSubID where
  fieldTag Proxy = 57
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetSubID
  fieldFromValue = fromValue >=> (prettyValidate . TargetSubID)

-- FieldSpec {fieldNumber = 58, fieldName = "Text", fieldType = FieldTypeString, fieldValues = []}
newtype Text = Text {unText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Text

instance IsField Text where
  fieldTag Proxy = 58
  fieldIsData Proxy = False
  fieldToValue = toValue . unText
  fieldFromValue = fromValue >=> (prettyValidate . Text)

-- FieldSpec {fieldNumber = 59, fieldName = "TimeInForce", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "DAY"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "GOOD_TILL_CANCEL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "AT_THE_OPENING"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "IMMEDIATE_OR_CANCEL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "FILL_OR_KILL"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "GOOD_TILL_CROSSING"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "GOOD_TILL_DATE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "AT_THE_CLOSE"}]}
data TimeInForce
  = TimeInForce_DAY
  | TimeInForce_GOOD_TILL_CANCEL
  | TimeInForce_AT_THE_OPENING
  | TimeInForce_IMMEDIATE_OR_CANCEL
  | TimeInForce_FILL_OR_KILL
  | TimeInForce_GOOD_TILL_CROSSING
  | TimeInForce_GOOD_TILL_DATE
  | TimeInForce_AT_THE_CLOSE
  deriving stock (Show, Eq, Generic)

instance Validity TimeInForce

instance IsField TimeInForce where
  fieldTag Proxy = 59
  fieldIsData Proxy = False
  fieldToValue = \case
    TimeInForce_DAY -> "0"
    TimeInForce_GOOD_TILL_CANCEL -> "1"
    TimeInForce_AT_THE_OPENING -> "2"
    TimeInForce_IMMEDIATE_OR_CANCEL -> "3"
    TimeInForce_FILL_OR_KILL -> "4"
    TimeInForce_GOOD_TILL_CROSSING -> "5"
    TimeInForce_GOOD_TILL_DATE -> "6"
    TimeInForce_AT_THE_CLOSE -> "7"
  fieldFromValue = \case
    "0" -> Right TimeInForce_DAY
    "1" -> Right TimeInForce_GOOD_TILL_CANCEL
    "2" -> Right TimeInForce_AT_THE_OPENING
    "3" -> Right TimeInForce_IMMEDIATE_OR_CANCEL
    "4" -> Right TimeInForce_FILL_OR_KILL
    "5" -> Right TimeInForce_GOOD_TILL_CROSSING
    "6" -> Right TimeInForce_GOOD_TILL_DATE
    "7" -> Right TimeInForce_AT_THE_CLOSE
    v -> Left ("Unknown TimeInForce: " <> show v)

-- FieldSpec {fieldNumber = 60, fieldName = "TransactTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TransactTime = TransactTime {unTransactTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TransactTime

instance IsField TransactTime where
  fieldTag Proxy = 60
  fieldIsData Proxy = False
  fieldToValue = toValue . unTransactTime
  fieldFromValue = fromValue >=> (prettyValidate . TransactTime)

-- FieldSpec {fieldNumber = 61, fieldName = "Urgency", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NORMAL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FLASH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BACKGROUND"}]}
data Urgency
  = Urgency_NORMAL
  | Urgency_FLASH
  | Urgency_BACKGROUND
  deriving stock (Show, Eq, Generic)

instance Validity Urgency

instance IsField Urgency where
  fieldTag Proxy = 61
  fieldIsData Proxy = False
  fieldToValue = \case
    Urgency_NORMAL -> "0"
    Urgency_FLASH -> "1"
    Urgency_BACKGROUND -> "2"
  fieldFromValue = \case
    "0" -> Right Urgency_NORMAL
    "1" -> Right Urgency_FLASH
    "2" -> Right Urgency_BACKGROUND
    v -> Left ("Unknown Urgency: " <> show v)

-- FieldSpec {fieldNumber = 62, fieldName = "ValidUntilTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype ValidUntilTime = ValidUntilTime {unValidUntilTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ValidUntilTime

instance IsField ValidUntilTime where
  fieldTag Proxy = 62
  fieldIsData Proxy = False
  fieldToValue = toValue . unValidUntilTime
  fieldFromValue = fromValue >=> (prettyValidate . ValidUntilTime)

-- FieldSpec {fieldNumber = 63, fieldName = "SettlType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REGULAR"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CASH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NEXT_DAY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "T_PLUS2"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "T_PLUS3"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "T_PLUS4"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "FUTURE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "WHEN_AND_IF_ISSUED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "SELLERS_OPTION"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "T_PLUS5"}]}
data SettlType
  = SettlType_REGULAR
  | SettlType_CASH
  | SettlType_NEXT_DAY
  | SettlType_T_PLUS2
  | SettlType_T_PLUS3
  | SettlType_T_PLUS4
  | SettlType_FUTURE
  | SettlType_WHEN_AND_IF_ISSUED
  | SettlType_SELLERS_OPTION
  | SettlType_T_PLUS5
  deriving stock (Show, Eq, Generic)

instance Validity SettlType

instance IsField SettlType where
  fieldTag Proxy = 63
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlType_REGULAR -> "0"
    SettlType_CASH -> "1"
    SettlType_NEXT_DAY -> "2"
    SettlType_T_PLUS2 -> "3"
    SettlType_T_PLUS3 -> "4"
    SettlType_T_PLUS4 -> "5"
    SettlType_FUTURE -> "6"
    SettlType_WHEN_AND_IF_ISSUED -> "7"
    SettlType_SELLERS_OPTION -> "8"
    SettlType_T_PLUS5 -> "9"
  fieldFromValue = \case
    "0" -> Right SettlType_REGULAR
    "1" -> Right SettlType_CASH
    "2" -> Right SettlType_NEXT_DAY
    "3" -> Right SettlType_T_PLUS2
    "4" -> Right SettlType_T_PLUS3
    "5" -> Right SettlType_T_PLUS4
    "6" -> Right SettlType_FUTURE
    "7" -> Right SettlType_WHEN_AND_IF_ISSUED
    "8" -> Right SettlType_SELLERS_OPTION
    "9" -> Right SettlType_T_PLUS5
    v -> Left ("Unknown SettlType: " <> show v)

-- FieldSpec {fieldNumber = 64, fieldName = "SettlDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype SettlDate = SettlDate {unSettlDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlDate

instance IsField SettlDate where
  fieldTag Proxy = 64
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlDate
  fieldFromValue = fromValue >=> (prettyValidate . SettlDate)

-- FieldSpec {fieldNumber = 65, fieldName = "SymbolSfx", fieldType = FieldTypeString, fieldValues = []}
newtype SymbolSfx = SymbolSfx {unSymbolSfx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SymbolSfx

instance IsField SymbolSfx where
  fieldTag Proxy = 65
  fieldIsData Proxy = False
  fieldToValue = toValue . unSymbolSfx
  fieldFromValue = fromValue >=> (prettyValidate . SymbolSfx)

-- FieldSpec {fieldNumber = 66, fieldName = "ListID", fieldType = FieldTypeString, fieldValues = []}
newtype ListID = ListID {unListID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListID

instance IsField ListID where
  fieldTag Proxy = 66
  fieldIsData Proxy = False
  fieldToValue = toValue . unListID
  fieldFromValue = fromValue >=> (prettyValidate . ListID)

-- FieldSpec {fieldNumber = 67, fieldName = "ListSeqNo", fieldType = FieldTypeInt, fieldValues = []}
newtype ListSeqNo = ListSeqNo {unListSeqNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListSeqNo

instance IsField ListSeqNo where
  fieldTag Proxy = 67
  fieldIsData Proxy = False
  fieldToValue = toValue . unListSeqNo
  fieldFromValue = fromValue >=> (prettyValidate . ListSeqNo)

-- FieldSpec {fieldNumber = 68, fieldName = "TotNoOrders", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoOrders = TotNoOrders {unTotNoOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoOrders

instance IsField TotNoOrders where
  fieldTag Proxy = 68
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoOrders
  fieldFromValue = fromValue >=> (prettyValidate . TotNoOrders)

-- FieldSpec {fieldNumber = 69, fieldName = "ListExecInst", fieldType = FieldTypeString, fieldValues = []}
newtype ListExecInst = ListExecInst {unListExecInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListExecInst

instance IsField ListExecInst where
  fieldTag Proxy = 69
  fieldIsData Proxy = False
  fieldToValue = toValue . unListExecInst
  fieldFromValue = fromValue >=> (prettyValidate . ListExecInst)

-- FieldSpec {fieldNumber = 70, fieldName = "AllocID", fieldType = FieldTypeString, fieldValues = []}
newtype AllocID = AllocID {unAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocID

instance IsField AllocID where
  fieldTag Proxy = 70
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocID
  fieldFromValue = fromValue >=> (prettyValidate . AllocID)

-- FieldSpec {fieldNumber = 71, fieldName = "AllocTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"}]}
data AllocTransType
  = AllocTransType_NEW
  | AllocTransType_REPLACE
  | AllocTransType_CANCEL
  deriving stock (Show, Eq, Generic)

instance Validity AllocTransType

instance IsField AllocTransType where
  fieldTag Proxy = 71
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocTransType_NEW -> "0"
    AllocTransType_REPLACE -> "1"
    AllocTransType_CANCEL -> "2"
  fieldFromValue = \case
    "0" -> Right AllocTransType_NEW
    "1" -> Right AllocTransType_REPLACE
    "2" -> Right AllocTransType_CANCEL
    v -> Left ("Unknown AllocTransType: " <> show v)

-- FieldSpec {fieldNumber = 72, fieldName = "RefAllocID", fieldType = FieldTypeString, fieldValues = []}
newtype RefAllocID = RefAllocID {unRefAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefAllocID

instance IsField RefAllocID where
  fieldTag Proxy = 72
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefAllocID
  fieldFromValue = fromValue >=> (prettyValidate . RefAllocID)

-- FieldSpec {fieldNumber = 73, fieldName = "NoOrders", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoOrders = NoOrders {unNoOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoOrders

instance IsField NoOrders where
  fieldTag Proxy = 73
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoOrders
  fieldFromValue = fromValue >=> (prettyValidate . NoOrders)

-- FieldSpec {fieldNumber = 74, fieldName = "AvgPxPrecision", fieldType = FieldTypeInt, fieldValues = []}
newtype AvgPxPrecision = AvgPxPrecision {unAvgPxPrecision :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AvgPxPrecision

instance IsField AvgPxPrecision where
  fieldTag Proxy = 74
  fieldIsData Proxy = False
  fieldToValue = toValue . unAvgPxPrecision
  fieldFromValue = fromValue >=> (prettyValidate . AvgPxPrecision)

-- FieldSpec {fieldNumber = 75, fieldName = "TradeDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype TradeDate = TradeDate {unTradeDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeDate

instance IsField TradeDate where
  fieldTag Proxy = 75
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeDate
  fieldFromValue = fromValue >=> (prettyValidate . TradeDate)

-- FieldSpec {fieldNumber = 77, fieldName = "PositionEffect", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "OPEN"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CLOSE"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "ROLLED"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "FIFO"}]}
data PositionEffect
  = PositionEffect_OPEN
  | PositionEffect_CLOSE
  | PositionEffect_ROLLED
  | PositionEffect_FIFO
  deriving stock (Show, Eq, Generic)

instance Validity PositionEffect

instance IsField PositionEffect where
  fieldTag Proxy = 77
  fieldIsData Proxy = False
  fieldToValue = \case
    PositionEffect_OPEN -> "O"
    PositionEffect_CLOSE -> "C"
    PositionEffect_ROLLED -> "R"
    PositionEffect_FIFO -> "F"
  fieldFromValue = \case
    "O" -> Right PositionEffect_OPEN
    "C" -> Right PositionEffect_CLOSE
    "R" -> Right PositionEffect_ROLLED
    "F" -> Right PositionEffect_FIFO
    v -> Left ("Unknown PositionEffect: " <> show v)

-- FieldSpec {fieldNumber = 78, fieldName = "NoAllocs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoAllocs = NoAllocs {unNoAllocs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoAllocs

instance IsField NoAllocs where
  fieldTag Proxy = 78
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoAllocs
  fieldFromValue = fromValue >=> (prettyValidate . NoAllocs)

-- FieldSpec {fieldNumber = 79, fieldName = "AllocAccount", fieldType = FieldTypeString, fieldValues = []}
newtype AllocAccount = AllocAccount {unAllocAccount :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocAccount

instance IsField AllocAccount where
  fieldTag Proxy = 79
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocAccount
  fieldFromValue = fromValue >=> (prettyValidate . AllocAccount)

-- FieldSpec {fieldNumber = 80, fieldName = "AllocQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype AllocQty = AllocQty {unAllocQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocQty

instance IsField AllocQty where
  fieldTag Proxy = 80
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocQty
  fieldFromValue = fromValue >=> (prettyValidate . AllocQty)

-- FieldSpec {fieldNumber = 81, fieldName = "ProcessCode", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REGULAR"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SOFT_DOLLAR"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "STEP_IN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "STEP_OUT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SOFT_DOLLAR_STEP_IN"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "SOFT_DOLLAR_STEP_OUT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PLAN_SPONSOR"}]}
data ProcessCode
  = ProcessCode_REGULAR
  | ProcessCode_SOFT_DOLLAR
  | ProcessCode_STEP_IN
  | ProcessCode_STEP_OUT
  | ProcessCode_SOFT_DOLLAR_STEP_IN
  | ProcessCode_SOFT_DOLLAR_STEP_OUT
  | ProcessCode_PLAN_SPONSOR
  deriving stock (Show, Eq, Generic)

instance Validity ProcessCode

instance IsField ProcessCode where
  fieldTag Proxy = 81
  fieldIsData Proxy = False
  fieldToValue = \case
    ProcessCode_REGULAR -> "0"
    ProcessCode_SOFT_DOLLAR -> "1"
    ProcessCode_STEP_IN -> "2"
    ProcessCode_STEP_OUT -> "3"
    ProcessCode_SOFT_DOLLAR_STEP_IN -> "4"
    ProcessCode_SOFT_DOLLAR_STEP_OUT -> "5"
    ProcessCode_PLAN_SPONSOR -> "6"
  fieldFromValue = \case
    "0" -> Right ProcessCode_REGULAR
    "1" -> Right ProcessCode_SOFT_DOLLAR
    "2" -> Right ProcessCode_STEP_IN
    "3" -> Right ProcessCode_STEP_OUT
    "4" -> Right ProcessCode_SOFT_DOLLAR_STEP_IN
    "5" -> Right ProcessCode_SOFT_DOLLAR_STEP_OUT
    "6" -> Right ProcessCode_PLAN_SPONSOR
    v -> Left ("Unknown ProcessCode: " <> show v)

-- FieldSpec {fieldNumber = 82, fieldName = "NoRpts", fieldType = FieldTypeInt, fieldValues = []}
newtype NoRpts = NoRpts {unNoRpts :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoRpts

instance IsField NoRpts where
  fieldTag Proxy = 82
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoRpts
  fieldFromValue = fromValue >=> (prettyValidate . NoRpts)

-- FieldSpec {fieldNumber = 83, fieldName = "RptSeq", fieldType = FieldTypeInt, fieldValues = []}
newtype RptSeq = RptSeq {unRptSeq :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RptSeq

instance IsField RptSeq where
  fieldTag Proxy = 83
  fieldIsData Proxy = False
  fieldToValue = toValue . unRptSeq
  fieldFromValue = fromValue >=> (prettyValidate . RptSeq)

-- FieldSpec {fieldNumber = 84, fieldName = "CxlQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype CxlQty = CxlQty {unCxlQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CxlQty

instance IsField CxlQty where
  fieldTag Proxy = 84
  fieldIsData Proxy = False
  fieldToValue = toValue . unCxlQty
  fieldFromValue = fromValue >=> (prettyValidate . CxlQty)

-- FieldSpec {fieldNumber = 85, fieldName = "NoDlvyInst", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoDlvyInst = NoDlvyInst {unNoDlvyInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoDlvyInst

instance IsField NoDlvyInst where
  fieldTag Proxy = 85
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoDlvyInst
  fieldFromValue = fromValue >=> (prettyValidate . NoDlvyInst)

-- FieldSpec {fieldNumber = 87, fieldName = "AllocStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BLOCK_LEVEL_REJECT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCOUNT_LEVEL_REJECT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "RECEIVED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INCOMPLETE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REJECTED_BY_INTERMEDIARY"}]}
data AllocStatus
  = AllocStatus_ACCEPTED
  | AllocStatus_BLOCK_LEVEL_REJECT
  | AllocStatus_ACCOUNT_LEVEL_REJECT
  | AllocStatus_RECEIVED
  | AllocStatus_INCOMPLETE
  | AllocStatus_REJECTED_BY_INTERMEDIARY
  deriving stock (Show, Eq, Generic)

instance Validity AllocStatus

instance IsField AllocStatus where
  fieldTag Proxy = 87
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocStatus_ACCEPTED -> "0"
    AllocStatus_BLOCK_LEVEL_REJECT -> "1"
    AllocStatus_ACCOUNT_LEVEL_REJECT -> "2"
    AllocStatus_RECEIVED -> "3"
    AllocStatus_INCOMPLETE -> "4"
    AllocStatus_REJECTED_BY_INTERMEDIARY -> "5"
  fieldFromValue = \case
    "0" -> Right AllocStatus_ACCEPTED
    "1" -> Right AllocStatus_BLOCK_LEVEL_REJECT
    "2" -> Right AllocStatus_ACCOUNT_LEVEL_REJECT
    "3" -> Right AllocStatus_RECEIVED
    "4" -> Right AllocStatus_INCOMPLETE
    "5" -> Right AllocStatus_REJECTED_BY_INTERMEDIARY
    v -> Left ("Unknown AllocStatus: " <> show v)

-- FieldSpec {fieldNumber = 88, fieldName = "AllocRejCode", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNKNOWN_ACCOUNT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INCORRECT_QUANTITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INCORRECT_AVERAGEG_PRICE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNKNOWN_EXECUTING_BROKER_MNEMONIC"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "COMMISSION_DIFFERENCE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "UNKNOWN_ORDER_ID"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "UNKNOWN_LIST_ID"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "OTHER_SEE_TEXT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "INCORRECT_ALLOCATED_QUANTITY"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CALCULATION_DIFFERENCE"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "UNKNOWN_OR_STALE_EXEC_ID"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "MISMATCHED_DATA"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "UNKNOWN_CL_ORD_ID"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "WAREHOUSE_REQUEST_REJECTED"}]}
data AllocRejCode
  = AllocRejCode_UNKNOWN_ACCOUNT
  | AllocRejCode_INCORRECT_QUANTITY
  | AllocRejCode_INCORRECT_AVERAGEG_PRICE
  | AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC
  | AllocRejCode_COMMISSION_DIFFERENCE
  | AllocRejCode_UNKNOWN_ORDER_ID
  | AllocRejCode_UNKNOWN_LIST_ID
  | AllocRejCode_OTHER_SEE_TEXT
  | AllocRejCode_INCORRECT_ALLOCATED_QUANTITY
  | AllocRejCode_CALCULATION_DIFFERENCE
  | AllocRejCode_UNKNOWN_OR_STALE_EXEC_ID
  | AllocRejCode_MISMATCHED_DATA
  | AllocRejCode_UNKNOWN_CL_ORD_ID
  | AllocRejCode_WAREHOUSE_REQUEST_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity AllocRejCode

instance IsField AllocRejCode where
  fieldTag Proxy = 88
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocRejCode_UNKNOWN_ACCOUNT -> "0"
    AllocRejCode_INCORRECT_QUANTITY -> "1"
    AllocRejCode_INCORRECT_AVERAGEG_PRICE -> "2"
    AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC -> "3"
    AllocRejCode_COMMISSION_DIFFERENCE -> "4"
    AllocRejCode_UNKNOWN_ORDER_ID -> "5"
    AllocRejCode_UNKNOWN_LIST_ID -> "6"
    AllocRejCode_OTHER_SEE_TEXT -> "7"
    AllocRejCode_INCORRECT_ALLOCATED_QUANTITY -> "8"
    AllocRejCode_CALCULATION_DIFFERENCE -> "9"
    AllocRejCode_UNKNOWN_OR_STALE_EXEC_ID -> "10"
    AllocRejCode_MISMATCHED_DATA -> "11"
    AllocRejCode_UNKNOWN_CL_ORD_ID -> "12"
    AllocRejCode_WAREHOUSE_REQUEST_REJECTED -> "13"
  fieldFromValue = \case
    "0" -> Right AllocRejCode_UNKNOWN_ACCOUNT
    "1" -> Right AllocRejCode_INCORRECT_QUANTITY
    "2" -> Right AllocRejCode_INCORRECT_AVERAGEG_PRICE
    "3" -> Right AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC
    "4" -> Right AllocRejCode_COMMISSION_DIFFERENCE
    "5" -> Right AllocRejCode_UNKNOWN_ORDER_ID
    "6" -> Right AllocRejCode_UNKNOWN_LIST_ID
    "7" -> Right AllocRejCode_OTHER_SEE_TEXT
    "8" -> Right AllocRejCode_INCORRECT_ALLOCATED_QUANTITY
    "9" -> Right AllocRejCode_CALCULATION_DIFFERENCE
    "10" -> Right AllocRejCode_UNKNOWN_OR_STALE_EXEC_ID
    "11" -> Right AllocRejCode_MISMATCHED_DATA
    "12" -> Right AllocRejCode_UNKNOWN_CL_ORD_ID
    "13" -> Right AllocRejCode_WAREHOUSE_REQUEST_REJECTED
    v -> Left ("Unknown AllocRejCode: " <> show v)

-- FieldSpec {fieldNumber = 89, fieldName = "Signature", fieldType = FieldTypeData, fieldValues = []}
newtype Signature = Signature {unSignature :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Signature

instance IsField Signature where
  fieldTag Proxy = 89
  fieldIsData Proxy = True
  fieldToValue = toValue . unSignature
  fieldFromValue = fromValue >=> (prettyValidate . Signature)

-- FieldSpec {fieldNumber = 90, fieldName = "SecureDataLen", fieldType = FieldTypeLength, fieldValues = []}
newtype SecureDataLen = SecureDataLen {unSecureDataLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecureDataLen

instance IsField SecureDataLen where
  fieldTag Proxy = 90
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecureDataLen
  fieldFromValue = fromValue >=> (prettyValidate . SecureDataLen)

-- FieldSpec {fieldNumber = 91, fieldName = "SecureData", fieldType = FieldTypeData, fieldValues = []}
newtype SecureData = SecureData {unSecureData :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecureData

instance IsField SecureData where
  fieldTag Proxy = 91
  fieldIsData Proxy = True
  fieldToValue = toValue . unSecureData
  fieldFromValue = fromValue >=> (prettyValidate . SecureData)

-- FieldSpec {fieldNumber = 93, fieldName = "SignatureLength", fieldType = FieldTypeLength, fieldValues = []}
newtype SignatureLength = SignatureLength {unSignatureLength :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SignatureLength

instance IsField SignatureLength where
  fieldTag Proxy = 93
  fieldIsData Proxy = False
  fieldToValue = toValue . unSignatureLength
  fieldFromValue = fromValue >=> (prettyValidate . SignatureLength)

-- FieldSpec {fieldNumber = 94, fieldName = "EmailType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ADMIN_REPLY"}]}
data EmailType
  = EmailType_NEW
  | EmailType_REPLY
  | EmailType_ADMIN_REPLY
  deriving stock (Show, Eq, Generic)

instance Validity EmailType

instance IsField EmailType where
  fieldTag Proxy = 94
  fieldIsData Proxy = False
  fieldToValue = \case
    EmailType_NEW -> "0"
    EmailType_REPLY -> "1"
    EmailType_ADMIN_REPLY -> "2"
  fieldFromValue = \case
    "0" -> Right EmailType_NEW
    "1" -> Right EmailType_REPLY
    "2" -> Right EmailType_ADMIN_REPLY
    v -> Left ("Unknown EmailType: " <> show v)

-- FieldSpec {fieldNumber = 95, fieldName = "RawDataLength", fieldType = FieldTypeLength, fieldValues = []}
newtype RawDataLength = RawDataLength {unRawDataLength :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RawDataLength

instance IsField RawDataLength where
  fieldTag Proxy = 95
  fieldIsData Proxy = False
  fieldToValue = toValue . unRawDataLength
  fieldFromValue = fromValue >=> (prettyValidate . RawDataLength)

-- FieldSpec {fieldNumber = 96, fieldName = "RawData", fieldType = FieldTypeData, fieldValues = []}
newtype RawData = RawData {unRawData :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RawData

instance IsField RawData where
  fieldTag Proxy = 96
  fieldIsData Proxy = True
  fieldToValue = toValue . unRawData
  fieldFromValue = fromValue >=> (prettyValidate . RawData)

-- FieldSpec {fieldNumber = 97, fieldName = "PossResend", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data PossResend
  = PossResend_YES
  | PossResend_NO
  deriving stock (Show, Eq, Generic)

instance Validity PossResend

instance IsField PossResend where
  fieldTag Proxy = 97
  fieldIsData Proxy = False
  fieldToValue = \case
    PossResend_YES -> "Y"
    PossResend_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right PossResend_YES
    "N" -> Right PossResend_NO
    v -> Left ("Unknown PossResend: " <> show v)

-- FieldSpec {fieldNumber = 98, fieldName = "EncryptMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NONE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PKCS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DES"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PKCSDES"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PGPDES"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PGPDESMD5"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PEM"}]}
data EncryptMethod
  = EncryptMethod_NONE
  | EncryptMethod_PKCS
  | EncryptMethod_DES
  | EncryptMethod_PKCSDES
  | EncryptMethod_PGPDES
  | EncryptMethod_PGPDESMD5
  | EncryptMethod_PEM
  deriving stock (Show, Eq, Generic)

instance Validity EncryptMethod

instance IsField EncryptMethod where
  fieldTag Proxy = 98
  fieldIsData Proxy = False
  fieldToValue = \case
    EncryptMethod_NONE -> "0"
    EncryptMethod_PKCS -> "1"
    EncryptMethod_DES -> "2"
    EncryptMethod_PKCSDES -> "3"
    EncryptMethod_PGPDES -> "4"
    EncryptMethod_PGPDESMD5 -> "5"
    EncryptMethod_PEM -> "6"
  fieldFromValue = \case
    "0" -> Right EncryptMethod_NONE
    "1" -> Right EncryptMethod_PKCS
    "2" -> Right EncryptMethod_DES
    "3" -> Right EncryptMethod_PKCSDES
    "4" -> Right EncryptMethod_PGPDES
    "5" -> Right EncryptMethod_PGPDESMD5
    "6" -> Right EncryptMethod_PEM
    v -> Left ("Unknown EncryptMethod: " <> show v)

-- FieldSpec {fieldNumber = 99, fieldName = "StopPx", fieldType = FieldTypePrice, fieldValues = []}
newtype StopPx = StopPx {unStopPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StopPx

instance IsField StopPx where
  fieldTag Proxy = 99
  fieldIsData Proxy = False
  fieldToValue = toValue . unStopPx
  fieldFromValue = fromValue >=> (prettyValidate . StopPx)

-- FieldSpec {fieldNumber = 100, fieldName = "ExDestination", fieldType = FieldTypeExchange, fieldValues = []}
newtype ExDestination = ExDestination {unExDestination :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExDestination

instance IsField ExDestination where
  fieldTag Proxy = 100
  fieldIsData Proxy = False
  fieldToValue = toValue . unExDestination
  fieldFromValue = fromValue >=> (prettyValidate . ExDestination)

-- FieldSpec {fieldNumber = 102, fieldName = "CxlRejReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "TOO_LATE_TO_CANCEL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_ORDER"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BROKER_CREDIT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ORDER_ALREADY_IN_PENDING_STATUS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "ORIG_ORD_MOD_TIME"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "DUPLICATE_CL_ORD_ID"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data CxlRejReason
  = CxlRejReason_TOO_LATE_TO_CANCEL
  | CxlRejReason_UNKNOWN_ORDER
  | CxlRejReason_BROKER_CREDIT
  | CxlRejReason_ORDER_ALREADY_IN_PENDING_STATUS
  | CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST
  | CxlRejReason_ORIG_ORD_MOD_TIME
  | CxlRejReason_DUPLICATE_CL_ORD_ID
  | CxlRejReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity CxlRejReason

instance IsField CxlRejReason where
  fieldTag Proxy = 102
  fieldIsData Proxy = False
  fieldToValue = \case
    CxlRejReason_TOO_LATE_TO_CANCEL -> "0"
    CxlRejReason_UNKNOWN_ORDER -> "1"
    CxlRejReason_BROKER_CREDIT -> "2"
    CxlRejReason_ORDER_ALREADY_IN_PENDING_STATUS -> "3"
    CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST -> "4"
    CxlRejReason_ORIG_ORD_MOD_TIME -> "5"
    CxlRejReason_DUPLICATE_CL_ORD_ID -> "6"
    CxlRejReason_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right CxlRejReason_TOO_LATE_TO_CANCEL
    "1" -> Right CxlRejReason_UNKNOWN_ORDER
    "2" -> Right CxlRejReason_BROKER_CREDIT
    "3" -> Right CxlRejReason_ORDER_ALREADY_IN_PENDING_STATUS
    "4" -> Right CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST
    "5" -> Right CxlRejReason_ORIG_ORD_MOD_TIME
    "6" -> Right CxlRejReason_DUPLICATE_CL_ORD_ID
    "99" -> Right CxlRejReason_OTHER
    v -> Left ("Unknown CxlRejReason: " <> show v)

-- FieldSpec {fieldNumber = 103, fieldName = "OrdRejReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "BROKER_CREDIT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXCHANGE_CLOSED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ORDER_EXCEEDS_LIMIT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "TOO_LATE_TO_ENTER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "UNKNOWN_ORDER"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "DUPLICATE_ORDER"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "STALE_ORDER"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "TRADE_ALONG_REQUIRED"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "INVALID_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "UNSUPPORTED_ORDER_CHARACTERISTIC"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "INCORRECT_QUANTITY"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "INCORRECT_ALLOCATED_QUANTITY"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "UNKNOWN_ACCOUNT"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data OrdRejReason
  = OrdRejReason_BROKER_CREDIT
  | OrdRejReason_UNKNOWN_SYMBOL
  | OrdRejReason_EXCHANGE_CLOSED
  | OrdRejReason_ORDER_EXCEEDS_LIMIT
  | OrdRejReason_TOO_LATE_TO_ENTER
  | OrdRejReason_UNKNOWN_ORDER
  | OrdRejReason_DUPLICATE_ORDER
  | OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER
  | OrdRejReason_STALE_ORDER
  | OrdRejReason_TRADE_ALONG_REQUIRED
  | OrdRejReason_INVALID_INVESTOR_ID
  | OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC
  | OrdRejReason_INCORRECT_QUANTITY
  | OrdRejReason_INCORRECT_ALLOCATED_QUANTITY
  | OrdRejReason_UNKNOWN_ACCOUNT
  | OrdRejReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity OrdRejReason

instance IsField OrdRejReason where
  fieldTag Proxy = 103
  fieldIsData Proxy = False
  fieldToValue = \case
    OrdRejReason_BROKER_CREDIT -> "0"
    OrdRejReason_UNKNOWN_SYMBOL -> "1"
    OrdRejReason_EXCHANGE_CLOSED -> "2"
    OrdRejReason_ORDER_EXCEEDS_LIMIT -> "3"
    OrdRejReason_TOO_LATE_TO_ENTER -> "4"
    OrdRejReason_UNKNOWN_ORDER -> "5"
    OrdRejReason_DUPLICATE_ORDER -> "6"
    OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER -> "7"
    OrdRejReason_STALE_ORDER -> "8"
    OrdRejReason_TRADE_ALONG_REQUIRED -> "9"
    OrdRejReason_INVALID_INVESTOR_ID -> "10"
    OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC -> "11"
    OrdRejReason_INCORRECT_QUANTITY -> "13"
    OrdRejReason_INCORRECT_ALLOCATED_QUANTITY -> "14"
    OrdRejReason_UNKNOWN_ACCOUNT -> "15"
    OrdRejReason_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right OrdRejReason_BROKER_CREDIT
    "1" -> Right OrdRejReason_UNKNOWN_SYMBOL
    "2" -> Right OrdRejReason_EXCHANGE_CLOSED
    "3" -> Right OrdRejReason_ORDER_EXCEEDS_LIMIT
    "4" -> Right OrdRejReason_TOO_LATE_TO_ENTER
    "5" -> Right OrdRejReason_UNKNOWN_ORDER
    "6" -> Right OrdRejReason_DUPLICATE_ORDER
    "7" -> Right OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER
    "8" -> Right OrdRejReason_STALE_ORDER
    "9" -> Right OrdRejReason_TRADE_ALONG_REQUIRED
    "10" -> Right OrdRejReason_INVALID_INVESTOR_ID
    "11" -> Right OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC
    "13" -> Right OrdRejReason_INCORRECT_QUANTITY
    "14" -> Right OrdRejReason_INCORRECT_ALLOCATED_QUANTITY
    "15" -> Right OrdRejReason_UNKNOWN_ACCOUNT
    "99" -> Right OrdRejReason_OTHER
    v -> Left ("Unknown OrdRejReason: " <> show v)

-- FieldSpec {fieldNumber = 104, fieldName = "IOIQualifier", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "ALL_OR_NONE"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "MARKET_ON_CLOSE"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "AT_THE_CLOSE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "VWAP"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "IN_TOUCH_WITH"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LIMIT"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MORE_BEHIND"},FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "AT_THE_OPEN"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "TAKING_A_POSITION"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "AT_THE_MARKET"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "READY_TO_TRADE"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "PORTFOLIO_SHOWN"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "THROUGH_THE_DAY"},FieldValueSpec {fieldValueEnum = "V", fieldValueDescription = "VERSUS"},FieldValueSpec {fieldValueEnum = "W", fieldValueDescription = "INDICATION"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "CROSSING_OPPORTUNITY"},FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "AT_THE_MIDPOINT"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "PRE_OPEN"}]}
data IOIQualifier
  = IOIQualifier_ALL_OR_NONE
  | IOIQualifier_MARKET_ON_CLOSE
  | IOIQualifier_AT_THE_CLOSE
  | IOIQualifier_VWAP
  | IOIQualifier_IN_TOUCH_WITH
  | IOIQualifier_LIMIT
  | IOIQualifier_MORE_BEHIND
  | IOIQualifier_AT_THE_OPEN
  | IOIQualifier_TAKING_A_POSITION
  | IOIQualifier_AT_THE_MARKET
  | IOIQualifier_READY_TO_TRADE
  | IOIQualifier_PORTFOLIO_SHOWN
  | IOIQualifier_THROUGH_THE_DAY
  | IOIQualifier_VERSUS
  | IOIQualifier_INDICATION
  | IOIQualifier_CROSSING_OPPORTUNITY
  | IOIQualifier_AT_THE_MIDPOINT
  | IOIQualifier_PRE_OPEN
  deriving stock (Show, Eq, Generic)

instance Validity IOIQualifier

instance IsField IOIQualifier where
  fieldTag Proxy = 104
  fieldIsData Proxy = False
  fieldToValue = \case
    IOIQualifier_ALL_OR_NONE -> "A"
    IOIQualifier_MARKET_ON_CLOSE -> "B"
    IOIQualifier_AT_THE_CLOSE -> "C"
    IOIQualifier_VWAP -> "D"
    IOIQualifier_IN_TOUCH_WITH -> "I"
    IOIQualifier_LIMIT -> "L"
    IOIQualifier_MORE_BEHIND -> "M"
    IOIQualifier_AT_THE_OPEN -> "O"
    IOIQualifier_TAKING_A_POSITION -> "P"
    IOIQualifier_AT_THE_MARKET -> "Q"
    IOIQualifier_READY_TO_TRADE -> "R"
    IOIQualifier_PORTFOLIO_SHOWN -> "S"
    IOIQualifier_THROUGH_THE_DAY -> "T"
    IOIQualifier_VERSUS -> "V"
    IOIQualifier_INDICATION -> "W"
    IOIQualifier_CROSSING_OPPORTUNITY -> "X"
    IOIQualifier_AT_THE_MIDPOINT -> "Y"
    IOIQualifier_PRE_OPEN -> "Z"
  fieldFromValue = \case
    "A" -> Right IOIQualifier_ALL_OR_NONE
    "B" -> Right IOIQualifier_MARKET_ON_CLOSE
    "C" -> Right IOIQualifier_AT_THE_CLOSE
    "D" -> Right IOIQualifier_VWAP
    "I" -> Right IOIQualifier_IN_TOUCH_WITH
    "L" -> Right IOIQualifier_LIMIT
    "M" -> Right IOIQualifier_MORE_BEHIND
    "O" -> Right IOIQualifier_AT_THE_OPEN
    "P" -> Right IOIQualifier_TAKING_A_POSITION
    "Q" -> Right IOIQualifier_AT_THE_MARKET
    "R" -> Right IOIQualifier_READY_TO_TRADE
    "S" -> Right IOIQualifier_PORTFOLIO_SHOWN
    "T" -> Right IOIQualifier_THROUGH_THE_DAY
    "V" -> Right IOIQualifier_VERSUS
    "W" -> Right IOIQualifier_INDICATION
    "X" -> Right IOIQualifier_CROSSING_OPPORTUNITY
    "Y" -> Right IOIQualifier_AT_THE_MIDPOINT
    "Z" -> Right IOIQualifier_PRE_OPEN
    v -> Left ("Unknown IOIQualifier: " <> show v)

-- FieldSpec {fieldNumber = 106, fieldName = "Issuer", fieldType = FieldTypeString, fieldValues = []}
newtype Issuer = Issuer {unIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Issuer

instance IsField Issuer where
  fieldTag Proxy = 106
  fieldIsData Proxy = False
  fieldToValue = toValue . unIssuer
  fieldFromValue = fromValue >=> (prettyValidate . Issuer)

-- FieldSpec {fieldNumber = 107, fieldName = "SecurityDesc", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityDesc = SecurityDesc {unSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityDesc

instance IsField SecurityDesc where
  fieldTag Proxy = 107
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . SecurityDesc)

-- FieldSpec {fieldNumber = 108, fieldName = "HeartBtInt", fieldType = FieldTypeInt, fieldValues = []}
newtype HeartBtInt = HeartBtInt {unHeartBtInt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HeartBtInt

instance IsField HeartBtInt where
  fieldTag Proxy = 108
  fieldIsData Proxy = False
  fieldToValue = toValue . unHeartBtInt
  fieldFromValue = fromValue >=> (prettyValidate . HeartBtInt)

-- FieldSpec {fieldNumber = 110, fieldName = "MinQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype MinQty = MinQty {unMinQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MinQty

instance IsField MinQty where
  fieldTag Proxy = 110
  fieldIsData Proxy = False
  fieldToValue = toValue . unMinQty
  fieldFromValue = fromValue >=> (prettyValidate . MinQty)

-- FieldSpec {fieldNumber = 111, fieldName = "MaxFloor", fieldType = FieldTypeQTY, fieldValues = []}
newtype MaxFloor = MaxFloor {unMaxFloor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaxFloor

instance IsField MaxFloor where
  fieldTag Proxy = 111
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaxFloor
  fieldFromValue = fromValue >=> (prettyValidate . MaxFloor)

-- FieldSpec {fieldNumber = 112, fieldName = "TestReqID", fieldType = FieldTypeString, fieldValues = []}
newtype TestReqID = TestReqID {unTestReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TestReqID

instance IsField TestReqID where
  fieldTag Proxy = 112
  fieldIsData Proxy = False
  fieldToValue = toValue . unTestReqID
  fieldFromValue = fromValue >=> (prettyValidate . TestReqID)

-- FieldSpec {fieldNumber = 113, fieldName = "ReportToExch", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data ReportToExch
  = ReportToExch_YES
  | ReportToExch_NO
  deriving stock (Show, Eq, Generic)

instance Validity ReportToExch

instance IsField ReportToExch where
  fieldTag Proxy = 113
  fieldIsData Proxy = False
  fieldToValue = \case
    ReportToExch_YES -> "Y"
    ReportToExch_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right ReportToExch_YES
    "N" -> Right ReportToExch_NO
    v -> Left ("Unknown ReportToExch: " <> show v)

-- FieldSpec {fieldNumber = 114, fieldName = "LocateReqd", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data LocateReqd
  = LocateReqd_YES
  | LocateReqd_NO
  deriving stock (Show, Eq, Generic)

instance Validity LocateReqd

instance IsField LocateReqd where
  fieldTag Proxy = 114
  fieldIsData Proxy = False
  fieldToValue = \case
    LocateReqd_YES -> "Y"
    LocateReqd_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right LocateReqd_YES
    "N" -> Right LocateReqd_NO
    v -> Left ("Unknown LocateReqd: " <> show v)

-- FieldSpec {fieldNumber = 115, fieldName = "OnBehalfOfCompID", fieldType = FieldTypeString, fieldValues = []}
newtype OnBehalfOfCompID = OnBehalfOfCompID {unOnBehalfOfCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OnBehalfOfCompID

instance IsField OnBehalfOfCompID where
  fieldTag Proxy = 115
  fieldIsData Proxy = False
  fieldToValue = toValue . unOnBehalfOfCompID
  fieldFromValue = fromValue >=> (prettyValidate . OnBehalfOfCompID)

-- FieldSpec {fieldNumber = 116, fieldName = "OnBehalfOfSubID", fieldType = FieldTypeString, fieldValues = []}
newtype OnBehalfOfSubID = OnBehalfOfSubID {unOnBehalfOfSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OnBehalfOfSubID

instance IsField OnBehalfOfSubID where
  fieldTag Proxy = 116
  fieldIsData Proxy = False
  fieldToValue = toValue . unOnBehalfOfSubID
  fieldFromValue = fromValue >=> (prettyValidate . OnBehalfOfSubID)

-- FieldSpec {fieldNumber = 117, fieldName = "QuoteID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteID = QuoteID {unQuoteID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteID

instance IsField QuoteID where
  fieldTag Proxy = 117
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteID)

-- FieldSpec {fieldNumber = 118, fieldName = "NetMoney", fieldType = FieldTypeAMT, fieldValues = []}
newtype NetMoney = NetMoney {unNetMoney :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetMoney

instance IsField NetMoney where
  fieldTag Proxy = 118
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetMoney
  fieldFromValue = fromValue >=> (prettyValidate . NetMoney)

-- FieldSpec {fieldNumber = 119, fieldName = "SettlCurrAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype SettlCurrAmt = SettlCurrAmt {unSettlCurrAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrAmt

instance IsField SettlCurrAmt where
  fieldTag Proxy = 119
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrAmt
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrAmt)

-- FieldSpec {fieldNumber = 120, fieldName = "SettlCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype SettlCurrency = SettlCurrency {unSettlCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrency

instance IsField SettlCurrency where
  fieldTag Proxy = 120
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrency
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrency)

-- FieldSpec {fieldNumber = 121, fieldName = "ForexReq", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data ForexReq
  = ForexReq_YES
  | ForexReq_NO
  deriving stock (Show, Eq, Generic)

instance Validity ForexReq

instance IsField ForexReq where
  fieldTag Proxy = 121
  fieldIsData Proxy = False
  fieldToValue = \case
    ForexReq_YES -> "Y"
    ForexReq_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right ForexReq_YES
    "N" -> Right ForexReq_NO
    v -> Left ("Unknown ForexReq: " <> show v)

-- FieldSpec {fieldNumber = 122, fieldName = "OrigSendingTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype OrigSendingTime = OrigSendingTime {unOrigSendingTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigSendingTime

instance IsField OrigSendingTime where
  fieldTag Proxy = 122
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigSendingTime
  fieldFromValue = fromValue >=> (prettyValidate . OrigSendingTime)

-- FieldSpec {fieldNumber = 123, fieldName = "GapFillFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data GapFillFlag
  = GapFillFlag_YES
  | GapFillFlag_NO
  deriving stock (Show, Eq, Generic)

instance Validity GapFillFlag

instance IsField GapFillFlag where
  fieldTag Proxy = 123
  fieldIsData Proxy = False
  fieldToValue = \case
    GapFillFlag_YES -> "Y"
    GapFillFlag_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right GapFillFlag_YES
    "N" -> Right GapFillFlag_NO
    v -> Left ("Unknown GapFillFlag: " <> show v)

-- FieldSpec {fieldNumber = 124, fieldName = "NoExecs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoExecs = NoExecs {unNoExecs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoExecs

instance IsField NoExecs where
  fieldTag Proxy = 124
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoExecs
  fieldFromValue = fromValue >=> (prettyValidate . NoExecs)

-- FieldSpec {fieldNumber = 126, fieldName = "ExpireTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype ExpireTime = ExpireTime {unExpireTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExpireTime

instance IsField ExpireTime where
  fieldTag Proxy = 126
  fieldIsData Proxy = False
  fieldToValue = toValue . unExpireTime
  fieldFromValue = fromValue >=> (prettyValidate . ExpireTime)

-- FieldSpec {fieldNumber = 127, fieldName = "DKReason", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "WRONG_SIDE"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "QUANTITY_EXCEEDS_ORDER"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NO_MATCHING_ORDER"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "PRICE_EXCEEDS_LIMIT"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "CALCULATION_DIFFERENCE"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "OTHER"}]}
data DKReason
  = DKReason_UNKNOWN_SYMBOL
  | DKReason_WRONG_SIDE
  | DKReason_QUANTITY_EXCEEDS_ORDER
  | DKReason_NO_MATCHING_ORDER
  | DKReason_PRICE_EXCEEDS_LIMIT
  | DKReason_CALCULATION_DIFFERENCE
  | DKReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity DKReason

instance IsField DKReason where
  fieldTag Proxy = 127
  fieldIsData Proxy = False
  fieldToValue = \case
    DKReason_UNKNOWN_SYMBOL -> "A"
    DKReason_WRONG_SIDE -> "B"
    DKReason_QUANTITY_EXCEEDS_ORDER -> "C"
    DKReason_NO_MATCHING_ORDER -> "D"
    DKReason_PRICE_EXCEEDS_LIMIT -> "E"
    DKReason_CALCULATION_DIFFERENCE -> "F"
    DKReason_OTHER -> "Z"
  fieldFromValue = \case
    "A" -> Right DKReason_UNKNOWN_SYMBOL
    "B" -> Right DKReason_WRONG_SIDE
    "C" -> Right DKReason_QUANTITY_EXCEEDS_ORDER
    "D" -> Right DKReason_NO_MATCHING_ORDER
    "E" -> Right DKReason_PRICE_EXCEEDS_LIMIT
    "F" -> Right DKReason_CALCULATION_DIFFERENCE
    "Z" -> Right DKReason_OTHER
    v -> Left ("Unknown DKReason: " <> show v)

-- FieldSpec {fieldNumber = 128, fieldName = "DeliverToCompID", fieldType = FieldTypeString, fieldValues = []}
newtype DeliverToCompID = DeliverToCompID {unDeliverToCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliverToCompID

instance IsField DeliverToCompID where
  fieldTag Proxy = 128
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliverToCompID
  fieldFromValue = fromValue >=> (prettyValidate . DeliverToCompID)

-- FieldSpec {fieldNumber = 129, fieldName = "DeliverToSubID", fieldType = FieldTypeString, fieldValues = []}
newtype DeliverToSubID = DeliverToSubID {unDeliverToSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliverToSubID

instance IsField DeliverToSubID where
  fieldTag Proxy = 129
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliverToSubID
  fieldFromValue = fromValue >=> (prettyValidate . DeliverToSubID)

-- FieldSpec {fieldNumber = 130, fieldName = "IOINaturalFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data IOINaturalFlag
  = IOINaturalFlag_YES
  | IOINaturalFlag_NO
  deriving stock (Show, Eq, Generic)

instance Validity IOINaturalFlag

instance IsField IOINaturalFlag where
  fieldTag Proxy = 130
  fieldIsData Proxy = False
  fieldToValue = \case
    IOINaturalFlag_YES -> "Y"
    IOINaturalFlag_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right IOINaturalFlag_YES
    "N" -> Right IOINaturalFlag_NO
    v -> Left ("Unknown IOINaturalFlag: " <> show v)

-- FieldSpec {fieldNumber = 131, fieldName = "QuoteReqID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteReqID = QuoteReqID {unQuoteReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteReqID

instance IsField QuoteReqID where
  fieldTag Proxy = 131
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteReqID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteReqID)

-- FieldSpec {fieldNumber = 132, fieldName = "BidPx", fieldType = FieldTypePrice, fieldValues = []}
newtype BidPx = BidPx {unBidPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidPx

instance IsField BidPx where
  fieldTag Proxy = 132
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidPx
  fieldFromValue = fromValue >=> (prettyValidate . BidPx)

-- FieldSpec {fieldNumber = 133, fieldName = "OfferPx", fieldType = FieldTypePrice, fieldValues = []}
newtype OfferPx = OfferPx {unOfferPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferPx

instance IsField OfferPx where
  fieldTag Proxy = 133
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferPx
  fieldFromValue = fromValue >=> (prettyValidate . OfferPx)

-- FieldSpec {fieldNumber = 134, fieldName = "BidSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype BidSize = BidSize {unBidSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidSize

instance IsField BidSize where
  fieldTag Proxy = 134
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidSize
  fieldFromValue = fromValue >=> (prettyValidate . BidSize)

-- FieldSpec {fieldNumber = 135, fieldName = "OfferSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype OfferSize = OfferSize {unOfferSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferSize

instance IsField OfferSize where
  fieldTag Proxy = 135
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferSize
  fieldFromValue = fromValue >=> (prettyValidate . OfferSize)

-- FieldSpec {fieldNumber = 136, fieldName = "NoMiscFees", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoMiscFees = NoMiscFees {unNoMiscFees :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoMiscFees

instance IsField NoMiscFees where
  fieldTag Proxy = 136
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoMiscFees
  fieldFromValue = fromValue >=> (prettyValidate . NoMiscFees)

-- FieldSpec {fieldNumber = 137, fieldName = "MiscFeeAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype MiscFeeAmt = MiscFeeAmt {unMiscFeeAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MiscFeeAmt

instance IsField MiscFeeAmt where
  fieldTag Proxy = 137
  fieldIsData Proxy = False
  fieldToValue = toValue . unMiscFeeAmt
  fieldFromValue = fromValue >=> (prettyValidate . MiscFeeAmt)

-- FieldSpec {fieldNumber = 138, fieldName = "MiscFeeCurr", fieldType = FieldTypeCurrency, fieldValues = []}
newtype MiscFeeCurr = MiscFeeCurr {unMiscFeeCurr :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MiscFeeCurr

instance IsField MiscFeeCurr where
  fieldTag Proxy = 138
  fieldIsData Proxy = False
  fieldToValue = toValue . unMiscFeeCurr
  fieldFromValue = fromValue >=> (prettyValidate . MiscFeeCurr)

-- FieldSpec {fieldNumber = 139, fieldName = "MiscFeeType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REGULATORY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TAX"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "LOCAL_COMMISSION"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "EXCHANGE_FEES"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "STAMP"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "LEVY"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "OTHER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "MARKUP"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CONSUMPTION_TAX"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "PER_TRANSACTION"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "CONVERSION"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "AGENT"}]}
data MiscFeeType
  = MiscFeeType_REGULATORY
  | MiscFeeType_TAX
  | MiscFeeType_LOCAL_COMMISSION
  | MiscFeeType_EXCHANGE_FEES
  | MiscFeeType_STAMP
  | MiscFeeType_LEVY
  | MiscFeeType_OTHER
  | MiscFeeType_MARKUP
  | MiscFeeType_CONSUMPTION_TAX
  | MiscFeeType_PER_TRANSACTION
  | MiscFeeType_CONVERSION
  | MiscFeeType_AGENT
  deriving stock (Show, Eq, Generic)

instance Validity MiscFeeType

instance IsField MiscFeeType where
  fieldTag Proxy = 139
  fieldIsData Proxy = False
  fieldToValue = \case
    MiscFeeType_REGULATORY -> "1"
    MiscFeeType_TAX -> "2"
    MiscFeeType_LOCAL_COMMISSION -> "3"
    MiscFeeType_EXCHANGE_FEES -> "4"
    MiscFeeType_STAMP -> "5"
    MiscFeeType_LEVY -> "6"
    MiscFeeType_OTHER -> "7"
    MiscFeeType_MARKUP -> "8"
    MiscFeeType_CONSUMPTION_TAX -> "9"
    MiscFeeType_PER_TRANSACTION -> "10"
    MiscFeeType_CONVERSION -> "11"
    MiscFeeType_AGENT -> "12"
  fieldFromValue = \case
    "1" -> Right MiscFeeType_REGULATORY
    "2" -> Right MiscFeeType_TAX
    "3" -> Right MiscFeeType_LOCAL_COMMISSION
    "4" -> Right MiscFeeType_EXCHANGE_FEES
    "5" -> Right MiscFeeType_STAMP
    "6" -> Right MiscFeeType_LEVY
    "7" -> Right MiscFeeType_OTHER
    "8" -> Right MiscFeeType_MARKUP
    "9" -> Right MiscFeeType_CONSUMPTION_TAX
    "10" -> Right MiscFeeType_PER_TRANSACTION
    "11" -> Right MiscFeeType_CONVERSION
    "12" -> Right MiscFeeType_AGENT
    v -> Left ("Unknown MiscFeeType: " <> show v)

-- FieldSpec {fieldNumber = 140, fieldName = "PrevClosePx", fieldType = FieldTypePrice, fieldValues = []}
newtype PrevClosePx = PrevClosePx {unPrevClosePx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PrevClosePx

instance IsField PrevClosePx where
  fieldTag Proxy = 140
  fieldIsData Proxy = False
  fieldToValue = toValue . unPrevClosePx
  fieldFromValue = fromValue >=> (prettyValidate . PrevClosePx)

-- FieldSpec {fieldNumber = 141, fieldName = "ResetSeqNumFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data ResetSeqNumFlag
  = ResetSeqNumFlag_YES
  | ResetSeqNumFlag_NO
  deriving stock (Show, Eq, Generic)

instance Validity ResetSeqNumFlag

instance IsField ResetSeqNumFlag where
  fieldTag Proxy = 141
  fieldIsData Proxy = False
  fieldToValue = \case
    ResetSeqNumFlag_YES -> "Y"
    ResetSeqNumFlag_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right ResetSeqNumFlag_YES
    "N" -> Right ResetSeqNumFlag_NO
    v -> Left ("Unknown ResetSeqNumFlag: " <> show v)

-- FieldSpec {fieldNumber = 142, fieldName = "SenderLocationID", fieldType = FieldTypeString, fieldValues = []}
newtype SenderLocationID = SenderLocationID {unSenderLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SenderLocationID

instance IsField SenderLocationID where
  fieldTag Proxy = 142
  fieldIsData Proxy = False
  fieldToValue = toValue . unSenderLocationID
  fieldFromValue = fromValue >=> (prettyValidate . SenderLocationID)

-- FieldSpec {fieldNumber = 143, fieldName = "TargetLocationID", fieldType = FieldTypeString, fieldValues = []}
newtype TargetLocationID = TargetLocationID {unTargetLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetLocationID

instance IsField TargetLocationID where
  fieldTag Proxy = 143
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetLocationID
  fieldFromValue = fromValue >=> (prettyValidate . TargetLocationID)

-- FieldSpec {fieldNumber = 144, fieldName = "OnBehalfOfLocationID", fieldType = FieldTypeString, fieldValues = []}
newtype OnBehalfOfLocationID = OnBehalfOfLocationID {unOnBehalfOfLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OnBehalfOfLocationID

instance IsField OnBehalfOfLocationID where
  fieldTag Proxy = 144
  fieldIsData Proxy = False
  fieldToValue = toValue . unOnBehalfOfLocationID
  fieldFromValue = fromValue >=> (prettyValidate . OnBehalfOfLocationID)

-- FieldSpec {fieldNumber = 145, fieldName = "DeliverToLocationID", fieldType = FieldTypeString, fieldValues = []}
newtype DeliverToLocationID = DeliverToLocationID {unDeliverToLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliverToLocationID

instance IsField DeliverToLocationID where
  fieldTag Proxy = 145
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliverToLocationID
  fieldFromValue = fromValue >=> (prettyValidate . DeliverToLocationID)

-- FieldSpec {fieldNumber = 146, fieldName = "NoRelatedSym", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoRelatedSym = NoRelatedSym {unNoRelatedSym :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoRelatedSym

instance IsField NoRelatedSym where
  fieldTag Proxy = 146
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoRelatedSym
  fieldFromValue = fromValue >=> (prettyValidate . NoRelatedSym)

-- FieldSpec {fieldNumber = 147, fieldName = "Subject", fieldType = FieldTypeString, fieldValues = []}
newtype Subject = Subject {unSubject :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Subject

instance IsField Subject where
  fieldTag Proxy = 147
  fieldIsData Proxy = False
  fieldToValue = toValue . unSubject
  fieldFromValue = fromValue >=> (prettyValidate . Subject)

-- FieldSpec {fieldNumber = 148, fieldName = "Headline", fieldType = FieldTypeString, fieldValues = []}
newtype Headline = Headline {unHeadline :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Headline

instance IsField Headline where
  fieldTag Proxy = 148
  fieldIsData Proxy = False
  fieldToValue = toValue . unHeadline
  fieldFromValue = fromValue >=> (prettyValidate . Headline)

-- FieldSpec {fieldNumber = 149, fieldName = "URLLink", fieldType = FieldTypeString, fieldValues = []}
newtype URLLink = URLLink {unURLLink :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity URLLink

instance IsField URLLink where
  fieldTag Proxy = 149
  fieldIsData Proxy = False
  fieldToValue = toValue . unURLLink
  fieldFromValue = fromValue >=> (prettyValidate . URLLink)

-- FieldSpec {fieldNumber = 150, fieldName = "ExecType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "DONE_FOR_DAY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCELED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REPLACED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PENDING_CANCEL"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STOPPED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "SUSPENDED"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "PENDING_NEW"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "CALCULATED"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EXPIRED"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "RESTATED"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "PENDING_REPLACE"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "TRADE"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "TRADE_CORRECT"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "TRADE_CANCEL"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "ORDER_STATUS"}]}
data ExecType
  = ExecType_NEW
  | ExecType_DONE_FOR_DAY
  | ExecType_CANCELED
  | ExecType_REPLACED
  | ExecType_PENDING_CANCEL
  | ExecType_STOPPED
  | ExecType_REJECTED
  | ExecType_SUSPENDED
  | ExecType_PENDING_NEW
  | ExecType_CALCULATED
  | ExecType_EXPIRED
  | ExecType_RESTATED
  | ExecType_PENDING_REPLACE
  | ExecType_TRADE
  | ExecType_TRADE_CORRECT
  | ExecType_TRADE_CANCEL
  | ExecType_ORDER_STATUS
  deriving stock (Show, Eq, Generic)

instance Validity ExecType

instance IsField ExecType where
  fieldTag Proxy = 150
  fieldIsData Proxy = False
  fieldToValue = \case
    ExecType_NEW -> "0"
    ExecType_DONE_FOR_DAY -> "3"
    ExecType_CANCELED -> "4"
    ExecType_REPLACED -> "5"
    ExecType_PENDING_CANCEL -> "6"
    ExecType_STOPPED -> "7"
    ExecType_REJECTED -> "8"
    ExecType_SUSPENDED -> "9"
    ExecType_PENDING_NEW -> "A"
    ExecType_CALCULATED -> "B"
    ExecType_EXPIRED -> "C"
    ExecType_RESTATED -> "D"
    ExecType_PENDING_REPLACE -> "E"
    ExecType_TRADE -> "F"
    ExecType_TRADE_CORRECT -> "G"
    ExecType_TRADE_CANCEL -> "H"
    ExecType_ORDER_STATUS -> "I"
  fieldFromValue = \case
    "0" -> Right ExecType_NEW
    "3" -> Right ExecType_DONE_FOR_DAY
    "4" -> Right ExecType_CANCELED
    "5" -> Right ExecType_REPLACED
    "6" -> Right ExecType_PENDING_CANCEL
    "7" -> Right ExecType_STOPPED
    "8" -> Right ExecType_REJECTED
    "9" -> Right ExecType_SUSPENDED
    "A" -> Right ExecType_PENDING_NEW
    "B" -> Right ExecType_CALCULATED
    "C" -> Right ExecType_EXPIRED
    "D" -> Right ExecType_RESTATED
    "E" -> Right ExecType_PENDING_REPLACE
    "F" -> Right ExecType_TRADE
    "G" -> Right ExecType_TRADE_CORRECT
    "H" -> Right ExecType_TRADE_CANCEL
    "I" -> Right ExecType_ORDER_STATUS
    v -> Left ("Unknown ExecType: " <> show v)

-- FieldSpec {fieldNumber = 151, fieldName = "LeavesQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LeavesQty = LeavesQty {unLeavesQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LeavesQty

instance IsField LeavesQty where
  fieldTag Proxy = 151
  fieldIsData Proxy = False
  fieldToValue = toValue . unLeavesQty
  fieldFromValue = fromValue >=> (prettyValidate . LeavesQty)

-- FieldSpec {fieldNumber = 152, fieldName = "CashOrderQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype CashOrderQty = CashOrderQty {unCashOrderQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashOrderQty

instance IsField CashOrderQty where
  fieldTag Proxy = 152
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashOrderQty
  fieldFromValue = fromValue >=> (prettyValidate . CashOrderQty)

-- FieldSpec {fieldNumber = 153, fieldName = "AllocAvgPx", fieldType = FieldTypePrice, fieldValues = []}
newtype AllocAvgPx = AllocAvgPx {unAllocAvgPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocAvgPx

instance IsField AllocAvgPx where
  fieldTag Proxy = 153
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocAvgPx
  fieldFromValue = fromValue >=> (prettyValidate . AllocAvgPx)

-- FieldSpec {fieldNumber = 154, fieldName = "AllocNetMoney", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllocNetMoney = AllocNetMoney {unAllocNetMoney :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocNetMoney

instance IsField AllocNetMoney where
  fieldTag Proxy = 154
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocNetMoney
  fieldFromValue = fromValue >=> (prettyValidate . AllocNetMoney)

-- FieldSpec {fieldNumber = 155, fieldName = "SettlCurrFxRate", fieldType = FieldTypeFloat, fieldValues = []}
newtype SettlCurrFxRate = SettlCurrFxRate {unSettlCurrFxRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrFxRate

instance IsField SettlCurrFxRate where
  fieldTag Proxy = 155
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrFxRate
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrFxRate)

-- FieldSpec {fieldNumber = 156, fieldName = "SettlCurrFxRateCalc", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MULTIPLY"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "DIVIDE"}]}
data SettlCurrFxRateCalc
  = SettlCurrFxRateCalc_MULTIPLY
  | SettlCurrFxRateCalc_DIVIDE
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrFxRateCalc

instance IsField SettlCurrFxRateCalc where
  fieldTag Proxy = 156
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlCurrFxRateCalc_MULTIPLY -> "M"
    SettlCurrFxRateCalc_DIVIDE -> "D"
  fieldFromValue = \case
    "M" -> Right SettlCurrFxRateCalc_MULTIPLY
    "D" -> Right SettlCurrFxRateCalc_DIVIDE
    v -> Left ("Unknown SettlCurrFxRateCalc: " <> show v)

-- FieldSpec {fieldNumber = 157, fieldName = "NumDaysInterest", fieldType = FieldTypeInt, fieldValues = []}
newtype NumDaysInterest = NumDaysInterest {unNumDaysInterest :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NumDaysInterest

instance IsField NumDaysInterest where
  fieldTag Proxy = 157
  fieldIsData Proxy = False
  fieldToValue = toValue . unNumDaysInterest
  fieldFromValue = fromValue >=> (prettyValidate . NumDaysInterest)

-- FieldSpec {fieldNumber = 158, fieldName = "AccruedInterestRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype AccruedInterestRate = AccruedInterestRate {unAccruedInterestRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AccruedInterestRate

instance IsField AccruedInterestRate where
  fieldTag Proxy = 158
  fieldIsData Proxy = False
  fieldToValue = toValue . unAccruedInterestRate
  fieldFromValue = fromValue >=> (prettyValidate . AccruedInterestRate)

-- FieldSpec {fieldNumber = 159, fieldName = "AccruedInterestAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype AccruedInterestAmt = AccruedInterestAmt {unAccruedInterestAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AccruedInterestAmt

instance IsField AccruedInterestAmt where
  fieldTag Proxy = 159
  fieldIsData Proxy = False
  fieldToValue = toValue . unAccruedInterestAmt
  fieldFromValue = fromValue >=> (prettyValidate . AccruedInterestAmt)

-- FieldSpec {fieldNumber = 160, fieldName = "SettlInstMode", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STANDING_INSTRUCTIONS_PROVIDED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REQUEST_REJECT"}]}
data SettlInstMode
  = SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED
  | SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT
  | SettlInstMode_REQUEST_REJECT
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstMode

instance IsField SettlInstMode where
  fieldTag Proxy = 160
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED -> "1"
    SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT -> "4"
    SettlInstMode_REQUEST_REJECT -> "5"
  fieldFromValue = \case
    "1" -> Right SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED
    "4" -> Right SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT
    "5" -> Right SettlInstMode_REQUEST_REJECT
    v -> Left ("Unknown SettlInstMode: " <> show v)

-- FieldSpec {fieldNumber = 161, fieldName = "AllocText", fieldType = FieldTypeString, fieldValues = []}
newtype AllocText = AllocText {unAllocText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocText

instance IsField AllocText where
  fieldTag Proxy = 161
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocText
  fieldFromValue = fromValue >=> (prettyValidate . AllocText)

-- FieldSpec {fieldNumber = 162, fieldName = "SettlInstID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlInstID = SettlInstID {unSettlInstID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstID

instance IsField SettlInstID where
  fieldTag Proxy = 162
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstID
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstID)

-- FieldSpec {fieldNumber = 163, fieldName = "SettlInstTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "RESTATE"}]}
data SettlInstTransType
  = SettlInstTransType_NEW
  | SettlInstTransType_CANCEL
  | SettlInstTransType_REPLACE
  | SettlInstTransType_RESTATE
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstTransType

instance IsField SettlInstTransType where
  fieldTag Proxy = 163
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlInstTransType_NEW -> "N"
    SettlInstTransType_CANCEL -> "C"
    SettlInstTransType_REPLACE -> "R"
    SettlInstTransType_RESTATE -> "T"
  fieldFromValue = \case
    "N" -> Right SettlInstTransType_NEW
    "C" -> Right SettlInstTransType_CANCEL
    "R" -> Right SettlInstTransType_REPLACE
    "T" -> Right SettlInstTransType_RESTATE
    v -> Left ("Unknown SettlInstTransType: " <> show v)

-- FieldSpec {fieldNumber = 164, fieldName = "EmailThreadID", fieldType = FieldTypeString, fieldValues = []}
newtype EmailThreadID = EmailThreadID {unEmailThreadID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EmailThreadID

instance IsField EmailThreadID where
  fieldTag Proxy = 164
  fieldIsData Proxy = False
  fieldToValue = toValue . unEmailThreadID
  fieldFromValue = fromValue >=> (prettyValidate . EmailThreadID)

-- FieldSpec {fieldNumber = 165, fieldName = "SettlInstSource", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BROKER_CREDIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INSTITUTION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVESTOR"}]}
data SettlInstSource
  = SettlInstSource_BROKER_CREDIT
  | SettlInstSource_INSTITUTION
  | SettlInstSource_INVESTOR
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstSource

instance IsField SettlInstSource where
  fieldTag Proxy = 165
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlInstSource_BROKER_CREDIT -> "1"
    SettlInstSource_INSTITUTION -> "2"
    SettlInstSource_INVESTOR -> "3"
  fieldFromValue = \case
    "1" -> Right SettlInstSource_BROKER_CREDIT
    "2" -> Right SettlInstSource_INSTITUTION
    "3" -> Right SettlInstSource_INVESTOR
    v -> Left ("Unknown SettlInstSource: " <> show v)

-- FieldSpec {fieldNumber = 167, fieldName = "SecurityType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "EUSUPRA", fieldValueDescription = "EURO_SUPRANATIONAL_COUPONS"},FieldValueSpec {fieldValueEnum = "FAC", fieldValueDescription = "FEDERAL_AGENCY_COUPON"},FieldValueSpec {fieldValueEnum = "FADN", fieldValueDescription = "FEDERAL_AGENCY_DISCOUNT_NOTE"},FieldValueSpec {fieldValueEnum = "PEF", fieldValueDescription = "PRIVATE_EXPORT_FUNDING"},FieldValueSpec {fieldValueEnum = "SUPRA", fieldValueDescription = "USD_SUPRANATIONAL_COUPONS"},FieldValueSpec {fieldValueEnum = "CORP", fieldValueDescription = "CORPORATE_BOND"},FieldValueSpec {fieldValueEnum = "CPP", fieldValueDescription = "CORPORATE_PRIVATE_PLACEMENT"},FieldValueSpec {fieldValueEnum = "CB", fieldValueDescription = "CONVERTIBLE_BOND"},FieldValueSpec {fieldValueEnum = "DUAL", fieldValueDescription = "DUAL_CURRENCY"},FieldValueSpec {fieldValueEnum = "EUCORP", fieldValueDescription = "EURO_CORPORATE_BOND"},FieldValueSpec {fieldValueEnum = "XLINKD", fieldValueDescription = "INDEXED_LINKED"},FieldValueSpec {fieldValueEnum = "STRUCT", fieldValueDescription = "STRUCTURED_NOTES"},FieldValueSpec {fieldValueEnum = "YANK", fieldValueDescription = "YANKEE_CORPORATE_BOND"},FieldValueSpec {fieldValueEnum = "FOR", fieldValueDescription = "FOREIGN_EXCHANGE_CONTRACT"},FieldValueSpec {fieldValueEnum = "CS", fieldValueDescription = "COMMON_STOCK"},FieldValueSpec {fieldValueEnum = "PS", fieldValueDescription = "PREFERRED_STOCK"},FieldValueSpec {fieldValueEnum = "BRADY", fieldValueDescription = "BRADY_BOND"},FieldValueSpec {fieldValueEnum = "EUSOV", fieldValueDescription = "EURO_SOVEREIGNS"},FieldValueSpec {fieldValueEnum = "TBOND", fieldValueDescription = "US_TREASURY_BOND"},FieldValueSpec {fieldValueEnum = "TINT", fieldValueDescription = "INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE"},FieldValueSpec {fieldValueEnum = "TIPS", fieldValueDescription = "TREASURY_INFLATION_PROTECTED_SECURITIES"},FieldValueSpec {fieldValueEnum = "TCAL", fieldValueDescription = "PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE"},FieldValueSpec {fieldValueEnum = "TPRN", fieldValueDescription = "PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE"},FieldValueSpec {fieldValueEnum = "UST", fieldValueDescription = "US_TREASURY_NOTE_OLD"},FieldValueSpec {fieldValueEnum = "USTB", fieldValueDescription = "US_TREASURY_BILL_OLD"},FieldValueSpec {fieldValueEnum = "TNOTE", fieldValueDescription = "US_TREASURY_NOTE"},FieldValueSpec {fieldValueEnum = "TBILL", fieldValueDescription = "US_TREASURY_BILL"},FieldValueSpec {fieldValueEnum = "REPO", fieldValueDescription = "REPURCHASE"},FieldValueSpec {fieldValueEnum = "FORWARD", fieldValueDescription = "FORWARD"},FieldValueSpec {fieldValueEnum = "BUYSELL", fieldValueDescription = "BUY_SELLBACK"},FieldValueSpec {fieldValueEnum = "SECLOAN", fieldValueDescription = "SECURITIES_LOAN"},FieldValueSpec {fieldValueEnum = "SECPLEDGE", fieldValueDescription = "SECURITIES_PLEDGE"},FieldValueSpec {fieldValueEnum = "TERM", fieldValueDescription = "TERM_LOAN"},FieldValueSpec {fieldValueEnum = "RVLV", fieldValueDescription = "REVOLVER_LOAN"},FieldValueSpec {fieldValueEnum = "RVLVTRM", fieldValueDescription = "REVOLVER"},FieldValueSpec {fieldValueEnum = "BRIDGE", fieldValueDescription = "BRIDGE_LOAN"},FieldValueSpec {fieldValueEnum = "LOFC", fieldValueDescription = "LETTER_OF_CREDIT"},FieldValueSpec {fieldValueEnum = "SWING", fieldValueDescription = "SWING_LINE_FACILITY"},FieldValueSpec {fieldValueEnum = "DINP", fieldValueDescription = "DEBTOR_IN_POSSESSION"},FieldValueSpec {fieldValueEnum = "DEFLTED", fieldValueDescription = "DEFAULTED"},FieldValueSpec {fieldValueEnum = "WITHDRN", fieldValueDescription = "WITHDRAWN"},FieldValueSpec {fieldValueEnum = "REPLACD", fieldValueDescription = "REPLACED"},FieldValueSpec {fieldValueEnum = "MATURED", fieldValueDescription = "MATURED"},FieldValueSpec {fieldValueEnum = "AMENDED", fieldValueDescription = "AMENDED"},FieldValueSpec {fieldValueEnum = "RETIRED", fieldValueDescription = "RETIRED"},FieldValueSpec {fieldValueEnum = "BA", fieldValueDescription = "BANKERS_ACCEPTANCE"},FieldValueSpec {fieldValueEnum = "BN", fieldValueDescription = "BANK_NOTES"},FieldValueSpec {fieldValueEnum = "BOX", fieldValueDescription = "BILL_OF_EXCHANGES"},FieldValueSpec {fieldValueEnum = "CD", fieldValueDescription = "CERTIFICATE_OF_DEPOSIT"},FieldValueSpec {fieldValueEnum = "CL", fieldValueDescription = "CALL_LOANS"},FieldValueSpec {fieldValueEnum = "CP", fieldValueDescription = "COMMERCIAL_PAPER"},FieldValueSpec {fieldValueEnum = "DN", fieldValueDescription = "DEPOSIT_NOTES"},FieldValueSpec {fieldValueEnum = "EUCD", fieldValueDescription = "EURO_CERTIFICATE_OF_DEPOSIT"},FieldValueSpec {fieldValueEnum = "EUCP", fieldValueDescription = "EURO_COMMERCIAL_PAPER"},FieldValueSpec {fieldValueEnum = "LQN", fieldValueDescription = "LIQUIDITY_NOTE"},FieldValueSpec {fieldValueEnum = "MTN", fieldValueDescription = "MEDIUM_TERM_NOTES"},FieldValueSpec {fieldValueEnum = "ONITE", fieldValueDescription = "OVERNIGHT"},FieldValueSpec {fieldValueEnum = "PN", fieldValueDescription = "PROMISSORY_NOTE"},FieldValueSpec {fieldValueEnum = "PZFJ", fieldValueDescription = "PLAZOS_FIJOS"},FieldValueSpec {fieldValueEnum = "STN", fieldValueDescription = "SHORT_TERM_LOAN_NOTE"},FieldValueSpec {fieldValueEnum = "TD", fieldValueDescription = "TIME_DEPOSIT"},FieldValueSpec {fieldValueEnum = "XCN", fieldValueDescription = "EXTENDED_COMM_NOTE"},FieldValueSpec {fieldValueEnum = "YCD", fieldValueDescription = "YANKEE_CERTIFICATE_OF_DEPOSIT"},FieldValueSpec {fieldValueEnum = "ABS", fieldValueDescription = "ASSET_BACKED_SECURITIES"},FieldValueSpec {fieldValueEnum = "CMBS", fieldValueDescription = "CORP"},FieldValueSpec {fieldValueEnum = "CMO", fieldValueDescription = "COLLATERALIZED_MORTGAGE_OBLIGATION"},FieldValueSpec {fieldValueEnum = "IET", fieldValueDescription = "IOETTE_MORTGAGE"},FieldValueSpec {fieldValueEnum = "MBS", fieldValueDescription = "MORTGAGE_BACKED_SECURITIES"},FieldValueSpec {fieldValueEnum = "MIO", fieldValueDescription = "MORTGAGE_INTEREST_ONLY"},FieldValueSpec {fieldValueEnum = "MPO", fieldValueDescription = "MORTGAGE_PRINCIPAL_ONLY"},FieldValueSpec {fieldValueEnum = "MPP", fieldValueDescription = "MORTGAGE_PRIVATE_PLACEMENT"},FieldValueSpec {fieldValueEnum = "MPT", fieldValueDescription = "MISCELLANEOUS_PASS_THROUGH"},FieldValueSpec {fieldValueEnum = "PFAND", fieldValueDescription = "PFANDBRIEFE"},FieldValueSpec {fieldValueEnum = "TBA", fieldValueDescription = "TO_BE_ANNOUNCED"},FieldValueSpec {fieldValueEnum = "AN", fieldValueDescription = "OTHER_ANTICIPATION_NOTES"},FieldValueSpec {fieldValueEnum = "COFO", fieldValueDescription = "CERTIFICATE_OF_OBLIGATION"},FieldValueSpec {fieldValueEnum = "COFP", fieldValueDescription = "CERTIFICATE_OF_PARTICIPATION"},FieldValueSpec {fieldValueEnum = "GO", fieldValueDescription = "GENERAL_OBLIGATION_BONDS"},FieldValueSpec {fieldValueEnum = "MT", fieldValueDescription = "MANDATORY_TENDER"},FieldValueSpec {fieldValueEnum = "RAN", fieldValueDescription = "REVENUE_ANTICIPATION_NOTE"},FieldValueSpec {fieldValueEnum = "REV", fieldValueDescription = "REVENUE_BONDS"},FieldValueSpec {fieldValueEnum = "SPCLA", fieldValueDescription = "SPECIAL_ASSESSMENT"},FieldValueSpec {fieldValueEnum = "SPCLO", fieldValueDescription = "SPECIAL_OBLIGATION"},FieldValueSpec {fieldValueEnum = "SPCLT", fieldValueDescription = "SPECIAL_TAX"},FieldValueSpec {fieldValueEnum = "TAN", fieldValueDescription = "TAX_ANTICIPATION_NOTE"},FieldValueSpec {fieldValueEnum = "TAXA", fieldValueDescription = "TAX_ALLOCATION"},FieldValueSpec {fieldValueEnum = "TECP", fieldValueDescription = "TAX_EXEMPT_COMMERCIAL_PAPER"},FieldValueSpec {fieldValueEnum = "TRAN", fieldValueDescription = "TAX_REVENUE_ANTICIPATION_NOTE"},FieldValueSpec {fieldValueEnum = "VRDN", fieldValueDescription = "VARIABLE_RATE_DEMAND_NOTE"},FieldValueSpec {fieldValueEnum = "WAR", fieldValueDescription = "WARRANT"},FieldValueSpec {fieldValueEnum = "MF", fieldValueDescription = "MUTUAL_FUND"},FieldValueSpec {fieldValueEnum = "MLEG", fieldValueDescription = "MULTILEG_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "NONE", fieldValueDescription = "NO_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "FUT", fieldValueDescription = "FUTURE"},FieldValueSpec {fieldValueEnum = "OPT", fieldValueDescription = "OPTION"}]}
data SecurityType
  = SecurityType_EURO_SUPRANATIONAL_COUPONS
  | SecurityType_FEDERAL_AGENCY_COUPON
  | SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE
  | SecurityType_PRIVATE_EXPORT_FUNDING
  | SecurityType_USD_SUPRANATIONAL_COUPONS
  | SecurityType_CORPORATE_BOND
  | SecurityType_CORPORATE_PRIVATE_PLACEMENT
  | SecurityType_CONVERTIBLE_BOND
  | SecurityType_DUAL_CURRENCY
  | SecurityType_EURO_CORPORATE_BOND
  | SecurityType_INDEXED_LINKED
  | SecurityType_STRUCTURED_NOTES
  | SecurityType_YANKEE_CORPORATE_BOND
  | SecurityType_FOREIGN_EXCHANGE_CONTRACT
  | SecurityType_COMMON_STOCK
  | SecurityType_PREFERRED_STOCK
  | SecurityType_BRADY_BOND
  | SecurityType_EURO_SOVEREIGNS
  | SecurityType_US_TREASURY_BOND
  | SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE
  | SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES
  | SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE
  | SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE
  | SecurityType_US_TREASURY_NOTE_OLD
  | SecurityType_US_TREASURY_BILL_OLD
  | SecurityType_US_TREASURY_NOTE
  | SecurityType_US_TREASURY_BILL
  | SecurityType_REPURCHASE
  | SecurityType_FORWARD
  | SecurityType_BUY_SELLBACK
  | SecurityType_SECURITIES_LOAN
  | SecurityType_SECURITIES_PLEDGE
  | SecurityType_TERM_LOAN
  | SecurityType_REVOLVER_LOAN
  | SecurityType_REVOLVER
  | SecurityType_BRIDGE_LOAN
  | SecurityType_LETTER_OF_CREDIT
  | SecurityType_SWING_LINE_FACILITY
  | SecurityType_DEBTOR_IN_POSSESSION
  | SecurityType_DEFAULTED
  | SecurityType_WITHDRAWN
  | SecurityType_REPLACED
  | SecurityType_MATURED
  | SecurityType_AMENDED
  | SecurityType_RETIRED
  | SecurityType_BANKERS_ACCEPTANCE
  | SecurityType_BANK_NOTES
  | SecurityType_BILL_OF_EXCHANGES
  | SecurityType_CERTIFICATE_OF_DEPOSIT
  | SecurityType_CALL_LOANS
  | SecurityType_COMMERCIAL_PAPER
  | SecurityType_DEPOSIT_NOTES
  | SecurityType_EURO_CERTIFICATE_OF_DEPOSIT
  | SecurityType_EURO_COMMERCIAL_PAPER
  | SecurityType_LIQUIDITY_NOTE
  | SecurityType_MEDIUM_TERM_NOTES
  | SecurityType_OVERNIGHT
  | SecurityType_PROMISSORY_NOTE
  | SecurityType_PLAZOS_FIJOS
  | SecurityType_SHORT_TERM_LOAN_NOTE
  | SecurityType_TIME_DEPOSIT
  | SecurityType_EXTENDED_COMM_NOTE
  | SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT
  | SecurityType_ASSET_BACKED_SECURITIES
  | SecurityType_CORP
  | SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION
  | SecurityType_IOETTE_MORTGAGE
  | SecurityType_MORTGAGE_BACKED_SECURITIES
  | SecurityType_MORTGAGE_INTEREST_ONLY
  | SecurityType_MORTGAGE_PRINCIPAL_ONLY
  | SecurityType_MORTGAGE_PRIVATE_PLACEMENT
  | SecurityType_MISCELLANEOUS_PASS_THROUGH
  | SecurityType_PFANDBRIEFE
  | SecurityType_TO_BE_ANNOUNCED
  | SecurityType_OTHER_ANTICIPATION_NOTES
  | SecurityType_CERTIFICATE_OF_OBLIGATION
  | SecurityType_CERTIFICATE_OF_PARTICIPATION
  | SecurityType_GENERAL_OBLIGATION_BONDS
  | SecurityType_MANDATORY_TENDER
  | SecurityType_REVENUE_ANTICIPATION_NOTE
  | SecurityType_REVENUE_BONDS
  | SecurityType_SPECIAL_ASSESSMENT
  | SecurityType_SPECIAL_OBLIGATION
  | SecurityType_SPECIAL_TAX
  | SecurityType_TAX_ANTICIPATION_NOTE
  | SecurityType_TAX_ALLOCATION
  | SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER
  | SecurityType_TAX_REVENUE_ANTICIPATION_NOTE
  | SecurityType_VARIABLE_RATE_DEMAND_NOTE
  | SecurityType_WARRANT
  | SecurityType_MUTUAL_FUND
  | SecurityType_MULTILEG_INSTRUMENT
  | SecurityType_NO_SECURITY_TYPE
  | SecurityType_FUTURE
  | SecurityType_OPTION
  deriving stock (Show, Eq, Generic)

instance Validity SecurityType

instance IsField SecurityType where
  fieldTag Proxy = 167
  fieldIsData Proxy = False
  fieldToValue = \case
    SecurityType_EURO_SUPRANATIONAL_COUPONS -> "EUSUPRA"
    SecurityType_FEDERAL_AGENCY_COUPON -> "FAC"
    SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE -> "FADN"
    SecurityType_PRIVATE_EXPORT_FUNDING -> "PEF"
    SecurityType_USD_SUPRANATIONAL_COUPONS -> "SUPRA"
    SecurityType_CORPORATE_BOND -> "CORP"
    SecurityType_CORPORATE_PRIVATE_PLACEMENT -> "CPP"
    SecurityType_CONVERTIBLE_BOND -> "CB"
    SecurityType_DUAL_CURRENCY -> "DUAL"
    SecurityType_EURO_CORPORATE_BOND -> "EUCORP"
    SecurityType_INDEXED_LINKED -> "XLINKD"
    SecurityType_STRUCTURED_NOTES -> "STRUCT"
    SecurityType_YANKEE_CORPORATE_BOND -> "YANK"
    SecurityType_FOREIGN_EXCHANGE_CONTRACT -> "FOR"
    SecurityType_COMMON_STOCK -> "CS"
    SecurityType_PREFERRED_STOCK -> "PS"
    SecurityType_BRADY_BOND -> "BRADY"
    SecurityType_EURO_SOVEREIGNS -> "EUSOV"
    SecurityType_US_TREASURY_BOND -> "TBOND"
    SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE -> "TINT"
    SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES -> "TIPS"
    SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE -> "TCAL"
    SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE -> "TPRN"
    SecurityType_US_TREASURY_NOTE_OLD -> "UST"
    SecurityType_US_TREASURY_BILL_OLD -> "USTB"
    SecurityType_US_TREASURY_NOTE -> "TNOTE"
    SecurityType_US_TREASURY_BILL -> "TBILL"
    SecurityType_REPURCHASE -> "REPO"
    SecurityType_FORWARD -> "FORWARD"
    SecurityType_BUY_SELLBACK -> "BUYSELL"
    SecurityType_SECURITIES_LOAN -> "SECLOAN"
    SecurityType_SECURITIES_PLEDGE -> "SECPLEDGE"
    SecurityType_TERM_LOAN -> "TERM"
    SecurityType_REVOLVER_LOAN -> "RVLV"
    SecurityType_REVOLVER -> "RVLVTRM"
    SecurityType_BRIDGE_LOAN -> "BRIDGE"
    SecurityType_LETTER_OF_CREDIT -> "LOFC"
    SecurityType_SWING_LINE_FACILITY -> "SWING"
    SecurityType_DEBTOR_IN_POSSESSION -> "DINP"
    SecurityType_DEFAULTED -> "DEFLTED"
    SecurityType_WITHDRAWN -> "WITHDRN"
    SecurityType_REPLACED -> "REPLACD"
    SecurityType_MATURED -> "MATURED"
    SecurityType_AMENDED -> "AMENDED"
    SecurityType_RETIRED -> "RETIRED"
    SecurityType_BANKERS_ACCEPTANCE -> "BA"
    SecurityType_BANK_NOTES -> "BN"
    SecurityType_BILL_OF_EXCHANGES -> "BOX"
    SecurityType_CERTIFICATE_OF_DEPOSIT -> "CD"
    SecurityType_CALL_LOANS -> "CL"
    SecurityType_COMMERCIAL_PAPER -> "CP"
    SecurityType_DEPOSIT_NOTES -> "DN"
    SecurityType_EURO_CERTIFICATE_OF_DEPOSIT -> "EUCD"
    SecurityType_EURO_COMMERCIAL_PAPER -> "EUCP"
    SecurityType_LIQUIDITY_NOTE -> "LQN"
    SecurityType_MEDIUM_TERM_NOTES -> "MTN"
    SecurityType_OVERNIGHT -> "ONITE"
    SecurityType_PROMISSORY_NOTE -> "PN"
    SecurityType_PLAZOS_FIJOS -> "PZFJ"
    SecurityType_SHORT_TERM_LOAN_NOTE -> "STN"
    SecurityType_TIME_DEPOSIT -> "TD"
    SecurityType_EXTENDED_COMM_NOTE -> "XCN"
    SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT -> "YCD"
    SecurityType_ASSET_BACKED_SECURITIES -> "ABS"
    SecurityType_CORP -> "CMBS"
    SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION -> "CMO"
    SecurityType_IOETTE_MORTGAGE -> "IET"
    SecurityType_MORTGAGE_BACKED_SECURITIES -> "MBS"
    SecurityType_MORTGAGE_INTEREST_ONLY -> "MIO"
    SecurityType_MORTGAGE_PRINCIPAL_ONLY -> "MPO"
    SecurityType_MORTGAGE_PRIVATE_PLACEMENT -> "MPP"
    SecurityType_MISCELLANEOUS_PASS_THROUGH -> "MPT"
    SecurityType_PFANDBRIEFE -> "PFAND"
    SecurityType_TO_BE_ANNOUNCED -> "TBA"
    SecurityType_OTHER_ANTICIPATION_NOTES -> "AN"
    SecurityType_CERTIFICATE_OF_OBLIGATION -> "COFO"
    SecurityType_CERTIFICATE_OF_PARTICIPATION -> "COFP"
    SecurityType_GENERAL_OBLIGATION_BONDS -> "GO"
    SecurityType_MANDATORY_TENDER -> "MT"
    SecurityType_REVENUE_ANTICIPATION_NOTE -> "RAN"
    SecurityType_REVENUE_BONDS -> "REV"
    SecurityType_SPECIAL_ASSESSMENT -> "SPCLA"
    SecurityType_SPECIAL_OBLIGATION -> "SPCLO"
    SecurityType_SPECIAL_TAX -> "SPCLT"
    SecurityType_TAX_ANTICIPATION_NOTE -> "TAN"
    SecurityType_TAX_ALLOCATION -> "TAXA"
    SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER -> "TECP"
    SecurityType_TAX_REVENUE_ANTICIPATION_NOTE -> "TRAN"
    SecurityType_VARIABLE_RATE_DEMAND_NOTE -> "VRDN"
    SecurityType_WARRANT -> "WAR"
    SecurityType_MUTUAL_FUND -> "MF"
    SecurityType_MULTILEG_INSTRUMENT -> "MLEG"
    SecurityType_NO_SECURITY_TYPE -> "NONE"
    SecurityType_FUTURE -> "FUT"
    SecurityType_OPTION -> "OPT"
  fieldFromValue = \case
    "EUSUPRA" -> Right SecurityType_EURO_SUPRANATIONAL_COUPONS
    "FAC" -> Right SecurityType_FEDERAL_AGENCY_COUPON
    "FADN" -> Right SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE
    "PEF" -> Right SecurityType_PRIVATE_EXPORT_FUNDING
    "SUPRA" -> Right SecurityType_USD_SUPRANATIONAL_COUPONS
    "CORP" -> Right SecurityType_CORPORATE_BOND
    "CPP" -> Right SecurityType_CORPORATE_PRIVATE_PLACEMENT
    "CB" -> Right SecurityType_CONVERTIBLE_BOND
    "DUAL" -> Right SecurityType_DUAL_CURRENCY
    "EUCORP" -> Right SecurityType_EURO_CORPORATE_BOND
    "XLINKD" -> Right SecurityType_INDEXED_LINKED
    "STRUCT" -> Right SecurityType_STRUCTURED_NOTES
    "YANK" -> Right SecurityType_YANKEE_CORPORATE_BOND
    "FOR" -> Right SecurityType_FOREIGN_EXCHANGE_CONTRACT
    "CS" -> Right SecurityType_COMMON_STOCK
    "PS" -> Right SecurityType_PREFERRED_STOCK
    "BRADY" -> Right SecurityType_BRADY_BOND
    "EUSOV" -> Right SecurityType_EURO_SOVEREIGNS
    "TBOND" -> Right SecurityType_US_TREASURY_BOND
    "TINT" -> Right SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE
    "TIPS" -> Right SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES
    "TCAL" -> Right SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE
    "TPRN" -> Right SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE
    "UST" -> Right SecurityType_US_TREASURY_NOTE_OLD
    "USTB" -> Right SecurityType_US_TREASURY_BILL_OLD
    "TNOTE" -> Right SecurityType_US_TREASURY_NOTE
    "TBILL" -> Right SecurityType_US_TREASURY_BILL
    "REPO" -> Right SecurityType_REPURCHASE
    "FORWARD" -> Right SecurityType_FORWARD
    "BUYSELL" -> Right SecurityType_BUY_SELLBACK
    "SECLOAN" -> Right SecurityType_SECURITIES_LOAN
    "SECPLEDGE" -> Right SecurityType_SECURITIES_PLEDGE
    "TERM" -> Right SecurityType_TERM_LOAN
    "RVLV" -> Right SecurityType_REVOLVER_LOAN
    "RVLVTRM" -> Right SecurityType_REVOLVER
    "BRIDGE" -> Right SecurityType_BRIDGE_LOAN
    "LOFC" -> Right SecurityType_LETTER_OF_CREDIT
    "SWING" -> Right SecurityType_SWING_LINE_FACILITY
    "DINP" -> Right SecurityType_DEBTOR_IN_POSSESSION
    "DEFLTED" -> Right SecurityType_DEFAULTED
    "WITHDRN" -> Right SecurityType_WITHDRAWN
    "REPLACD" -> Right SecurityType_REPLACED
    "MATURED" -> Right SecurityType_MATURED
    "AMENDED" -> Right SecurityType_AMENDED
    "RETIRED" -> Right SecurityType_RETIRED
    "BA" -> Right SecurityType_BANKERS_ACCEPTANCE
    "BN" -> Right SecurityType_BANK_NOTES
    "BOX" -> Right SecurityType_BILL_OF_EXCHANGES
    "CD" -> Right SecurityType_CERTIFICATE_OF_DEPOSIT
    "CL" -> Right SecurityType_CALL_LOANS
    "CP" -> Right SecurityType_COMMERCIAL_PAPER
    "DN" -> Right SecurityType_DEPOSIT_NOTES
    "EUCD" -> Right SecurityType_EURO_CERTIFICATE_OF_DEPOSIT
    "EUCP" -> Right SecurityType_EURO_COMMERCIAL_PAPER
    "LQN" -> Right SecurityType_LIQUIDITY_NOTE
    "MTN" -> Right SecurityType_MEDIUM_TERM_NOTES
    "ONITE" -> Right SecurityType_OVERNIGHT
    "PN" -> Right SecurityType_PROMISSORY_NOTE
    "PZFJ" -> Right SecurityType_PLAZOS_FIJOS
    "STN" -> Right SecurityType_SHORT_TERM_LOAN_NOTE
    "TD" -> Right SecurityType_TIME_DEPOSIT
    "XCN" -> Right SecurityType_EXTENDED_COMM_NOTE
    "YCD" -> Right SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT
    "ABS" -> Right SecurityType_ASSET_BACKED_SECURITIES
    "CMBS" -> Right SecurityType_CORP
    "CMO" -> Right SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION
    "IET" -> Right SecurityType_IOETTE_MORTGAGE
    "MBS" -> Right SecurityType_MORTGAGE_BACKED_SECURITIES
    "MIO" -> Right SecurityType_MORTGAGE_INTEREST_ONLY
    "MPO" -> Right SecurityType_MORTGAGE_PRINCIPAL_ONLY
    "MPP" -> Right SecurityType_MORTGAGE_PRIVATE_PLACEMENT
    "MPT" -> Right SecurityType_MISCELLANEOUS_PASS_THROUGH
    "PFAND" -> Right SecurityType_PFANDBRIEFE
    "TBA" -> Right SecurityType_TO_BE_ANNOUNCED
    "AN" -> Right SecurityType_OTHER_ANTICIPATION_NOTES
    "COFO" -> Right SecurityType_CERTIFICATE_OF_OBLIGATION
    "COFP" -> Right SecurityType_CERTIFICATE_OF_PARTICIPATION
    "GO" -> Right SecurityType_GENERAL_OBLIGATION_BONDS
    "MT" -> Right SecurityType_MANDATORY_TENDER
    "RAN" -> Right SecurityType_REVENUE_ANTICIPATION_NOTE
    "REV" -> Right SecurityType_REVENUE_BONDS
    "SPCLA" -> Right SecurityType_SPECIAL_ASSESSMENT
    "SPCLO" -> Right SecurityType_SPECIAL_OBLIGATION
    "SPCLT" -> Right SecurityType_SPECIAL_TAX
    "TAN" -> Right SecurityType_TAX_ANTICIPATION_NOTE
    "TAXA" -> Right SecurityType_TAX_ALLOCATION
    "TECP" -> Right SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER
    "TRAN" -> Right SecurityType_TAX_REVENUE_ANTICIPATION_NOTE
    "VRDN" -> Right SecurityType_VARIABLE_RATE_DEMAND_NOTE
    "WAR" -> Right SecurityType_WARRANT
    "MF" -> Right SecurityType_MUTUAL_FUND
    "MLEG" -> Right SecurityType_MULTILEG_INSTRUMENT
    "NONE" -> Right SecurityType_NO_SECURITY_TYPE
    "FUT" -> Right SecurityType_FUTURE
    "OPT" -> Right SecurityType_OPTION
    v -> Left ("Unknown SecurityType: " <> show v)

-- FieldSpec {fieldNumber = 168, fieldName = "EffectiveTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype EffectiveTime = EffectiveTime {unEffectiveTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EffectiveTime

instance IsField EffectiveTime where
  fieldTag Proxy = 168
  fieldIsData Proxy = False
  fieldToValue = toValue . unEffectiveTime
  fieldFromValue = fromValue >=> (prettyValidate . EffectiveTime)

-- FieldSpec {fieldNumber = 169, fieldName = "StandInstDbType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "OTHER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DTCSID"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "THOMSON_ALERT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "A_GLOBAL_CUSTODIAN"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ACCOUNT_NET"}]}
data StandInstDbType
  = StandInstDbType_OTHER
  | StandInstDbType_DTCSID
  | StandInstDbType_THOMSON_ALERT
  | StandInstDbType_A_GLOBAL_CUSTODIAN
  | StandInstDbType_ACCOUNT_NET
  deriving stock (Show, Eq, Generic)

instance Validity StandInstDbType

instance IsField StandInstDbType where
  fieldTag Proxy = 169
  fieldIsData Proxy = False
  fieldToValue = \case
    StandInstDbType_OTHER -> "0"
    StandInstDbType_DTCSID -> "1"
    StandInstDbType_THOMSON_ALERT -> "2"
    StandInstDbType_A_GLOBAL_CUSTODIAN -> "3"
    StandInstDbType_ACCOUNT_NET -> "4"
  fieldFromValue = \case
    "0" -> Right StandInstDbType_OTHER
    "1" -> Right StandInstDbType_DTCSID
    "2" -> Right StandInstDbType_THOMSON_ALERT
    "3" -> Right StandInstDbType_A_GLOBAL_CUSTODIAN
    "4" -> Right StandInstDbType_ACCOUNT_NET
    v -> Left ("Unknown StandInstDbType: " <> show v)

-- FieldSpec {fieldNumber = 170, fieldName = "StandInstDbName", fieldType = FieldTypeString, fieldValues = []}
newtype StandInstDbName = StandInstDbName {unStandInstDbName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StandInstDbName

instance IsField StandInstDbName where
  fieldTag Proxy = 170
  fieldIsData Proxy = False
  fieldToValue = toValue . unStandInstDbName
  fieldFromValue = fromValue >=> (prettyValidate . StandInstDbName)

-- FieldSpec {fieldNumber = 171, fieldName = "StandInstDbID", fieldType = FieldTypeString, fieldValues = []}
newtype StandInstDbID = StandInstDbID {unStandInstDbID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StandInstDbID

instance IsField StandInstDbID where
  fieldTag Proxy = 171
  fieldIsData Proxy = False
  fieldToValue = toValue . unStandInstDbID
  fieldFromValue = fromValue >=> (prettyValidate . StandInstDbID)

-- FieldSpec {fieldNumber = 172, fieldName = "SettlDeliveryType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "VERSUS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FREE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TRI_PARTY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "HOLD_IN_CUSTODY"}]}
data SettlDeliveryType
  = SettlDeliveryType_VERSUS
  | SettlDeliveryType_FREE
  | SettlDeliveryType_TRI_PARTY
  | SettlDeliveryType_HOLD_IN_CUSTODY
  deriving stock (Show, Eq, Generic)

instance Validity SettlDeliveryType

instance IsField SettlDeliveryType where
  fieldTag Proxy = 172
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlDeliveryType_VERSUS -> "0"
    SettlDeliveryType_FREE -> "1"
    SettlDeliveryType_TRI_PARTY -> "2"
    SettlDeliveryType_HOLD_IN_CUSTODY -> "3"
  fieldFromValue = \case
    "0" -> Right SettlDeliveryType_VERSUS
    "1" -> Right SettlDeliveryType_FREE
    "2" -> Right SettlDeliveryType_TRI_PARTY
    "3" -> Right SettlDeliveryType_HOLD_IN_CUSTODY
    v -> Left ("Unknown SettlDeliveryType: " <> show v)

-- FieldSpec {fieldNumber = 188, fieldName = "BidSpotRate", fieldType = FieldTypePrice, fieldValues = []}
newtype BidSpotRate = BidSpotRate {unBidSpotRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidSpotRate

instance IsField BidSpotRate where
  fieldTag Proxy = 188
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidSpotRate
  fieldFromValue = fromValue >=> (prettyValidate . BidSpotRate)

-- FieldSpec {fieldNumber = 189, fieldName = "BidForwardPoints", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype BidForwardPoints = BidForwardPoints {unBidForwardPoints :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidForwardPoints

instance IsField BidForwardPoints where
  fieldTag Proxy = 189
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidForwardPoints
  fieldFromValue = fromValue >=> (prettyValidate . BidForwardPoints)

-- FieldSpec {fieldNumber = 190, fieldName = "OfferSpotRate", fieldType = FieldTypePrice, fieldValues = []}
newtype OfferSpotRate = OfferSpotRate {unOfferSpotRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferSpotRate

instance IsField OfferSpotRate where
  fieldTag Proxy = 190
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferSpotRate
  fieldFromValue = fromValue >=> (prettyValidate . OfferSpotRate)

-- FieldSpec {fieldNumber = 191, fieldName = "OfferForwardPoints", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype OfferForwardPoints = OfferForwardPoints {unOfferForwardPoints :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferForwardPoints

instance IsField OfferForwardPoints where
  fieldTag Proxy = 191
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferForwardPoints
  fieldFromValue = fromValue >=> (prettyValidate . OfferForwardPoints)

-- FieldSpec {fieldNumber = 192, fieldName = "OrderQty2", fieldType = FieldTypeQTY, fieldValues = []}
newtype OrderQty2 = OrderQty2 {unOrderQty2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderQty2

instance IsField OrderQty2 where
  fieldTag Proxy = 192
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderQty2
  fieldFromValue = fromValue >=> (prettyValidate . OrderQty2)

-- FieldSpec {fieldNumber = 193, fieldName = "SettlDate2", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype SettlDate2 = SettlDate2 {unSettlDate2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlDate2

instance IsField SettlDate2 where
  fieldTag Proxy = 193
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlDate2
  fieldFromValue = fromValue >=> (prettyValidate . SettlDate2)

-- FieldSpec {fieldNumber = 194, fieldName = "LastSpotRate", fieldType = FieldTypePrice, fieldValues = []}
newtype LastSpotRate = LastSpotRate {unLastSpotRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastSpotRate

instance IsField LastSpotRate where
  fieldTag Proxy = 194
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastSpotRate
  fieldFromValue = fromValue >=> (prettyValidate . LastSpotRate)

-- FieldSpec {fieldNumber = 195, fieldName = "LastForwardPoints", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype LastForwardPoints = LastForwardPoints {unLastForwardPoints :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastForwardPoints

instance IsField LastForwardPoints where
  fieldTag Proxy = 195
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastForwardPoints
  fieldFromValue = fromValue >=> (prettyValidate . LastForwardPoints)

-- FieldSpec {fieldNumber = 196, fieldName = "AllocLinkID", fieldType = FieldTypeString, fieldValues = []}
newtype AllocLinkID = AllocLinkID {unAllocLinkID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocLinkID

instance IsField AllocLinkID where
  fieldTag Proxy = 196
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocLinkID
  fieldFromValue = fromValue >=> (prettyValidate . AllocLinkID)

-- FieldSpec {fieldNumber = 197, fieldName = "AllocLinkType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FX_NETTING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FX_SWAP"}]}
data AllocLinkType
  = AllocLinkType_FX_NETTING
  | AllocLinkType_FX_SWAP
  deriving stock (Show, Eq, Generic)

instance Validity AllocLinkType

instance IsField AllocLinkType where
  fieldTag Proxy = 197
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocLinkType_FX_NETTING -> "0"
    AllocLinkType_FX_SWAP -> "1"
  fieldFromValue = \case
    "0" -> Right AllocLinkType_FX_NETTING
    "1" -> Right AllocLinkType_FX_SWAP
    v -> Left ("Unknown AllocLinkType: " <> show v)

-- FieldSpec {fieldNumber = 198, fieldName = "SecondaryOrderID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryOrderID = SecondaryOrderID {unSecondaryOrderID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryOrderID

instance IsField SecondaryOrderID where
  fieldTag Proxy = 198
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryOrderID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryOrderID)

-- FieldSpec {fieldNumber = 199, fieldName = "NoIOIQualifiers", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoIOIQualifiers = NoIOIQualifiers {unNoIOIQualifiers :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoIOIQualifiers

instance IsField NoIOIQualifiers where
  fieldTag Proxy = 199
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoIOIQualifiers
  fieldFromValue = fromValue >=> (prettyValidate . NoIOIQualifiers)

-- FieldSpec {fieldNumber = 200, fieldName = "MaturityMonthYear", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype MaturityMonthYear = MaturityMonthYear {unMaturityMonthYear :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaturityMonthYear

instance IsField MaturityMonthYear where
  fieldTag Proxy = 200
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaturityMonthYear
  fieldFromValue = fromValue >=> (prettyValidate . MaturityMonthYear)

-- FieldSpec {fieldNumber = 201, fieldName = "PutOrCall", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PUT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CALL"}]}
data PutOrCall
  = PutOrCall_PUT
  | PutOrCall_CALL
  deriving stock (Show, Eq, Generic)

instance Validity PutOrCall

instance IsField PutOrCall where
  fieldTag Proxy = 201
  fieldIsData Proxy = False
  fieldToValue = \case
    PutOrCall_PUT -> "0"
    PutOrCall_CALL -> "1"
  fieldFromValue = \case
    "0" -> Right PutOrCall_PUT
    "1" -> Right PutOrCall_CALL
    v -> Left ("Unknown PutOrCall: " <> show v)

-- FieldSpec {fieldNumber = 202, fieldName = "StrikePrice", fieldType = FieldTypePrice, fieldValues = []}
newtype StrikePrice = StrikePrice {unStrikePrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StrikePrice

instance IsField StrikePrice where
  fieldTag Proxy = 202
  fieldIsData Proxy = False
  fieldToValue = toValue . unStrikePrice
  fieldFromValue = fromValue >=> (prettyValidate . StrikePrice)

-- FieldSpec {fieldNumber = 203, fieldName = "CoveredOrUncovered", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "COVERED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNCOVERED"}]}
data CoveredOrUncovered
  = CoveredOrUncovered_COVERED
  | CoveredOrUncovered_UNCOVERED
  deriving stock (Show, Eq, Generic)

instance Validity CoveredOrUncovered

instance IsField CoveredOrUncovered where
  fieldTag Proxy = 203
  fieldIsData Proxy = False
  fieldToValue = \case
    CoveredOrUncovered_COVERED -> "0"
    CoveredOrUncovered_UNCOVERED -> "1"
  fieldFromValue = \case
    "0" -> Right CoveredOrUncovered_COVERED
    "1" -> Right CoveredOrUncovered_UNCOVERED
    v -> Left ("Unknown CoveredOrUncovered: " <> show v)

-- FieldSpec {fieldNumber = 206, fieldName = "OptAttribute", fieldType = FieldTypeChar, fieldValues = []}
newtype OptAttribute = OptAttribute {unOptAttribute :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OptAttribute

instance IsField OptAttribute where
  fieldTag Proxy = 206
  fieldIsData Proxy = False
  fieldToValue = toValue . unOptAttribute
  fieldFromValue = fromValue >=> (prettyValidate . OptAttribute)

-- FieldSpec {fieldNumber = 207, fieldName = "SecurityExchange", fieldType = FieldTypeExchange, fieldValues = []}
newtype SecurityExchange = SecurityExchange {unSecurityExchange :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityExchange

instance IsField SecurityExchange where
  fieldTag Proxy = 207
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityExchange
  fieldFromValue = fromValue >=> (prettyValidate . SecurityExchange)

-- FieldSpec {fieldNumber = 208, fieldName = "NotifyBrokerOfCredit", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data NotifyBrokerOfCredit
  = NotifyBrokerOfCredit_YES
  | NotifyBrokerOfCredit_NO
  deriving stock (Show, Eq, Generic)

instance Validity NotifyBrokerOfCredit

instance IsField NotifyBrokerOfCredit where
  fieldTag Proxy = 208
  fieldIsData Proxy = False
  fieldToValue = \case
    NotifyBrokerOfCredit_YES -> "Y"
    NotifyBrokerOfCredit_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right NotifyBrokerOfCredit_YES
    "N" -> Right NotifyBrokerOfCredit_NO
    v -> Left ("Unknown NotifyBrokerOfCredit: " <> show v)

-- FieldSpec {fieldNumber = 209, fieldName = "AllocHandlInst", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MATCH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "FORWARD"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FORWARD_AND_MATCH"}]}
data AllocHandlInst
  = AllocHandlInst_MATCH
  | AllocHandlInst_FORWARD
  | AllocHandlInst_FORWARD_AND_MATCH
  deriving stock (Show, Eq, Generic)

instance Validity AllocHandlInst

instance IsField AllocHandlInst where
  fieldTag Proxy = 209
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocHandlInst_MATCH -> "1"
    AllocHandlInst_FORWARD -> "2"
    AllocHandlInst_FORWARD_AND_MATCH -> "3"
  fieldFromValue = \case
    "1" -> Right AllocHandlInst_MATCH
    "2" -> Right AllocHandlInst_FORWARD
    "3" -> Right AllocHandlInst_FORWARD_AND_MATCH
    v -> Left ("Unknown AllocHandlInst: " <> show v)

-- FieldSpec {fieldNumber = 210, fieldName = "MaxShow", fieldType = FieldTypeQTY, fieldValues = []}
newtype MaxShow = MaxShow {unMaxShow :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaxShow

instance IsField MaxShow where
  fieldTag Proxy = 210
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaxShow
  fieldFromValue = fromValue >=> (prettyValidate . MaxShow)

-- FieldSpec {fieldNumber = 211, fieldName = "PegOffsetValue", fieldType = FieldTypeFloat, fieldValues = []}
newtype PegOffsetValue = PegOffsetValue {unPegOffsetValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PegOffsetValue

instance IsField PegOffsetValue where
  fieldTag Proxy = 211
  fieldIsData Proxy = False
  fieldToValue = toValue . unPegOffsetValue
  fieldFromValue = fromValue >=> (prettyValidate . PegOffsetValue)

-- FieldSpec {fieldNumber = 212, fieldName = "XmlDataLen", fieldType = FieldTypeLength, fieldValues = []}
newtype XmlDataLen = XmlDataLen {unXmlDataLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity XmlDataLen

instance IsField XmlDataLen where
  fieldTag Proxy = 212
  fieldIsData Proxy = False
  fieldToValue = toValue . unXmlDataLen
  fieldFromValue = fromValue >=> (prettyValidate . XmlDataLen)

-- FieldSpec {fieldNumber = 213, fieldName = "XmlData", fieldType = FieldTypeData, fieldValues = []}
newtype XmlData = XmlData {unXmlData :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity XmlData

instance IsField XmlData where
  fieldTag Proxy = 213
  fieldIsData Proxy = True
  fieldToValue = toValue . unXmlData
  fieldFromValue = fromValue >=> (prettyValidate . XmlData)

-- FieldSpec {fieldNumber = 214, fieldName = "SettlInstRefID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlInstRefID = SettlInstRefID {unSettlInstRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstRefID

instance IsField SettlInstRefID where
  fieldTag Proxy = 214
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstRefID
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstRefID)

-- FieldSpec {fieldNumber = 215, fieldName = "NoRoutingIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoRoutingIDs = NoRoutingIDs {unNoRoutingIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoRoutingIDs

instance IsField NoRoutingIDs where
  fieldTag Proxy = 215
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoRoutingIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoRoutingIDs)

-- FieldSpec {fieldNumber = 216, fieldName = "RoutingType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TARGET_FIRM"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TARGET_LIST"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "BLOCK_FIRM"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "BLOCK_LIST"}]}
data RoutingType
  = RoutingType_TARGET_FIRM
  | RoutingType_TARGET_LIST
  | RoutingType_BLOCK_FIRM
  | RoutingType_BLOCK_LIST
  deriving stock (Show, Eq, Generic)

instance Validity RoutingType

instance IsField RoutingType where
  fieldTag Proxy = 216
  fieldIsData Proxy = False
  fieldToValue = \case
    RoutingType_TARGET_FIRM -> "1"
    RoutingType_TARGET_LIST -> "2"
    RoutingType_BLOCK_FIRM -> "3"
    RoutingType_BLOCK_LIST -> "4"
  fieldFromValue = \case
    "1" -> Right RoutingType_TARGET_FIRM
    "2" -> Right RoutingType_TARGET_LIST
    "3" -> Right RoutingType_BLOCK_FIRM
    "4" -> Right RoutingType_BLOCK_LIST
    v -> Left ("Unknown RoutingType: " <> show v)

-- FieldSpec {fieldNumber = 217, fieldName = "RoutingID", fieldType = FieldTypeString, fieldValues = []}
newtype RoutingID = RoutingID {unRoutingID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RoutingID

instance IsField RoutingID where
  fieldTag Proxy = 217
  fieldIsData Proxy = False
  fieldToValue = toValue . unRoutingID
  fieldFromValue = fromValue >=> (prettyValidate . RoutingID)

-- FieldSpec {fieldNumber = 218, fieldName = "Spread", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype Spread = Spread {unSpread :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Spread

instance IsField Spread where
  fieldTag Proxy = 218
  fieldIsData Proxy = False
  fieldToValue = toValue . unSpread
  fieldFromValue = fromValue >=> (prettyValidate . Spread)

-- FieldSpec {fieldNumber = 220, fieldName = "BenchmarkCurveCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype BenchmarkCurveCurrency = BenchmarkCurveCurrency {unBenchmarkCurveCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkCurveCurrency

instance IsField BenchmarkCurveCurrency where
  fieldTag Proxy = 220
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkCurveCurrency
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkCurveCurrency)

-- FieldSpec {fieldNumber = 221, fieldName = "BenchmarkCurveName", fieldType = FieldTypeString, fieldValues = []}
newtype BenchmarkCurveName = BenchmarkCurveName {unBenchmarkCurveName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkCurveName

instance IsField BenchmarkCurveName where
  fieldTag Proxy = 221
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkCurveName
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkCurveName)

-- FieldSpec {fieldNumber = 222, fieldName = "BenchmarkCurvePoint", fieldType = FieldTypeString, fieldValues = []}
newtype BenchmarkCurvePoint = BenchmarkCurvePoint {unBenchmarkCurvePoint :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkCurvePoint

instance IsField BenchmarkCurvePoint where
  fieldTag Proxy = 222
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkCurvePoint
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkCurvePoint)

-- FieldSpec {fieldNumber = 223, fieldName = "CouponRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype CouponRate = CouponRate {unCouponRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CouponRate

instance IsField CouponRate where
  fieldTag Proxy = 223
  fieldIsData Proxy = False
  fieldToValue = toValue . unCouponRate
  fieldFromValue = fromValue >=> (prettyValidate . CouponRate)

-- FieldSpec {fieldNumber = 224, fieldName = "CouponPaymentDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype CouponPaymentDate = CouponPaymentDate {unCouponPaymentDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CouponPaymentDate

instance IsField CouponPaymentDate where
  fieldTag Proxy = 224
  fieldIsData Proxy = False
  fieldToValue = toValue . unCouponPaymentDate
  fieldFromValue = fromValue >=> (prettyValidate . CouponPaymentDate)

-- FieldSpec {fieldNumber = 225, fieldName = "IssueDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype IssueDate = IssueDate {unIssueDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IssueDate

instance IsField IssueDate where
  fieldTag Proxy = 225
  fieldIsData Proxy = False
  fieldToValue = toValue . unIssueDate
  fieldFromValue = fromValue >=> (prettyValidate . IssueDate)

-- FieldSpec {fieldNumber = 226, fieldName = "RepurchaseTerm", fieldType = FieldTypeInt, fieldValues = []}
newtype RepurchaseTerm = RepurchaseTerm {unRepurchaseTerm :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RepurchaseTerm

instance IsField RepurchaseTerm where
  fieldTag Proxy = 226
  fieldIsData Proxy = False
  fieldToValue = toValue . unRepurchaseTerm
  fieldFromValue = fromValue >=> (prettyValidate . RepurchaseTerm)

-- FieldSpec {fieldNumber = 227, fieldName = "RepurchaseRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype RepurchaseRate = RepurchaseRate {unRepurchaseRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RepurchaseRate

instance IsField RepurchaseRate where
  fieldTag Proxy = 227
  fieldIsData Proxy = False
  fieldToValue = toValue . unRepurchaseRate
  fieldFromValue = fromValue >=> (prettyValidate . RepurchaseRate)

-- FieldSpec {fieldNumber = 228, fieldName = "Factor", fieldType = FieldTypeFloat, fieldValues = []}
newtype Factor = Factor {unFactor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Factor

instance IsField Factor where
  fieldTag Proxy = 228
  fieldIsData Proxy = False
  fieldToValue = toValue . unFactor
  fieldFromValue = fromValue >=> (prettyValidate . Factor)

-- FieldSpec {fieldNumber = 229, fieldName = "TradeOriginationDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype TradeOriginationDate = TradeOriginationDate {unTradeOriginationDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeOriginationDate

instance IsField TradeOriginationDate where
  fieldTag Proxy = 229
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeOriginationDate
  fieldFromValue = fromValue >=> (prettyValidate . TradeOriginationDate)

-- FieldSpec {fieldNumber = 230, fieldName = "ExDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype ExDate = ExDate {unExDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExDate

instance IsField ExDate where
  fieldTag Proxy = 230
  fieldIsData Proxy = False
  fieldToValue = toValue . unExDate
  fieldFromValue = fromValue >=> (prettyValidate . ExDate)

-- FieldSpec {fieldNumber = 231, fieldName = "ContractMultiplier", fieldType = FieldTypeFloat, fieldValues = []}
newtype ContractMultiplier = ContractMultiplier {unContractMultiplier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContractMultiplier

instance IsField ContractMultiplier where
  fieldTag Proxy = 231
  fieldIsData Proxy = False
  fieldToValue = toValue . unContractMultiplier
  fieldFromValue = fromValue >=> (prettyValidate . ContractMultiplier)

-- FieldSpec {fieldNumber = 232, fieldName = "NoStipulations", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoStipulations = NoStipulations {unNoStipulations :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoStipulations

instance IsField NoStipulations where
  fieldTag Proxy = 232
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoStipulations
  fieldFromValue = fromValue >=> (prettyValidate . NoStipulations)

-- FieldSpec {fieldNumber = 233, fieldName = "StipulationType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "AMT", fieldValueDescription = "ALTERNATIVE_MINIMUM_TAX"},FieldValueSpec {fieldValueEnum = "AUTOREINV", fieldValueDescription = "AUTO_REINVESTMENT"},FieldValueSpec {fieldValueEnum = "BANKQUAL", fieldValueDescription = "BANK_QUALIFIED"},FieldValueSpec {fieldValueEnum = "BGNCON", fieldValueDescription = "BARGAIN_CONDITIONS"},FieldValueSpec {fieldValueEnum = "COUPON", fieldValueDescription = "COUPON_RANGE"},FieldValueSpec {fieldValueEnum = "CURRENCY", fieldValueDescription = "ISO_CURRENCY_CODE"},FieldValueSpec {fieldValueEnum = "CUSTOMDATE", fieldValueDescription = "CUSTOM_START"},FieldValueSpec {fieldValueEnum = "GEOG", fieldValueDescription = "GEOGRAPHICS"},FieldValueSpec {fieldValueEnum = "HAIRCUT", fieldValueDescription = "VALUATION_DISCOUNT"},FieldValueSpec {fieldValueEnum = "INSURED", fieldValueDescription = "INSURED"},FieldValueSpec {fieldValueEnum = "ISSUE", fieldValueDescription = "ISSUE_DATE"},FieldValueSpec {fieldValueEnum = "ISSUER", fieldValueDescription = "ISSUER"},FieldValueSpec {fieldValueEnum = "ISSUESIZE", fieldValueDescription = "ISSUE_SIZE_RANGE"},FieldValueSpec {fieldValueEnum = "LOOKBACK", fieldValueDescription = "LOOKBACK_DAYS"},FieldValueSpec {fieldValueEnum = "LOT", fieldValueDescription = "EXPLICIT_LOT_IDENTIFIER"},FieldValueSpec {fieldValueEnum = "LOTVAR", fieldValueDescription = "LOT_VARIANCE"},FieldValueSpec {fieldValueEnum = "MAT", fieldValueDescription = "MATURITY_YEAR_AND_MONTH"},FieldValueSpec {fieldValueEnum = "MATURITY", fieldValueDescription = "MATURITY_RANGE"},FieldValueSpec {fieldValueEnum = "MAXSUBS", fieldValueDescription = "MAXIMUM_SUBSTITUTIONS"},FieldValueSpec {fieldValueEnum = "MINQTY", fieldValueDescription = "MINIMUM_QUANTITY"},FieldValueSpec {fieldValueEnum = "MININCR", fieldValueDescription = "MINIMUM_INCREMENT"},FieldValueSpec {fieldValueEnum = "MINDNOM", fieldValueDescription = "MINIMUM_DENOMINATION"},FieldValueSpec {fieldValueEnum = "PAYFREQ", fieldValueDescription = "PAYMENT_FREQUENCY"},FieldValueSpec {fieldValueEnum = "PIECES", fieldValueDescription = "NUMBER_OF_PIECES"},FieldValueSpec {fieldValueEnum = "PMAX", fieldValueDescription = "POOLS_MAXIMUM"},FieldValueSpec {fieldValueEnum = "PPM", fieldValueDescription = "POOLS_PER_MILLION"},FieldValueSpec {fieldValueEnum = "PPL", fieldValueDescription = "POOLS_PER_LOT"},FieldValueSpec {fieldValueEnum = "PPT", fieldValueDescription = "POOLS_PER_TRADE"},FieldValueSpec {fieldValueEnum = "PRICE", fieldValueDescription = "PRICE_RANGE"},FieldValueSpec {fieldValueEnum = "PRICEFREQ", fieldValueDescription = "PRICING_FREQUENCY"},FieldValueSpec {fieldValueEnum = "PROD", fieldValueDescription = "PRODUCTION_YEAR"},FieldValueSpec {fieldValueEnum = "PROTECT", fieldValueDescription = "CALL_PROTECTION"},FieldValueSpec {fieldValueEnum = "PURPOSE", fieldValueDescription = "PURPOSE"},FieldValueSpec {fieldValueEnum = "PXSOURCE", fieldValueDescription = "BENCHMARK_PRICE_SOURCE"},FieldValueSpec {fieldValueEnum = "RATING", fieldValueDescription = "RATING_SOURCE_AND_RANGE"},FieldValueSpec {fieldValueEnum = "REDEMPTION", fieldValueDescription = "TYPE_OF_REDEMPTION"},FieldValueSpec {fieldValueEnum = "RESTRICTED", fieldValueDescription = "RESTRICTED"},FieldValueSpec {fieldValueEnum = "SECTOR", fieldValueDescription = "MARKET_SECTOR"},FieldValueSpec {fieldValueEnum = "SECTYPE", fieldValueDescription = "SECURITY_TYPE_INCLUDED_OR_EXCLUDED"},FieldValueSpec {fieldValueEnum = "STRUCT", fieldValueDescription = "STRUCTURE"},FieldValueSpec {fieldValueEnum = "SUBSFREQ", fieldValueDescription = "SUBSTITUTIONS_FREQUENCY"},FieldValueSpec {fieldValueEnum = "SUBSLEFT", fieldValueDescription = "SUBSTITUTIONS_LEFT"},FieldValueSpec {fieldValueEnum = "TEXT", fieldValueDescription = "FREEFORM_TEXT"},FieldValueSpec {fieldValueEnum = "TRDVAR", fieldValueDescription = "TRADE_VARIANCE"},FieldValueSpec {fieldValueEnum = "WAC", fieldValueDescription = "WEIGHTED_AVERAGE_COUPON"},FieldValueSpec {fieldValueEnum = "WAL", fieldValueDescription = "WEIGHTED_AVERAGE_LIFE_COUPON"},FieldValueSpec {fieldValueEnum = "WALA", fieldValueDescription = "WEIGHTED_AVERAGE_LOAN_AGE"},FieldValueSpec {fieldValueEnum = "WAM", fieldValueDescription = "WEIGHTED_AVERAGE_MATURITY"},FieldValueSpec {fieldValueEnum = "WHOLE", fieldValueDescription = "WHOLE_POOL"},FieldValueSpec {fieldValueEnum = "YIELD", fieldValueDescription = "YIELD_RANGE"}]}
data StipulationType
  = StipulationType_ALTERNATIVE_MINIMUM_TAX
  | StipulationType_AUTO_REINVESTMENT
  | StipulationType_BANK_QUALIFIED
  | StipulationType_BARGAIN_CONDITIONS
  | StipulationType_COUPON_RANGE
  | StipulationType_ISO_CURRENCY_CODE
  | StipulationType_CUSTOM_START
  | StipulationType_GEOGRAPHICS
  | StipulationType_VALUATION_DISCOUNT
  | StipulationType_INSURED
  | StipulationType_ISSUE_DATE
  | StipulationType_ISSUER
  | StipulationType_ISSUE_SIZE_RANGE
  | StipulationType_LOOKBACK_DAYS
  | StipulationType_EXPLICIT_LOT_IDENTIFIER
  | StipulationType_LOT_VARIANCE
  | StipulationType_MATURITY_YEAR_AND_MONTH
  | StipulationType_MATURITY_RANGE
  | StipulationType_MAXIMUM_SUBSTITUTIONS
  | StipulationType_MINIMUM_QUANTITY
  | StipulationType_MINIMUM_INCREMENT
  | StipulationType_MINIMUM_DENOMINATION
  | StipulationType_PAYMENT_FREQUENCY
  | StipulationType_NUMBER_OF_PIECES
  | StipulationType_POOLS_MAXIMUM
  | StipulationType_POOLS_PER_MILLION
  | StipulationType_POOLS_PER_LOT
  | StipulationType_POOLS_PER_TRADE
  | StipulationType_PRICE_RANGE
  | StipulationType_PRICING_FREQUENCY
  | StipulationType_PRODUCTION_YEAR
  | StipulationType_CALL_PROTECTION
  | StipulationType_PURPOSE
  | StipulationType_BENCHMARK_PRICE_SOURCE
  | StipulationType_RATING_SOURCE_AND_RANGE
  | StipulationType_TYPE_OF_REDEMPTION
  | StipulationType_RESTRICTED
  | StipulationType_MARKET_SECTOR
  | StipulationType_SECURITY_TYPE_INCLUDED_OR_EXCLUDED
  | StipulationType_STRUCTURE
  | StipulationType_SUBSTITUTIONS_FREQUENCY
  | StipulationType_SUBSTITUTIONS_LEFT
  | StipulationType_FREEFORM_TEXT
  | StipulationType_TRADE_VARIANCE
  | StipulationType_WEIGHTED_AVERAGE_COUPON
  | StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON
  | StipulationType_WEIGHTED_AVERAGE_LOAN_AGE
  | StipulationType_WEIGHTED_AVERAGE_MATURITY
  | StipulationType_WHOLE_POOL
  | StipulationType_YIELD_RANGE
  deriving stock (Show, Eq, Generic)

instance Validity StipulationType

instance IsField StipulationType where
  fieldTag Proxy = 233
  fieldIsData Proxy = False
  fieldToValue = \case
    StipulationType_ALTERNATIVE_MINIMUM_TAX -> "AMT"
    StipulationType_AUTO_REINVESTMENT -> "AUTOREINV"
    StipulationType_BANK_QUALIFIED -> "BANKQUAL"
    StipulationType_BARGAIN_CONDITIONS -> "BGNCON"
    StipulationType_COUPON_RANGE -> "COUPON"
    StipulationType_ISO_CURRENCY_CODE -> "CURRENCY"
    StipulationType_CUSTOM_START -> "CUSTOMDATE"
    StipulationType_GEOGRAPHICS -> "GEOG"
    StipulationType_VALUATION_DISCOUNT -> "HAIRCUT"
    StipulationType_INSURED -> "INSURED"
    StipulationType_ISSUE_DATE -> "ISSUE"
    StipulationType_ISSUER -> "ISSUER"
    StipulationType_ISSUE_SIZE_RANGE -> "ISSUESIZE"
    StipulationType_LOOKBACK_DAYS -> "LOOKBACK"
    StipulationType_EXPLICIT_LOT_IDENTIFIER -> "LOT"
    StipulationType_LOT_VARIANCE -> "LOTVAR"
    StipulationType_MATURITY_YEAR_AND_MONTH -> "MAT"
    StipulationType_MATURITY_RANGE -> "MATURITY"
    StipulationType_MAXIMUM_SUBSTITUTIONS -> "MAXSUBS"
    StipulationType_MINIMUM_QUANTITY -> "MINQTY"
    StipulationType_MINIMUM_INCREMENT -> "MININCR"
    StipulationType_MINIMUM_DENOMINATION -> "MINDNOM"
    StipulationType_PAYMENT_FREQUENCY -> "PAYFREQ"
    StipulationType_NUMBER_OF_PIECES -> "PIECES"
    StipulationType_POOLS_MAXIMUM -> "PMAX"
    StipulationType_POOLS_PER_MILLION -> "PPM"
    StipulationType_POOLS_PER_LOT -> "PPL"
    StipulationType_POOLS_PER_TRADE -> "PPT"
    StipulationType_PRICE_RANGE -> "PRICE"
    StipulationType_PRICING_FREQUENCY -> "PRICEFREQ"
    StipulationType_PRODUCTION_YEAR -> "PROD"
    StipulationType_CALL_PROTECTION -> "PROTECT"
    StipulationType_PURPOSE -> "PURPOSE"
    StipulationType_BENCHMARK_PRICE_SOURCE -> "PXSOURCE"
    StipulationType_RATING_SOURCE_AND_RANGE -> "RATING"
    StipulationType_TYPE_OF_REDEMPTION -> "REDEMPTION"
    StipulationType_RESTRICTED -> "RESTRICTED"
    StipulationType_MARKET_SECTOR -> "SECTOR"
    StipulationType_SECURITY_TYPE_INCLUDED_OR_EXCLUDED -> "SECTYPE"
    StipulationType_STRUCTURE -> "STRUCT"
    StipulationType_SUBSTITUTIONS_FREQUENCY -> "SUBSFREQ"
    StipulationType_SUBSTITUTIONS_LEFT -> "SUBSLEFT"
    StipulationType_FREEFORM_TEXT -> "TEXT"
    StipulationType_TRADE_VARIANCE -> "TRDVAR"
    StipulationType_WEIGHTED_AVERAGE_COUPON -> "WAC"
    StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON -> "WAL"
    StipulationType_WEIGHTED_AVERAGE_LOAN_AGE -> "WALA"
    StipulationType_WEIGHTED_AVERAGE_MATURITY -> "WAM"
    StipulationType_WHOLE_POOL -> "WHOLE"
    StipulationType_YIELD_RANGE -> "YIELD"
  fieldFromValue = \case
    "AMT" -> Right StipulationType_ALTERNATIVE_MINIMUM_TAX
    "AUTOREINV" -> Right StipulationType_AUTO_REINVESTMENT
    "BANKQUAL" -> Right StipulationType_BANK_QUALIFIED
    "BGNCON" -> Right StipulationType_BARGAIN_CONDITIONS
    "COUPON" -> Right StipulationType_COUPON_RANGE
    "CURRENCY" -> Right StipulationType_ISO_CURRENCY_CODE
    "CUSTOMDATE" -> Right StipulationType_CUSTOM_START
    "GEOG" -> Right StipulationType_GEOGRAPHICS
    "HAIRCUT" -> Right StipulationType_VALUATION_DISCOUNT
    "INSURED" -> Right StipulationType_INSURED
    "ISSUE" -> Right StipulationType_ISSUE_DATE
    "ISSUER" -> Right StipulationType_ISSUER
    "ISSUESIZE" -> Right StipulationType_ISSUE_SIZE_RANGE
    "LOOKBACK" -> Right StipulationType_LOOKBACK_DAYS
    "LOT" -> Right StipulationType_EXPLICIT_LOT_IDENTIFIER
    "LOTVAR" -> Right StipulationType_LOT_VARIANCE
    "MAT" -> Right StipulationType_MATURITY_YEAR_AND_MONTH
    "MATURITY" -> Right StipulationType_MATURITY_RANGE
    "MAXSUBS" -> Right StipulationType_MAXIMUM_SUBSTITUTIONS
    "MINQTY" -> Right StipulationType_MINIMUM_QUANTITY
    "MININCR" -> Right StipulationType_MINIMUM_INCREMENT
    "MINDNOM" -> Right StipulationType_MINIMUM_DENOMINATION
    "PAYFREQ" -> Right StipulationType_PAYMENT_FREQUENCY
    "PIECES" -> Right StipulationType_NUMBER_OF_PIECES
    "PMAX" -> Right StipulationType_POOLS_MAXIMUM
    "PPM" -> Right StipulationType_POOLS_PER_MILLION
    "PPL" -> Right StipulationType_POOLS_PER_LOT
    "PPT" -> Right StipulationType_POOLS_PER_TRADE
    "PRICE" -> Right StipulationType_PRICE_RANGE
    "PRICEFREQ" -> Right StipulationType_PRICING_FREQUENCY
    "PROD" -> Right StipulationType_PRODUCTION_YEAR
    "PROTECT" -> Right StipulationType_CALL_PROTECTION
    "PURPOSE" -> Right StipulationType_PURPOSE
    "PXSOURCE" -> Right StipulationType_BENCHMARK_PRICE_SOURCE
    "RATING" -> Right StipulationType_RATING_SOURCE_AND_RANGE
    "REDEMPTION" -> Right StipulationType_TYPE_OF_REDEMPTION
    "RESTRICTED" -> Right StipulationType_RESTRICTED
    "SECTOR" -> Right StipulationType_MARKET_SECTOR
    "SECTYPE" -> Right StipulationType_SECURITY_TYPE_INCLUDED_OR_EXCLUDED
    "STRUCT" -> Right StipulationType_STRUCTURE
    "SUBSFREQ" -> Right StipulationType_SUBSTITUTIONS_FREQUENCY
    "SUBSLEFT" -> Right StipulationType_SUBSTITUTIONS_LEFT
    "TEXT" -> Right StipulationType_FREEFORM_TEXT
    "TRDVAR" -> Right StipulationType_TRADE_VARIANCE
    "WAC" -> Right StipulationType_WEIGHTED_AVERAGE_COUPON
    "WAL" -> Right StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON
    "WALA" -> Right StipulationType_WEIGHTED_AVERAGE_LOAN_AGE
    "WAM" -> Right StipulationType_WEIGHTED_AVERAGE_MATURITY
    "WHOLE" -> Right StipulationType_WHOLE_POOL
    "YIELD" -> Right StipulationType_YIELD_RANGE
    v -> Left ("Unknown StipulationType: " <> show v)

-- FieldSpec {fieldNumber = 234, fieldName = "StipulationValue", fieldType = FieldTypeString, fieldValues = []}
newtype StipulationValue = StipulationValue {unStipulationValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StipulationValue

instance IsField StipulationValue where
  fieldTag Proxy = 234
  fieldIsData Proxy = False
  fieldToValue = toValue . unStipulationValue
  fieldFromValue = fromValue >=> (prettyValidate . StipulationValue)

-- FieldSpec {fieldNumber = 235, fieldName = "YieldType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "AFTERTAX", fieldValueDescription = "AFTER_TAX_YIELD"},FieldValueSpec {fieldValueEnum = "ANNUAL", fieldValueDescription = "ANNUAL_YIELD"},FieldValueSpec {fieldValueEnum = "ATISSUE", fieldValueDescription = "YIELD_AT_ISSUE"},FieldValueSpec {fieldValueEnum = "AVGMATURITY", fieldValueDescription = "YIELD_TO_AVERAGE_MATURITY"},FieldValueSpec {fieldValueEnum = "BOOK", fieldValueDescription = "BOOK_YIELD"},FieldValueSpec {fieldValueEnum = "CALL", fieldValueDescription = "YIELD_TO_NEXT_CALL"},FieldValueSpec {fieldValueEnum = "CHANGE", fieldValueDescription = "YIELD_CHANGE_SINCE_CLOSE"},FieldValueSpec {fieldValueEnum = "CLOSE", fieldValueDescription = "CLOSING_YIELD"},FieldValueSpec {fieldValueEnum = "COMPOUND", fieldValueDescription = "COMPOUND_YIELD"},FieldValueSpec {fieldValueEnum = "CURRENT", fieldValueDescription = "CURRENT_YIELD"},FieldValueSpec {fieldValueEnum = "GROSS", fieldValueDescription = "TRUE_GROSS_YIELD"},FieldValueSpec {fieldValueEnum = "GOVTEQUIV", fieldValueDescription = "GVNT_EQUIVALENT_YIELD"},FieldValueSpec {fieldValueEnum = "INFLATION", fieldValueDescription = "YIELD_WITH_INFLATION_ASSUMPTION"},FieldValueSpec {fieldValueEnum = "INVERSEFLOATER", fieldValueDescription = "INVERSE_FLOATER_BOND_YIELD"},FieldValueSpec {fieldValueEnum = "LASTCLOSE", fieldValueDescription = "MOST_RECENT_CLOSING_YIELD"},FieldValueSpec {fieldValueEnum = "LASTMONTH", fieldValueDescription = "CLOSING_YIELD_MOST_RECENT_MONTH"},FieldValueSpec {fieldValueEnum = "LASTQUARTER", fieldValueDescription = "CLOSING_YIELD_MOST_RECENT_QUARTER"},FieldValueSpec {fieldValueEnum = "LASTYEAR", fieldValueDescription = "CLOSING_YIELD_MOST_RECENT_YEAR"},FieldValueSpec {fieldValueEnum = "LONGAVGLIFE", fieldValueDescription = "YIELD_TO_LONGEST_AVERAGE_LIFE"},FieldValueSpec {fieldValueEnum = "MARK", fieldValueDescription = "MARK_TO_MARKET_YIELD"},FieldValueSpec {fieldValueEnum = "MATURITY", fieldValueDescription = "YIELD_TO_MATURITY"},FieldValueSpec {fieldValueEnum = "NEXTREFUND", fieldValueDescription = "YIELD_TO_NEXT_REFUND"},FieldValueSpec {fieldValueEnum = "OPENAVG", fieldValueDescription = "OPEN_AVERAGE_YIELD"},FieldValueSpec {fieldValueEnum = "PUT", fieldValueDescription = "YIELD_TO_NEXT_PUT"},FieldValueSpec {fieldValueEnum = "PREVCLOSE", fieldValueDescription = "PREVIOUS_CLOSE_YIELD"},FieldValueSpec {fieldValueEnum = "PROCEEDS", fieldValueDescription = "PROCEEDS_YIELD"},FieldValueSpec {fieldValueEnum = "SEMIANNUAL", fieldValueDescription = "SEMI_ANNUAL_YIELD"},FieldValueSpec {fieldValueEnum = "SHORTAVGLIFE", fieldValueDescription = "YIELD_TO_SHORTEST_AVERAGE_LIFE"},FieldValueSpec {fieldValueEnum = "SIMPLE", fieldValueDescription = "SIMPLE_YIELD"},FieldValueSpec {fieldValueEnum = "TAXEQUIV", fieldValueDescription = "TAX_EQUIVALENT_YIELD"},FieldValueSpec {fieldValueEnum = "TENDER", fieldValueDescription = "YIELD_TO_TENDER_DATE"},FieldValueSpec {fieldValueEnum = "TRUE", fieldValueDescription = "TRUE_YIELD"},FieldValueSpec {fieldValueEnum = "VALUE1/32", fieldValueDescription = "YIELD_VALUE_OF132"},FieldValueSpec {fieldValueEnum = "WORST", fieldValueDescription = "YIELD_TO_WORST"}]}
data YieldType
  = YieldType_AFTER_TAX_YIELD
  | YieldType_ANNUAL_YIELD
  | YieldType_YIELD_AT_ISSUE
  | YieldType_YIELD_TO_AVERAGE_MATURITY
  | YieldType_BOOK_YIELD
  | YieldType_YIELD_TO_NEXT_CALL
  | YieldType_YIELD_CHANGE_SINCE_CLOSE
  | YieldType_CLOSING_YIELD
  | YieldType_COMPOUND_YIELD
  | YieldType_CURRENT_YIELD
  | YieldType_TRUE_GROSS_YIELD
  | YieldType_GVNT_EQUIVALENT_YIELD
  | YieldType_YIELD_WITH_INFLATION_ASSUMPTION
  | YieldType_INVERSE_FLOATER_BOND_YIELD
  | YieldType_MOST_RECENT_CLOSING_YIELD
  | YieldType_CLOSING_YIELD_MOST_RECENT_MONTH
  | YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER
  | YieldType_CLOSING_YIELD_MOST_RECENT_YEAR
  | YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE
  | YieldType_MARK_TO_MARKET_YIELD
  | YieldType_YIELD_TO_MATURITY
  | YieldType_YIELD_TO_NEXT_REFUND
  | YieldType_OPEN_AVERAGE_YIELD
  | YieldType_YIELD_TO_NEXT_PUT
  | YieldType_PREVIOUS_CLOSE_YIELD
  | YieldType_PROCEEDS_YIELD
  | YieldType_SEMI_ANNUAL_YIELD
  | YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE
  | YieldType_SIMPLE_YIELD
  | YieldType_TAX_EQUIVALENT_YIELD
  | YieldType_YIELD_TO_TENDER_DATE
  | YieldType_TRUE_YIELD
  | YieldType_YIELD_VALUE_OF132
  | YieldType_YIELD_TO_WORST
  deriving stock (Show, Eq, Generic)

instance Validity YieldType

instance IsField YieldType where
  fieldTag Proxy = 235
  fieldIsData Proxy = False
  fieldToValue = \case
    YieldType_AFTER_TAX_YIELD -> "AFTERTAX"
    YieldType_ANNUAL_YIELD -> "ANNUAL"
    YieldType_YIELD_AT_ISSUE -> "ATISSUE"
    YieldType_YIELD_TO_AVERAGE_MATURITY -> "AVGMATURITY"
    YieldType_BOOK_YIELD -> "BOOK"
    YieldType_YIELD_TO_NEXT_CALL -> "CALL"
    YieldType_YIELD_CHANGE_SINCE_CLOSE -> "CHANGE"
    YieldType_CLOSING_YIELD -> "CLOSE"
    YieldType_COMPOUND_YIELD -> "COMPOUND"
    YieldType_CURRENT_YIELD -> "CURRENT"
    YieldType_TRUE_GROSS_YIELD -> "GROSS"
    YieldType_GVNT_EQUIVALENT_YIELD -> "GOVTEQUIV"
    YieldType_YIELD_WITH_INFLATION_ASSUMPTION -> "INFLATION"
    YieldType_INVERSE_FLOATER_BOND_YIELD -> "INVERSEFLOATER"
    YieldType_MOST_RECENT_CLOSING_YIELD -> "LASTCLOSE"
    YieldType_CLOSING_YIELD_MOST_RECENT_MONTH -> "LASTMONTH"
    YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER -> "LASTQUARTER"
    YieldType_CLOSING_YIELD_MOST_RECENT_YEAR -> "LASTYEAR"
    YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE -> "LONGAVGLIFE"
    YieldType_MARK_TO_MARKET_YIELD -> "MARK"
    YieldType_YIELD_TO_MATURITY -> "MATURITY"
    YieldType_YIELD_TO_NEXT_REFUND -> "NEXTREFUND"
    YieldType_OPEN_AVERAGE_YIELD -> "OPENAVG"
    YieldType_YIELD_TO_NEXT_PUT -> "PUT"
    YieldType_PREVIOUS_CLOSE_YIELD -> "PREVCLOSE"
    YieldType_PROCEEDS_YIELD -> "PROCEEDS"
    YieldType_SEMI_ANNUAL_YIELD -> "SEMIANNUAL"
    YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE -> "SHORTAVGLIFE"
    YieldType_SIMPLE_YIELD -> "SIMPLE"
    YieldType_TAX_EQUIVALENT_YIELD -> "TAXEQUIV"
    YieldType_YIELD_TO_TENDER_DATE -> "TENDER"
    YieldType_TRUE_YIELD -> "TRUE"
    YieldType_YIELD_VALUE_OF132 -> "VALUE1/32"
    YieldType_YIELD_TO_WORST -> "WORST"
  fieldFromValue = \case
    "AFTERTAX" -> Right YieldType_AFTER_TAX_YIELD
    "ANNUAL" -> Right YieldType_ANNUAL_YIELD
    "ATISSUE" -> Right YieldType_YIELD_AT_ISSUE
    "AVGMATURITY" -> Right YieldType_YIELD_TO_AVERAGE_MATURITY
    "BOOK" -> Right YieldType_BOOK_YIELD
    "CALL" -> Right YieldType_YIELD_TO_NEXT_CALL
    "CHANGE" -> Right YieldType_YIELD_CHANGE_SINCE_CLOSE
    "CLOSE" -> Right YieldType_CLOSING_YIELD
    "COMPOUND" -> Right YieldType_COMPOUND_YIELD
    "CURRENT" -> Right YieldType_CURRENT_YIELD
    "GROSS" -> Right YieldType_TRUE_GROSS_YIELD
    "GOVTEQUIV" -> Right YieldType_GVNT_EQUIVALENT_YIELD
    "INFLATION" -> Right YieldType_YIELD_WITH_INFLATION_ASSUMPTION
    "INVERSEFLOATER" -> Right YieldType_INVERSE_FLOATER_BOND_YIELD
    "LASTCLOSE" -> Right YieldType_MOST_RECENT_CLOSING_YIELD
    "LASTMONTH" -> Right YieldType_CLOSING_YIELD_MOST_RECENT_MONTH
    "LASTQUARTER" -> Right YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER
    "LASTYEAR" -> Right YieldType_CLOSING_YIELD_MOST_RECENT_YEAR
    "LONGAVGLIFE" -> Right YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE
    "MARK" -> Right YieldType_MARK_TO_MARKET_YIELD
    "MATURITY" -> Right YieldType_YIELD_TO_MATURITY
    "NEXTREFUND" -> Right YieldType_YIELD_TO_NEXT_REFUND
    "OPENAVG" -> Right YieldType_OPEN_AVERAGE_YIELD
    "PUT" -> Right YieldType_YIELD_TO_NEXT_PUT
    "PREVCLOSE" -> Right YieldType_PREVIOUS_CLOSE_YIELD
    "PROCEEDS" -> Right YieldType_PROCEEDS_YIELD
    "SEMIANNUAL" -> Right YieldType_SEMI_ANNUAL_YIELD
    "SHORTAVGLIFE" -> Right YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE
    "SIMPLE" -> Right YieldType_SIMPLE_YIELD
    "TAXEQUIV" -> Right YieldType_TAX_EQUIVALENT_YIELD
    "TENDER" -> Right YieldType_YIELD_TO_TENDER_DATE
    "TRUE" -> Right YieldType_TRUE_YIELD
    "VALUE1/32" -> Right YieldType_YIELD_VALUE_OF132
    "WORST" -> Right YieldType_YIELD_TO_WORST
    v -> Left ("Unknown YieldType: " <> show v)

-- FieldSpec {fieldNumber = 236, fieldName = "Yield", fieldType = FieldTypePercentage, fieldValues = []}
newtype Yield = Yield {unYield :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Yield

instance IsField Yield where
  fieldTag Proxy = 236
  fieldIsData Proxy = False
  fieldToValue = toValue . unYield
  fieldFromValue = fromValue >=> (prettyValidate . Yield)

-- FieldSpec {fieldNumber = 237, fieldName = "TotalTakedown", fieldType = FieldTypeAMT, fieldValues = []}
newtype TotalTakedown = TotalTakedown {unTotalTakedown :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalTakedown

instance IsField TotalTakedown where
  fieldTag Proxy = 237
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalTakedown
  fieldFromValue = fromValue >=> (prettyValidate . TotalTakedown)

-- FieldSpec {fieldNumber = 238, fieldName = "Concession", fieldType = FieldTypeAMT, fieldValues = []}
newtype Concession = Concession {unConcession :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Concession

instance IsField Concession where
  fieldTag Proxy = 238
  fieldIsData Proxy = False
  fieldToValue = toValue . unConcession
  fieldFromValue = fromValue >=> (prettyValidate . Concession)

-- FieldSpec {fieldNumber = 239, fieldName = "RepoCollateralSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype RepoCollateralSecurityType = RepoCollateralSecurityType {unRepoCollateralSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RepoCollateralSecurityType

instance IsField RepoCollateralSecurityType where
  fieldTag Proxy = 239
  fieldIsData Proxy = False
  fieldToValue = toValue . unRepoCollateralSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . RepoCollateralSecurityType)

-- FieldSpec {fieldNumber = 240, fieldName = "RedemptionDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype RedemptionDate = RedemptionDate {unRedemptionDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RedemptionDate

instance IsField RedemptionDate where
  fieldTag Proxy = 240
  fieldIsData Proxy = False
  fieldToValue = toValue . unRedemptionDate
  fieldFromValue = fromValue >=> (prettyValidate . RedemptionDate)

-- FieldSpec {fieldNumber = 241, fieldName = "UnderlyingCouponPaymentDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype UnderlyingCouponPaymentDate = UnderlyingCouponPaymentDate {unUnderlyingCouponPaymentDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCouponPaymentDate

instance IsField UnderlyingCouponPaymentDate where
  fieldTag Proxy = 241
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCouponPaymentDate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCouponPaymentDate)

-- FieldSpec {fieldNumber = 242, fieldName = "UnderlyingIssueDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype UnderlyingIssueDate = UnderlyingIssueDate {unUnderlyingIssueDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingIssueDate

instance IsField UnderlyingIssueDate where
  fieldTag Proxy = 242
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingIssueDate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingIssueDate)

-- FieldSpec {fieldNumber = 243, fieldName = "UnderlyingRepoCollateralSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingRepoCollateralSecurityType = UnderlyingRepoCollateralSecurityType {unUnderlyingRepoCollateralSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingRepoCollateralSecurityType

instance IsField UnderlyingRepoCollateralSecurityType where
  fieldTag Proxy = 243
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingRepoCollateralSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingRepoCollateralSecurityType)

-- FieldSpec {fieldNumber = 244, fieldName = "UnderlyingRepurchaseTerm", fieldType = FieldTypeInt, fieldValues = []}
newtype UnderlyingRepurchaseTerm = UnderlyingRepurchaseTerm {unUnderlyingRepurchaseTerm :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingRepurchaseTerm

instance IsField UnderlyingRepurchaseTerm where
  fieldTag Proxy = 244
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingRepurchaseTerm
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingRepurchaseTerm)

-- FieldSpec {fieldNumber = 245, fieldName = "UnderlyingRepurchaseRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype UnderlyingRepurchaseRate = UnderlyingRepurchaseRate {unUnderlyingRepurchaseRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingRepurchaseRate

instance IsField UnderlyingRepurchaseRate where
  fieldTag Proxy = 245
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingRepurchaseRate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingRepurchaseRate)

-- FieldSpec {fieldNumber = 246, fieldName = "UnderlyingFactor", fieldType = FieldTypeFloat, fieldValues = []}
newtype UnderlyingFactor = UnderlyingFactor {unUnderlyingFactor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingFactor

instance IsField UnderlyingFactor where
  fieldTag Proxy = 246
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingFactor
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingFactor)

-- FieldSpec {fieldNumber = 247, fieldName = "UnderlyingRedemptionDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype UnderlyingRedemptionDate = UnderlyingRedemptionDate {unUnderlyingRedemptionDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingRedemptionDate

instance IsField UnderlyingRedemptionDate where
  fieldTag Proxy = 247
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingRedemptionDate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingRedemptionDate)

-- FieldSpec {fieldNumber = 248, fieldName = "LegCouponPaymentDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegCouponPaymentDate = LegCouponPaymentDate {unLegCouponPaymentDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCouponPaymentDate

instance IsField LegCouponPaymentDate where
  fieldTag Proxy = 248
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCouponPaymentDate
  fieldFromValue = fromValue >=> (prettyValidate . LegCouponPaymentDate)

-- FieldSpec {fieldNumber = 249, fieldName = "LegIssueDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegIssueDate = LegIssueDate {unLegIssueDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegIssueDate

instance IsField LegIssueDate where
  fieldTag Proxy = 249
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegIssueDate
  fieldFromValue = fromValue >=> (prettyValidate . LegIssueDate)

-- FieldSpec {fieldNumber = 250, fieldName = "LegRepoCollateralSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype LegRepoCollateralSecurityType = LegRepoCollateralSecurityType {unLegRepoCollateralSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRepoCollateralSecurityType

instance IsField LegRepoCollateralSecurityType where
  fieldTag Proxy = 250
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRepoCollateralSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . LegRepoCollateralSecurityType)

-- FieldSpec {fieldNumber = 251, fieldName = "LegRepurchaseTerm", fieldType = FieldTypeInt, fieldValues = []}
newtype LegRepurchaseTerm = LegRepurchaseTerm {unLegRepurchaseTerm :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRepurchaseTerm

instance IsField LegRepurchaseTerm where
  fieldTag Proxy = 251
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRepurchaseTerm
  fieldFromValue = fromValue >=> (prettyValidate . LegRepurchaseTerm)

-- FieldSpec {fieldNumber = 252, fieldName = "LegRepurchaseRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype LegRepurchaseRate = LegRepurchaseRate {unLegRepurchaseRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRepurchaseRate

instance IsField LegRepurchaseRate where
  fieldTag Proxy = 252
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRepurchaseRate
  fieldFromValue = fromValue >=> (prettyValidate . LegRepurchaseRate)

-- FieldSpec {fieldNumber = 253, fieldName = "LegFactor", fieldType = FieldTypeFloat, fieldValues = []}
newtype LegFactor = LegFactor {unLegFactor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegFactor

instance IsField LegFactor where
  fieldTag Proxy = 253
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegFactor
  fieldFromValue = fromValue >=> (prettyValidate . LegFactor)

-- FieldSpec {fieldNumber = 254, fieldName = "LegRedemptionDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegRedemptionDate = LegRedemptionDate {unLegRedemptionDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRedemptionDate

instance IsField LegRedemptionDate where
  fieldTag Proxy = 254
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRedemptionDate
  fieldFromValue = fromValue >=> (prettyValidate . LegRedemptionDate)

-- FieldSpec {fieldNumber = 255, fieldName = "CreditRating", fieldType = FieldTypeString, fieldValues = []}
newtype CreditRating = CreditRating {unCreditRating :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CreditRating

instance IsField CreditRating where
  fieldTag Proxy = 255
  fieldIsData Proxy = False
  fieldToValue = toValue . unCreditRating
  fieldFromValue = fromValue >=> (prettyValidate . CreditRating)

-- FieldSpec {fieldNumber = 256, fieldName = "UnderlyingCreditRating", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingCreditRating = UnderlyingCreditRating {unUnderlyingCreditRating :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCreditRating

instance IsField UnderlyingCreditRating where
  fieldTag Proxy = 256
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCreditRating
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCreditRating)

-- FieldSpec {fieldNumber = 257, fieldName = "LegCreditRating", fieldType = FieldTypeString, fieldValues = []}
newtype LegCreditRating = LegCreditRating {unLegCreditRating :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCreditRating

instance IsField LegCreditRating where
  fieldTag Proxy = 257
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCreditRating
  fieldFromValue = fromValue >=> (prettyValidate . LegCreditRating)

-- FieldSpec {fieldNumber = 258, fieldName = "TradedFlatSwitch", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data TradedFlatSwitch
  = TradedFlatSwitch_YES
  | TradedFlatSwitch_NO
  deriving stock (Show, Eq, Generic)

instance Validity TradedFlatSwitch

instance IsField TradedFlatSwitch where
  fieldTag Proxy = 258
  fieldIsData Proxy = False
  fieldToValue = \case
    TradedFlatSwitch_YES -> "Y"
    TradedFlatSwitch_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right TradedFlatSwitch_YES
    "N" -> Right TradedFlatSwitch_NO
    v -> Left ("Unknown TradedFlatSwitch: " <> show v)

-- FieldSpec {fieldNumber = 259, fieldName = "BasisFeatureDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype BasisFeatureDate = BasisFeatureDate {unBasisFeatureDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BasisFeatureDate

instance IsField BasisFeatureDate where
  fieldTag Proxy = 259
  fieldIsData Proxy = False
  fieldToValue = toValue . unBasisFeatureDate
  fieldFromValue = fromValue >=> (prettyValidate . BasisFeatureDate)

-- FieldSpec {fieldNumber = 260, fieldName = "BasisFeaturePrice", fieldType = FieldTypePrice, fieldValues = []}
newtype BasisFeaturePrice = BasisFeaturePrice {unBasisFeaturePrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BasisFeaturePrice

instance IsField BasisFeaturePrice where
  fieldTag Proxy = 260
  fieldIsData Proxy = False
  fieldToValue = toValue . unBasisFeaturePrice
  fieldFromValue = fromValue >=> (prettyValidate . BasisFeaturePrice)

-- FieldSpec {fieldNumber = 262, fieldName = "MDReqID", fieldType = FieldTypeString, fieldValues = []}
newtype MDReqID = MDReqID {unMDReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDReqID

instance IsField MDReqID where
  fieldTag Proxy = 262
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDReqID
  fieldFromValue = fromValue >=> (prettyValidate . MDReqID)

-- FieldSpec {fieldNumber = 263, fieldName = "SubscriptionRequestType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SNAPSHOT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SNAPSHOT_AND_UPDATES"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DISABLE_PREVIOUS_SNAPSHOT"}]}
data SubscriptionRequestType
  = SubscriptionRequestType_SNAPSHOT
  | SubscriptionRequestType_SNAPSHOT_AND_UPDATES
  | SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT
  deriving stock (Show, Eq, Generic)

instance Validity SubscriptionRequestType

instance IsField SubscriptionRequestType where
  fieldTag Proxy = 263
  fieldIsData Proxy = False
  fieldToValue = \case
    SubscriptionRequestType_SNAPSHOT -> "0"
    SubscriptionRequestType_SNAPSHOT_AND_UPDATES -> "1"
    SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT -> "2"
  fieldFromValue = \case
    "0" -> Right SubscriptionRequestType_SNAPSHOT
    "1" -> Right SubscriptionRequestType_SNAPSHOT_AND_UPDATES
    "2" -> Right SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT
    v -> Left ("Unknown SubscriptionRequestType: " <> show v)

-- FieldSpec {fieldNumber = 264, fieldName = "MarketDepth", fieldType = FieldTypeInt, fieldValues = []}
newtype MarketDepth = MarketDepth {unMarketDepth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MarketDepth

instance IsField MarketDepth where
  fieldTag Proxy = 264
  fieldIsData Proxy = False
  fieldToValue = toValue . unMarketDepth
  fieldFromValue = fromValue >=> (prettyValidate . MarketDepth)

-- FieldSpec {fieldNumber = 265, fieldName = "MDUpdateType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FULL_REFRESH"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INCREMENTAL_REFRESH"}]}
data MDUpdateType
  = MDUpdateType_FULL_REFRESH
  | MDUpdateType_INCREMENTAL_REFRESH
  deriving stock (Show, Eq, Generic)

instance Validity MDUpdateType

instance IsField MDUpdateType where
  fieldTag Proxy = 265
  fieldIsData Proxy = False
  fieldToValue = \case
    MDUpdateType_FULL_REFRESH -> "0"
    MDUpdateType_INCREMENTAL_REFRESH -> "1"
  fieldFromValue = \case
    "0" -> Right MDUpdateType_FULL_REFRESH
    "1" -> Right MDUpdateType_INCREMENTAL_REFRESH
    v -> Left ("Unknown MDUpdateType: " <> show v)

-- FieldSpec {fieldNumber = 266, fieldName = "AggregatedBook", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data AggregatedBook
  = AggregatedBook_YES
  | AggregatedBook_NO
  deriving stock (Show, Eq, Generic)

instance Validity AggregatedBook

instance IsField AggregatedBook where
  fieldTag Proxy = 266
  fieldIsData Proxy = False
  fieldToValue = \case
    AggregatedBook_YES -> "Y"
    AggregatedBook_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right AggregatedBook_YES
    "N" -> Right AggregatedBook_NO
    v -> Left ("Unknown AggregatedBook: " <> show v)

-- FieldSpec {fieldNumber = 267, fieldName = "NoMDEntryTypes", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoMDEntryTypes = NoMDEntryTypes {unNoMDEntryTypes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoMDEntryTypes

instance IsField NoMDEntryTypes where
  fieldTag Proxy = 267
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoMDEntryTypes
  fieldFromValue = fromValue >=> (prettyValidate . NoMDEntryTypes)

-- FieldSpec {fieldNumber = 268, fieldName = "NoMDEntries", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoMDEntries = NoMDEntries {unNoMDEntries :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoMDEntries

instance IsField NoMDEntries where
  fieldTag Proxy = 268
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoMDEntries
  fieldFromValue = fromValue >=> (prettyValidate . NoMDEntries)

-- FieldSpec {fieldNumber = 269, fieldName = "MDEntryType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "BID"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "OFFER"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TRADE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INDEX_VALUE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OPENING_PRICE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CLOSING_PRICE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "SETTLEMENT_PRICE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "TRADING_SESSION_HIGH_PRICE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TRADING_SESSION_LOW_PRICE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "TRADING_SESSION_VWAP_PRICE"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "IMBALANCE"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "TRADE_VOLUME"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "OPEN_INTEREST"}]}
data MDEntryType
  = MDEntryType_BID
  | MDEntryType_OFFER
  | MDEntryType_TRADE
  | MDEntryType_INDEX_VALUE
  | MDEntryType_OPENING_PRICE
  | MDEntryType_CLOSING_PRICE
  | MDEntryType_SETTLEMENT_PRICE
  | MDEntryType_TRADING_SESSION_HIGH_PRICE
  | MDEntryType_TRADING_SESSION_LOW_PRICE
  | MDEntryType_TRADING_SESSION_VWAP_PRICE
  | MDEntryType_IMBALANCE
  | MDEntryType_TRADE_VOLUME
  | MDEntryType_OPEN_INTEREST
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryType

instance IsField MDEntryType where
  fieldTag Proxy = 269
  fieldIsData Proxy = False
  fieldToValue = \case
    MDEntryType_BID -> "0"
    MDEntryType_OFFER -> "1"
    MDEntryType_TRADE -> "2"
    MDEntryType_INDEX_VALUE -> "3"
    MDEntryType_OPENING_PRICE -> "4"
    MDEntryType_CLOSING_PRICE -> "5"
    MDEntryType_SETTLEMENT_PRICE -> "6"
    MDEntryType_TRADING_SESSION_HIGH_PRICE -> "7"
    MDEntryType_TRADING_SESSION_LOW_PRICE -> "8"
    MDEntryType_TRADING_SESSION_VWAP_PRICE -> "9"
    MDEntryType_IMBALANCE -> "A"
    MDEntryType_TRADE_VOLUME -> "B"
    MDEntryType_OPEN_INTEREST -> "C"
  fieldFromValue = \case
    "0" -> Right MDEntryType_BID
    "1" -> Right MDEntryType_OFFER
    "2" -> Right MDEntryType_TRADE
    "3" -> Right MDEntryType_INDEX_VALUE
    "4" -> Right MDEntryType_OPENING_PRICE
    "5" -> Right MDEntryType_CLOSING_PRICE
    "6" -> Right MDEntryType_SETTLEMENT_PRICE
    "7" -> Right MDEntryType_TRADING_SESSION_HIGH_PRICE
    "8" -> Right MDEntryType_TRADING_SESSION_LOW_PRICE
    "9" -> Right MDEntryType_TRADING_SESSION_VWAP_PRICE
    "A" -> Right MDEntryType_IMBALANCE
    "B" -> Right MDEntryType_TRADE_VOLUME
    "C" -> Right MDEntryType_OPEN_INTEREST
    v -> Left ("Unknown MDEntryType: " <> show v)

-- FieldSpec {fieldNumber = 270, fieldName = "MDEntryPx", fieldType = FieldTypePrice, fieldValues = []}
newtype MDEntryPx = MDEntryPx {unMDEntryPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryPx

instance IsField MDEntryPx where
  fieldTag Proxy = 270
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryPx
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryPx)

-- FieldSpec {fieldNumber = 271, fieldName = "MDEntrySize", fieldType = FieldTypeQTY, fieldValues = []}
newtype MDEntrySize = MDEntrySize {unMDEntrySize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntrySize

instance IsField MDEntrySize where
  fieldTag Proxy = 271
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntrySize
  fieldFromValue = fromValue >=> (prettyValidate . MDEntrySize)

-- FieldSpec {fieldNumber = 272, fieldName = "MDEntryDate", fieldType = FieldTypeUTCDateOnly, fieldValues = []}
newtype MDEntryDate = MDEntryDate {unMDEntryDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryDate

instance IsField MDEntryDate where
  fieldTag Proxy = 272
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryDate
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryDate)

-- FieldSpec {fieldNumber = 273, fieldName = "MDEntryTime", fieldType = FieldTypeUTCTimeOnly, fieldValues = []}
newtype MDEntryTime = MDEntryTime {unMDEntryTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryTime

instance IsField MDEntryTime where
  fieldTag Proxy = 273
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryTime
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryTime)

-- FieldSpec {fieldNumber = 274, fieldName = "TickDirection", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PLUS_TICK"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ZERO_PLUS_TICK"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MINUS_TICK"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ZERO_MINUS_TICK"}]}
data TickDirection
  = TickDirection_PLUS_TICK
  | TickDirection_ZERO_PLUS_TICK
  | TickDirection_MINUS_TICK
  | TickDirection_ZERO_MINUS_TICK
  deriving stock (Show, Eq, Generic)

instance Validity TickDirection

instance IsField TickDirection where
  fieldTag Proxy = 274
  fieldIsData Proxy = False
  fieldToValue = \case
    TickDirection_PLUS_TICK -> "0"
    TickDirection_ZERO_PLUS_TICK -> "1"
    TickDirection_MINUS_TICK -> "2"
    TickDirection_ZERO_MINUS_TICK -> "3"
  fieldFromValue = \case
    "0" -> Right TickDirection_PLUS_TICK
    "1" -> Right TickDirection_ZERO_PLUS_TICK
    "2" -> Right TickDirection_MINUS_TICK
    "3" -> Right TickDirection_ZERO_MINUS_TICK
    v -> Left ("Unknown TickDirection: " <> show v)

-- FieldSpec {fieldNumber = 275, fieldName = "MDMkt", fieldType = FieldTypeExchange, fieldValues = []}
newtype MDMkt = MDMkt {unMDMkt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDMkt

instance IsField MDMkt where
  fieldTag Proxy = 275
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDMkt
  fieldFromValue = fromValue >=> (prettyValidate . MDMkt)

-- FieldSpec {fieldNumber = 276, fieldName = "QuoteCondition", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "OPEN"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "CLOSED"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EXCHANGE_BEST"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "CONSOLIDATED_BEST"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "LOCKED"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "CROSSED"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "DEPTH"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "FAST_TRADING"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "NON_FIRM"}]}
data QuoteCondition
  = QuoteCondition_OPEN
  | QuoteCondition_CLOSED
  | QuoteCondition_EXCHANGE_BEST
  | QuoteCondition_CONSOLIDATED_BEST
  | QuoteCondition_LOCKED
  | QuoteCondition_CROSSED
  | QuoteCondition_DEPTH
  | QuoteCondition_FAST_TRADING
  | QuoteCondition_NON_FIRM
  deriving stock (Show, Eq, Generic)

instance Validity QuoteCondition

instance IsField QuoteCondition where
  fieldTag Proxy = 276
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteCondition_OPEN -> "A"
    QuoteCondition_CLOSED -> "B"
    QuoteCondition_EXCHANGE_BEST -> "C"
    QuoteCondition_CONSOLIDATED_BEST -> "D"
    QuoteCondition_LOCKED -> "E"
    QuoteCondition_CROSSED -> "F"
    QuoteCondition_DEPTH -> "G"
    QuoteCondition_FAST_TRADING -> "H"
    QuoteCondition_NON_FIRM -> "I"
  fieldFromValue = \case
    "A" -> Right QuoteCondition_OPEN
    "B" -> Right QuoteCondition_CLOSED
    "C" -> Right QuoteCondition_EXCHANGE_BEST
    "D" -> Right QuoteCondition_CONSOLIDATED_BEST
    "E" -> Right QuoteCondition_LOCKED
    "F" -> Right QuoteCondition_CROSSED
    "G" -> Right QuoteCondition_DEPTH
    "H" -> Right QuoteCondition_FAST_TRADING
    "I" -> Right QuoteCondition_NON_FIRM
    v -> Left ("Unknown QuoteCondition: " <> show v)

-- FieldSpec {fieldNumber = 277, fieldName = "TradeCondition", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "CASH"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "AVERAGE_PRICE_TRADE"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CASH_TRADE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NEXT_DAY"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "OPENING"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "INTRADAY_TRADE_DETAIL"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "RULE127_TRADE"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "RULE155_TRADE"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "SOLD_LAST"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "NEXT_DAY_TRADE"},FieldValueSpec {fieldValueEnum = "K", fieldValueDescription = "OPENED"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "SELLER"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "SOLD"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "STOPPED_STOCK"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "IMBALANCE_MORE_BUYERS"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "IMBALANCE_MORE_SELLERS"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "OPENING_PRICE"}]}
data TradeCondition
  = TradeCondition_CASH
  | TradeCondition_AVERAGE_PRICE_TRADE
  | TradeCondition_CASH_TRADE
  | TradeCondition_NEXT_DAY
  | TradeCondition_OPENING
  | TradeCondition_INTRADAY_TRADE_DETAIL
  | TradeCondition_RULE127_TRADE
  | TradeCondition_RULE155_TRADE
  | TradeCondition_SOLD_LAST
  | TradeCondition_NEXT_DAY_TRADE
  | TradeCondition_OPENED
  | TradeCondition_SELLER
  | TradeCondition_SOLD
  | TradeCondition_STOPPED_STOCK
  | TradeCondition_IMBALANCE_MORE_BUYERS
  | TradeCondition_IMBALANCE_MORE_SELLERS
  | TradeCondition_OPENING_PRICE
  deriving stock (Show, Eq, Generic)

instance Validity TradeCondition

instance IsField TradeCondition where
  fieldTag Proxy = 277
  fieldIsData Proxy = False
  fieldToValue = \case
    TradeCondition_CASH -> "A"
    TradeCondition_AVERAGE_PRICE_TRADE -> "B"
    TradeCondition_CASH_TRADE -> "C"
    TradeCondition_NEXT_DAY -> "D"
    TradeCondition_OPENING -> "E"
    TradeCondition_INTRADAY_TRADE_DETAIL -> "F"
    TradeCondition_RULE127_TRADE -> "G"
    TradeCondition_RULE155_TRADE -> "H"
    TradeCondition_SOLD_LAST -> "I"
    TradeCondition_NEXT_DAY_TRADE -> "J"
    TradeCondition_OPENED -> "K"
    TradeCondition_SELLER -> "L"
    TradeCondition_SOLD -> "M"
    TradeCondition_STOPPED_STOCK -> "N"
    TradeCondition_IMBALANCE_MORE_BUYERS -> "P"
    TradeCondition_IMBALANCE_MORE_SELLERS -> "Q"
    TradeCondition_OPENING_PRICE -> "R"
  fieldFromValue = \case
    "A" -> Right TradeCondition_CASH
    "B" -> Right TradeCondition_AVERAGE_PRICE_TRADE
    "C" -> Right TradeCondition_CASH_TRADE
    "D" -> Right TradeCondition_NEXT_DAY
    "E" -> Right TradeCondition_OPENING
    "F" -> Right TradeCondition_INTRADAY_TRADE_DETAIL
    "G" -> Right TradeCondition_RULE127_TRADE
    "H" -> Right TradeCondition_RULE155_TRADE
    "I" -> Right TradeCondition_SOLD_LAST
    "J" -> Right TradeCondition_NEXT_DAY_TRADE
    "K" -> Right TradeCondition_OPENED
    "L" -> Right TradeCondition_SELLER
    "M" -> Right TradeCondition_SOLD
    "N" -> Right TradeCondition_STOPPED_STOCK
    "P" -> Right TradeCondition_IMBALANCE_MORE_BUYERS
    "Q" -> Right TradeCondition_IMBALANCE_MORE_SELLERS
    "R" -> Right TradeCondition_OPENING_PRICE
    v -> Left ("Unknown TradeCondition: " <> show v)

-- FieldSpec {fieldNumber = 278, fieldName = "MDEntryID", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntryID = MDEntryID {unMDEntryID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryID

instance IsField MDEntryID where
  fieldTag Proxy = 278
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryID
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryID)

-- FieldSpec {fieldNumber = 279, fieldName = "MDUpdateAction", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CHANGE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DELETE"}]}
data MDUpdateAction
  = MDUpdateAction_NEW
  | MDUpdateAction_CHANGE
  | MDUpdateAction_DELETE
  deriving stock (Show, Eq, Generic)

instance Validity MDUpdateAction

instance IsField MDUpdateAction where
  fieldTag Proxy = 279
  fieldIsData Proxy = False
  fieldToValue = \case
    MDUpdateAction_NEW -> "0"
    MDUpdateAction_CHANGE -> "1"
    MDUpdateAction_DELETE -> "2"
  fieldFromValue = \case
    "0" -> Right MDUpdateAction_NEW
    "1" -> Right MDUpdateAction_CHANGE
    "2" -> Right MDUpdateAction_DELETE
    v -> Left ("Unknown MDUpdateAction: " <> show v)

-- FieldSpec {fieldNumber = 280, fieldName = "MDEntryRefID", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntryRefID = MDEntryRefID {unMDEntryRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryRefID

instance IsField MDEntryRefID where
  fieldTag Proxy = 280
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryRefID
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryRefID)

-- FieldSpec {fieldNumber = 281, fieldName = "MDReqRejReason", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DUPLICATE_MD_REQ_ID"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INSUFFICIENT_BANDWIDTH"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INSUFFICIENT_PERMISSIONS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "UNSUPPORTED_MARKET_DEPTH"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "UNSUPPORTED_MD_UPDATE_TYPE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "UNSUPPORTED_AGGREGATED_BOOK"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "UNSUPPORTED_MD_ENTRY_TYPE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "UNSUPPORTED_TRADING_SESSION_ID"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "UNSUPPORTED_SCOPE"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "UNSUPPORTED_MD_IMPLICIT_DELETE"}]}
data MDReqRejReason
  = MDReqRejReason_UNKNOWN_SYMBOL
  | MDReqRejReason_DUPLICATE_MD_REQ_ID
  | MDReqRejReason_INSUFFICIENT_BANDWIDTH
  | MDReqRejReason_INSUFFICIENT_PERMISSIONS
  | MDReqRejReason_UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE
  | MDReqRejReason_UNSUPPORTED_MARKET_DEPTH
  | MDReqRejReason_UNSUPPORTED_MD_UPDATE_TYPE
  | MDReqRejReason_UNSUPPORTED_AGGREGATED_BOOK
  | MDReqRejReason_UNSUPPORTED_MD_ENTRY_TYPE
  | MDReqRejReason_UNSUPPORTED_TRADING_SESSION_ID
  | MDReqRejReason_UNSUPPORTED_SCOPE
  | MDReqRejReason_UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG
  | MDReqRejReason_UNSUPPORTED_MD_IMPLICIT_DELETE
  deriving stock (Show, Eq, Generic)

instance Validity MDReqRejReason

instance IsField MDReqRejReason where
  fieldTag Proxy = 281
  fieldIsData Proxy = False
  fieldToValue = \case
    MDReqRejReason_UNKNOWN_SYMBOL -> "0"
    MDReqRejReason_DUPLICATE_MD_REQ_ID -> "1"
    MDReqRejReason_INSUFFICIENT_BANDWIDTH -> "2"
    MDReqRejReason_INSUFFICIENT_PERMISSIONS -> "3"
    MDReqRejReason_UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE -> "4"
    MDReqRejReason_UNSUPPORTED_MARKET_DEPTH -> "5"
    MDReqRejReason_UNSUPPORTED_MD_UPDATE_TYPE -> "6"
    MDReqRejReason_UNSUPPORTED_AGGREGATED_BOOK -> "7"
    MDReqRejReason_UNSUPPORTED_MD_ENTRY_TYPE -> "8"
    MDReqRejReason_UNSUPPORTED_TRADING_SESSION_ID -> "9"
    MDReqRejReason_UNSUPPORTED_SCOPE -> "A"
    MDReqRejReason_UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG -> "B"
    MDReqRejReason_UNSUPPORTED_MD_IMPLICIT_DELETE -> "C"
  fieldFromValue = \case
    "0" -> Right MDReqRejReason_UNKNOWN_SYMBOL
    "1" -> Right MDReqRejReason_DUPLICATE_MD_REQ_ID
    "2" -> Right MDReqRejReason_INSUFFICIENT_BANDWIDTH
    "3" -> Right MDReqRejReason_INSUFFICIENT_PERMISSIONS
    "4" -> Right MDReqRejReason_UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE
    "5" -> Right MDReqRejReason_UNSUPPORTED_MARKET_DEPTH
    "6" -> Right MDReqRejReason_UNSUPPORTED_MD_UPDATE_TYPE
    "7" -> Right MDReqRejReason_UNSUPPORTED_AGGREGATED_BOOK
    "8" -> Right MDReqRejReason_UNSUPPORTED_MD_ENTRY_TYPE
    "9" -> Right MDReqRejReason_UNSUPPORTED_TRADING_SESSION_ID
    "A" -> Right MDReqRejReason_UNSUPPORTED_SCOPE
    "B" -> Right MDReqRejReason_UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG
    "C" -> Right MDReqRejReason_UNSUPPORTED_MD_IMPLICIT_DELETE
    v -> Left ("Unknown MDReqRejReason: " <> show v)

-- FieldSpec {fieldNumber = 282, fieldName = "MDEntryOriginator", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntryOriginator = MDEntryOriginator {unMDEntryOriginator :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryOriginator

instance IsField MDEntryOriginator where
  fieldTag Proxy = 282
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryOriginator
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryOriginator)

-- FieldSpec {fieldNumber = 283, fieldName = "LocationID", fieldType = FieldTypeString, fieldValues = []}
newtype LocationID = LocationID {unLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LocationID

instance IsField LocationID where
  fieldTag Proxy = 283
  fieldIsData Proxy = False
  fieldToValue = toValue . unLocationID
  fieldFromValue = fromValue >=> (prettyValidate . LocationID)

-- FieldSpec {fieldNumber = 284, fieldName = "DeskID", fieldType = FieldTypeString, fieldValues = []}
newtype DeskID = DeskID {unDeskID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeskID

instance IsField DeskID where
  fieldTag Proxy = 284
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeskID
  fieldFromValue = fromValue >=> (prettyValidate . DeskID)

-- FieldSpec {fieldNumber = 285, fieldName = "DeleteReason", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "CANCELLATION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ERROR"}]}
data DeleteReason
  = DeleteReason_CANCELLATION
  | DeleteReason_ERROR
  deriving stock (Show, Eq, Generic)

instance Validity DeleteReason

instance IsField DeleteReason where
  fieldTag Proxy = 285
  fieldIsData Proxy = False
  fieldToValue = \case
    DeleteReason_CANCELLATION -> "0"
    DeleteReason_ERROR -> "1"
  fieldFromValue = \case
    "0" -> Right DeleteReason_CANCELLATION
    "1" -> Right DeleteReason_ERROR
    v -> Left ("Unknown DeleteReason: " <> show v)

-- FieldSpec {fieldNumber = 286, fieldName = "OpenCloseSettlFlag", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "DAILY_OPEN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SESSION_OPEN"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DELIVERY_SETTLEMENT_ENTRY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EXPECTED_ENTRY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ENTRY_FROM_PREVIOUS_BUSINESS_DAY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "THEORETICAL_PRICE_VALUE"}]}
data OpenCloseSettlFlag
  = OpenCloseSettlFlag_DAILY_OPEN
  | OpenCloseSettlFlag_SESSION_OPEN
  | OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY
  | OpenCloseSettlFlag_EXPECTED_ENTRY
  | OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY
  | OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE
  deriving stock (Show, Eq, Generic)

instance Validity OpenCloseSettlFlag

instance IsField OpenCloseSettlFlag where
  fieldTag Proxy = 286
  fieldIsData Proxy = False
  fieldToValue = \case
    OpenCloseSettlFlag_DAILY_OPEN -> "0"
    OpenCloseSettlFlag_SESSION_OPEN -> "1"
    OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY -> "2"
    OpenCloseSettlFlag_EXPECTED_ENTRY -> "3"
    OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY -> "4"
    OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE -> "5"
  fieldFromValue = \case
    "0" -> Right OpenCloseSettlFlag_DAILY_OPEN
    "1" -> Right OpenCloseSettlFlag_SESSION_OPEN
    "2" -> Right OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY
    "3" -> Right OpenCloseSettlFlag_EXPECTED_ENTRY
    "4" -> Right OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY
    "5" -> Right OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE
    v -> Left ("Unknown OpenCloseSettlFlag: " <> show v)

-- FieldSpec {fieldNumber = 287, fieldName = "SellerDays", fieldType = FieldTypeInt, fieldValues = []}
newtype SellerDays = SellerDays {unSellerDays :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SellerDays

instance IsField SellerDays where
  fieldTag Proxy = 287
  fieldIsData Proxy = False
  fieldToValue = toValue . unSellerDays
  fieldFromValue = fromValue >=> (prettyValidate . SellerDays)

-- FieldSpec {fieldNumber = 288, fieldName = "MDEntryBuyer", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntryBuyer = MDEntryBuyer {unMDEntryBuyer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryBuyer

instance IsField MDEntryBuyer where
  fieldTag Proxy = 288
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryBuyer
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryBuyer)

-- FieldSpec {fieldNumber = 289, fieldName = "MDEntrySeller", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntrySeller = MDEntrySeller {unMDEntrySeller :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntrySeller

instance IsField MDEntrySeller where
  fieldTag Proxy = 289
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntrySeller
  fieldFromValue = fromValue >=> (prettyValidate . MDEntrySeller)

-- FieldSpec {fieldNumber = 290, fieldName = "MDEntryPositionNo", fieldType = FieldTypeInt, fieldValues = []}
newtype MDEntryPositionNo = MDEntryPositionNo {unMDEntryPositionNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryPositionNo

instance IsField MDEntryPositionNo where
  fieldTag Proxy = 290
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryPositionNo
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryPositionNo)

-- FieldSpec {fieldNumber = 291, fieldName = "FinancialStatus", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BANKRUPT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PENDING_DELISTING"}]}
data FinancialStatus
  = FinancialStatus_BANKRUPT
  | FinancialStatus_PENDING_DELISTING
  deriving stock (Show, Eq, Generic)

instance Validity FinancialStatus

instance IsField FinancialStatus where
  fieldTag Proxy = 291
  fieldIsData Proxy = False
  fieldToValue = \case
    FinancialStatus_BANKRUPT -> "1"
    FinancialStatus_PENDING_DELISTING -> "2"
  fieldFromValue = \case
    "1" -> Right FinancialStatus_BANKRUPT
    "2" -> Right FinancialStatus_PENDING_DELISTING
    v -> Left ("Unknown FinancialStatus: " <> show v)

-- FieldSpec {fieldNumber = 292, fieldName = "CorporateAction", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "EX_DIVIDEND"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "EX_DISTRIBUTION"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EX_RIGHTS"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "EX_INTEREST"}]}
data CorporateAction
  = CorporateAction_EX_DIVIDEND
  | CorporateAction_EX_DISTRIBUTION
  | CorporateAction_EX_RIGHTS
  | CorporateAction_NEW
  | CorporateAction_EX_INTEREST
  deriving stock (Show, Eq, Generic)

instance Validity CorporateAction

instance IsField CorporateAction where
  fieldTag Proxy = 292
  fieldIsData Proxy = False
  fieldToValue = \case
    CorporateAction_EX_DIVIDEND -> "A"
    CorporateAction_EX_DISTRIBUTION -> "B"
    CorporateAction_EX_RIGHTS -> "C"
    CorporateAction_NEW -> "D"
    CorporateAction_EX_INTEREST -> "E"
  fieldFromValue = \case
    "A" -> Right CorporateAction_EX_DIVIDEND
    "B" -> Right CorporateAction_EX_DISTRIBUTION
    "C" -> Right CorporateAction_EX_RIGHTS
    "D" -> Right CorporateAction_NEW
    "E" -> Right CorporateAction_EX_INTEREST
    v -> Left ("Unknown CorporateAction: " <> show v)

-- FieldSpec {fieldNumber = 293, fieldName = "DefBidSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype DefBidSize = DefBidSize {unDefBidSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DefBidSize

instance IsField DefBidSize where
  fieldTag Proxy = 293
  fieldIsData Proxy = False
  fieldToValue = toValue . unDefBidSize
  fieldFromValue = fromValue >=> (prettyValidate . DefBidSize)

-- FieldSpec {fieldNumber = 294, fieldName = "DefOfferSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype DefOfferSize = DefOfferSize {unDefOfferSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DefOfferSize

instance IsField DefOfferSize where
  fieldTag Proxy = 294
  fieldIsData Proxy = False
  fieldToValue = toValue . unDefOfferSize
  fieldFromValue = fromValue >=> (prettyValidate . DefOfferSize)

-- FieldSpec {fieldNumber = 295, fieldName = "NoQuoteEntries", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoQuoteEntries = NoQuoteEntries {unNoQuoteEntries :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoQuoteEntries

instance IsField NoQuoteEntries where
  fieldTag Proxy = 295
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoQuoteEntries
  fieldFromValue = fromValue >=> (prettyValidate . NoQuoteEntries)

-- FieldSpec {fieldNumber = 296, fieldName = "NoQuoteSets", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoQuoteSets = NoQuoteSets {unNoQuoteSets :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoQuoteSets

instance IsField NoQuoteSets where
  fieldTag Proxy = 296
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoQuoteSets
  fieldFromValue = fromValue >=> (prettyValidate . NoQuoteSets)

-- FieldSpec {fieldNumber = 297, fieldName = "QuoteStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL_FOR_SYMBOL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCELED_FOR_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCELED_FOR_UNDERLYING"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCELED_ALL"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "REMOVED_FROM_MARKET"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "EXPIRED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "QUERY"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "QUOTE_NOT_FOUND"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "PENDING"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "PASS"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "LOCKED_MARKET_WARNING"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "CROSS_MARKET_WARNING"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "CANCELED_DUE_TO_LOCK_MARKET"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "CANCELED_DUE_TO_CROSS_MARKET"}]}
data QuoteStatus
  = QuoteStatus_ACCEPTED
  | QuoteStatus_CANCEL_FOR_SYMBOL
  | QuoteStatus_CANCELED_FOR_SECURITY_TYPE
  | QuoteStatus_CANCELED_FOR_UNDERLYING
  | QuoteStatus_CANCELED_ALL
  | QuoteStatus_REJECTED
  | QuoteStatus_REMOVED_FROM_MARKET
  | QuoteStatus_EXPIRED
  | QuoteStatus_QUERY
  | QuoteStatus_QUOTE_NOT_FOUND
  | QuoteStatus_PENDING
  | QuoteStatus_PASS
  | QuoteStatus_LOCKED_MARKET_WARNING
  | QuoteStatus_CROSS_MARKET_WARNING
  | QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET
  | QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET
  deriving stock (Show, Eq, Generic)

instance Validity QuoteStatus

instance IsField QuoteStatus where
  fieldTag Proxy = 297
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteStatus_ACCEPTED -> "0"
    QuoteStatus_CANCEL_FOR_SYMBOL -> "1"
    QuoteStatus_CANCELED_FOR_SECURITY_TYPE -> "2"
    QuoteStatus_CANCELED_FOR_UNDERLYING -> "3"
    QuoteStatus_CANCELED_ALL -> "4"
    QuoteStatus_REJECTED -> "5"
    QuoteStatus_REMOVED_FROM_MARKET -> "6"
    QuoteStatus_EXPIRED -> "7"
    QuoteStatus_QUERY -> "8"
    QuoteStatus_QUOTE_NOT_FOUND -> "9"
    QuoteStatus_PENDING -> "10"
    QuoteStatus_PASS -> "11"
    QuoteStatus_LOCKED_MARKET_WARNING -> "12"
    QuoteStatus_CROSS_MARKET_WARNING -> "13"
    QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET -> "14"
    QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET -> "15"
  fieldFromValue = \case
    "0" -> Right QuoteStatus_ACCEPTED
    "1" -> Right QuoteStatus_CANCEL_FOR_SYMBOL
    "2" -> Right QuoteStatus_CANCELED_FOR_SECURITY_TYPE
    "3" -> Right QuoteStatus_CANCELED_FOR_UNDERLYING
    "4" -> Right QuoteStatus_CANCELED_ALL
    "5" -> Right QuoteStatus_REJECTED
    "6" -> Right QuoteStatus_REMOVED_FROM_MARKET
    "7" -> Right QuoteStatus_EXPIRED
    "8" -> Right QuoteStatus_QUERY
    "9" -> Right QuoteStatus_QUOTE_NOT_FOUND
    "10" -> Right QuoteStatus_PENDING
    "11" -> Right QuoteStatus_PASS
    "12" -> Right QuoteStatus_LOCKED_MARKET_WARNING
    "13" -> Right QuoteStatus_CROSS_MARKET_WARNING
    "14" -> Right QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET
    "15" -> Right QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET
    v -> Left ("Unknown QuoteStatus: " <> show v)

-- FieldSpec {fieldNumber = 298, fieldName = "QuoteCancelType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL_FOR_ONE_OR_MORE_SECURITIES"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL_FOR_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCEL_FOR_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCEL_ALL_QUOTES"}]}
data QuoteCancelType
  = QuoteCancelType_CANCEL_FOR_ONE_OR_MORE_SECURITIES
  | QuoteCancelType_CANCEL_FOR_SECURITY_TYPE
  | QuoteCancelType_CANCEL_FOR_UNDERLYING_SECURITY
  | QuoteCancelType_CANCEL_ALL_QUOTES
  deriving stock (Show, Eq, Generic)

instance Validity QuoteCancelType

instance IsField QuoteCancelType where
  fieldTag Proxy = 298
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteCancelType_CANCEL_FOR_ONE_OR_MORE_SECURITIES -> "1"
    QuoteCancelType_CANCEL_FOR_SECURITY_TYPE -> "2"
    QuoteCancelType_CANCEL_FOR_UNDERLYING_SECURITY -> "3"
    QuoteCancelType_CANCEL_ALL_QUOTES -> "4"
  fieldFromValue = \case
    "1" -> Right QuoteCancelType_CANCEL_FOR_ONE_OR_MORE_SECURITIES
    "2" -> Right QuoteCancelType_CANCEL_FOR_SECURITY_TYPE
    "3" -> Right QuoteCancelType_CANCEL_FOR_UNDERLYING_SECURITY
    "4" -> Right QuoteCancelType_CANCEL_ALL_QUOTES
    v -> Left ("Unknown QuoteCancelType: " <> show v)

-- FieldSpec {fieldNumber = 299, fieldName = "QuoteEntryID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteEntryID = QuoteEntryID {unQuoteEntryID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteEntryID

instance IsField QuoteEntryID where
  fieldTag Proxy = 299
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteEntryID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteEntryID)

-- FieldSpec {fieldNumber = 300, fieldName = "QuoteRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXCHANGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "QUOTE_REQUEST_EXCEEDS_LIMIT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "TOO_LATE_TO_ENTER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "UNKNOWN_QUOTE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "DUPLICATE_QUOTE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "INVALID_BID"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "INVALID_PRICE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "NOT_AUTHORIZED_TO_QUOTE_SECURITY"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data QuoteRejectReason
  = QuoteRejectReason_UNKNOWN_SYMBOL
  | QuoteRejectReason_EXCHANGE
  | QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
  | QuoteRejectReason_TOO_LATE_TO_ENTER
  | QuoteRejectReason_UNKNOWN_QUOTE
  | QuoteRejectReason_DUPLICATE_QUOTE
  | QuoteRejectReason_INVALID_BID
  | QuoteRejectReason_INVALID_PRICE
  | QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
  | QuoteRejectReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRejectReason

instance IsField QuoteRejectReason where
  fieldTag Proxy = 300
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteRejectReason_UNKNOWN_SYMBOL -> "1"
    QuoteRejectReason_EXCHANGE -> "2"
    QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT -> "3"
    QuoteRejectReason_TOO_LATE_TO_ENTER -> "4"
    QuoteRejectReason_UNKNOWN_QUOTE -> "5"
    QuoteRejectReason_DUPLICATE_QUOTE -> "6"
    QuoteRejectReason_INVALID_BID -> "7"
    QuoteRejectReason_INVALID_PRICE -> "8"
    QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY -> "9"
    QuoteRejectReason_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right QuoteRejectReason_UNKNOWN_SYMBOL
    "2" -> Right QuoteRejectReason_EXCHANGE
    "3" -> Right QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
    "4" -> Right QuoteRejectReason_TOO_LATE_TO_ENTER
    "5" -> Right QuoteRejectReason_UNKNOWN_QUOTE
    "6" -> Right QuoteRejectReason_DUPLICATE_QUOTE
    "7" -> Right QuoteRejectReason_INVALID_BID
    "8" -> Right QuoteRejectReason_INVALID_PRICE
    "9" -> Right QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
    "99" -> Right QuoteRejectReason_OTHER
    v -> Left ("Unknown QuoteRejectReason: " <> show v)

-- FieldSpec {fieldNumber = 301, fieldName = "QuoteResponseLevel", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NO_ACKNOWLEDGEMENT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACKNOWLEDGE_EACH_QUOTE_MESSAGE"}]}
data QuoteResponseLevel
  = QuoteResponseLevel_NO_ACKNOWLEDGEMENT
  | QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES
  | QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGE
  deriving stock (Show, Eq, Generic)

instance Validity QuoteResponseLevel

instance IsField QuoteResponseLevel where
  fieldTag Proxy = 301
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteResponseLevel_NO_ACKNOWLEDGEMENT -> "0"
    QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES -> "1"
    QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGE -> "2"
  fieldFromValue = \case
    "0" -> Right QuoteResponseLevel_NO_ACKNOWLEDGEMENT
    "1" -> Right QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES
    "2" -> Right QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGE
    v -> Left ("Unknown QuoteResponseLevel: " <> show v)

-- FieldSpec {fieldNumber = 302, fieldName = "QuoteSetID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteSetID = QuoteSetID {unQuoteSetID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteSetID

instance IsField QuoteSetID where
  fieldTag Proxy = 302
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteSetID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteSetID)

-- FieldSpec {fieldNumber = 303, fieldName = "QuoteRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MANUAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "AUTOMATIC"}]}
data QuoteRequestType
  = QuoteRequestType_MANUAL
  | QuoteRequestType_AUTOMATIC
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestType

instance IsField QuoteRequestType where
  fieldTag Proxy = 303
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteRequestType_MANUAL -> "1"
    QuoteRequestType_AUTOMATIC -> "2"
  fieldFromValue = \case
    "1" -> Right QuoteRequestType_MANUAL
    "2" -> Right QuoteRequestType_AUTOMATIC
    v -> Left ("Unknown QuoteRequestType: " <> show v)

-- FieldSpec {fieldNumber = 304, fieldName = "TotNoQuoteEntries", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoQuoteEntries = TotNoQuoteEntries {unTotNoQuoteEntries :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoQuoteEntries

instance IsField TotNoQuoteEntries where
  fieldTag Proxy = 304
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoQuoteEntries
  fieldFromValue = fromValue >=> (prettyValidate . TotNoQuoteEntries)

-- FieldSpec {fieldNumber = 305, fieldName = "UnderlyingSecurityIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityIDSource = UnderlyingSecurityIDSource {unUnderlyingSecurityIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityIDSource

instance IsField UnderlyingSecurityIDSource where
  fieldTag Proxy = 305
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityIDSource
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityIDSource)

-- FieldSpec {fieldNumber = 306, fieldName = "UnderlyingIssuer", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingIssuer = UnderlyingIssuer {unUnderlyingIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingIssuer

instance IsField UnderlyingIssuer where
  fieldTag Proxy = 306
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingIssuer
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingIssuer)

-- FieldSpec {fieldNumber = 307, fieldName = "UnderlyingSecurityDesc", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityDesc = UnderlyingSecurityDesc {unUnderlyingSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityDesc

instance IsField UnderlyingSecurityDesc where
  fieldTag Proxy = 307
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityDesc)

-- FieldSpec {fieldNumber = 308, fieldName = "UnderlyingSecurityExchange", fieldType = FieldTypeExchange, fieldValues = []}
newtype UnderlyingSecurityExchange = UnderlyingSecurityExchange {unUnderlyingSecurityExchange :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityExchange

instance IsField UnderlyingSecurityExchange where
  fieldTag Proxy = 308
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityExchange
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityExchange)

-- FieldSpec {fieldNumber = 309, fieldName = "UnderlyingSecurityID", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityID = UnderlyingSecurityID {unUnderlyingSecurityID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityID

instance IsField UnderlyingSecurityID where
  fieldTag Proxy = 309
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityID
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityID)

-- FieldSpec {fieldNumber = 310, fieldName = "UnderlyingSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityType = UnderlyingSecurityType {unUnderlyingSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityType

instance IsField UnderlyingSecurityType where
  fieldTag Proxy = 310
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityType)

-- FieldSpec {fieldNumber = 311, fieldName = "UnderlyingSymbol", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSymbol = UnderlyingSymbol {unUnderlyingSymbol :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSymbol

instance IsField UnderlyingSymbol where
  fieldTag Proxy = 311
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSymbol
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSymbol)

-- FieldSpec {fieldNumber = 312, fieldName = "UnderlyingSymbolSfx", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSymbolSfx = UnderlyingSymbolSfx {unUnderlyingSymbolSfx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSymbolSfx

instance IsField UnderlyingSymbolSfx where
  fieldTag Proxy = 312
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSymbolSfx
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSymbolSfx)

-- FieldSpec {fieldNumber = 313, fieldName = "UnderlyingMaturityMonthYear", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype UnderlyingMaturityMonthYear = UnderlyingMaturityMonthYear {unUnderlyingMaturityMonthYear :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingMaturityMonthYear

instance IsField UnderlyingMaturityMonthYear where
  fieldTag Proxy = 313
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingMaturityMonthYear
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingMaturityMonthYear)

-- FieldSpec {fieldNumber = 315, fieldName = "UnderlyingPutOrCall", fieldType = FieldTypeInt, fieldValues = []}
newtype UnderlyingPutOrCall = UnderlyingPutOrCall {unUnderlyingPutOrCall :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingPutOrCall

instance IsField UnderlyingPutOrCall where
  fieldTag Proxy = 315
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingPutOrCall
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingPutOrCall)

-- FieldSpec {fieldNumber = 316, fieldName = "UnderlyingStrikePrice", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingStrikePrice = UnderlyingStrikePrice {unUnderlyingStrikePrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStrikePrice

instance IsField UnderlyingStrikePrice where
  fieldTag Proxy = 316
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStrikePrice
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStrikePrice)

-- FieldSpec {fieldNumber = 317, fieldName = "UnderlyingOptAttribute", fieldType = FieldTypeChar, fieldValues = []}
newtype UnderlyingOptAttribute = UnderlyingOptAttribute {unUnderlyingOptAttribute :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingOptAttribute

instance IsField UnderlyingOptAttribute where
  fieldTag Proxy = 317
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingOptAttribute
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingOptAttribute)

-- FieldSpec {fieldNumber = 318, fieldName = "UnderlyingCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype UnderlyingCurrency = UnderlyingCurrency {unUnderlyingCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCurrency

instance IsField UnderlyingCurrency where
  fieldTag Proxy = 318
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCurrency
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCurrency)

-- FieldSpec {fieldNumber = 320, fieldName = "SecurityReqID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityReqID = SecurityReqID {unSecurityReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityReqID

instance IsField SecurityReqID where
  fieldTag Proxy = 320
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityReqID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityReqID)

-- FieldSpec {fieldNumber = 321, fieldName = "SecurityRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REQUEST_SECURITY_IDENTITY_FOR_SPECIFICATIONS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REQUEST_LIST_SECURITY_TYPES"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REQUEST_LIST_SECURITIES"}]}
data SecurityRequestType
  = SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS
  | SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_SPECIFICATIONS
  | SecurityRequestType_REQUEST_LIST_SECURITY_TYPES
  | SecurityRequestType_REQUEST_LIST_SECURITIES
  deriving stock (Show, Eq, Generic)

instance Validity SecurityRequestType

instance IsField SecurityRequestType where
  fieldTag Proxy = 321
  fieldIsData Proxy = False
  fieldToValue = \case
    SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS -> "0"
    SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_SPECIFICATIONS -> "1"
    SecurityRequestType_REQUEST_LIST_SECURITY_TYPES -> "2"
    SecurityRequestType_REQUEST_LIST_SECURITIES -> "3"
  fieldFromValue = \case
    "0" -> Right SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS
    "1" -> Right SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_SPECIFICATIONS
    "2" -> Right SecurityRequestType_REQUEST_LIST_SECURITY_TYPES
    "3" -> Right SecurityRequestType_REQUEST_LIST_SECURITIES
    v -> Left ("Unknown SecurityRequestType: " <> show v)

-- FieldSpec {fieldNumber = 322, fieldName = "SecurityResponseID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityResponseID = SecurityResponseID {unSecurityResponseID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityResponseID

instance IsField SecurityResponseID where
  fieldTag Proxy = 322
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityResponseID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityResponseID)

-- FieldSpec {fieldNumber = 323, fieldName = "SecurityResponseType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPT_AS_IS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCEPT_WITH_REVISIONS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REJECT_SECURITY_PROPOSAL"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CANNOT_MATCH_SELECTION_CRITERIA"}]}
data SecurityResponseType
  = SecurityResponseType_ACCEPT_AS_IS
  | SecurityResponseType_ACCEPT_WITH_REVISIONS
  | SecurityResponseType_REJECT_SECURITY_PROPOSAL
  | SecurityResponseType_CANNOT_MATCH_SELECTION_CRITERIA
  deriving stock (Show, Eq, Generic)

instance Validity SecurityResponseType

instance IsField SecurityResponseType where
  fieldTag Proxy = 323
  fieldIsData Proxy = False
  fieldToValue = \case
    SecurityResponseType_ACCEPT_AS_IS -> "1"
    SecurityResponseType_ACCEPT_WITH_REVISIONS -> "2"
    SecurityResponseType_REJECT_SECURITY_PROPOSAL -> "5"
    SecurityResponseType_CANNOT_MATCH_SELECTION_CRITERIA -> "6"
  fieldFromValue = \case
    "1" -> Right SecurityResponseType_ACCEPT_AS_IS
    "2" -> Right SecurityResponseType_ACCEPT_WITH_REVISIONS
    "5" -> Right SecurityResponseType_REJECT_SECURITY_PROPOSAL
    "6" -> Right SecurityResponseType_CANNOT_MATCH_SELECTION_CRITERIA
    v -> Left ("Unknown SecurityResponseType: " <> show v)

-- FieldSpec {fieldNumber = 324, fieldName = "SecurityStatusReqID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityStatusReqID = SecurityStatusReqID {unSecurityStatusReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityStatusReqID

instance IsField SecurityStatusReqID where
  fieldTag Proxy = 324
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityStatusReqID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityStatusReqID)

-- FieldSpec {fieldNumber = 325, fieldName = "UnsolicitedIndicator", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data UnsolicitedIndicator
  = UnsolicitedIndicator_YES
  | UnsolicitedIndicator_NO
  deriving stock (Show, Eq, Generic)

instance Validity UnsolicitedIndicator

instance IsField UnsolicitedIndicator where
  fieldTag Proxy = 325
  fieldIsData Proxy = False
  fieldToValue = \case
    UnsolicitedIndicator_YES -> "Y"
    UnsolicitedIndicator_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right UnsolicitedIndicator_YES
    "N" -> Right UnsolicitedIndicator_NO
    v -> Left ("Unknown UnsolicitedIndicator: " <> show v)

-- FieldSpec {fieldNumber = 326, fieldName = "SecurityTradingStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "OPENING_DELAY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TRADING_HALT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "RESUME"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NO_OPEN"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PRICE_INDICATION"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "TRADING_RANGE_INDICATION"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "MARKET_IMBALANCE_BUY"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "MARKET_IMBALANCE_SELL"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "MARKET_ON_CLOSE_IMBALANCE_BUY"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "MARKET_ON_CLOSE_IMBALANCE_SELL"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "NO_MARKET_IMBALANCE"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "NO_MARKET_ON_CLOSE_IMBALANCE"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "ITS_PRE_OPENING"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "NEW_PRICE_INDICATION"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "TRADE_DISSEMINATION_TIME"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "READY_TO_TRADE"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "NOT_AVAILABLE_FOR_TRADING"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "NOT_TRADED_ON_THIS_MARKET"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "UNKNOWN_OR_INVALID"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "PRE_OPEN"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "OPENING_ROTATION"},FieldValueSpec {fieldValueEnum = "23", fieldValueDescription = "FAST_MARKET"}]}
data SecurityTradingStatus
  = SecurityTradingStatus_OPENING_DELAY
  | SecurityTradingStatus_TRADING_HALT
  | SecurityTradingStatus_RESUME
  | SecurityTradingStatus_NO_OPEN
  | SecurityTradingStatus_PRICE_INDICATION
  | SecurityTradingStatus_TRADING_RANGE_INDICATION
  | SecurityTradingStatus_MARKET_IMBALANCE_BUY
  | SecurityTradingStatus_MARKET_IMBALANCE_SELL
  | SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY
  | SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL
  | SecurityTradingStatus_NO_MARKET_IMBALANCE
  | SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE
  | SecurityTradingStatus_ITS_PRE_OPENING
  | SecurityTradingStatus_NEW_PRICE_INDICATION
  | SecurityTradingStatus_TRADE_DISSEMINATION_TIME
  | SecurityTradingStatus_READY_TO_TRADE
  | SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING
  | SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET
  | SecurityTradingStatus_UNKNOWN_OR_INVALID
  | SecurityTradingStatus_PRE_OPEN
  | SecurityTradingStatus_OPENING_ROTATION
  | SecurityTradingStatus_FAST_MARKET
  deriving stock (Show, Eq, Generic)

instance Validity SecurityTradingStatus

instance IsField SecurityTradingStatus where
  fieldTag Proxy = 326
  fieldIsData Proxy = False
  fieldToValue = \case
    SecurityTradingStatus_OPENING_DELAY -> "1"
    SecurityTradingStatus_TRADING_HALT -> "2"
    SecurityTradingStatus_RESUME -> "3"
    SecurityTradingStatus_NO_OPEN -> "4"
    SecurityTradingStatus_PRICE_INDICATION -> "5"
    SecurityTradingStatus_TRADING_RANGE_INDICATION -> "6"
    SecurityTradingStatus_MARKET_IMBALANCE_BUY -> "7"
    SecurityTradingStatus_MARKET_IMBALANCE_SELL -> "8"
    SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY -> "9"
    SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL -> "10"
    SecurityTradingStatus_NO_MARKET_IMBALANCE -> "12"
    SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE -> "13"
    SecurityTradingStatus_ITS_PRE_OPENING -> "14"
    SecurityTradingStatus_NEW_PRICE_INDICATION -> "15"
    SecurityTradingStatus_TRADE_DISSEMINATION_TIME -> "16"
    SecurityTradingStatus_READY_TO_TRADE -> "17"
    SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING -> "18"
    SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET -> "19"
    SecurityTradingStatus_UNKNOWN_OR_INVALID -> "20"
    SecurityTradingStatus_PRE_OPEN -> "21"
    SecurityTradingStatus_OPENING_ROTATION -> "22"
    SecurityTradingStatus_FAST_MARKET -> "23"
  fieldFromValue = \case
    "1" -> Right SecurityTradingStatus_OPENING_DELAY
    "2" -> Right SecurityTradingStatus_TRADING_HALT
    "3" -> Right SecurityTradingStatus_RESUME
    "4" -> Right SecurityTradingStatus_NO_OPEN
    "5" -> Right SecurityTradingStatus_PRICE_INDICATION
    "6" -> Right SecurityTradingStatus_TRADING_RANGE_INDICATION
    "7" -> Right SecurityTradingStatus_MARKET_IMBALANCE_BUY
    "8" -> Right SecurityTradingStatus_MARKET_IMBALANCE_SELL
    "9" -> Right SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY
    "10" -> Right SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL
    "12" -> Right SecurityTradingStatus_NO_MARKET_IMBALANCE
    "13" -> Right SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE
    "14" -> Right SecurityTradingStatus_ITS_PRE_OPENING
    "15" -> Right SecurityTradingStatus_NEW_PRICE_INDICATION
    "16" -> Right SecurityTradingStatus_TRADE_DISSEMINATION_TIME
    "17" -> Right SecurityTradingStatus_READY_TO_TRADE
    "18" -> Right SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING
    "19" -> Right SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET
    "20" -> Right SecurityTradingStatus_UNKNOWN_OR_INVALID
    "21" -> Right SecurityTradingStatus_PRE_OPEN
    "22" -> Right SecurityTradingStatus_OPENING_ROTATION
    "23" -> Right SecurityTradingStatus_FAST_MARKET
    v -> Left ("Unknown SecurityTradingStatus: " <> show v)

-- FieldSpec {fieldNumber = 327, fieldName = "HaltReasonChar", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "ORDER_IMBALANCE"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "EQUIPMENT_CHANGEOVER"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "NEWS_PENDING"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NEWS_DISSEMINATION"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "ORDER_INFLUX"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "ADDITIONAL_INFORMATION"}]}
data HaltReasonChar
  = HaltReasonChar_ORDER_IMBALANCE
  | HaltReasonChar_EQUIPMENT_CHANGEOVER
  | HaltReasonChar_NEWS_PENDING
  | HaltReasonChar_NEWS_DISSEMINATION
  | HaltReasonChar_ORDER_INFLUX
  | HaltReasonChar_ADDITIONAL_INFORMATION
  deriving stock (Show, Eq, Generic)

instance Validity HaltReasonChar

instance IsField HaltReasonChar where
  fieldTag Proxy = 327
  fieldIsData Proxy = False
  fieldToValue = \case
    HaltReasonChar_ORDER_IMBALANCE -> "I"
    HaltReasonChar_EQUIPMENT_CHANGEOVER -> "X"
    HaltReasonChar_NEWS_PENDING -> "P"
    HaltReasonChar_NEWS_DISSEMINATION -> "D"
    HaltReasonChar_ORDER_INFLUX -> "E"
    HaltReasonChar_ADDITIONAL_INFORMATION -> "M"
  fieldFromValue = \case
    "I" -> Right HaltReasonChar_ORDER_IMBALANCE
    "X" -> Right HaltReasonChar_EQUIPMENT_CHANGEOVER
    "P" -> Right HaltReasonChar_NEWS_PENDING
    "D" -> Right HaltReasonChar_NEWS_DISSEMINATION
    "E" -> Right HaltReasonChar_ORDER_INFLUX
    "M" -> Right HaltReasonChar_ADDITIONAL_INFORMATION
    v -> Left ("Unknown HaltReasonChar: " <> show v)

-- FieldSpec {fieldNumber = 328, fieldName = "InViewOfCommon", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data InViewOfCommon
  = InViewOfCommon_YES
  | InViewOfCommon_NO
  deriving stock (Show, Eq, Generic)

instance Validity InViewOfCommon

instance IsField InViewOfCommon where
  fieldTag Proxy = 328
  fieldIsData Proxy = False
  fieldToValue = \case
    InViewOfCommon_YES -> "Y"
    InViewOfCommon_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right InViewOfCommon_YES
    "N" -> Right InViewOfCommon_NO
    v -> Left ("Unknown InViewOfCommon: " <> show v)

-- FieldSpec {fieldNumber = 329, fieldName = "DueToRelated", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data DueToRelated
  = DueToRelated_YES
  | DueToRelated_NO
  deriving stock (Show, Eq, Generic)

instance Validity DueToRelated

instance IsField DueToRelated where
  fieldTag Proxy = 329
  fieldIsData Proxy = False
  fieldToValue = \case
    DueToRelated_YES -> "Y"
    DueToRelated_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right DueToRelated_YES
    "N" -> Right DueToRelated_NO
    v -> Left ("Unknown DueToRelated: " <> show v)

-- FieldSpec {fieldNumber = 330, fieldName = "BuyVolume", fieldType = FieldTypeQTY, fieldValues = []}
newtype BuyVolume = BuyVolume {unBuyVolume :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BuyVolume

instance IsField BuyVolume where
  fieldTag Proxy = 330
  fieldIsData Proxy = False
  fieldToValue = toValue . unBuyVolume
  fieldFromValue = fromValue >=> (prettyValidate . BuyVolume)

-- FieldSpec {fieldNumber = 331, fieldName = "SellVolume", fieldType = FieldTypeQTY, fieldValues = []}
newtype SellVolume = SellVolume {unSellVolume :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SellVolume

instance IsField SellVolume where
  fieldTag Proxy = 331
  fieldIsData Proxy = False
  fieldToValue = toValue . unSellVolume
  fieldFromValue = fromValue >=> (prettyValidate . SellVolume)

-- FieldSpec {fieldNumber = 332, fieldName = "HighPx", fieldType = FieldTypePrice, fieldValues = []}
newtype HighPx = HighPx {unHighPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HighPx

instance IsField HighPx where
  fieldTag Proxy = 332
  fieldIsData Proxy = False
  fieldToValue = toValue . unHighPx
  fieldFromValue = fromValue >=> (prettyValidate . HighPx)

-- FieldSpec {fieldNumber = 333, fieldName = "LowPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LowPx = LowPx {unLowPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LowPx

instance IsField LowPx where
  fieldTag Proxy = 333
  fieldIsData Proxy = False
  fieldToValue = toValue . unLowPx
  fieldFromValue = fromValue >=> (prettyValidate . LowPx)

-- FieldSpec {fieldNumber = 334, fieldName = "Adjustment", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ERROR"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CORRECTION"}]}
data Adjustment
  = Adjustment_CANCEL
  | Adjustment_ERROR
  | Adjustment_CORRECTION
  deriving stock (Show, Eq, Generic)

instance Validity Adjustment

instance IsField Adjustment where
  fieldTag Proxy = 334
  fieldIsData Proxy = False
  fieldToValue = \case
    Adjustment_CANCEL -> "1"
    Adjustment_ERROR -> "2"
    Adjustment_CORRECTION -> "3"
  fieldFromValue = \case
    "1" -> Right Adjustment_CANCEL
    "2" -> Right Adjustment_ERROR
    "3" -> Right Adjustment_CORRECTION
    v -> Left ("Unknown Adjustment: " <> show v)

-- FieldSpec {fieldNumber = 335, fieldName = "TradSesReqID", fieldType = FieldTypeString, fieldValues = []}
newtype TradSesReqID = TradSesReqID {unTradSesReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesReqID

instance IsField TradSesReqID where
  fieldTag Proxy = 335
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesReqID
  fieldFromValue = fromValue >=> (prettyValidate . TradSesReqID)

-- FieldSpec {fieldNumber = 336, fieldName = "TradingSessionID", fieldType = FieldTypeString, fieldValues = []}
newtype TradingSessionID = TradingSessionID {unTradingSessionID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradingSessionID

instance IsField TradingSessionID where
  fieldTag Proxy = 336
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradingSessionID
  fieldFromValue = fromValue >=> (prettyValidate . TradingSessionID)

-- FieldSpec {fieldNumber = 337, fieldName = "ContraTrader", fieldType = FieldTypeString, fieldValues = []}
newtype ContraTrader = ContraTrader {unContraTrader :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraTrader

instance IsField ContraTrader where
  fieldTag Proxy = 337
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraTrader
  fieldFromValue = fromValue >=> (prettyValidate . ContraTrader)

-- FieldSpec {fieldNumber = 338, fieldName = "TradSesMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ELECTRONIC"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OPEN_OUTCRY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TWO_PARTY"}]}
data TradSesMethod
  = TradSesMethod_ELECTRONIC
  | TradSesMethod_OPEN_OUTCRY
  | TradSesMethod_TWO_PARTY
  deriving stock (Show, Eq, Generic)

instance Validity TradSesMethod

instance IsField TradSesMethod where
  fieldTag Proxy = 338
  fieldIsData Proxy = False
  fieldToValue = \case
    TradSesMethod_ELECTRONIC -> "1"
    TradSesMethod_OPEN_OUTCRY -> "2"
    TradSesMethod_TWO_PARTY -> "3"
  fieldFromValue = \case
    "1" -> Right TradSesMethod_ELECTRONIC
    "2" -> Right TradSesMethod_OPEN_OUTCRY
    "3" -> Right TradSesMethod_TWO_PARTY
    v -> Left ("Unknown TradSesMethod: " <> show v)

-- FieldSpec {fieldNumber = 339, fieldName = "TradSesMode", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TESTING"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SIMULATED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PRODUCTION"}]}
data TradSesMode
  = TradSesMode_TESTING
  | TradSesMode_SIMULATED
  | TradSesMode_PRODUCTION
  deriving stock (Show, Eq, Generic)

instance Validity TradSesMode

instance IsField TradSesMode where
  fieldTag Proxy = 339
  fieldIsData Proxy = False
  fieldToValue = \case
    TradSesMode_TESTING -> "1"
    TradSesMode_SIMULATED -> "2"
    TradSesMode_PRODUCTION -> "3"
  fieldFromValue = \case
    "1" -> Right TradSesMode_TESTING
    "2" -> Right TradSesMode_SIMULATED
    "3" -> Right TradSesMode_PRODUCTION
    v -> Left ("Unknown TradSesMode: " <> show v)

-- FieldSpec {fieldNumber = 340, fieldName = "TradSesStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNKNOWN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "HALTED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OPEN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CLOSED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PRE_OPEN"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PRE_CLOSE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "REQUEST_REJECTED"}]}
data TradSesStatus
  = TradSesStatus_UNKNOWN
  | TradSesStatus_HALTED
  | TradSesStatus_OPEN
  | TradSesStatus_CLOSED
  | TradSesStatus_PRE_OPEN
  | TradSesStatus_PRE_CLOSE
  | TradSesStatus_REQUEST_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity TradSesStatus

instance IsField TradSesStatus where
  fieldTag Proxy = 340
  fieldIsData Proxy = False
  fieldToValue = \case
    TradSesStatus_UNKNOWN -> "0"
    TradSesStatus_HALTED -> "1"
    TradSesStatus_OPEN -> "2"
    TradSesStatus_CLOSED -> "3"
    TradSesStatus_PRE_OPEN -> "4"
    TradSesStatus_PRE_CLOSE -> "5"
    TradSesStatus_REQUEST_REJECTED -> "6"
  fieldFromValue = \case
    "0" -> Right TradSesStatus_UNKNOWN
    "1" -> Right TradSesStatus_HALTED
    "2" -> Right TradSesStatus_OPEN
    "3" -> Right TradSesStatus_CLOSED
    "4" -> Right TradSesStatus_PRE_OPEN
    "5" -> Right TradSesStatus_PRE_CLOSE
    "6" -> Right TradSesStatus_REQUEST_REJECTED
    v -> Left ("Unknown TradSesStatus: " <> show v)

-- FieldSpec {fieldNumber = 341, fieldName = "TradSesStartTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesStartTime = TradSesStartTime {unTradSesStartTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesStartTime

instance IsField TradSesStartTime where
  fieldTag Proxy = 341
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesStartTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesStartTime)

-- FieldSpec {fieldNumber = 342, fieldName = "TradSesOpenTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesOpenTime = TradSesOpenTime {unTradSesOpenTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesOpenTime

instance IsField TradSesOpenTime where
  fieldTag Proxy = 342
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesOpenTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesOpenTime)

-- FieldSpec {fieldNumber = 343, fieldName = "TradSesPreCloseTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesPreCloseTime = TradSesPreCloseTime {unTradSesPreCloseTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesPreCloseTime

instance IsField TradSesPreCloseTime where
  fieldTag Proxy = 343
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesPreCloseTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesPreCloseTime)

-- FieldSpec {fieldNumber = 344, fieldName = "TradSesCloseTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesCloseTime = TradSesCloseTime {unTradSesCloseTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesCloseTime

instance IsField TradSesCloseTime where
  fieldTag Proxy = 344
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesCloseTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesCloseTime)

-- FieldSpec {fieldNumber = 345, fieldName = "TradSesEndTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesEndTime = TradSesEndTime {unTradSesEndTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesEndTime

instance IsField TradSesEndTime where
  fieldTag Proxy = 345
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesEndTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesEndTime)

-- FieldSpec {fieldNumber = 346, fieldName = "NumberOfOrders", fieldType = FieldTypeInt, fieldValues = []}
newtype NumberOfOrders = NumberOfOrders {unNumberOfOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NumberOfOrders

instance IsField NumberOfOrders where
  fieldTag Proxy = 346
  fieldIsData Proxy = False
  fieldToValue = toValue . unNumberOfOrders
  fieldFromValue = fromValue >=> (prettyValidate . NumberOfOrders)

-- FieldSpec {fieldNumber = 347, fieldName = "MessageEncoding", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "ISO-2022-JP", fieldValueDescription = "ISO2022_JP"},FieldValueSpec {fieldValueEnum = "EUC-JP", fieldValueDescription = "EUCJP"},FieldValueSpec {fieldValueEnum = "Shift_JIS", fieldValueDescription = "SHIFT_JIS"},FieldValueSpec {fieldValueEnum = "UTF-8", fieldValueDescription = "UTF8"}]}
data MessageEncoding
  = MessageEncoding_ISO2022_JP
  | MessageEncoding_EUCJP
  | MessageEncoding_SHIFT_JIS
  | MessageEncoding_UTF8
  deriving stock (Show, Eq, Generic)

instance Validity MessageEncoding

instance IsField MessageEncoding where
  fieldTag Proxy = 347
  fieldIsData Proxy = False
  fieldToValue = \case
    MessageEncoding_ISO2022_JP -> "ISO-2022-JP"
    MessageEncoding_EUCJP -> "EUC-JP"
    MessageEncoding_SHIFT_JIS -> "Shift_JIS"
    MessageEncoding_UTF8 -> "UTF-8"
  fieldFromValue = \case
    "ISO-2022-JP" -> Right MessageEncoding_ISO2022_JP
    "EUC-JP" -> Right MessageEncoding_EUCJP
    "Shift_JIS" -> Right MessageEncoding_SHIFT_JIS
    "UTF-8" -> Right MessageEncoding_UTF8
    v -> Left ("Unknown MessageEncoding: " <> show v)

-- FieldSpec {fieldNumber = 348, fieldName = "EncodedIssuerLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedIssuerLen = EncodedIssuerLen {unEncodedIssuerLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedIssuerLen

instance IsField EncodedIssuerLen where
  fieldTag Proxy = 348
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedIssuerLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedIssuerLen)

-- FieldSpec {fieldNumber = 349, fieldName = "EncodedIssuer", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedIssuer = EncodedIssuer {unEncodedIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedIssuer

instance IsField EncodedIssuer where
  fieldTag Proxy = 349
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedIssuer
  fieldFromValue = fromValue >=> (prettyValidate . EncodedIssuer)

-- FieldSpec {fieldNumber = 350, fieldName = "EncodedSecurityDescLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedSecurityDescLen = EncodedSecurityDescLen {unEncodedSecurityDescLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedSecurityDescLen

instance IsField EncodedSecurityDescLen where
  fieldTag Proxy = 350
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedSecurityDescLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedSecurityDescLen)

-- FieldSpec {fieldNumber = 351, fieldName = "EncodedSecurityDesc", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedSecurityDesc = EncodedSecurityDesc {unEncodedSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedSecurityDesc

instance IsField EncodedSecurityDesc where
  fieldTag Proxy = 351
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . EncodedSecurityDesc)

-- FieldSpec {fieldNumber = 352, fieldName = "EncodedListExecInstLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedListExecInstLen = EncodedListExecInstLen {unEncodedListExecInstLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedListExecInstLen

instance IsField EncodedListExecInstLen where
  fieldTag Proxy = 352
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedListExecInstLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedListExecInstLen)

-- FieldSpec {fieldNumber = 353, fieldName = "EncodedListExecInst", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedListExecInst = EncodedListExecInst {unEncodedListExecInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedListExecInst

instance IsField EncodedListExecInst where
  fieldTag Proxy = 353
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedListExecInst
  fieldFromValue = fromValue >=> (prettyValidate . EncodedListExecInst)

-- FieldSpec {fieldNumber = 354, fieldName = "EncodedTextLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedTextLen = EncodedTextLen {unEncodedTextLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedTextLen

instance IsField EncodedTextLen where
  fieldTag Proxy = 354
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedTextLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedTextLen)

-- FieldSpec {fieldNumber = 355, fieldName = "EncodedText", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedText = EncodedText {unEncodedText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedText

instance IsField EncodedText where
  fieldTag Proxy = 355
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedText
  fieldFromValue = fromValue >=> (prettyValidate . EncodedText)

-- FieldSpec {fieldNumber = 356, fieldName = "EncodedSubjectLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedSubjectLen = EncodedSubjectLen {unEncodedSubjectLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedSubjectLen

instance IsField EncodedSubjectLen where
  fieldTag Proxy = 356
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedSubjectLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedSubjectLen)

-- FieldSpec {fieldNumber = 357, fieldName = "EncodedSubject", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedSubject = EncodedSubject {unEncodedSubject :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedSubject

instance IsField EncodedSubject where
  fieldTag Proxy = 357
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedSubject
  fieldFromValue = fromValue >=> (prettyValidate . EncodedSubject)

-- FieldSpec {fieldNumber = 358, fieldName = "EncodedHeadlineLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedHeadlineLen = EncodedHeadlineLen {unEncodedHeadlineLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedHeadlineLen

instance IsField EncodedHeadlineLen where
  fieldTag Proxy = 358
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedHeadlineLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedHeadlineLen)

-- FieldSpec {fieldNumber = 359, fieldName = "EncodedHeadline", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedHeadline = EncodedHeadline {unEncodedHeadline :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedHeadline

instance IsField EncodedHeadline where
  fieldTag Proxy = 359
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedHeadline
  fieldFromValue = fromValue >=> (prettyValidate . EncodedHeadline)

-- FieldSpec {fieldNumber = 360, fieldName = "EncodedAllocTextLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedAllocTextLen = EncodedAllocTextLen {unEncodedAllocTextLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedAllocTextLen

instance IsField EncodedAllocTextLen where
  fieldTag Proxy = 360
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedAllocTextLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedAllocTextLen)

-- FieldSpec {fieldNumber = 361, fieldName = "EncodedAllocText", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedAllocText = EncodedAllocText {unEncodedAllocText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedAllocText

instance IsField EncodedAllocText where
  fieldTag Proxy = 361
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedAllocText
  fieldFromValue = fromValue >=> (prettyValidate . EncodedAllocText)

-- FieldSpec {fieldNumber = 362, fieldName = "EncodedUnderlyingIssuerLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedUnderlyingIssuerLen = EncodedUnderlyingIssuerLen {unEncodedUnderlyingIssuerLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedUnderlyingIssuerLen

instance IsField EncodedUnderlyingIssuerLen where
  fieldTag Proxy = 362
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedUnderlyingIssuerLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedUnderlyingIssuerLen)

-- FieldSpec {fieldNumber = 363, fieldName = "EncodedUnderlyingIssuer", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedUnderlyingIssuer = EncodedUnderlyingIssuer {unEncodedUnderlyingIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedUnderlyingIssuer

instance IsField EncodedUnderlyingIssuer where
  fieldTag Proxy = 363
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedUnderlyingIssuer
  fieldFromValue = fromValue >=> (prettyValidate . EncodedUnderlyingIssuer)

-- FieldSpec {fieldNumber = 364, fieldName = "EncodedUnderlyingSecurityDescLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedUnderlyingSecurityDescLen = EncodedUnderlyingSecurityDescLen {unEncodedUnderlyingSecurityDescLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedUnderlyingSecurityDescLen

instance IsField EncodedUnderlyingSecurityDescLen where
  fieldTag Proxy = 364
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedUnderlyingSecurityDescLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedUnderlyingSecurityDescLen)

-- FieldSpec {fieldNumber = 365, fieldName = "EncodedUnderlyingSecurityDesc", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedUnderlyingSecurityDesc = EncodedUnderlyingSecurityDesc {unEncodedUnderlyingSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedUnderlyingSecurityDesc

instance IsField EncodedUnderlyingSecurityDesc where
  fieldTag Proxy = 365
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedUnderlyingSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . EncodedUnderlyingSecurityDesc)

-- FieldSpec {fieldNumber = 366, fieldName = "AllocPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype AllocPrice = AllocPrice {unAllocPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocPrice

instance IsField AllocPrice where
  fieldTag Proxy = 366
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocPrice
  fieldFromValue = fromValue >=> (prettyValidate . AllocPrice)

-- FieldSpec {fieldNumber = 367, fieldName = "QuoteSetValidUntilTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype QuoteSetValidUntilTime = QuoteSetValidUntilTime {unQuoteSetValidUntilTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteSetValidUntilTime

instance IsField QuoteSetValidUntilTime where
  fieldTag Proxy = 367
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteSetValidUntilTime
  fieldFromValue = fromValue >=> (prettyValidate . QuoteSetValidUntilTime)

-- FieldSpec {fieldNumber = 368, fieldName = "QuoteEntryRejectReason", fieldType = FieldTypeInt, fieldValues = []}
newtype QuoteEntryRejectReason = QuoteEntryRejectReason {unQuoteEntryRejectReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteEntryRejectReason

instance IsField QuoteEntryRejectReason where
  fieldTag Proxy = 368
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteEntryRejectReason
  fieldFromValue = fromValue >=> (prettyValidate . QuoteEntryRejectReason)

-- FieldSpec {fieldNumber = 369, fieldName = "LastMsgSeqNumProcessed", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype LastMsgSeqNumProcessed = LastMsgSeqNumProcessed {unLastMsgSeqNumProcessed :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastMsgSeqNumProcessed

instance IsField LastMsgSeqNumProcessed where
  fieldTag Proxy = 369
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastMsgSeqNumProcessed
  fieldFromValue = fromValue >=> (prettyValidate . LastMsgSeqNumProcessed)

-- FieldSpec {fieldNumber = 371, fieldName = "RefTagID", fieldType = FieldTypeInt, fieldValues = []}
newtype RefTagID = RefTagID {unRefTagID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefTagID

instance IsField RefTagID where
  fieldTag Proxy = 371
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefTagID
  fieldFromValue = fromValue >=> (prettyValidate . RefTagID)

-- FieldSpec {fieldNumber = 372, fieldName = "RefMsgType", fieldType = FieldTypeString, fieldValues = []}
newtype RefMsgType = RefMsgType {unRefMsgType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefMsgType

instance IsField RefMsgType where
  fieldTag Proxy = 372
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefMsgType
  fieldFromValue = fromValue >=> (prettyValidate . RefMsgType)

-- FieldSpec {fieldNumber = 373, fieldName = "SessionRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "INVALID_TAG_NUMBER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REQUIRED_TAG_MISSING"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNDEFINED_TAG"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "TAG_SPECIFIED_WITHOUT_A_VALUE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "VALUE_IS_INCORRECT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "INCORRECT_DATA_FORMAT_FOR_VALUE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "DECRYPTION_PROBLEM"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "SIGNATURE_PROBLEM"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "COMP_ID_PROBLEM"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "SENDING_TIME_ACCURACY_PROBLEM"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "INVALID_MSG_TYPE"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "XML_VALIDATION_ERROR"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "TAG_APPEARS_MORE_THAN_ONCE"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "REPEATING_GROUP_FIELDS_OUT_OF_ORDER"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "NON"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data SessionRejectReason
  = SessionRejectReason_INVALID_TAG_NUMBER
  | SessionRejectReason_REQUIRED_TAG_MISSING
  | SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE
  | SessionRejectReason_UNDEFINED_TAG
  | SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE
  | SessionRejectReason_VALUE_IS_INCORRECT
  | SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE
  | SessionRejectReason_DECRYPTION_PROBLEM
  | SessionRejectReason_SIGNATURE_PROBLEM
  | SessionRejectReason_COMP_ID_PROBLEM
  | SessionRejectReason_SENDING_TIME_ACCURACY_PROBLEM
  | SessionRejectReason_INVALID_MSG_TYPE
  | SessionRejectReason_XML_VALIDATION_ERROR
  | SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE
  | SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER
  | SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER
  | SessionRejectReason_INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP
  | SessionRejectReason_NON
  | SessionRejectReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity SessionRejectReason

instance IsField SessionRejectReason where
  fieldTag Proxy = 373
  fieldIsData Proxy = False
  fieldToValue = \case
    SessionRejectReason_INVALID_TAG_NUMBER -> "0"
    SessionRejectReason_REQUIRED_TAG_MISSING -> "1"
    SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE -> "2"
    SessionRejectReason_UNDEFINED_TAG -> "3"
    SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE -> "4"
    SessionRejectReason_VALUE_IS_INCORRECT -> "5"
    SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE -> "6"
    SessionRejectReason_DECRYPTION_PROBLEM -> "7"
    SessionRejectReason_SIGNATURE_PROBLEM -> "8"
    SessionRejectReason_COMP_ID_PROBLEM -> "9"
    SessionRejectReason_SENDING_TIME_ACCURACY_PROBLEM -> "10"
    SessionRejectReason_INVALID_MSG_TYPE -> "11"
    SessionRejectReason_XML_VALIDATION_ERROR -> "12"
    SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE -> "13"
    SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER -> "14"
    SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER -> "15"
    SessionRejectReason_INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP -> "16"
    SessionRejectReason_NON -> "17"
    SessionRejectReason_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right SessionRejectReason_INVALID_TAG_NUMBER
    "1" -> Right SessionRejectReason_REQUIRED_TAG_MISSING
    "2" -> Right SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE
    "3" -> Right SessionRejectReason_UNDEFINED_TAG
    "4" -> Right SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE
    "5" -> Right SessionRejectReason_VALUE_IS_INCORRECT
    "6" -> Right SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE
    "7" -> Right SessionRejectReason_DECRYPTION_PROBLEM
    "8" -> Right SessionRejectReason_SIGNATURE_PROBLEM
    "9" -> Right SessionRejectReason_COMP_ID_PROBLEM
    "10" -> Right SessionRejectReason_SENDING_TIME_ACCURACY_PROBLEM
    "11" -> Right SessionRejectReason_INVALID_MSG_TYPE
    "12" -> Right SessionRejectReason_XML_VALIDATION_ERROR
    "13" -> Right SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE
    "14" -> Right SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER
    "15" -> Right SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER
    "16" -> Right SessionRejectReason_INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP
    "17" -> Right SessionRejectReason_NON
    "99" -> Right SessionRejectReason_OTHER
    v -> Left ("Unknown SessionRejectReason: " <> show v)

-- FieldSpec {fieldNumber = 374, fieldName = "BidRequestTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"}]}
data BidRequestTransType
  = BidRequestTransType_NEW
  | BidRequestTransType_CANCEL
  deriving stock (Show, Eq, Generic)

instance Validity BidRequestTransType

instance IsField BidRequestTransType where
  fieldTag Proxy = 374
  fieldIsData Proxy = False
  fieldToValue = \case
    BidRequestTransType_NEW -> "N"
    BidRequestTransType_CANCEL -> "C"
  fieldFromValue = \case
    "N" -> Right BidRequestTransType_NEW
    "C" -> Right BidRequestTransType_CANCEL
    v -> Left ("Unknown BidRequestTransType: " <> show v)

-- FieldSpec {fieldNumber = 375, fieldName = "ContraBroker", fieldType = FieldTypeString, fieldValues = []}
newtype ContraBroker = ContraBroker {unContraBroker :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraBroker

instance IsField ContraBroker where
  fieldTag Proxy = 375
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraBroker
  fieldFromValue = fromValue >=> (prettyValidate . ContraBroker)

-- FieldSpec {fieldNumber = 376, fieldName = "ComplianceID", fieldType = FieldTypeString, fieldValues = []}
newtype ComplianceID = ComplianceID {unComplianceID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ComplianceID

instance IsField ComplianceID where
  fieldTag Proxy = 376
  fieldIsData Proxy = False
  fieldToValue = toValue . unComplianceID
  fieldFromValue = fromValue >=> (prettyValidate . ComplianceID)

-- FieldSpec {fieldNumber = 377, fieldName = "SolicitedFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data SolicitedFlag
  = SolicitedFlag_YES
  | SolicitedFlag_NO
  deriving stock (Show, Eq, Generic)

instance Validity SolicitedFlag

instance IsField SolicitedFlag where
  fieldTag Proxy = 377
  fieldIsData Proxy = False
  fieldToValue = \case
    SolicitedFlag_YES -> "Y"
    SolicitedFlag_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right SolicitedFlag_YES
    "N" -> Right SolicitedFlag_NO
    v -> Left ("Unknown SolicitedFlag: " <> show v)

-- FieldSpec {fieldNumber = 378, fieldName = "ExecRestatementReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "GT_CORPORATE_ACTION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "GT_RENEWAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "VERBAL_CHANGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REPRICING_OF_ORDER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "BROKER_OPTION"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PARTIAL_DECLINE_OF_ORDER_QTY"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CANCEL_ON_TRADING_HALT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "CANCEL_ON_SYSTEM_FAILURE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "MARKET"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CANCELED"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "WAREHOUSE_RECAP"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data ExecRestatementReason
  = ExecRestatementReason_GT_CORPORATE_ACTION
  | ExecRestatementReason_GT_RENEWAL
  | ExecRestatementReason_VERBAL_CHANGE
  | ExecRestatementReason_REPRICING_OF_ORDER
  | ExecRestatementReason_BROKER_OPTION
  | ExecRestatementReason_PARTIAL_DECLINE_OF_ORDER_QTY
  | ExecRestatementReason_CANCEL_ON_TRADING_HALT
  | ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE
  | ExecRestatementReason_MARKET
  | ExecRestatementReason_CANCELED
  | ExecRestatementReason_WAREHOUSE_RECAP
  | ExecRestatementReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity ExecRestatementReason

instance IsField ExecRestatementReason where
  fieldTag Proxy = 378
  fieldIsData Proxy = False
  fieldToValue = \case
    ExecRestatementReason_GT_CORPORATE_ACTION -> "0"
    ExecRestatementReason_GT_RENEWAL -> "1"
    ExecRestatementReason_VERBAL_CHANGE -> "2"
    ExecRestatementReason_REPRICING_OF_ORDER -> "3"
    ExecRestatementReason_BROKER_OPTION -> "4"
    ExecRestatementReason_PARTIAL_DECLINE_OF_ORDER_QTY -> "5"
    ExecRestatementReason_CANCEL_ON_TRADING_HALT -> "6"
    ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE -> "7"
    ExecRestatementReason_MARKET -> "8"
    ExecRestatementReason_CANCELED -> "9"
    ExecRestatementReason_WAREHOUSE_RECAP -> "10"
    ExecRestatementReason_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right ExecRestatementReason_GT_CORPORATE_ACTION
    "1" -> Right ExecRestatementReason_GT_RENEWAL
    "2" -> Right ExecRestatementReason_VERBAL_CHANGE
    "3" -> Right ExecRestatementReason_REPRICING_OF_ORDER
    "4" -> Right ExecRestatementReason_BROKER_OPTION
    "5" -> Right ExecRestatementReason_PARTIAL_DECLINE_OF_ORDER_QTY
    "6" -> Right ExecRestatementReason_CANCEL_ON_TRADING_HALT
    "7" -> Right ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE
    "8" -> Right ExecRestatementReason_MARKET
    "9" -> Right ExecRestatementReason_CANCELED
    "10" -> Right ExecRestatementReason_WAREHOUSE_RECAP
    "99" -> Right ExecRestatementReason_OTHER
    v -> Left ("Unknown ExecRestatementReason: " <> show v)

-- FieldSpec {fieldNumber = 379, fieldName = "BusinessRejectRefID", fieldType = FieldTypeString, fieldValues = []}
newtype BusinessRejectRefID = BusinessRejectRefID {unBusinessRejectRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BusinessRejectRefID

instance IsField BusinessRejectRefID where
  fieldTag Proxy = 379
  fieldIsData Proxy = False
  fieldToValue = toValue . unBusinessRejectRefID
  fieldFromValue = fromValue >=> (prettyValidate . BusinessRejectRefID)

-- FieldSpec {fieldNumber = 380, fieldName = "BusinessRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "OTHER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_ID"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "UNKNOWN_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNSUPPORTED_MESSAGE_TYPE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "APPLICATION_NOT_AVAILABLE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CONDITIONALLY_REQUIRED_FIELD_MISSING"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "NOT_AUTHORIZED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "DELIVER_TO_FIRM_NOT_AVAILABLE_AT_THIS_TIME"}]}
data BusinessRejectReason
  = BusinessRejectReason_OTHER
  | BusinessRejectReason_UNKNOWN_ID
  | BusinessRejectReason_UNKNOWN_SECURITY
  | BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE
  | BusinessRejectReason_APPLICATION_NOT_AVAILABLE
  | BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING
  | BusinessRejectReason_NOT_AUTHORIZED
  | BusinessRejectReason_DELIVER_TO_FIRM_NOT_AVAILABLE_AT_THIS_TIME
  deriving stock (Show, Eq, Generic)

instance Validity BusinessRejectReason

instance IsField BusinessRejectReason where
  fieldTag Proxy = 380
  fieldIsData Proxy = False
  fieldToValue = \case
    BusinessRejectReason_OTHER -> "0"
    BusinessRejectReason_UNKNOWN_ID -> "1"
    BusinessRejectReason_UNKNOWN_SECURITY -> "2"
    BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE -> "3"
    BusinessRejectReason_APPLICATION_NOT_AVAILABLE -> "4"
    BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING -> "5"
    BusinessRejectReason_NOT_AUTHORIZED -> "6"
    BusinessRejectReason_DELIVER_TO_FIRM_NOT_AVAILABLE_AT_THIS_TIME -> "7"
  fieldFromValue = \case
    "0" -> Right BusinessRejectReason_OTHER
    "1" -> Right BusinessRejectReason_UNKNOWN_ID
    "2" -> Right BusinessRejectReason_UNKNOWN_SECURITY
    "3" -> Right BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE
    "4" -> Right BusinessRejectReason_APPLICATION_NOT_AVAILABLE
    "5" -> Right BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING
    "6" -> Right BusinessRejectReason_NOT_AUTHORIZED
    "7" -> Right BusinessRejectReason_DELIVER_TO_FIRM_NOT_AVAILABLE_AT_THIS_TIME
    v -> Left ("Unknown BusinessRejectReason: " <> show v)

-- FieldSpec {fieldNumber = 381, fieldName = "GrossTradeAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype GrossTradeAmt = GrossTradeAmt {unGrossTradeAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity GrossTradeAmt

instance IsField GrossTradeAmt where
  fieldTag Proxy = 381
  fieldIsData Proxy = False
  fieldToValue = toValue . unGrossTradeAmt
  fieldFromValue = fromValue >=> (prettyValidate . GrossTradeAmt)

-- FieldSpec {fieldNumber = 382, fieldName = "NoContraBrokers", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoContraBrokers = NoContraBrokers {unNoContraBrokers :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoContraBrokers

instance IsField NoContraBrokers where
  fieldTag Proxy = 382
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoContraBrokers
  fieldFromValue = fromValue >=> (prettyValidate . NoContraBrokers)

-- FieldSpec {fieldNumber = 383, fieldName = "MaxMessageSize", fieldType = FieldTypeLength, fieldValues = []}
newtype MaxMessageSize = MaxMessageSize {unMaxMessageSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaxMessageSize

instance IsField MaxMessageSize where
  fieldTag Proxy = 383
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaxMessageSize
  fieldFromValue = fromValue >=> (prettyValidate . MaxMessageSize)

-- FieldSpec {fieldNumber = 384, fieldName = "NoMsgTypes", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoMsgTypes = NoMsgTypes {unNoMsgTypes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoMsgTypes

instance IsField NoMsgTypes where
  fieldTag Proxy = 384
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoMsgTypes
  fieldFromValue = fromValue >=> (prettyValidate . NoMsgTypes)

-- FieldSpec {fieldNumber = 385, fieldName = "MsgDirection", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SEND"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "RECEIVE"}]}
data MsgDirection
  = MsgDirection_SEND
  | MsgDirection_RECEIVE
  deriving stock (Show, Eq, Generic)

instance Validity MsgDirection

instance IsField MsgDirection where
  fieldTag Proxy = 385
  fieldIsData Proxy = False
  fieldToValue = \case
    MsgDirection_SEND -> "S"
    MsgDirection_RECEIVE -> "R"
  fieldFromValue = \case
    "S" -> Right MsgDirection_SEND
    "R" -> Right MsgDirection_RECEIVE
    v -> Left ("Unknown MsgDirection: " <> show v)

-- FieldSpec {fieldNumber = 386, fieldName = "NoTradingSessions", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoTradingSessions = NoTradingSessions {unNoTradingSessions :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoTradingSessions

instance IsField NoTradingSessions where
  fieldTag Proxy = 386
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoTradingSessions
  fieldFromValue = fromValue >=> (prettyValidate . NoTradingSessions)

-- FieldSpec {fieldNumber = 387, fieldName = "TotalVolumeTraded", fieldType = FieldTypeQTY, fieldValues = []}
newtype TotalVolumeTraded = TotalVolumeTraded {unTotalVolumeTraded :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalVolumeTraded

instance IsField TotalVolumeTraded where
  fieldTag Proxy = 387
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalVolumeTraded
  fieldFromValue = fromValue >=> (prettyValidate . TotalVolumeTraded)

-- FieldSpec {fieldNumber = 388, fieldName = "DiscretionInst", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "RELATED_TO_DISPLAYED_PRICE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "RELATED_TO_MARKET_PRICE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RELATED_TO_PRIMARY_PRICE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "RELATED_TO_LOCAL_PRIMARY_PRICE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "RELATED_TO_MIDPOINT_PRICE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "RELATED_TO_LAST_TRADE_PRICE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "RELATED_TO_VWAP"}]}
data DiscretionInst
  = DiscretionInst_RELATED_TO_DISPLAYED_PRICE
  | DiscretionInst_RELATED_TO_MARKET_PRICE
  | DiscretionInst_RELATED_TO_PRIMARY_PRICE
  | DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE
  | DiscretionInst_RELATED_TO_MIDPOINT_PRICE
  | DiscretionInst_RELATED_TO_LAST_TRADE_PRICE
  | DiscretionInst_RELATED_TO_VWAP
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionInst

instance IsField DiscretionInst where
  fieldTag Proxy = 388
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionInst_RELATED_TO_DISPLAYED_PRICE -> "0"
    DiscretionInst_RELATED_TO_MARKET_PRICE -> "1"
    DiscretionInst_RELATED_TO_PRIMARY_PRICE -> "2"
    DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE -> "3"
    DiscretionInst_RELATED_TO_MIDPOINT_PRICE -> "4"
    DiscretionInst_RELATED_TO_LAST_TRADE_PRICE -> "5"
    DiscretionInst_RELATED_TO_VWAP -> "6"
  fieldFromValue = \case
    "0" -> Right DiscretionInst_RELATED_TO_DISPLAYED_PRICE
    "1" -> Right DiscretionInst_RELATED_TO_MARKET_PRICE
    "2" -> Right DiscretionInst_RELATED_TO_PRIMARY_PRICE
    "3" -> Right DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE
    "4" -> Right DiscretionInst_RELATED_TO_MIDPOINT_PRICE
    "5" -> Right DiscretionInst_RELATED_TO_LAST_TRADE_PRICE
    "6" -> Right DiscretionInst_RELATED_TO_VWAP
    v -> Left ("Unknown DiscretionInst: " <> show v)

-- FieldSpec {fieldNumber = 389, fieldName = "DiscretionOffsetValue", fieldType = FieldTypeFloat, fieldValues = []}
newtype DiscretionOffsetValue = DiscretionOffsetValue {unDiscretionOffsetValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionOffsetValue

instance IsField DiscretionOffsetValue where
  fieldTag Proxy = 389
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionOffsetValue
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionOffsetValue)

-- FieldSpec {fieldNumber = 390, fieldName = "BidID", fieldType = FieldTypeString, fieldValues = []}
newtype BidID = BidID {unBidID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidID

instance IsField BidID where
  fieldTag Proxy = 390
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidID
  fieldFromValue = fromValue >=> (prettyValidate . BidID)

-- FieldSpec {fieldNumber = 391, fieldName = "ClientBidID", fieldType = FieldTypeString, fieldValues = []}
newtype ClientBidID = ClientBidID {unClientBidID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClientBidID

instance IsField ClientBidID where
  fieldTag Proxy = 391
  fieldIsData Proxy = False
  fieldToValue = toValue . unClientBidID
  fieldFromValue = fromValue >=> (prettyValidate . ClientBidID)

-- FieldSpec {fieldNumber = 392, fieldName = "ListName", fieldType = FieldTypeString, fieldValues = []}
newtype ListName = ListName {unListName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListName

instance IsField ListName where
  fieldTag Proxy = 392
  fieldIsData Proxy = False
  fieldToValue = toValue . unListName
  fieldFromValue = fromValue >=> (prettyValidate . ListName)

-- FieldSpec {fieldNumber = 393, fieldName = "TotNoRelatedSym", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoRelatedSym = TotNoRelatedSym {unTotNoRelatedSym :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoRelatedSym

instance IsField TotNoRelatedSym where
  fieldTag Proxy = 393
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoRelatedSym
  fieldFromValue = fromValue >=> (prettyValidate . TotNoRelatedSym)

-- FieldSpec {fieldNumber = 394, fieldName = "BidType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NON_DISCLOSED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DISCLOSED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NO_BIDDING_PROCESS"}]}
data BidType
  = BidType_NON_DISCLOSED
  | BidType_DISCLOSED
  | BidType_NO_BIDDING_PROCESS
  deriving stock (Show, Eq, Generic)

instance Validity BidType

instance IsField BidType where
  fieldTag Proxy = 394
  fieldIsData Proxy = False
  fieldToValue = \case
    BidType_NON_DISCLOSED -> "1"
    BidType_DISCLOSED -> "2"
    BidType_NO_BIDDING_PROCESS -> "3"
  fieldFromValue = \case
    "1" -> Right BidType_NON_DISCLOSED
    "2" -> Right BidType_DISCLOSED
    "3" -> Right BidType_NO_BIDDING_PROCESS
    v -> Left ("Unknown BidType: " <> show v)

-- FieldSpec {fieldNumber = 395, fieldName = "NumTickets", fieldType = FieldTypeInt, fieldValues = []}
newtype NumTickets = NumTickets {unNumTickets :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NumTickets

instance IsField NumTickets where
  fieldTag Proxy = 395
  fieldIsData Proxy = False
  fieldToValue = toValue . unNumTickets
  fieldFromValue = fromValue >=> (prettyValidate . NumTickets)

-- FieldSpec {fieldNumber = 396, fieldName = "SideValue1", fieldType = FieldTypeAMT, fieldValues = []}
newtype SideValue1 = SideValue1 {unSideValue1 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SideValue1

instance IsField SideValue1 where
  fieldTag Proxy = 396
  fieldIsData Proxy = False
  fieldToValue = toValue . unSideValue1
  fieldFromValue = fromValue >=> (prettyValidate . SideValue1)

-- FieldSpec {fieldNumber = 397, fieldName = "SideValue2", fieldType = FieldTypeAMT, fieldValues = []}
newtype SideValue2 = SideValue2 {unSideValue2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SideValue2

instance IsField SideValue2 where
  fieldTag Proxy = 397
  fieldIsData Proxy = False
  fieldToValue = toValue . unSideValue2
  fieldFromValue = fromValue >=> (prettyValidate . SideValue2)

-- FieldSpec {fieldNumber = 398, fieldName = "NoBidDescriptors", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoBidDescriptors = NoBidDescriptors {unNoBidDescriptors :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoBidDescriptors

instance IsField NoBidDescriptors where
  fieldTag Proxy = 398
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoBidDescriptors
  fieldFromValue = fromValue >=> (prettyValidate . NoBidDescriptors)

-- FieldSpec {fieldNumber = 399, fieldName = "BidDescriptorType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SECTOR"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COUNTRY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INDEX"}]}
data BidDescriptorType
  = BidDescriptorType_SECTOR
  | BidDescriptorType_COUNTRY
  | BidDescriptorType_INDEX
  deriving stock (Show, Eq, Generic)

instance Validity BidDescriptorType

instance IsField BidDescriptorType where
  fieldTag Proxy = 399
  fieldIsData Proxy = False
  fieldToValue = \case
    BidDescriptorType_SECTOR -> "1"
    BidDescriptorType_COUNTRY -> "2"
    BidDescriptorType_INDEX -> "3"
  fieldFromValue = \case
    "1" -> Right BidDescriptorType_SECTOR
    "2" -> Right BidDescriptorType_COUNTRY
    "3" -> Right BidDescriptorType_INDEX
    v -> Left ("Unknown BidDescriptorType: " <> show v)

-- FieldSpec {fieldNumber = 400, fieldName = "BidDescriptor", fieldType = FieldTypeString, fieldValues = []}
newtype BidDescriptor = BidDescriptor {unBidDescriptor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidDescriptor

instance IsField BidDescriptor where
  fieldTag Proxy = 400
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidDescriptor
  fieldFromValue = fromValue >=> (prettyValidate . BidDescriptor)

-- FieldSpec {fieldNumber = 401, fieldName = "SideValueInd", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SIDE_VALUE1"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SIDE_VALUE2"}]}
data SideValueInd
  = SideValueInd_SIDE_VALUE1
  | SideValueInd_SIDE_VALUE2
  deriving stock (Show, Eq, Generic)

instance Validity SideValueInd

instance IsField SideValueInd where
  fieldTag Proxy = 401
  fieldIsData Proxy = False
  fieldToValue = \case
    SideValueInd_SIDE_VALUE1 -> "1"
    SideValueInd_SIDE_VALUE2 -> "2"
  fieldFromValue = \case
    "1" -> Right SideValueInd_SIDE_VALUE1
    "2" -> Right SideValueInd_SIDE_VALUE2
    v -> Left ("Unknown SideValueInd: " <> show v)

-- FieldSpec {fieldNumber = 402, fieldName = "LiquidityPctLow", fieldType = FieldTypePercentage, fieldValues = []}
newtype LiquidityPctLow = LiquidityPctLow {unLiquidityPctLow :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityPctLow

instance IsField LiquidityPctLow where
  fieldTag Proxy = 402
  fieldIsData Proxy = False
  fieldToValue = toValue . unLiquidityPctLow
  fieldFromValue = fromValue >=> (prettyValidate . LiquidityPctLow)

-- FieldSpec {fieldNumber = 403, fieldName = "LiquidityPctHigh", fieldType = FieldTypePercentage, fieldValues = []}
newtype LiquidityPctHigh = LiquidityPctHigh {unLiquidityPctHigh :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityPctHigh

instance IsField LiquidityPctHigh where
  fieldTag Proxy = 403
  fieldIsData Proxy = False
  fieldToValue = toValue . unLiquidityPctHigh
  fieldFromValue = fromValue >=> (prettyValidate . LiquidityPctHigh)

-- FieldSpec {fieldNumber = 404, fieldName = "LiquidityValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype LiquidityValue = LiquidityValue {unLiquidityValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityValue

instance IsField LiquidityValue where
  fieldTag Proxy = 404
  fieldIsData Proxy = False
  fieldToValue = toValue . unLiquidityValue
  fieldFromValue = fromValue >=> (prettyValidate . LiquidityValue)

-- FieldSpec {fieldNumber = 405, fieldName = "EFPTrackingError", fieldType = FieldTypePercentage, fieldValues = []}
newtype EFPTrackingError = EFPTrackingError {unEFPTrackingError :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EFPTrackingError

instance IsField EFPTrackingError where
  fieldTag Proxy = 405
  fieldIsData Proxy = False
  fieldToValue = toValue . unEFPTrackingError
  fieldFromValue = fromValue >=> (prettyValidate . EFPTrackingError)

-- FieldSpec {fieldNumber = 406, fieldName = "FairValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype FairValue = FairValue {unFairValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity FairValue

instance IsField FairValue where
  fieldTag Proxy = 406
  fieldIsData Proxy = False
  fieldToValue = toValue . unFairValue
  fieldFromValue = fromValue >=> (prettyValidate . FairValue)

-- FieldSpec {fieldNumber = 407, fieldName = "OutsideIndexPct", fieldType = FieldTypePercentage, fieldValues = []}
newtype OutsideIndexPct = OutsideIndexPct {unOutsideIndexPct :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OutsideIndexPct

instance IsField OutsideIndexPct where
  fieldTag Proxy = 407
  fieldIsData Proxy = False
  fieldToValue = toValue . unOutsideIndexPct
  fieldFromValue = fromValue >=> (prettyValidate . OutsideIndexPct)

-- FieldSpec {fieldNumber = 408, fieldName = "ValueOfFutures", fieldType = FieldTypeAMT, fieldValues = []}
newtype ValueOfFutures = ValueOfFutures {unValueOfFutures :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ValueOfFutures

instance IsField ValueOfFutures where
  fieldTag Proxy = 408
  fieldIsData Proxy = False
  fieldToValue = toValue . unValueOfFutures
  fieldFromValue = fromValue >=> (prettyValidate . ValueOfFutures)

-- FieldSpec {fieldNumber = 409, fieldName = "LiquidityIndType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIVE_DAY_MOVING_AVERAGE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TWENTY_DAY_MOVING_AVERAGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NORMAL_MARKET_SIZE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OTHER"}]}
data LiquidityIndType
  = LiquidityIndType_FIVE_DAY_MOVING_AVERAGE
  | LiquidityIndType_TWENTY_DAY_MOVING_AVERAGE
  | LiquidityIndType_NORMAL_MARKET_SIZE
  | LiquidityIndType_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityIndType

instance IsField LiquidityIndType where
  fieldTag Proxy = 409
  fieldIsData Proxy = False
  fieldToValue = \case
    LiquidityIndType_FIVE_DAY_MOVING_AVERAGE -> "1"
    LiquidityIndType_TWENTY_DAY_MOVING_AVERAGE -> "2"
    LiquidityIndType_NORMAL_MARKET_SIZE -> "3"
    LiquidityIndType_OTHER -> "4"
  fieldFromValue = \case
    "1" -> Right LiquidityIndType_FIVE_DAY_MOVING_AVERAGE
    "2" -> Right LiquidityIndType_TWENTY_DAY_MOVING_AVERAGE
    "3" -> Right LiquidityIndType_NORMAL_MARKET_SIZE
    "4" -> Right LiquidityIndType_OTHER
    v -> Left ("Unknown LiquidityIndType: " <> show v)

-- FieldSpec {fieldNumber = 410, fieldName = "WtAverageLiquidity", fieldType = FieldTypePercentage, fieldValues = []}
newtype WtAverageLiquidity = WtAverageLiquidity {unWtAverageLiquidity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity WtAverageLiquidity

instance IsField WtAverageLiquidity where
  fieldTag Proxy = 410
  fieldIsData Proxy = False
  fieldToValue = toValue . unWtAverageLiquidity
  fieldFromValue = fromValue >=> (prettyValidate . WtAverageLiquidity)

-- FieldSpec {fieldNumber = 411, fieldName = "ExchangeForPhysical", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data ExchangeForPhysical
  = ExchangeForPhysical_YES
  | ExchangeForPhysical_NO
  deriving stock (Show, Eq, Generic)

instance Validity ExchangeForPhysical

instance IsField ExchangeForPhysical where
  fieldTag Proxy = 411
  fieldIsData Proxy = False
  fieldToValue = \case
    ExchangeForPhysical_YES -> "Y"
    ExchangeForPhysical_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right ExchangeForPhysical_YES
    "N" -> Right ExchangeForPhysical_NO
    v -> Left ("Unknown ExchangeForPhysical: " <> show v)

-- FieldSpec {fieldNumber = 412, fieldName = "OutMainCntryUIndex", fieldType = FieldTypeAMT, fieldValues = []}
newtype OutMainCntryUIndex = OutMainCntryUIndex {unOutMainCntryUIndex :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OutMainCntryUIndex

instance IsField OutMainCntryUIndex where
  fieldTag Proxy = 412
  fieldIsData Proxy = False
  fieldToValue = toValue . unOutMainCntryUIndex
  fieldFromValue = fromValue >=> (prettyValidate . OutMainCntryUIndex)

-- FieldSpec {fieldNumber = 413, fieldName = "CrossPercent", fieldType = FieldTypePercentage, fieldValues = []}
newtype CrossPercent = CrossPercent {unCrossPercent :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CrossPercent

instance IsField CrossPercent where
  fieldTag Proxy = 413
  fieldIsData Proxy = False
  fieldToValue = toValue . unCrossPercent
  fieldFromValue = fromValue >=> (prettyValidate . CrossPercent)

-- FieldSpec {fieldNumber = 414, fieldName = "ProgRptReqs", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BUY_SIDE_REQUESTS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SELL_SIDE_SENDS"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REAL_TIME_EXECUTION_REPORTS"}]}
data ProgRptReqs
  = ProgRptReqs_BUY_SIDE_REQUESTS
  | ProgRptReqs_SELL_SIDE_SENDS
  | ProgRptReqs_REAL_TIME_EXECUTION_REPORTS
  deriving stock (Show, Eq, Generic)

instance Validity ProgRptReqs

instance IsField ProgRptReqs where
  fieldTag Proxy = 414
  fieldIsData Proxy = False
  fieldToValue = \case
    ProgRptReqs_BUY_SIDE_REQUESTS -> "1"
    ProgRptReqs_SELL_SIDE_SENDS -> "2"
    ProgRptReqs_REAL_TIME_EXECUTION_REPORTS -> "3"
  fieldFromValue = \case
    "1" -> Right ProgRptReqs_BUY_SIDE_REQUESTS
    "2" -> Right ProgRptReqs_SELL_SIDE_SENDS
    "3" -> Right ProgRptReqs_REAL_TIME_EXECUTION_REPORTS
    v -> Left ("Unknown ProgRptReqs: " <> show v)

-- FieldSpec {fieldNumber = 415, fieldName = "ProgPeriodInterval", fieldType = FieldTypeInt, fieldValues = []}
newtype ProgPeriodInterval = ProgPeriodInterval {unProgPeriodInterval :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ProgPeriodInterval

instance IsField ProgPeriodInterval where
  fieldTag Proxy = 415
  fieldIsData Proxy = False
  fieldToValue = toValue . unProgPeriodInterval
  fieldFromValue = fromValue >=> (prettyValidate . ProgPeriodInterval)

-- FieldSpec {fieldNumber = 416, fieldName = "IncTaxInd", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "GROSS"}]}
data IncTaxInd
  = IncTaxInd_NET
  | IncTaxInd_GROSS
  deriving stock (Show, Eq, Generic)

instance Validity IncTaxInd

instance IsField IncTaxInd where
  fieldTag Proxy = 416
  fieldIsData Proxy = False
  fieldToValue = \case
    IncTaxInd_NET -> "1"
    IncTaxInd_GROSS -> "2"
  fieldFromValue = \case
    "1" -> Right IncTaxInd_NET
    "2" -> Right IncTaxInd_GROSS
    v -> Left ("Unknown IncTaxInd: " <> show v)

-- FieldSpec {fieldNumber = 417, fieldName = "NumBidders", fieldType = FieldTypeInt, fieldValues = []}
newtype NumBidders = NumBidders {unNumBidders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NumBidders

instance IsField NumBidders where
  fieldTag Proxy = 417
  fieldIsData Proxy = False
  fieldToValue = toValue . unNumBidders
  fieldFromValue = fromValue >=> (prettyValidate . NumBidders)

-- FieldSpec {fieldNumber = 418, fieldName = "BidTradeType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "RISK_TRADE"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "VWAP_GUARANTEE"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "AGENCY"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "GUARANTEED_CLOSE"}]}
data BidTradeType
  = BidTradeType_RISK_TRADE
  | BidTradeType_VWAP_GUARANTEE
  | BidTradeType_AGENCY
  | BidTradeType_GUARANTEED_CLOSE
  deriving stock (Show, Eq, Generic)

instance Validity BidTradeType

instance IsField BidTradeType where
  fieldTag Proxy = 418
  fieldIsData Proxy = False
  fieldToValue = \case
    BidTradeType_RISK_TRADE -> "R"
    BidTradeType_VWAP_GUARANTEE -> "G"
    BidTradeType_AGENCY -> "A"
    BidTradeType_GUARANTEED_CLOSE -> "J"
  fieldFromValue = \case
    "R" -> Right BidTradeType_RISK_TRADE
    "G" -> Right BidTradeType_VWAP_GUARANTEE
    "A" -> Right BidTradeType_AGENCY
    "J" -> Right BidTradeType_GUARANTEED_CLOSE
    v -> Left ("Unknown BidTradeType: " <> show v)

-- FieldSpec {fieldNumber = 419, fieldName = "BasisPxType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CLOSING_PRICE_AT_MORNING_SESSION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CLOSING_PRICE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CURRENT_PRICE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "SQ"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "VWAP_THROUGH_A_DAY"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "VWAP_THROUGH_A_MORNING_SESSION"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "VWAP_THROUGH_AN_AFTERNOON_SESSION"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "VWAP_THROUGH_A_DAY_EXCEPT"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "VWAP_THROUGH_A_MORNING_SESSION_EXCEPT"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "STRIKE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "OPEN"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "OTHERS"}]}
data BasisPxType
  = BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION
  | BasisPxType_CLOSING_PRICE
  | BasisPxType_CURRENT_PRICE
  | BasisPxType_SQ
  | BasisPxType_VWAP_THROUGH_A_DAY
  | BasisPxType_VWAP_THROUGH_A_MORNING_SESSION
  | BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION
  | BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT
  | BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT
  | BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT
  | BasisPxType_STRIKE
  | BasisPxType_OPEN
  | BasisPxType_OTHERS
  deriving stock (Show, Eq, Generic)

instance Validity BasisPxType

instance IsField BasisPxType where
  fieldTag Proxy = 419
  fieldIsData Proxy = False
  fieldToValue = \case
    BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION -> "2"
    BasisPxType_CLOSING_PRICE -> "3"
    BasisPxType_CURRENT_PRICE -> "4"
    BasisPxType_SQ -> "5"
    BasisPxType_VWAP_THROUGH_A_DAY -> "6"
    BasisPxType_VWAP_THROUGH_A_MORNING_SESSION -> "7"
    BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION -> "8"
    BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT -> "9"
    BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT -> "A"
    BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT -> "B"
    BasisPxType_STRIKE -> "C"
    BasisPxType_OPEN -> "D"
    BasisPxType_OTHERS -> "Z"
  fieldFromValue = \case
    "2" -> Right BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION
    "3" -> Right BasisPxType_CLOSING_PRICE
    "4" -> Right BasisPxType_CURRENT_PRICE
    "5" -> Right BasisPxType_SQ
    "6" -> Right BasisPxType_VWAP_THROUGH_A_DAY
    "7" -> Right BasisPxType_VWAP_THROUGH_A_MORNING_SESSION
    "8" -> Right BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION
    "9" -> Right BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT
    "A" -> Right BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT
    "B" -> Right BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT
    "C" -> Right BasisPxType_STRIKE
    "D" -> Right BasisPxType_OPEN
    "Z" -> Right BasisPxType_OTHERS
    v -> Left ("Unknown BasisPxType: " <> show v)

-- FieldSpec {fieldNumber = 420, fieldName = "NoBidComponents", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoBidComponents = NoBidComponents {unNoBidComponents :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoBidComponents

instance IsField NoBidComponents where
  fieldTag Proxy = 420
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoBidComponents
  fieldFromValue = fromValue >=> (prettyValidate . NoBidComponents)

-- FieldSpec {fieldNumber = 421, fieldName = "Country", fieldType = FieldTypeCountry, fieldValues = []}
newtype Country = Country {unCountry :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Country

instance IsField Country where
  fieldTag Proxy = 421
  fieldIsData Proxy = False
  fieldToValue = toValue . unCountry
  fieldFromValue = fromValue >=> (prettyValidate . Country)

-- FieldSpec {fieldNumber = 422, fieldName = "TotNoStrikes", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoStrikes = TotNoStrikes {unTotNoStrikes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoStrikes

instance IsField TotNoStrikes where
  fieldTag Proxy = 422
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoStrikes
  fieldFromValue = fromValue >=> (prettyValidate . TotNoStrikes)

-- FieldSpec {fieldNumber = 423, fieldName = "PriceType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PERCENTAGE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PER_UNIT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FIXED_AMOUNT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "DISCOUNT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PREMIUM"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "SPREAD"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "TED_PRICE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TED_YIELD"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "YIELD"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "FIXED_CABINET_TRADE_PRICE"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "VARIABLE_CABINET_TRADE_PRICE"}]}
data PriceType
  = PriceType_PERCENTAGE
  | PriceType_PER_UNIT
  | PriceType_FIXED_AMOUNT
  | PriceType_DISCOUNT
  | PriceType_PREMIUM
  | PriceType_SPREAD
  | PriceType_TED_PRICE
  | PriceType_TED_YIELD
  | PriceType_YIELD
  | PriceType_FIXED_CABINET_TRADE_PRICE
  | PriceType_VARIABLE_CABINET_TRADE_PRICE
  deriving stock (Show, Eq, Generic)

instance Validity PriceType

instance IsField PriceType where
  fieldTag Proxy = 423
  fieldIsData Proxy = False
  fieldToValue = \case
    PriceType_PERCENTAGE -> "1"
    PriceType_PER_UNIT -> "2"
    PriceType_FIXED_AMOUNT -> "3"
    PriceType_DISCOUNT -> "4"
    PriceType_PREMIUM -> "5"
    PriceType_SPREAD -> "6"
    PriceType_TED_PRICE -> "7"
    PriceType_TED_YIELD -> "8"
    PriceType_YIELD -> "9"
    PriceType_FIXED_CABINET_TRADE_PRICE -> "10"
    PriceType_VARIABLE_CABINET_TRADE_PRICE -> "11"
  fieldFromValue = \case
    "1" -> Right PriceType_PERCENTAGE
    "2" -> Right PriceType_PER_UNIT
    "3" -> Right PriceType_FIXED_AMOUNT
    "4" -> Right PriceType_DISCOUNT
    "5" -> Right PriceType_PREMIUM
    "6" -> Right PriceType_SPREAD
    "7" -> Right PriceType_TED_PRICE
    "8" -> Right PriceType_TED_YIELD
    "9" -> Right PriceType_YIELD
    "10" -> Right PriceType_FIXED_CABINET_TRADE_PRICE
    "11" -> Right PriceType_VARIABLE_CABINET_TRADE_PRICE
    v -> Left ("Unknown PriceType: " <> show v)

-- FieldSpec {fieldNumber = 424, fieldName = "DayOrderQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype DayOrderQty = DayOrderQty {unDayOrderQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DayOrderQty

instance IsField DayOrderQty where
  fieldTag Proxy = 424
  fieldIsData Proxy = False
  fieldToValue = toValue . unDayOrderQty
  fieldFromValue = fromValue >=> (prettyValidate . DayOrderQty)

-- FieldSpec {fieldNumber = 425, fieldName = "DayCumQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype DayCumQty = DayCumQty {unDayCumQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DayCumQty

instance IsField DayCumQty where
  fieldTag Proxy = 425
  fieldIsData Proxy = False
  fieldToValue = toValue . unDayCumQty
  fieldFromValue = fromValue >=> (prettyValidate . DayCumQty)

-- FieldSpec {fieldNumber = 426, fieldName = "DayAvgPx", fieldType = FieldTypePrice, fieldValues = []}
newtype DayAvgPx = DayAvgPx {unDayAvgPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DayAvgPx

instance IsField DayAvgPx where
  fieldTag Proxy = 426
  fieldIsData Proxy = False
  fieldToValue = toValue . unDayAvgPx
  fieldFromValue = fromValue >=> (prettyValidate . DayAvgPx)

-- FieldSpec {fieldNumber = 427, fieldName = "GTBookingInst", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCUMULATE_UNTIL_FILLED_OR_EXPIRED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE"}]}
data GTBookingInst
  = GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION
  | GTBookingInst_ACCUMULATE_UNTIL_FILLED_OR_EXPIRED
  | GTBookingInst_ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE
  deriving stock (Show, Eq, Generic)

instance Validity GTBookingInst

instance IsField GTBookingInst where
  fieldTag Proxy = 427
  fieldIsData Proxy = False
  fieldToValue = \case
    GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION -> "0"
    GTBookingInst_ACCUMULATE_UNTIL_FILLED_OR_EXPIRED -> "1"
    GTBookingInst_ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE -> "2"
  fieldFromValue = \case
    "0" -> Right GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION
    "1" -> Right GTBookingInst_ACCUMULATE_UNTIL_FILLED_OR_EXPIRED
    "2" -> Right GTBookingInst_ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE
    v -> Left ("Unknown GTBookingInst: " <> show v)

-- FieldSpec {fieldNumber = 428, fieldName = "NoStrikes", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoStrikes = NoStrikes {unNoStrikes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoStrikes

instance IsField NoStrikes where
  fieldTag Proxy = 428
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoStrikes
  fieldFromValue = fromValue >=> (prettyValidate . NoStrikes)

-- FieldSpec {fieldNumber = 429, fieldName = "ListStatusType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACK"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RESPONSE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TIMED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "EXEC_STARTED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "ALL_DONE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ALERT"}]}
data ListStatusType
  = ListStatusType_ACK
  | ListStatusType_RESPONSE
  | ListStatusType_TIMED
  | ListStatusType_EXEC_STARTED
  | ListStatusType_ALL_DONE
  | ListStatusType_ALERT
  deriving stock (Show, Eq, Generic)

instance Validity ListStatusType

instance IsField ListStatusType where
  fieldTag Proxy = 429
  fieldIsData Proxy = False
  fieldToValue = \case
    ListStatusType_ACK -> "1"
    ListStatusType_RESPONSE -> "2"
    ListStatusType_TIMED -> "3"
    ListStatusType_EXEC_STARTED -> "4"
    ListStatusType_ALL_DONE -> "5"
    ListStatusType_ALERT -> "6"
  fieldFromValue = \case
    "1" -> Right ListStatusType_ACK
    "2" -> Right ListStatusType_RESPONSE
    "3" -> Right ListStatusType_TIMED
    "4" -> Right ListStatusType_EXEC_STARTED
    "5" -> Right ListStatusType_ALL_DONE
    "6" -> Right ListStatusType_ALERT
    v -> Left ("Unknown ListStatusType: " <> show v)

-- FieldSpec {fieldNumber = 430, fieldName = "NetGrossInd", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "GROSS"}]}
data NetGrossInd
  = NetGrossInd_NET
  | NetGrossInd_GROSS
  deriving stock (Show, Eq, Generic)

instance Validity NetGrossInd

instance IsField NetGrossInd where
  fieldTag Proxy = 430
  fieldIsData Proxy = False
  fieldToValue = \case
    NetGrossInd_NET -> "1"
    NetGrossInd_GROSS -> "2"
  fieldFromValue = \case
    "1" -> Right NetGrossInd_NET
    "2" -> Right NetGrossInd_GROSS
    v -> Left ("Unknown NetGrossInd: " <> show v)

-- FieldSpec {fieldNumber = 431, fieldName = "ListOrderStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "IN_BIDDING_PROCESS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RECEIVED_FOR_EXECUTION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EXECUTING"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCELLING"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "ALERT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ALL_DONE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "REJECT"}]}
data ListOrderStatus
  = ListOrderStatus_IN_BIDDING_PROCESS
  | ListOrderStatus_RECEIVED_FOR_EXECUTION
  | ListOrderStatus_EXECUTING
  | ListOrderStatus_CANCELLING
  | ListOrderStatus_ALERT
  | ListOrderStatus_ALL_DONE
  | ListOrderStatus_REJECT
  deriving stock (Show, Eq, Generic)

instance Validity ListOrderStatus

instance IsField ListOrderStatus where
  fieldTag Proxy = 431
  fieldIsData Proxy = False
  fieldToValue = \case
    ListOrderStatus_IN_BIDDING_PROCESS -> "1"
    ListOrderStatus_RECEIVED_FOR_EXECUTION -> "2"
    ListOrderStatus_EXECUTING -> "3"
    ListOrderStatus_CANCELLING -> "4"
    ListOrderStatus_ALERT -> "5"
    ListOrderStatus_ALL_DONE -> "6"
    ListOrderStatus_REJECT -> "7"
  fieldFromValue = \case
    "1" -> Right ListOrderStatus_IN_BIDDING_PROCESS
    "2" -> Right ListOrderStatus_RECEIVED_FOR_EXECUTION
    "3" -> Right ListOrderStatus_EXECUTING
    "4" -> Right ListOrderStatus_CANCELLING
    "5" -> Right ListOrderStatus_ALERT
    "6" -> Right ListOrderStatus_ALL_DONE
    "7" -> Right ListOrderStatus_REJECT
    v -> Left ("Unknown ListOrderStatus: " <> show v)

-- FieldSpec {fieldNumber = 432, fieldName = "ExpireDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype ExpireDate = ExpireDate {unExpireDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExpireDate

instance IsField ExpireDate where
  fieldTag Proxy = 432
  fieldIsData Proxy = False
  fieldToValue = toValue . unExpireDate
  fieldFromValue = fromValue >=> (prettyValidate . ExpireDate)

-- FieldSpec {fieldNumber = 433, fieldName = "ListExecInstType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "IMMEDIATE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "WAIT_FOR_INSTRUCTION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SELL_DRIVEN"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "BUY_DRIVEN_CASH_TOP_UP"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "BUY_DRIVEN_CASH_WITHDRAW"}]}
data ListExecInstType
  = ListExecInstType_IMMEDIATE
  | ListExecInstType_WAIT_FOR_INSTRUCTION
  | ListExecInstType_SELL_DRIVEN
  | ListExecInstType_BUY_DRIVEN_CASH_TOP_UP
  | ListExecInstType_BUY_DRIVEN_CASH_WITHDRAW
  deriving stock (Show, Eq, Generic)

instance Validity ListExecInstType

instance IsField ListExecInstType where
  fieldTag Proxy = 433
  fieldIsData Proxy = False
  fieldToValue = \case
    ListExecInstType_IMMEDIATE -> "1"
    ListExecInstType_WAIT_FOR_INSTRUCTION -> "2"
    ListExecInstType_SELL_DRIVEN -> "3"
    ListExecInstType_BUY_DRIVEN_CASH_TOP_UP -> "4"
    ListExecInstType_BUY_DRIVEN_CASH_WITHDRAW -> "5"
  fieldFromValue = \case
    "1" -> Right ListExecInstType_IMMEDIATE
    "2" -> Right ListExecInstType_WAIT_FOR_INSTRUCTION
    "3" -> Right ListExecInstType_SELL_DRIVEN
    "4" -> Right ListExecInstType_BUY_DRIVEN_CASH_TOP_UP
    "5" -> Right ListExecInstType_BUY_DRIVEN_CASH_WITHDRAW
    v -> Left ("Unknown ListExecInstType: " <> show v)

-- FieldSpec {fieldNumber = 434, fieldName = "CxlRejResponseTo", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ORDER_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ORDER_CANCEL"}]}
data CxlRejResponseTo
  = CxlRejResponseTo_ORDER_CANCEL_REQUEST
  | CxlRejResponseTo_ORDER_CANCEL
  deriving stock (Show, Eq, Generic)

instance Validity CxlRejResponseTo

instance IsField CxlRejResponseTo where
  fieldTag Proxy = 434
  fieldIsData Proxy = False
  fieldToValue = \case
    CxlRejResponseTo_ORDER_CANCEL_REQUEST -> "1"
    CxlRejResponseTo_ORDER_CANCEL -> "2"
  fieldFromValue = \case
    "1" -> Right CxlRejResponseTo_ORDER_CANCEL_REQUEST
    "2" -> Right CxlRejResponseTo_ORDER_CANCEL
    v -> Left ("Unknown CxlRejResponseTo: " <> show v)

-- FieldSpec {fieldNumber = 435, fieldName = "UnderlyingCouponRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype UnderlyingCouponRate = UnderlyingCouponRate {unUnderlyingCouponRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCouponRate

instance IsField UnderlyingCouponRate where
  fieldTag Proxy = 435
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCouponRate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCouponRate)

-- FieldSpec {fieldNumber = 436, fieldName = "UnderlyingContractMultiplier", fieldType = FieldTypeFloat, fieldValues = []}
newtype UnderlyingContractMultiplier = UnderlyingContractMultiplier {unUnderlyingContractMultiplier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingContractMultiplier

instance IsField UnderlyingContractMultiplier where
  fieldTag Proxy = 436
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingContractMultiplier
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingContractMultiplier)

-- FieldSpec {fieldNumber = 437, fieldName = "ContraTradeQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype ContraTradeQty = ContraTradeQty {unContraTradeQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraTradeQty

instance IsField ContraTradeQty where
  fieldTag Proxy = 437
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraTradeQty
  fieldFromValue = fromValue >=> (prettyValidate . ContraTradeQty)

-- FieldSpec {fieldNumber = 438, fieldName = "ContraTradeTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype ContraTradeTime = ContraTradeTime {unContraTradeTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraTradeTime

instance IsField ContraTradeTime where
  fieldTag Proxy = 438
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraTradeTime
  fieldFromValue = fromValue >=> (prettyValidate . ContraTradeTime)

-- FieldSpec {fieldNumber = 441, fieldName = "LiquidityNumSecurities", fieldType = FieldTypeInt, fieldValues = []}
newtype LiquidityNumSecurities = LiquidityNumSecurities {unLiquidityNumSecurities :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityNumSecurities

instance IsField LiquidityNumSecurities where
  fieldTag Proxy = 441
  fieldIsData Proxy = False
  fieldToValue = toValue . unLiquidityNumSecurities
  fieldFromValue = fromValue >=> (prettyValidate . LiquidityNumSecurities)

-- FieldSpec {fieldNumber = 442, fieldName = "MultiLegReportingType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SINGLE_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MULTI_LEG_SECURITY"}]}
data MultiLegReportingType
  = MultiLegReportingType_SINGLE_SECURITY
  | MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY
  | MultiLegReportingType_MULTI_LEG_SECURITY
  deriving stock (Show, Eq, Generic)

instance Validity MultiLegReportingType

instance IsField MultiLegReportingType where
  fieldTag Proxy = 442
  fieldIsData Proxy = False
  fieldToValue = \case
    MultiLegReportingType_SINGLE_SECURITY -> "1"
    MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY -> "2"
    MultiLegReportingType_MULTI_LEG_SECURITY -> "3"
  fieldFromValue = \case
    "1" -> Right MultiLegReportingType_SINGLE_SECURITY
    "2" -> Right MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY
    "3" -> Right MultiLegReportingType_MULTI_LEG_SECURITY
    v -> Left ("Unknown MultiLegReportingType: " <> show v)

-- FieldSpec {fieldNumber = 443, fieldName = "StrikeTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype StrikeTime = StrikeTime {unStrikeTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StrikeTime

instance IsField StrikeTime where
  fieldTag Proxy = 443
  fieldIsData Proxy = False
  fieldToValue = toValue . unStrikeTime
  fieldFromValue = fromValue >=> (prettyValidate . StrikeTime)

-- FieldSpec {fieldNumber = 444, fieldName = "ListStatusText", fieldType = FieldTypeString, fieldValues = []}
newtype ListStatusText = ListStatusText {unListStatusText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListStatusText

instance IsField ListStatusText where
  fieldTag Proxy = 444
  fieldIsData Proxy = False
  fieldToValue = toValue . unListStatusText
  fieldFromValue = fromValue >=> (prettyValidate . ListStatusText)

-- FieldSpec {fieldNumber = 445, fieldName = "EncodedListStatusTextLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedListStatusTextLen = EncodedListStatusTextLen {unEncodedListStatusTextLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedListStatusTextLen

instance IsField EncodedListStatusTextLen where
  fieldTag Proxy = 445
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedListStatusTextLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedListStatusTextLen)

-- FieldSpec {fieldNumber = 446, fieldName = "EncodedListStatusText", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedListStatusText = EncodedListStatusText {unEncodedListStatusText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedListStatusText

instance IsField EncodedListStatusText where
  fieldTag Proxy = 446
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedListStatusText
  fieldFromValue = fromValue >=> (prettyValidate . EncodedListStatusText)

-- FieldSpec {fieldNumber = 447, fieldName = "PartyIDSource", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "BIC"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "GENERAL_IDENTIFIER"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "PROPRIETARY"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "ISO_COUNTRY_CODE"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "SETTLEMENT_ENTITY_LOCATION"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "MIC"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "CSD_PARTICIPANT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "KOREAN_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TAIWANESE_FOREIGN_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TAIWANESE_TRADING_ACCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "MALAYSIAN_CENTRAL_DEPOSITORY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CHINESE_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "US_SOCIAL_SECURITY_NUMBER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "US_EMPLOYER_OR_TAX_ID_NUMBER"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "AUSTRALIAN_BUSINESS_NUMBER"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "AUSTRALIAN_TAX_FILE_NUMBER"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "ISITC_ACRONYM"}]}
data PartyIDSource
  = PartyIDSource_BIC
  | PartyIDSource_GENERAL_IDENTIFIER
  | PartyIDSource_PROPRIETARY
  | PartyIDSource_ISO_COUNTRY_CODE
  | PartyIDSource_SETTLEMENT_ENTITY_LOCATION
  | PartyIDSource_MIC
  | PartyIDSource_CSD_PARTICIPANT
  | PartyIDSource_KOREAN_INVESTOR_ID
  | PartyIDSource_TAIWANESE_FOREIGN_INVESTOR_ID
  | PartyIDSource_TAIWANESE_TRADING_ACCT
  | PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY
  | PartyIDSource_CHINESE_INVESTOR_ID
  | PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER
  | PartyIDSource_US_SOCIAL_SECURITY_NUMBER
  | PartyIDSource_US_EMPLOYER_OR_TAX_ID_NUMBER
  | PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER
  | PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER
  | PartyIDSource_ISITC_ACRONYM
  deriving stock (Show, Eq, Generic)

instance Validity PartyIDSource

instance IsField PartyIDSource where
  fieldTag Proxy = 447
  fieldIsData Proxy = False
  fieldToValue = \case
    PartyIDSource_BIC -> "B"
    PartyIDSource_GENERAL_IDENTIFIER -> "C"
    PartyIDSource_PROPRIETARY -> "D"
    PartyIDSource_ISO_COUNTRY_CODE -> "E"
    PartyIDSource_SETTLEMENT_ENTITY_LOCATION -> "F"
    PartyIDSource_MIC -> "G"
    PartyIDSource_CSD_PARTICIPANT -> "H"
    PartyIDSource_KOREAN_INVESTOR_ID -> "1"
    PartyIDSource_TAIWANESE_FOREIGN_INVESTOR_ID -> "2"
    PartyIDSource_TAIWANESE_TRADING_ACCT -> "3"
    PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY -> "4"
    PartyIDSource_CHINESE_INVESTOR_ID -> "5"
    PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER -> "6"
    PartyIDSource_US_SOCIAL_SECURITY_NUMBER -> "7"
    PartyIDSource_US_EMPLOYER_OR_TAX_ID_NUMBER -> "8"
    PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER -> "9"
    PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER -> "A"
    PartyIDSource_ISITC_ACRONYM -> "I"
  fieldFromValue = \case
    "B" -> Right PartyIDSource_BIC
    "C" -> Right PartyIDSource_GENERAL_IDENTIFIER
    "D" -> Right PartyIDSource_PROPRIETARY
    "E" -> Right PartyIDSource_ISO_COUNTRY_CODE
    "F" -> Right PartyIDSource_SETTLEMENT_ENTITY_LOCATION
    "G" -> Right PartyIDSource_MIC
    "H" -> Right PartyIDSource_CSD_PARTICIPANT
    "1" -> Right PartyIDSource_KOREAN_INVESTOR_ID
    "2" -> Right PartyIDSource_TAIWANESE_FOREIGN_INVESTOR_ID
    "3" -> Right PartyIDSource_TAIWANESE_TRADING_ACCT
    "4" -> Right PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY
    "5" -> Right PartyIDSource_CHINESE_INVESTOR_ID
    "6" -> Right PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER
    "7" -> Right PartyIDSource_US_SOCIAL_SECURITY_NUMBER
    "8" -> Right PartyIDSource_US_EMPLOYER_OR_TAX_ID_NUMBER
    "9" -> Right PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER
    "A" -> Right PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER
    "I" -> Right PartyIDSource_ISITC_ACRONYM
    v -> Left ("Unknown PartyIDSource: " <> show v)

-- FieldSpec {fieldNumber = 448, fieldName = "PartyID", fieldType = FieldTypeString, fieldValues = []}
newtype PartyID = PartyID {unPartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PartyID

instance IsField PartyID where
  fieldTag Proxy = 448
  fieldIsData Proxy = False
  fieldToValue = toValue . unPartyID
  fieldFromValue = fromValue >=> (prettyValidate . PartyID)

-- FieldSpec {fieldNumber = 451, fieldName = "NetChgPrevDay", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype NetChgPrevDay = NetChgPrevDay {unNetChgPrevDay :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetChgPrevDay

instance IsField NetChgPrevDay where
  fieldTag Proxy = 451
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetChgPrevDay
  fieldFromValue = fromValue >=> (prettyValidate . NetChgPrevDay)

-- FieldSpec {fieldNumber = 452, fieldName = "PartyRole", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXECUTING_FIRM"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BROKER_OF_CREDIT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CLIENT_ID"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CLEARING_FIRM"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "INTRODUCING_FIRM"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "ENTERING_FIRM"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LOCATE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "FUND_MANAGER_CLIENT_ID"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "SETTLEMENT_LOCATION"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "ORDER_ORIGINATION_TRADER"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "EXECUTING_TRADER"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "ORDER_ORIGINATION_FIRM"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "GIVEUP_CLEARING_FIRM"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "CORRESPONDANT_CLEARING_FIRM"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "EXECUTING_SYSTEM"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "CONTRA_FIRM"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "CONTRA_CLEARING_FIRM"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "SPONSORING_FIRM"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "UNDERLYING_CONTRA_FIRM"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "CLEARING_ORGANIZATION"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "EXCHANGE"},FieldValueSpec {fieldValueEnum = "24", fieldValueDescription = "CUSTOMER_ACCOUNT"},FieldValueSpec {fieldValueEnum = "25", fieldValueDescription = "CORRESPONDENT_CLEARING_ORGANIZATION"},FieldValueSpec {fieldValueEnum = "26", fieldValueDescription = "CORRESPONDENT_BROKER"},FieldValueSpec {fieldValueEnum = "27", fieldValueDescription = "BUYER"},FieldValueSpec {fieldValueEnum = "28", fieldValueDescription = "CUSTODIAN"},FieldValueSpec {fieldValueEnum = "29", fieldValueDescription = "INTERMEDIARY"},FieldValueSpec {fieldValueEnum = "30", fieldValueDescription = "AGENT"},FieldValueSpec {fieldValueEnum = "31", fieldValueDescription = "SUB_CUSTODIAN"},FieldValueSpec {fieldValueEnum = "32", fieldValueDescription = "BENEFICIARY"},FieldValueSpec {fieldValueEnum = "33", fieldValueDescription = "INTERESTED_PARTY"},FieldValueSpec {fieldValueEnum = "34", fieldValueDescription = "REGULATORY_BODY"},FieldValueSpec {fieldValueEnum = "35", fieldValueDescription = "LIQUIDITY_PROVIDER"},FieldValueSpec {fieldValueEnum = "36", fieldValueDescription = "ENTERING_TRADER"},FieldValueSpec {fieldValueEnum = "37", fieldValueDescription = "CONTRA_TRADER"},FieldValueSpec {fieldValueEnum = "38", fieldValueDescription = "POSITION_ACCOUNT"}]}
data PartyRole
  = PartyRole_EXECUTING_FIRM
  | PartyRole_BROKER_OF_CREDIT
  | PartyRole_CLIENT_ID
  | PartyRole_CLEARING_FIRM
  | PartyRole_INVESTOR_ID
  | PartyRole_INTRODUCING_FIRM
  | PartyRole_ENTERING_FIRM
  | PartyRole_LOCATE
  | PartyRole_FUND_MANAGER_CLIENT_ID
  | PartyRole_SETTLEMENT_LOCATION
  | PartyRole_ORDER_ORIGINATION_TRADER
  | PartyRole_EXECUTING_TRADER
  | PartyRole_ORDER_ORIGINATION_FIRM
  | PartyRole_GIVEUP_CLEARING_FIRM
  | PartyRole_CORRESPONDANT_CLEARING_FIRM
  | PartyRole_EXECUTING_SYSTEM
  | PartyRole_CONTRA_FIRM
  | PartyRole_CONTRA_CLEARING_FIRM
  | PartyRole_SPONSORING_FIRM
  | PartyRole_UNDERLYING_CONTRA_FIRM
  | PartyRole_CLEARING_ORGANIZATION
  | PartyRole_EXCHANGE
  | PartyRole_CUSTOMER_ACCOUNT
  | PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION
  | PartyRole_CORRESPONDENT_BROKER
  | PartyRole_BUYER
  | PartyRole_CUSTODIAN
  | PartyRole_INTERMEDIARY
  | PartyRole_AGENT
  | PartyRole_SUB_CUSTODIAN
  | PartyRole_BENEFICIARY
  | PartyRole_INTERESTED_PARTY
  | PartyRole_REGULATORY_BODY
  | PartyRole_LIQUIDITY_PROVIDER
  | PartyRole_ENTERING_TRADER
  | PartyRole_CONTRA_TRADER
  | PartyRole_POSITION_ACCOUNT
  deriving stock (Show, Eq, Generic)

instance Validity PartyRole

instance IsField PartyRole where
  fieldTag Proxy = 452
  fieldIsData Proxy = False
  fieldToValue = \case
    PartyRole_EXECUTING_FIRM -> "1"
    PartyRole_BROKER_OF_CREDIT -> "2"
    PartyRole_CLIENT_ID -> "3"
    PartyRole_CLEARING_FIRM -> "4"
    PartyRole_INVESTOR_ID -> "5"
    PartyRole_INTRODUCING_FIRM -> "6"
    PartyRole_ENTERING_FIRM -> "7"
    PartyRole_LOCATE -> "8"
    PartyRole_FUND_MANAGER_CLIENT_ID -> "9"
    PartyRole_SETTLEMENT_LOCATION -> "10"
    PartyRole_ORDER_ORIGINATION_TRADER -> "11"
    PartyRole_EXECUTING_TRADER -> "12"
    PartyRole_ORDER_ORIGINATION_FIRM -> "13"
    PartyRole_GIVEUP_CLEARING_FIRM -> "14"
    PartyRole_CORRESPONDANT_CLEARING_FIRM -> "15"
    PartyRole_EXECUTING_SYSTEM -> "16"
    PartyRole_CONTRA_FIRM -> "17"
    PartyRole_CONTRA_CLEARING_FIRM -> "18"
    PartyRole_SPONSORING_FIRM -> "19"
    PartyRole_UNDERLYING_CONTRA_FIRM -> "20"
    PartyRole_CLEARING_ORGANIZATION -> "21"
    PartyRole_EXCHANGE -> "22"
    PartyRole_CUSTOMER_ACCOUNT -> "24"
    PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION -> "25"
    PartyRole_CORRESPONDENT_BROKER -> "26"
    PartyRole_BUYER -> "27"
    PartyRole_CUSTODIAN -> "28"
    PartyRole_INTERMEDIARY -> "29"
    PartyRole_AGENT -> "30"
    PartyRole_SUB_CUSTODIAN -> "31"
    PartyRole_BENEFICIARY -> "32"
    PartyRole_INTERESTED_PARTY -> "33"
    PartyRole_REGULATORY_BODY -> "34"
    PartyRole_LIQUIDITY_PROVIDER -> "35"
    PartyRole_ENTERING_TRADER -> "36"
    PartyRole_CONTRA_TRADER -> "37"
    PartyRole_POSITION_ACCOUNT -> "38"
  fieldFromValue = \case
    "1" -> Right PartyRole_EXECUTING_FIRM
    "2" -> Right PartyRole_BROKER_OF_CREDIT
    "3" -> Right PartyRole_CLIENT_ID
    "4" -> Right PartyRole_CLEARING_FIRM
    "5" -> Right PartyRole_INVESTOR_ID
    "6" -> Right PartyRole_INTRODUCING_FIRM
    "7" -> Right PartyRole_ENTERING_FIRM
    "8" -> Right PartyRole_LOCATE
    "9" -> Right PartyRole_FUND_MANAGER_CLIENT_ID
    "10" -> Right PartyRole_SETTLEMENT_LOCATION
    "11" -> Right PartyRole_ORDER_ORIGINATION_TRADER
    "12" -> Right PartyRole_EXECUTING_TRADER
    "13" -> Right PartyRole_ORDER_ORIGINATION_FIRM
    "14" -> Right PartyRole_GIVEUP_CLEARING_FIRM
    "15" -> Right PartyRole_CORRESPONDANT_CLEARING_FIRM
    "16" -> Right PartyRole_EXECUTING_SYSTEM
    "17" -> Right PartyRole_CONTRA_FIRM
    "18" -> Right PartyRole_CONTRA_CLEARING_FIRM
    "19" -> Right PartyRole_SPONSORING_FIRM
    "20" -> Right PartyRole_UNDERLYING_CONTRA_FIRM
    "21" -> Right PartyRole_CLEARING_ORGANIZATION
    "22" -> Right PartyRole_EXCHANGE
    "24" -> Right PartyRole_CUSTOMER_ACCOUNT
    "25" -> Right PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION
    "26" -> Right PartyRole_CORRESPONDENT_BROKER
    "27" -> Right PartyRole_BUYER
    "28" -> Right PartyRole_CUSTODIAN
    "29" -> Right PartyRole_INTERMEDIARY
    "30" -> Right PartyRole_AGENT
    "31" -> Right PartyRole_SUB_CUSTODIAN
    "32" -> Right PartyRole_BENEFICIARY
    "33" -> Right PartyRole_INTERESTED_PARTY
    "34" -> Right PartyRole_REGULATORY_BODY
    "35" -> Right PartyRole_LIQUIDITY_PROVIDER
    "36" -> Right PartyRole_ENTERING_TRADER
    "37" -> Right PartyRole_CONTRA_TRADER
    "38" -> Right PartyRole_POSITION_ACCOUNT
    v -> Left ("Unknown PartyRole: " <> show v)

-- FieldSpec {fieldNumber = 453, fieldName = "NoPartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoPartyIDs = NoPartyIDs {unNoPartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoPartyIDs

instance IsField NoPartyIDs where
  fieldTag Proxy = 453
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoPartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoPartyIDs)

-- FieldSpec {fieldNumber = 454, fieldName = "NoSecurityAltID", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSecurityAltID = NoSecurityAltID {unNoSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSecurityAltID

instance IsField NoSecurityAltID where
  fieldTag Proxy = 454
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . NoSecurityAltID)

-- FieldSpec {fieldNumber = 455, fieldName = "SecurityAltID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityAltID = SecurityAltID {unSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityAltID

instance IsField SecurityAltID where
  fieldTag Proxy = 455
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityAltID)

-- FieldSpec {fieldNumber = 456, fieldName = "SecurityAltIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityAltIDSource = SecurityAltIDSource {unSecurityAltIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityAltIDSource

instance IsField SecurityAltIDSource where
  fieldTag Proxy = 456
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityAltIDSource
  fieldFromValue = fromValue >=> (prettyValidate . SecurityAltIDSource)

-- FieldSpec {fieldNumber = 457, fieldName = "NoUnderlyingSecurityAltID", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoUnderlyingSecurityAltID = NoUnderlyingSecurityAltID {unNoUnderlyingSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoUnderlyingSecurityAltID

instance IsField NoUnderlyingSecurityAltID where
  fieldTag Proxy = 457
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoUnderlyingSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . NoUnderlyingSecurityAltID)

-- FieldSpec {fieldNumber = 458, fieldName = "UnderlyingSecurityAltID", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityAltID = UnderlyingSecurityAltID {unUnderlyingSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityAltID

instance IsField UnderlyingSecurityAltID where
  fieldTag Proxy = 458
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityAltID)

-- FieldSpec {fieldNumber = 459, fieldName = "UnderlyingSecurityAltIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityAltIDSource = UnderlyingSecurityAltIDSource {unUnderlyingSecurityAltIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityAltIDSource

instance IsField UnderlyingSecurityAltIDSource where
  fieldTag Proxy = 459
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityAltIDSource
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityAltIDSource)

-- FieldSpec {fieldNumber = 460, fieldName = "Product", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "AGENCY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COMMODITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CORPORATE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CURRENCY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "EQUITY"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "GOVERNMENT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "INDEX"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LOAN"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "MONEYMARKET"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "MORTGAGE"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "MUNICIPAL"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "OTHER"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "FINANCING"}]}
data Product
  = Product_AGENCY
  | Product_COMMODITY
  | Product_CORPORATE
  | Product_CURRENCY
  | Product_EQUITY
  | Product_GOVERNMENT
  | Product_INDEX
  | Product_LOAN
  | Product_MONEYMARKET
  | Product_MORTGAGE
  | Product_MUNICIPAL
  | Product_OTHER
  | Product_FINANCING
  deriving stock (Show, Eq, Generic)

instance Validity Product

instance IsField Product where
  fieldTag Proxy = 460
  fieldIsData Proxy = False
  fieldToValue = \case
    Product_AGENCY -> "1"
    Product_COMMODITY -> "2"
    Product_CORPORATE -> "3"
    Product_CURRENCY -> "4"
    Product_EQUITY -> "5"
    Product_GOVERNMENT -> "6"
    Product_INDEX -> "7"
    Product_LOAN -> "8"
    Product_MONEYMARKET -> "9"
    Product_MORTGAGE -> "10"
    Product_MUNICIPAL -> "11"
    Product_OTHER -> "12"
    Product_FINANCING -> "13"
  fieldFromValue = \case
    "1" -> Right Product_AGENCY
    "2" -> Right Product_COMMODITY
    "3" -> Right Product_CORPORATE
    "4" -> Right Product_CURRENCY
    "5" -> Right Product_EQUITY
    "6" -> Right Product_GOVERNMENT
    "7" -> Right Product_INDEX
    "8" -> Right Product_LOAN
    "9" -> Right Product_MONEYMARKET
    "10" -> Right Product_MORTGAGE
    "11" -> Right Product_MUNICIPAL
    "12" -> Right Product_OTHER
    "13" -> Right Product_FINANCING
    v -> Left ("Unknown Product: " <> show v)

-- FieldSpec {fieldNumber = 461, fieldName = "CFICode", fieldType = FieldTypeString, fieldValues = []}
newtype CFICode = CFICode {unCFICode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CFICode

instance IsField CFICode where
  fieldTag Proxy = 461
  fieldIsData Proxy = False
  fieldToValue = toValue . unCFICode
  fieldFromValue = fromValue >=> (prettyValidate . CFICode)

-- FieldSpec {fieldNumber = 462, fieldName = "UnderlyingProduct", fieldType = FieldTypeInt, fieldValues = []}
newtype UnderlyingProduct = UnderlyingProduct {unUnderlyingProduct :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingProduct

instance IsField UnderlyingProduct where
  fieldTag Proxy = 462
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingProduct
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingProduct)

-- FieldSpec {fieldNumber = 463, fieldName = "UnderlyingCFICode", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingCFICode = UnderlyingCFICode {unUnderlyingCFICode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCFICode

instance IsField UnderlyingCFICode where
  fieldTag Proxy = 463
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCFICode
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCFICode)

-- FieldSpec {fieldNumber = 464, fieldName = "TestMessageIndicator", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data TestMessageIndicator
  = TestMessageIndicator_YES
  | TestMessageIndicator_NO
  deriving stock (Show, Eq, Generic)

instance Validity TestMessageIndicator

instance IsField TestMessageIndicator where
  fieldTag Proxy = 464
  fieldIsData Proxy = False
  fieldToValue = \case
    TestMessageIndicator_YES -> "Y"
    TestMessageIndicator_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right TestMessageIndicator_YES
    "N" -> Right TestMessageIndicator_NO
    v -> Left ("Unknown TestMessageIndicator: " <> show v)

-- FieldSpec {fieldNumber = 466, fieldName = "BookingRefID", fieldType = FieldTypeString, fieldValues = []}
newtype BookingRefID = BookingRefID {unBookingRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BookingRefID

instance IsField BookingRefID where
  fieldTag Proxy = 466
  fieldIsData Proxy = False
  fieldToValue = toValue . unBookingRefID
  fieldFromValue = fromValue >=> (prettyValidate . BookingRefID)

-- FieldSpec {fieldNumber = 467, fieldName = "IndividualAllocID", fieldType = FieldTypeString, fieldValues = []}
newtype IndividualAllocID = IndividualAllocID {unIndividualAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IndividualAllocID

instance IsField IndividualAllocID where
  fieldTag Proxy = 467
  fieldIsData Proxy = False
  fieldToValue = toValue . unIndividualAllocID
  fieldFromValue = fromValue >=> (prettyValidate . IndividualAllocID)

-- FieldSpec {fieldNumber = 468, fieldName = "RoundingDirection", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ROUND_TO_NEAREST"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ROUND_DOWN"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ROUND_UP"}]}
data RoundingDirection
  = RoundingDirection_ROUND_TO_NEAREST
  | RoundingDirection_ROUND_DOWN
  | RoundingDirection_ROUND_UP
  deriving stock (Show, Eq, Generic)

instance Validity RoundingDirection

instance IsField RoundingDirection where
  fieldTag Proxy = 468
  fieldIsData Proxy = False
  fieldToValue = \case
    RoundingDirection_ROUND_TO_NEAREST -> "0"
    RoundingDirection_ROUND_DOWN -> "1"
    RoundingDirection_ROUND_UP -> "2"
  fieldFromValue = \case
    "0" -> Right RoundingDirection_ROUND_TO_NEAREST
    "1" -> Right RoundingDirection_ROUND_DOWN
    "2" -> Right RoundingDirection_ROUND_UP
    v -> Left ("Unknown RoundingDirection: " <> show v)

-- FieldSpec {fieldNumber = 469, fieldName = "RoundingModulus", fieldType = FieldTypeFloat, fieldValues = []}
newtype RoundingModulus = RoundingModulus {unRoundingModulus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RoundingModulus

instance IsField RoundingModulus where
  fieldTag Proxy = 469
  fieldIsData Proxy = False
  fieldToValue = toValue . unRoundingModulus
  fieldFromValue = fromValue >=> (prettyValidate . RoundingModulus)

-- FieldSpec {fieldNumber = 470, fieldName = "CountryOfIssue", fieldType = FieldTypeCountry, fieldValues = []}
newtype CountryOfIssue = CountryOfIssue {unCountryOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CountryOfIssue

instance IsField CountryOfIssue where
  fieldTag Proxy = 470
  fieldIsData Proxy = False
  fieldToValue = toValue . unCountryOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . CountryOfIssue)

-- FieldSpec {fieldNumber = 471, fieldName = "StateOrProvinceOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype StateOrProvinceOfIssue = StateOrProvinceOfIssue {unStateOrProvinceOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StateOrProvinceOfIssue

instance IsField StateOrProvinceOfIssue where
  fieldTag Proxy = 471
  fieldIsData Proxy = False
  fieldToValue = toValue . unStateOrProvinceOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . StateOrProvinceOfIssue)

-- FieldSpec {fieldNumber = 472, fieldName = "LocaleOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype LocaleOfIssue = LocaleOfIssue {unLocaleOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LocaleOfIssue

instance IsField LocaleOfIssue where
  fieldTag Proxy = 472
  fieldIsData Proxy = False
  fieldToValue = toValue . unLocaleOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . LocaleOfIssue)

-- FieldSpec {fieldNumber = 473, fieldName = "NoRegistDtls", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoRegistDtls = NoRegistDtls {unNoRegistDtls :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoRegistDtls

instance IsField NoRegistDtls where
  fieldTag Proxy = 473
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoRegistDtls
  fieldFromValue = fromValue >=> (prettyValidate . NoRegistDtls)

-- FieldSpec {fieldNumber = 474, fieldName = "MailingDtls", fieldType = FieldTypeString, fieldValues = []}
newtype MailingDtls = MailingDtls {unMailingDtls :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MailingDtls

instance IsField MailingDtls where
  fieldTag Proxy = 474
  fieldIsData Proxy = False
  fieldToValue = toValue . unMailingDtls
  fieldFromValue = fromValue >=> (prettyValidate . MailingDtls)

-- FieldSpec {fieldNumber = 475, fieldName = "InvestorCountryOfResidence", fieldType = FieldTypeCountry, fieldValues = []}
newtype InvestorCountryOfResidence = InvestorCountryOfResidence {unInvestorCountryOfResidence :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InvestorCountryOfResidence

instance IsField InvestorCountryOfResidence where
  fieldTag Proxy = 475
  fieldIsData Proxy = False
  fieldToValue = toValue . unInvestorCountryOfResidence
  fieldFromValue = fromValue >=> (prettyValidate . InvestorCountryOfResidence)

-- FieldSpec {fieldNumber = 476, fieldName = "PaymentRef", fieldType = FieldTypeString, fieldValues = []}
newtype PaymentRef = PaymentRef {unPaymentRef :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PaymentRef

instance IsField PaymentRef where
  fieldTag Proxy = 476
  fieldIsData Proxy = False
  fieldToValue = toValue . unPaymentRef
  fieldFromValue = fromValue >=> (prettyValidate . PaymentRef)

-- FieldSpec {fieldNumber = 477, fieldName = "DistribPaymentMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CREST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NSCC"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EUROCLEAR"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CLEARSTREAM"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CHEQUE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "TELEGRAPHIC_TRANSFER"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "FED_WIRE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "DIRECT_CREDIT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "ACH_CREDIT"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "BPAY"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "HIGH_VALUE_CLEARING_SYSTEM_HVACS"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "REINVEST_IN_FUND"}]}
data DistribPaymentMethod
  = DistribPaymentMethod_CREST
  | DistribPaymentMethod_NSCC
  | DistribPaymentMethod_EUROCLEAR
  | DistribPaymentMethod_CLEARSTREAM
  | DistribPaymentMethod_CHEQUE
  | DistribPaymentMethod_TELEGRAPHIC_TRANSFER
  | DistribPaymentMethod_FED_WIRE
  | DistribPaymentMethod_DIRECT_CREDIT
  | DistribPaymentMethod_ACH_CREDIT
  | DistribPaymentMethod_BPAY
  | DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM_HVACS
  | DistribPaymentMethod_REINVEST_IN_FUND
  deriving stock (Show, Eq, Generic)

instance Validity DistribPaymentMethod

instance IsField DistribPaymentMethod where
  fieldTag Proxy = 477
  fieldIsData Proxy = False
  fieldToValue = \case
    DistribPaymentMethod_CREST -> "1"
    DistribPaymentMethod_NSCC -> "2"
    DistribPaymentMethod_EUROCLEAR -> "3"
    DistribPaymentMethod_CLEARSTREAM -> "4"
    DistribPaymentMethod_CHEQUE -> "5"
    DistribPaymentMethod_TELEGRAPHIC_TRANSFER -> "6"
    DistribPaymentMethod_FED_WIRE -> "7"
    DistribPaymentMethod_DIRECT_CREDIT -> "8"
    DistribPaymentMethod_ACH_CREDIT -> "9"
    DistribPaymentMethod_BPAY -> "10"
    DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM_HVACS -> "11"
    DistribPaymentMethod_REINVEST_IN_FUND -> "12"
  fieldFromValue = \case
    "1" -> Right DistribPaymentMethod_CREST
    "2" -> Right DistribPaymentMethod_NSCC
    "3" -> Right DistribPaymentMethod_EUROCLEAR
    "4" -> Right DistribPaymentMethod_CLEARSTREAM
    "5" -> Right DistribPaymentMethod_CHEQUE
    "6" -> Right DistribPaymentMethod_TELEGRAPHIC_TRANSFER
    "7" -> Right DistribPaymentMethod_FED_WIRE
    "8" -> Right DistribPaymentMethod_DIRECT_CREDIT
    "9" -> Right DistribPaymentMethod_ACH_CREDIT
    "10" -> Right DistribPaymentMethod_BPAY
    "11" -> Right DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM_HVACS
    "12" -> Right DistribPaymentMethod_REINVEST_IN_FUND
    v -> Left ("Unknown DistribPaymentMethod: " <> show v)

-- FieldSpec {fieldNumber = 478, fieldName = "CashDistribCurr", fieldType = FieldTypeCurrency, fieldValues = []}
newtype CashDistribCurr = CashDistribCurr {unCashDistribCurr :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribCurr

instance IsField CashDistribCurr where
  fieldTag Proxy = 478
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribCurr
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribCurr)

-- FieldSpec {fieldNumber = 479, fieldName = "CommCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype CommCurrency = CommCurrency {unCommCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CommCurrency

instance IsField CommCurrency where
  fieldTag Proxy = 479
  fieldIsData Proxy = False
  fieldToValue = toValue . unCommCurrency
  fieldFromValue = fromValue >=> (prettyValidate . CommCurrency)

-- FieldSpec {fieldNumber = 480, fieldName = "CancellationRights", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO_EXECUTION_ONLY"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "NO_WAIVER_AGREEMENT"},FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "NO_INSTITUTIONAL"}]}
data CancellationRights
  = CancellationRights_YES
  | CancellationRights_NO_EXECUTION_ONLY
  | CancellationRights_NO_WAIVER_AGREEMENT
  | CancellationRights_NO_INSTITUTIONAL
  deriving stock (Show, Eq, Generic)

instance Validity CancellationRights

instance IsField CancellationRights where
  fieldTag Proxy = 480
  fieldIsData Proxy = False
  fieldToValue = \case
    CancellationRights_YES -> "Y"
    CancellationRights_NO_EXECUTION_ONLY -> "N"
    CancellationRights_NO_WAIVER_AGREEMENT -> "M"
    CancellationRights_NO_INSTITUTIONAL -> "O"
  fieldFromValue = \case
    "Y" -> Right CancellationRights_YES
    "N" -> Right CancellationRights_NO_EXECUTION_ONLY
    "M" -> Right CancellationRights_NO_WAIVER_AGREEMENT
    "O" -> Right CancellationRights_NO_INSTITUTIONAL
    v -> Left ("Unknown CancellationRights: " <> show v)

-- FieldSpec {fieldNumber = 481, fieldName = "MoneyLaunderingStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "PASSED"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NOT_CHECKED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXEMPT_BELOW_LIMIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXEMPT_MONEY_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EXEMPT_AUTHORISED"}]}
data MoneyLaunderingStatus
  = MoneyLaunderingStatus_PASSED
  | MoneyLaunderingStatus_NOT_CHECKED
  | MoneyLaunderingStatus_EXEMPT_BELOW_LIMIT
  | MoneyLaunderingStatus_EXEMPT_MONEY_TYPE
  | MoneyLaunderingStatus_EXEMPT_AUTHORISED
  deriving stock (Show, Eq, Generic)

instance Validity MoneyLaunderingStatus

instance IsField MoneyLaunderingStatus where
  fieldTag Proxy = 481
  fieldIsData Proxy = False
  fieldToValue = \case
    MoneyLaunderingStatus_PASSED -> "Y"
    MoneyLaunderingStatus_NOT_CHECKED -> "N"
    MoneyLaunderingStatus_EXEMPT_BELOW_LIMIT -> "1"
    MoneyLaunderingStatus_EXEMPT_MONEY_TYPE -> "2"
    MoneyLaunderingStatus_EXEMPT_AUTHORISED -> "3"
  fieldFromValue = \case
    "Y" -> Right MoneyLaunderingStatus_PASSED
    "N" -> Right MoneyLaunderingStatus_NOT_CHECKED
    "1" -> Right MoneyLaunderingStatus_EXEMPT_BELOW_LIMIT
    "2" -> Right MoneyLaunderingStatus_EXEMPT_MONEY_TYPE
    "3" -> Right MoneyLaunderingStatus_EXEMPT_AUTHORISED
    v -> Left ("Unknown MoneyLaunderingStatus: " <> show v)

-- FieldSpec {fieldNumber = 482, fieldName = "MailingInst", fieldType = FieldTypeString, fieldValues = []}
newtype MailingInst = MailingInst {unMailingInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MailingInst

instance IsField MailingInst where
  fieldTag Proxy = 482
  fieldIsData Proxy = False
  fieldToValue = toValue . unMailingInst
  fieldFromValue = fromValue >=> (prettyValidate . MailingInst)

-- FieldSpec {fieldNumber = 483, fieldName = "TransBkdTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TransBkdTime = TransBkdTime {unTransBkdTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TransBkdTime

instance IsField TransBkdTime where
  fieldTag Proxy = 483
  fieldIsData Proxy = False
  fieldToValue = toValue . unTransBkdTime
  fieldFromValue = fromValue >=> (prettyValidate . TransBkdTime)

-- FieldSpec {fieldNumber = 484, fieldName = "ExecPriceType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "BID_PRICE"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CREATION_PRICE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT"},FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "OFFER_PRICE"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SINGLE_PRICE"}]}
data ExecPriceType
  = ExecPriceType_BID_PRICE
  | ExecPriceType_CREATION_PRICE
  | ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT
  | ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT
  | ExecPriceType_OFFER_PRICE
  | ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT
  | ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT
  | ExecPriceType_SINGLE_PRICE
  deriving stock (Show, Eq, Generic)

instance Validity ExecPriceType

instance IsField ExecPriceType where
  fieldTag Proxy = 484
  fieldIsData Proxy = False
  fieldToValue = \case
    ExecPriceType_BID_PRICE -> "B"
    ExecPriceType_CREATION_PRICE -> "C"
    ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT -> "D"
    ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT -> "E"
    ExecPriceType_OFFER_PRICE -> "O"
    ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT -> "P"
    ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT -> "Q"
    ExecPriceType_SINGLE_PRICE -> "S"
  fieldFromValue = \case
    "B" -> Right ExecPriceType_BID_PRICE
    "C" -> Right ExecPriceType_CREATION_PRICE
    "D" -> Right ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT
    "E" -> Right ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT
    "O" -> Right ExecPriceType_OFFER_PRICE
    "P" -> Right ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT
    "Q" -> Right ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT
    "S" -> Right ExecPriceType_SINGLE_PRICE
    v -> Left ("Unknown ExecPriceType: " <> show v)

-- FieldSpec {fieldNumber = 485, fieldName = "ExecPriceAdjustment", fieldType = FieldTypeFloat, fieldValues = []}
newtype ExecPriceAdjustment = ExecPriceAdjustment {unExecPriceAdjustment :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecPriceAdjustment

instance IsField ExecPriceAdjustment where
  fieldTag Proxy = 485
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecPriceAdjustment
  fieldFromValue = fromValue >=> (prettyValidate . ExecPriceAdjustment)

-- FieldSpec {fieldNumber = 486, fieldName = "DateOfBirth", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype DateOfBirth = DateOfBirth {unDateOfBirth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DateOfBirth

instance IsField DateOfBirth where
  fieldTag Proxy = 486
  fieldIsData Proxy = False
  fieldToValue = toValue . unDateOfBirth
  fieldFromValue = fromValue >=> (prettyValidate . DateOfBirth)

-- FieldSpec {fieldNumber = 487, fieldName = "TradeReportTransType", fieldType = FieldTypeInt, fieldValues = []}
newtype TradeReportTransType = TradeReportTransType {unTradeReportTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportTransType

instance IsField TradeReportTransType where
  fieldTag Proxy = 487
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeReportTransType
  fieldFromValue = fromValue >=> (prettyValidate . TradeReportTransType)

-- FieldSpec {fieldNumber = 488, fieldName = "CardHolderName", fieldType = FieldTypeString, fieldValues = []}
newtype CardHolderName = CardHolderName {unCardHolderName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardHolderName

instance IsField CardHolderName where
  fieldTag Proxy = 488
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardHolderName
  fieldFromValue = fromValue >=> (prettyValidate . CardHolderName)

-- FieldSpec {fieldNumber = 489, fieldName = "CardNumber", fieldType = FieldTypeString, fieldValues = []}
newtype CardNumber = CardNumber {unCardNumber :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardNumber

instance IsField CardNumber where
  fieldTag Proxy = 489
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardNumber
  fieldFromValue = fromValue >=> (prettyValidate . CardNumber)

-- FieldSpec {fieldNumber = 490, fieldName = "CardExpDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype CardExpDate = CardExpDate {unCardExpDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardExpDate

instance IsField CardExpDate where
  fieldTag Proxy = 490
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardExpDate
  fieldFromValue = fromValue >=> (prettyValidate . CardExpDate)

-- FieldSpec {fieldNumber = 491, fieldName = "CardIssNum", fieldType = FieldTypeString, fieldValues = []}
newtype CardIssNum = CardIssNum {unCardIssNum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardIssNum

instance IsField CardIssNum where
  fieldTag Proxy = 491
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardIssNum
  fieldFromValue = fromValue >=> (prettyValidate . CardIssNum)

-- FieldSpec {fieldNumber = 492, fieldName = "PaymentMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CREST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NSCC"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EUROCLEAR"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CLEARSTREAM"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CHEQUE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "TELEGRAPHIC_TRANSFER"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "FED_WIRE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "DEBIT_CARD"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "DIRECT_DEBIT"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "DIRECT_CREDIT"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "CREDIT_CARD"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "ACH_DEBIT"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "ACH_CREDIT"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "BPAY"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "HIGH_VALUE_CLEARING_SYSTEM"}]}
data PaymentMethod
  = PaymentMethod_CREST
  | PaymentMethod_NSCC
  | PaymentMethod_EUROCLEAR
  | PaymentMethod_CLEARSTREAM
  | PaymentMethod_CHEQUE
  | PaymentMethod_TELEGRAPHIC_TRANSFER
  | PaymentMethod_FED_WIRE
  | PaymentMethod_DEBIT_CARD
  | PaymentMethod_DIRECT_DEBIT
  | PaymentMethod_DIRECT_CREDIT
  | PaymentMethod_CREDIT_CARD
  | PaymentMethod_ACH_DEBIT
  | PaymentMethod_ACH_CREDIT
  | PaymentMethod_BPAY
  | PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM
  deriving stock (Show, Eq, Generic)

instance Validity PaymentMethod

instance IsField PaymentMethod where
  fieldTag Proxy = 492
  fieldIsData Proxy = False
  fieldToValue = \case
    PaymentMethod_CREST -> "1"
    PaymentMethod_NSCC -> "2"
    PaymentMethod_EUROCLEAR -> "3"
    PaymentMethod_CLEARSTREAM -> "4"
    PaymentMethod_CHEQUE -> "5"
    PaymentMethod_TELEGRAPHIC_TRANSFER -> "6"
    PaymentMethod_FED_WIRE -> "7"
    PaymentMethod_DEBIT_CARD -> "8"
    PaymentMethod_DIRECT_DEBIT -> "9"
    PaymentMethod_DIRECT_CREDIT -> "10"
    PaymentMethod_CREDIT_CARD -> "11"
    PaymentMethod_ACH_DEBIT -> "12"
    PaymentMethod_ACH_CREDIT -> "13"
    PaymentMethod_BPAY -> "14"
    PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM -> "15"
  fieldFromValue = \case
    "1" -> Right PaymentMethod_CREST
    "2" -> Right PaymentMethod_NSCC
    "3" -> Right PaymentMethod_EUROCLEAR
    "4" -> Right PaymentMethod_CLEARSTREAM
    "5" -> Right PaymentMethod_CHEQUE
    "6" -> Right PaymentMethod_TELEGRAPHIC_TRANSFER
    "7" -> Right PaymentMethod_FED_WIRE
    "8" -> Right PaymentMethod_DEBIT_CARD
    "9" -> Right PaymentMethod_DIRECT_DEBIT
    "10" -> Right PaymentMethod_DIRECT_CREDIT
    "11" -> Right PaymentMethod_CREDIT_CARD
    "12" -> Right PaymentMethod_ACH_DEBIT
    "13" -> Right PaymentMethod_ACH_CREDIT
    "14" -> Right PaymentMethod_BPAY
    "15" -> Right PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM
    v -> Left ("Unknown PaymentMethod: " <> show v)

-- FieldSpec {fieldNumber = 493, fieldName = "RegistAcctType", fieldType = FieldTypeString, fieldValues = []}
newtype RegistAcctType = RegistAcctType {unRegistAcctType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistAcctType

instance IsField RegistAcctType where
  fieldTag Proxy = 493
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistAcctType
  fieldFromValue = fromValue >=> (prettyValidate . RegistAcctType)

-- FieldSpec {fieldNumber = 494, fieldName = "Designation", fieldType = FieldTypeString, fieldValues = []}
newtype Designation = Designation {unDesignation :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Designation

instance IsField Designation where
  fieldTag Proxy = 494
  fieldIsData Proxy = False
  fieldToValue = toValue . unDesignation
  fieldFromValue = fromValue >=> (prettyValidate . Designation)

-- FieldSpec {fieldNumber = 495, fieldName = "TaxAdvantageType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NONE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MAXI_ISA"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TESSA"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MINI_CASH_ISA"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "MINI_STOCKS_AND_SHARES_ISA"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "MINI_INSURANCE_ISA"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CURRENT_YEAR_PAYMENT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "PRIOR_YEAR_PAYMENT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "ASSET_TRANSFER"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "EMPLOYEE_PRIOR_YEAR"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "EMPLOYEE_CURRENT_YEAR"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "EMPLOYER_PRIOR_YEAR"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "EMPLOYER_CURRENT_YEAR"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "NON_FUND_PROTOTYPE_IRA"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "NON_FUND_QUALIFIED_PLAN"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "DEFINED_CONTRIBUTION_PLAN"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "IRA"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "IRA_ROLLOVER"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "KEOGH"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "PROFIT_SHARING_PLAN"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "US401_K"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "SELF_DIRECTED_IRA"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "US403B"},FieldValueSpec {fieldValueEnum = "23", fieldValueDescription = "US457"},FieldValueSpec {fieldValueEnum = "24", fieldValueDescription = "ROTH_IRA_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "25", fieldValueDescription = "ROTH_IRA_NON_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "26", fieldValueDescription = "ROTH_CONVERSION_IRA_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "27", fieldValueDescription = "ROTH_CONVERSION_IRA_NON_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "28", fieldValueDescription = "EDUCATION_IRA_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "29", fieldValueDescription = "EDUCATION_IRA_NON_PROTOTYPE"}]}
data TaxAdvantageType
  = TaxAdvantageType_NONE
  | TaxAdvantageType_MAXI_ISA
  | TaxAdvantageType_TESSA
  | TaxAdvantageType_MINI_CASH_ISA
  | TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA
  | TaxAdvantageType_MINI_INSURANCE_ISA
  | TaxAdvantageType_CURRENT_YEAR_PAYMENT
  | TaxAdvantageType_PRIOR_YEAR_PAYMENT
  | TaxAdvantageType_ASSET_TRANSFER
  | TaxAdvantageType_EMPLOYEE_PRIOR_YEAR
  | TaxAdvantageType_EMPLOYEE_CURRENT_YEAR
  | TaxAdvantageType_EMPLOYER_PRIOR_YEAR
  | TaxAdvantageType_EMPLOYER_CURRENT_YEAR
  | TaxAdvantageType_NON_FUND_PROTOTYPE_IRA
  | TaxAdvantageType_NON_FUND_QUALIFIED_PLAN
  | TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN
  | TaxAdvantageType_IRA
  | TaxAdvantageType_IRA_ROLLOVER
  | TaxAdvantageType_KEOGH
  | TaxAdvantageType_PROFIT_SHARING_PLAN
  | TaxAdvantageType_US401_K
  | TaxAdvantageType_SELF_DIRECTED_IRA
  | TaxAdvantageType_US403B
  | TaxAdvantageType_US457
  | TaxAdvantageType_ROTH_IRA_PROTOTYPE
  | TaxAdvantageType_ROTH_IRA_NON_PROTOTYPE
  | TaxAdvantageType_ROTH_CONVERSION_IRA_PROTOTYPE
  | TaxAdvantageType_ROTH_CONVERSION_IRA_NON_PROTOTYPE
  | TaxAdvantageType_EDUCATION_IRA_PROTOTYPE
  | TaxAdvantageType_EDUCATION_IRA_NON_PROTOTYPE
  deriving stock (Show, Eq, Generic)

instance Validity TaxAdvantageType

instance IsField TaxAdvantageType where
  fieldTag Proxy = 495
  fieldIsData Proxy = False
  fieldToValue = \case
    TaxAdvantageType_NONE -> "0"
    TaxAdvantageType_MAXI_ISA -> "1"
    TaxAdvantageType_TESSA -> "2"
    TaxAdvantageType_MINI_CASH_ISA -> "3"
    TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA -> "4"
    TaxAdvantageType_MINI_INSURANCE_ISA -> "5"
    TaxAdvantageType_CURRENT_YEAR_PAYMENT -> "6"
    TaxAdvantageType_PRIOR_YEAR_PAYMENT -> "7"
    TaxAdvantageType_ASSET_TRANSFER -> "8"
    TaxAdvantageType_EMPLOYEE_PRIOR_YEAR -> "9"
    TaxAdvantageType_EMPLOYEE_CURRENT_YEAR -> "10"
    TaxAdvantageType_EMPLOYER_PRIOR_YEAR -> "11"
    TaxAdvantageType_EMPLOYER_CURRENT_YEAR -> "12"
    TaxAdvantageType_NON_FUND_PROTOTYPE_IRA -> "13"
    TaxAdvantageType_NON_FUND_QUALIFIED_PLAN -> "14"
    TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN -> "15"
    TaxAdvantageType_IRA -> "16"
    TaxAdvantageType_IRA_ROLLOVER -> "17"
    TaxAdvantageType_KEOGH -> "18"
    TaxAdvantageType_PROFIT_SHARING_PLAN -> "19"
    TaxAdvantageType_US401_K -> "20"
    TaxAdvantageType_SELF_DIRECTED_IRA -> "21"
    TaxAdvantageType_US403B -> "22"
    TaxAdvantageType_US457 -> "23"
    TaxAdvantageType_ROTH_IRA_PROTOTYPE -> "24"
    TaxAdvantageType_ROTH_IRA_NON_PROTOTYPE -> "25"
    TaxAdvantageType_ROTH_CONVERSION_IRA_PROTOTYPE -> "26"
    TaxAdvantageType_ROTH_CONVERSION_IRA_NON_PROTOTYPE -> "27"
    TaxAdvantageType_EDUCATION_IRA_PROTOTYPE -> "28"
    TaxAdvantageType_EDUCATION_IRA_NON_PROTOTYPE -> "29"
  fieldFromValue = \case
    "0" -> Right TaxAdvantageType_NONE
    "1" -> Right TaxAdvantageType_MAXI_ISA
    "2" -> Right TaxAdvantageType_TESSA
    "3" -> Right TaxAdvantageType_MINI_CASH_ISA
    "4" -> Right TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA
    "5" -> Right TaxAdvantageType_MINI_INSURANCE_ISA
    "6" -> Right TaxAdvantageType_CURRENT_YEAR_PAYMENT
    "7" -> Right TaxAdvantageType_PRIOR_YEAR_PAYMENT
    "8" -> Right TaxAdvantageType_ASSET_TRANSFER
    "9" -> Right TaxAdvantageType_EMPLOYEE_PRIOR_YEAR
    "10" -> Right TaxAdvantageType_EMPLOYEE_CURRENT_YEAR
    "11" -> Right TaxAdvantageType_EMPLOYER_PRIOR_YEAR
    "12" -> Right TaxAdvantageType_EMPLOYER_CURRENT_YEAR
    "13" -> Right TaxAdvantageType_NON_FUND_PROTOTYPE_IRA
    "14" -> Right TaxAdvantageType_NON_FUND_QUALIFIED_PLAN
    "15" -> Right TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN
    "16" -> Right TaxAdvantageType_IRA
    "17" -> Right TaxAdvantageType_IRA_ROLLOVER
    "18" -> Right TaxAdvantageType_KEOGH
    "19" -> Right TaxAdvantageType_PROFIT_SHARING_PLAN
    "20" -> Right TaxAdvantageType_US401_K
    "21" -> Right TaxAdvantageType_SELF_DIRECTED_IRA
    "22" -> Right TaxAdvantageType_US403B
    "23" -> Right TaxAdvantageType_US457
    "24" -> Right TaxAdvantageType_ROTH_IRA_PROTOTYPE
    "25" -> Right TaxAdvantageType_ROTH_IRA_NON_PROTOTYPE
    "26" -> Right TaxAdvantageType_ROTH_CONVERSION_IRA_PROTOTYPE
    "27" -> Right TaxAdvantageType_ROTH_CONVERSION_IRA_NON_PROTOTYPE
    "28" -> Right TaxAdvantageType_EDUCATION_IRA_PROTOTYPE
    "29" -> Right TaxAdvantageType_EDUCATION_IRA_NON_PROTOTYPE
    v -> Left ("Unknown TaxAdvantageType: " <> show v)

-- FieldSpec {fieldNumber = 496, fieldName = "RegistRejReasonText", fieldType = FieldTypeString, fieldValues = []}
newtype RegistRejReasonText = RegistRejReasonText {unRegistRejReasonText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistRejReasonText

instance IsField RegistRejReasonText where
  fieldTag Proxy = 496
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistRejReasonText
  fieldFromValue = fromValue >=> (prettyValidate . RegistRejReasonText)

-- FieldSpec {fieldNumber = 497, fieldName = "FundRenewWaiv", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data FundRenewWaiv
  = FundRenewWaiv_YES
  | FundRenewWaiv_NO
  deriving stock (Show, Eq, Generic)

instance Validity FundRenewWaiv

instance IsField FundRenewWaiv where
  fieldTag Proxy = 497
  fieldIsData Proxy = False
  fieldToValue = \case
    FundRenewWaiv_YES -> "Y"
    FundRenewWaiv_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right FundRenewWaiv_YES
    "N" -> Right FundRenewWaiv_NO
    v -> Left ("Unknown FundRenewWaiv: " <> show v)

-- FieldSpec {fieldNumber = 498, fieldName = "CashDistribAgentName", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribAgentName = CashDistribAgentName {unCashDistribAgentName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribAgentName

instance IsField CashDistribAgentName where
  fieldTag Proxy = 498
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribAgentName
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribAgentName)

-- FieldSpec {fieldNumber = 499, fieldName = "CashDistribAgentCode", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribAgentCode = CashDistribAgentCode {unCashDistribAgentCode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribAgentCode

instance IsField CashDistribAgentCode where
  fieldTag Proxy = 499
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribAgentCode
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribAgentCode)

-- FieldSpec {fieldNumber = 500, fieldName = "CashDistribAgentAcctNumber", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribAgentAcctNumber = CashDistribAgentAcctNumber {unCashDistribAgentAcctNumber :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribAgentAcctNumber

instance IsField CashDistribAgentAcctNumber where
  fieldTag Proxy = 500
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribAgentAcctNumber
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribAgentAcctNumber)

-- FieldSpec {fieldNumber = 501, fieldName = "CashDistribPayRef", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribPayRef = CashDistribPayRef {unCashDistribPayRef :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribPayRef

instance IsField CashDistribPayRef where
  fieldTag Proxy = 501
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribPayRef
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribPayRef)

-- FieldSpec {fieldNumber = 502, fieldName = "CashDistribAgentAcctName", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribAgentAcctName = CashDistribAgentAcctName {unCashDistribAgentAcctName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribAgentAcctName

instance IsField CashDistribAgentAcctName where
  fieldTag Proxy = 502
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribAgentAcctName
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribAgentAcctName)

-- FieldSpec {fieldNumber = 503, fieldName = "CardStartDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype CardStartDate = CardStartDate {unCardStartDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardStartDate

instance IsField CardStartDate where
  fieldTag Proxy = 503
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardStartDate
  fieldFromValue = fromValue >=> (prettyValidate . CardStartDate)

-- FieldSpec {fieldNumber = 504, fieldName = "PaymentDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype PaymentDate = PaymentDate {unPaymentDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PaymentDate

instance IsField PaymentDate where
  fieldTag Proxy = 504
  fieldIsData Proxy = False
  fieldToValue = toValue . unPaymentDate
  fieldFromValue = fromValue >=> (prettyValidate . PaymentDate)

-- FieldSpec {fieldNumber = 505, fieldName = "PaymentRemitterID", fieldType = FieldTypeString, fieldValues = []}
newtype PaymentRemitterID = PaymentRemitterID {unPaymentRemitterID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PaymentRemitterID

instance IsField PaymentRemitterID where
  fieldTag Proxy = 505
  fieldIsData Proxy = False
  fieldToValue = toValue . unPaymentRemitterID
  fieldFromValue = fromValue >=> (prettyValidate . PaymentRemitterID)

-- FieldSpec {fieldNumber = 506, fieldName = "RegistStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "HELD"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "REMINDER"}]}
data RegistStatus
  = RegistStatus_ACCEPTED
  | RegistStatus_REJECTED
  | RegistStatus_HELD
  | RegistStatus_REMINDER
  deriving stock (Show, Eq, Generic)

instance Validity RegistStatus

instance IsField RegistStatus where
  fieldTag Proxy = 506
  fieldIsData Proxy = False
  fieldToValue = \case
    RegistStatus_ACCEPTED -> "A"
    RegistStatus_REJECTED -> "R"
    RegistStatus_HELD -> "H"
    RegistStatus_REMINDER -> "N"
  fieldFromValue = \case
    "A" -> Right RegistStatus_ACCEPTED
    "R" -> Right RegistStatus_REJECTED
    "H" -> Right RegistStatus_HELD
    "N" -> Right RegistStatus_REMINDER
    v -> Left ("Unknown RegistStatus: " <> show v)

-- FieldSpec {fieldNumber = 507, fieldName = "RegistRejReasonCode", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_ACCOUNT_TYPE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INVALID_TAX_EXEMPT_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVALID_OWNERSHIP_TYPE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NO_REG_DETAILS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_REG_SEQ_NO"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "INVALID_REG_DETAILS"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "INVALID_MAILING_DETAILS"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "INVALID_MAILING_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "INVALID_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "INVALID_INVESTOR_ID_SOURCE"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "INVALID_DATE_OF_BIRTH"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "INVALID_COUNTRY"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "INVALID_DISTRIB_INSTNS"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "INVALID_PERCENTAGE"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "INVALID_PAYMENT_METHOD"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "INVALID_ACCOUNT_NAME"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "INVALID_AGENT_CODE"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "INVALID_ACCOUNT_NUM"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data RegistRejReasonCode
  = RegistRejReasonCode_INVALID_ACCOUNT_TYPE
  | RegistRejReasonCode_INVALID_TAX_EXEMPT_TYPE
  | RegistRejReasonCode_INVALID_OWNERSHIP_TYPE
  | RegistRejReasonCode_NO_REG_DETAILS
  | RegistRejReasonCode_INVALID_REG_SEQ_NO
  | RegistRejReasonCode_INVALID_REG_DETAILS
  | RegistRejReasonCode_INVALID_MAILING_DETAILS
  | RegistRejReasonCode_INVALID_MAILING_INSTRUCTIONS
  | RegistRejReasonCode_INVALID_INVESTOR_ID
  | RegistRejReasonCode_INVALID_INVESTOR_ID_SOURCE
  | RegistRejReasonCode_INVALID_DATE_OF_BIRTH
  | RegistRejReasonCode_INVALID_COUNTRY
  | RegistRejReasonCode_INVALID_DISTRIB_INSTNS
  | RegistRejReasonCode_INVALID_PERCENTAGE
  | RegistRejReasonCode_INVALID_PAYMENT_METHOD
  | RegistRejReasonCode_INVALID_ACCOUNT_NAME
  | RegistRejReasonCode_INVALID_AGENT_CODE
  | RegistRejReasonCode_INVALID_ACCOUNT_NUM
  | RegistRejReasonCode_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity RegistRejReasonCode

instance IsField RegistRejReasonCode where
  fieldTag Proxy = 507
  fieldIsData Proxy = False
  fieldToValue = \case
    RegistRejReasonCode_INVALID_ACCOUNT_TYPE -> "1"
    RegistRejReasonCode_INVALID_TAX_EXEMPT_TYPE -> "2"
    RegistRejReasonCode_INVALID_OWNERSHIP_TYPE -> "3"
    RegistRejReasonCode_NO_REG_DETAILS -> "4"
    RegistRejReasonCode_INVALID_REG_SEQ_NO -> "5"
    RegistRejReasonCode_INVALID_REG_DETAILS -> "6"
    RegistRejReasonCode_INVALID_MAILING_DETAILS -> "7"
    RegistRejReasonCode_INVALID_MAILING_INSTRUCTIONS -> "8"
    RegistRejReasonCode_INVALID_INVESTOR_ID -> "9"
    RegistRejReasonCode_INVALID_INVESTOR_ID_SOURCE -> "10"
    RegistRejReasonCode_INVALID_DATE_OF_BIRTH -> "11"
    RegistRejReasonCode_INVALID_COUNTRY -> "12"
    RegistRejReasonCode_INVALID_DISTRIB_INSTNS -> "13"
    RegistRejReasonCode_INVALID_PERCENTAGE -> "14"
    RegistRejReasonCode_INVALID_PAYMENT_METHOD -> "15"
    RegistRejReasonCode_INVALID_ACCOUNT_NAME -> "16"
    RegistRejReasonCode_INVALID_AGENT_CODE -> "17"
    RegistRejReasonCode_INVALID_ACCOUNT_NUM -> "18"
    RegistRejReasonCode_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right RegistRejReasonCode_INVALID_ACCOUNT_TYPE
    "2" -> Right RegistRejReasonCode_INVALID_TAX_EXEMPT_TYPE
    "3" -> Right RegistRejReasonCode_INVALID_OWNERSHIP_TYPE
    "4" -> Right RegistRejReasonCode_NO_REG_DETAILS
    "5" -> Right RegistRejReasonCode_INVALID_REG_SEQ_NO
    "6" -> Right RegistRejReasonCode_INVALID_REG_DETAILS
    "7" -> Right RegistRejReasonCode_INVALID_MAILING_DETAILS
    "8" -> Right RegistRejReasonCode_INVALID_MAILING_INSTRUCTIONS
    "9" -> Right RegistRejReasonCode_INVALID_INVESTOR_ID
    "10" -> Right RegistRejReasonCode_INVALID_INVESTOR_ID_SOURCE
    "11" -> Right RegistRejReasonCode_INVALID_DATE_OF_BIRTH
    "12" -> Right RegistRejReasonCode_INVALID_COUNTRY
    "13" -> Right RegistRejReasonCode_INVALID_DISTRIB_INSTNS
    "14" -> Right RegistRejReasonCode_INVALID_PERCENTAGE
    "15" -> Right RegistRejReasonCode_INVALID_PAYMENT_METHOD
    "16" -> Right RegistRejReasonCode_INVALID_ACCOUNT_NAME
    "17" -> Right RegistRejReasonCode_INVALID_AGENT_CODE
    "18" -> Right RegistRejReasonCode_INVALID_ACCOUNT_NUM
    "99" -> Right RegistRejReasonCode_OTHER
    v -> Left ("Unknown RegistRejReasonCode: " <> show v)

-- FieldSpec {fieldNumber = 508, fieldName = "RegistRefID", fieldType = FieldTypeString, fieldValues = []}
newtype RegistRefID = RegistRefID {unRegistRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistRefID

instance IsField RegistRefID where
  fieldTag Proxy = 508
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistRefID
  fieldFromValue = fromValue >=> (prettyValidate . RegistRefID)

-- FieldSpec {fieldNumber = 509, fieldName = "RegistDtls", fieldType = FieldTypeString, fieldValues = []}
newtype RegistDtls = RegistDtls {unRegistDtls :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistDtls

instance IsField RegistDtls where
  fieldTag Proxy = 509
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistDtls
  fieldFromValue = fromValue >=> (prettyValidate . RegistDtls)

-- FieldSpec {fieldNumber = 510, fieldName = "NoDistribInsts", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoDistribInsts = NoDistribInsts {unNoDistribInsts :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoDistribInsts

instance IsField NoDistribInsts where
  fieldTag Proxy = 510
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoDistribInsts
  fieldFromValue = fromValue >=> (prettyValidate . NoDistribInsts)

-- FieldSpec {fieldNumber = 511, fieldName = "RegistEmail", fieldType = FieldTypeString, fieldValues = []}
newtype RegistEmail = RegistEmail {unRegistEmail :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistEmail

instance IsField RegistEmail where
  fieldTag Proxy = 511
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistEmail
  fieldFromValue = fromValue >=> (prettyValidate . RegistEmail)

-- FieldSpec {fieldNumber = 512, fieldName = "DistribPercentage", fieldType = FieldTypePercentage, fieldValues = []}
newtype DistribPercentage = DistribPercentage {unDistribPercentage :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DistribPercentage

instance IsField DistribPercentage where
  fieldTag Proxy = 512
  fieldIsData Proxy = False
  fieldToValue = toValue . unDistribPercentage
  fieldFromValue = fromValue >=> (prettyValidate . DistribPercentage)

-- FieldSpec {fieldNumber = 513, fieldName = "RegistID", fieldType = FieldTypeString, fieldValues = []}
newtype RegistID = RegistID {unRegistID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistID

instance IsField RegistID where
  fieldTag Proxy = 513
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistID
  fieldFromValue = fromValue >=> (prettyValidate . RegistID)

-- FieldSpec {fieldNumber = 514, fieldName = "RegistTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"}]}
data RegistTransType
  = RegistTransType_NEW
  | RegistTransType_REPLACE
  | RegistTransType_CANCEL
  deriving stock (Show, Eq, Generic)

instance Validity RegistTransType

instance IsField RegistTransType where
  fieldTag Proxy = 514
  fieldIsData Proxy = False
  fieldToValue = \case
    RegistTransType_NEW -> "0"
    RegistTransType_REPLACE -> "1"
    RegistTransType_CANCEL -> "2"
  fieldFromValue = \case
    "0" -> Right RegistTransType_NEW
    "1" -> Right RegistTransType_REPLACE
    "2" -> Right RegistTransType_CANCEL
    v -> Left ("Unknown RegistTransType: " <> show v)

-- FieldSpec {fieldNumber = 515, fieldName = "ExecValuationPoint", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype ExecValuationPoint = ExecValuationPoint {unExecValuationPoint :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecValuationPoint

instance IsField ExecValuationPoint where
  fieldTag Proxy = 515
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecValuationPoint
  fieldFromValue = fromValue >=> (prettyValidate . ExecValuationPoint)

-- FieldSpec {fieldNumber = 516, fieldName = "OrderPercent", fieldType = FieldTypePercentage, fieldValues = []}
newtype OrderPercent = OrderPercent {unOrderPercent :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderPercent

instance IsField OrderPercent where
  fieldTag Proxy = 516
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderPercent
  fieldFromValue = fromValue >=> (prettyValidate . OrderPercent)

-- FieldSpec {fieldNumber = 517, fieldName = "OwnershipType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "JOINT_INVESTORS"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "TENANTS_IN_COMMON"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "JOINT_TRUSTEES"}]}
data OwnershipType
  = OwnershipType_JOINT_INVESTORS
  | OwnershipType_TENANTS_IN_COMMON
  | OwnershipType_JOINT_TRUSTEES
  deriving stock (Show, Eq, Generic)

instance Validity OwnershipType

instance IsField OwnershipType where
  fieldTag Proxy = 517
  fieldIsData Proxy = False
  fieldToValue = \case
    OwnershipType_JOINT_INVESTORS -> "J"
    OwnershipType_TENANTS_IN_COMMON -> "T"
    OwnershipType_JOINT_TRUSTEES -> "2"
  fieldFromValue = \case
    "J" -> Right OwnershipType_JOINT_INVESTORS
    "T" -> Right OwnershipType_TENANTS_IN_COMMON
    "2" -> Right OwnershipType_JOINT_TRUSTEES
    v -> Left ("Unknown OwnershipType: " <> show v)

-- FieldSpec {fieldNumber = 518, fieldName = "NoContAmts", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoContAmts = NoContAmts {unNoContAmts :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoContAmts

instance IsField NoContAmts where
  fieldTag Proxy = 518
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoContAmts
  fieldFromValue = fromValue >=> (prettyValidate . NoContAmts)

-- FieldSpec {fieldNumber = 519, fieldName = "ContAmtType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "COMMISSION_AMOUNT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COMMISSION_PERCENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INITIAL_CHARGE_AMOUNT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INITIAL_CHARGE_PERCENT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "DISCOUNT_AMOUNT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "DISCOUNT_PERCENT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "DILUTION_LEVY_AMOUNT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "DILUTION_LEVY_PERCENT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "EXIT_CHARGE_AMOUNT"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "EXIT_CHARGE_PERCENT"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "FUND_BASED_RENEWAL_COMMISSION_PERCENT"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "PROJECTED_FUND_VALUE"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "FUND_BASED_RENEWAL_COMMISSION_ON_ORDER"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "FUND_BASED_RENEWAL_COMMISSION_ON_FUND"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "NET_SETTLEMENT_AMOUNT"}]}
data ContAmtType
  = ContAmtType_COMMISSION_AMOUNT
  | ContAmtType_COMMISSION_PERCENT
  | ContAmtType_INITIAL_CHARGE_AMOUNT
  | ContAmtType_INITIAL_CHARGE_PERCENT
  | ContAmtType_DISCOUNT_AMOUNT
  | ContAmtType_DISCOUNT_PERCENT
  | ContAmtType_DILUTION_LEVY_AMOUNT
  | ContAmtType_DILUTION_LEVY_PERCENT
  | ContAmtType_EXIT_CHARGE_AMOUNT
  | ContAmtType_EXIT_CHARGE_PERCENT
  | ContAmtType_FUND_BASED_RENEWAL_COMMISSION_PERCENT
  | ContAmtType_PROJECTED_FUND_VALUE
  | ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_ORDER
  | ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_FUND
  | ContAmtType_NET_SETTLEMENT_AMOUNT
  deriving stock (Show, Eq, Generic)

instance Validity ContAmtType

instance IsField ContAmtType where
  fieldTag Proxy = 519
  fieldIsData Proxy = False
  fieldToValue = \case
    ContAmtType_COMMISSION_AMOUNT -> "1"
    ContAmtType_COMMISSION_PERCENT -> "2"
    ContAmtType_INITIAL_CHARGE_AMOUNT -> "3"
    ContAmtType_INITIAL_CHARGE_PERCENT -> "4"
    ContAmtType_DISCOUNT_AMOUNT -> "5"
    ContAmtType_DISCOUNT_PERCENT -> "6"
    ContAmtType_DILUTION_LEVY_AMOUNT -> "7"
    ContAmtType_DILUTION_LEVY_PERCENT -> "8"
    ContAmtType_EXIT_CHARGE_AMOUNT -> "9"
    ContAmtType_EXIT_CHARGE_PERCENT -> "10"
    ContAmtType_FUND_BASED_RENEWAL_COMMISSION_PERCENT -> "11"
    ContAmtType_PROJECTED_FUND_VALUE -> "12"
    ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_ORDER -> "13"
    ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_FUND -> "14"
    ContAmtType_NET_SETTLEMENT_AMOUNT -> "15"
  fieldFromValue = \case
    "1" -> Right ContAmtType_COMMISSION_AMOUNT
    "2" -> Right ContAmtType_COMMISSION_PERCENT
    "3" -> Right ContAmtType_INITIAL_CHARGE_AMOUNT
    "4" -> Right ContAmtType_INITIAL_CHARGE_PERCENT
    "5" -> Right ContAmtType_DISCOUNT_AMOUNT
    "6" -> Right ContAmtType_DISCOUNT_PERCENT
    "7" -> Right ContAmtType_DILUTION_LEVY_AMOUNT
    "8" -> Right ContAmtType_DILUTION_LEVY_PERCENT
    "9" -> Right ContAmtType_EXIT_CHARGE_AMOUNT
    "10" -> Right ContAmtType_EXIT_CHARGE_PERCENT
    "11" -> Right ContAmtType_FUND_BASED_RENEWAL_COMMISSION_PERCENT
    "12" -> Right ContAmtType_PROJECTED_FUND_VALUE
    "13" -> Right ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_ORDER
    "14" -> Right ContAmtType_FUND_BASED_RENEWAL_COMMISSION_ON_FUND
    "15" -> Right ContAmtType_NET_SETTLEMENT_AMOUNT
    v -> Left ("Unknown ContAmtType: " <> show v)

-- FieldSpec {fieldNumber = 520, fieldName = "ContAmtValue", fieldType = FieldTypeFloat, fieldValues = []}
newtype ContAmtValue = ContAmtValue {unContAmtValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContAmtValue

instance IsField ContAmtValue where
  fieldTag Proxy = 520
  fieldIsData Proxy = False
  fieldToValue = toValue . unContAmtValue
  fieldFromValue = fromValue >=> (prettyValidate . ContAmtValue)

-- FieldSpec {fieldNumber = 521, fieldName = "ContAmtCurr", fieldType = FieldTypeCurrency, fieldValues = []}
newtype ContAmtCurr = ContAmtCurr {unContAmtCurr :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContAmtCurr

instance IsField ContAmtCurr where
  fieldTag Proxy = 521
  fieldIsData Proxy = False
  fieldToValue = toValue . unContAmtCurr
  fieldFromValue = fromValue >=> (prettyValidate . ContAmtCurr)

-- FieldSpec {fieldNumber = 522, fieldName = "OwnerType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INDIVIDUAL_INVESTOR"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PUBLIC_COMPANY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PRIVATE_COMPANY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INDIVIDUAL_TRUSTEE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "COMPANY_TRUSTEE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PENSION_PLAN"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TRUSTS"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "FIDUCIARIES"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "NETWORKING_SUB_ACCOUNT"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "NON_PROFIT_ORGANIZATION"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "CORPORATE_BODY"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "NOMINEE"}]}
data OwnerType
  = OwnerType_INDIVIDUAL_INVESTOR
  | OwnerType_PUBLIC_COMPANY
  | OwnerType_PRIVATE_COMPANY
  | OwnerType_INDIVIDUAL_TRUSTEE
  | OwnerType_COMPANY_TRUSTEE
  | OwnerType_PENSION_PLAN
  | OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT
  | OwnerType_TRUSTS
  | OwnerType_FIDUCIARIES
  | OwnerType_NETWORKING_SUB_ACCOUNT
  | OwnerType_NON_PROFIT_ORGANIZATION
  | OwnerType_CORPORATE_BODY
  | OwnerType_NOMINEE
  deriving stock (Show, Eq, Generic)

instance Validity OwnerType

instance IsField OwnerType where
  fieldTag Proxy = 522
  fieldIsData Proxy = False
  fieldToValue = \case
    OwnerType_INDIVIDUAL_INVESTOR -> "1"
    OwnerType_PUBLIC_COMPANY -> "2"
    OwnerType_PRIVATE_COMPANY -> "3"
    OwnerType_INDIVIDUAL_TRUSTEE -> "4"
    OwnerType_COMPANY_TRUSTEE -> "5"
    OwnerType_PENSION_PLAN -> "6"
    OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT -> "7"
    OwnerType_TRUSTS -> "8"
    OwnerType_FIDUCIARIES -> "9"
    OwnerType_NETWORKING_SUB_ACCOUNT -> "10"
    OwnerType_NON_PROFIT_ORGANIZATION -> "11"
    OwnerType_CORPORATE_BODY -> "12"
    OwnerType_NOMINEE -> "13"
  fieldFromValue = \case
    "1" -> Right OwnerType_INDIVIDUAL_INVESTOR
    "2" -> Right OwnerType_PUBLIC_COMPANY
    "3" -> Right OwnerType_PRIVATE_COMPANY
    "4" -> Right OwnerType_INDIVIDUAL_TRUSTEE
    "5" -> Right OwnerType_COMPANY_TRUSTEE
    "6" -> Right OwnerType_PENSION_PLAN
    "7" -> Right OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT
    "8" -> Right OwnerType_TRUSTS
    "9" -> Right OwnerType_FIDUCIARIES
    "10" -> Right OwnerType_NETWORKING_SUB_ACCOUNT
    "11" -> Right OwnerType_NON_PROFIT_ORGANIZATION
    "12" -> Right OwnerType_CORPORATE_BODY
    "13" -> Right OwnerType_NOMINEE
    v -> Left ("Unknown OwnerType: " <> show v)

-- FieldSpec {fieldNumber = 523, fieldName = "PartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype PartySubID = PartySubID {unPartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PartySubID

instance IsField PartySubID where
  fieldTag Proxy = 523
  fieldIsData Proxy = False
  fieldToValue = toValue . unPartySubID
  fieldFromValue = fromValue >=> (prettyValidate . PartySubID)

-- FieldSpec {fieldNumber = 524, fieldName = "NestedPartyID", fieldType = FieldTypeString, fieldValues = []}
newtype NestedPartyID = NestedPartyID {unNestedPartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartyID

instance IsField NestedPartyID where
  fieldTag Proxy = 524
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartyID
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartyID)

-- FieldSpec {fieldNumber = 525, fieldName = "NestedPartyIDSource", fieldType = FieldTypeChar, fieldValues = []}
newtype NestedPartyIDSource = NestedPartyIDSource {unNestedPartyIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartyIDSource

instance IsField NestedPartyIDSource where
  fieldTag Proxy = 525
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartyIDSource
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartyIDSource)

-- FieldSpec {fieldNumber = 526, fieldName = "SecondaryClOrdID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryClOrdID = SecondaryClOrdID {unSecondaryClOrdID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryClOrdID

instance IsField SecondaryClOrdID where
  fieldTag Proxy = 526
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryClOrdID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryClOrdID)

-- FieldSpec {fieldNumber = 527, fieldName = "SecondaryExecID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryExecID = SecondaryExecID {unSecondaryExecID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryExecID

instance IsField SecondaryExecID where
  fieldTag Proxy = 527
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryExecID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryExecID)

-- FieldSpec {fieldNumber = 528, fieldName = "OrderCapacity", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "AGENCY"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "PROPRIETARY"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "INDIVIDUAL"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "PRINCIPAL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "RISKLESS_PRINCIPAL"},FieldValueSpec {fieldValueEnum = "W", fieldValueDescription = "AGENT_FOR_OTHER_MEMBER"}]}
data OrderCapacity
  = OrderCapacity_AGENCY
  | OrderCapacity_PROPRIETARY
  | OrderCapacity_INDIVIDUAL
  | OrderCapacity_PRINCIPAL
  | OrderCapacity_RISKLESS_PRINCIPAL
  | OrderCapacity_AGENT_FOR_OTHER_MEMBER
  deriving stock (Show, Eq, Generic)

instance Validity OrderCapacity

instance IsField OrderCapacity where
  fieldTag Proxy = 528
  fieldIsData Proxy = False
  fieldToValue = \case
    OrderCapacity_AGENCY -> "A"
    OrderCapacity_PROPRIETARY -> "G"
    OrderCapacity_INDIVIDUAL -> "I"
    OrderCapacity_PRINCIPAL -> "P"
    OrderCapacity_RISKLESS_PRINCIPAL -> "R"
    OrderCapacity_AGENT_FOR_OTHER_MEMBER -> "W"
  fieldFromValue = \case
    "A" -> Right OrderCapacity_AGENCY
    "G" -> Right OrderCapacity_PROPRIETARY
    "I" -> Right OrderCapacity_INDIVIDUAL
    "P" -> Right OrderCapacity_PRINCIPAL
    "R" -> Right OrderCapacity_RISKLESS_PRINCIPAL
    "W" -> Right OrderCapacity_AGENT_FOR_OTHER_MEMBER
    v -> Left ("Unknown OrderCapacity: " <> show v)

-- FieldSpec {fieldNumber = 529, fieldName = "OrderRestrictions", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PROGRAM_TRADE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INDEX_ARBITRAGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NON_INDEX_ARBITRAGE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "COMPETING_MARKET_MAKER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_SECURITY"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_UNDERLYING"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "FOREIGN_ENTITY"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "EXTERNAL_MARKET_PARTICIPANT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "RISKLESS_ARBITRAGE"}]}
data OrderRestrictions
  = OrderRestrictions_PROGRAM_TRADE
  | OrderRestrictions_INDEX_ARBITRAGE
  | OrderRestrictions_NON_INDEX_ARBITRAGE
  | OrderRestrictions_COMPETING_MARKET_MAKER
  | OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_SECURITY
  | OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_UNDERLYING
  | OrderRestrictions_FOREIGN_ENTITY
  | OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT
  | OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE
  | OrderRestrictions_RISKLESS_ARBITRAGE
  deriving stock (Show, Eq, Generic)

instance Validity OrderRestrictions

instance IsField OrderRestrictions where
  fieldTag Proxy = 529
  fieldIsData Proxy = False
  fieldToValue = \case
    OrderRestrictions_PROGRAM_TRADE -> "1"
    OrderRestrictions_INDEX_ARBITRAGE -> "2"
    OrderRestrictions_NON_INDEX_ARBITRAGE -> "3"
    OrderRestrictions_COMPETING_MARKET_MAKER -> "4"
    OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_SECURITY -> "5"
    OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_UNDERLYING -> "6"
    OrderRestrictions_FOREIGN_ENTITY -> "7"
    OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT -> "8"
    OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE -> "9"
    OrderRestrictions_RISKLESS_ARBITRAGE -> "A"
  fieldFromValue = \case
    "1" -> Right OrderRestrictions_PROGRAM_TRADE
    "2" -> Right OrderRestrictions_INDEX_ARBITRAGE
    "3" -> Right OrderRestrictions_NON_INDEX_ARBITRAGE
    "4" -> Right OrderRestrictions_COMPETING_MARKET_MAKER
    "5" -> Right OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_SECURITY
    "6" -> Right OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_UNDERLYING
    "7" -> Right OrderRestrictions_FOREIGN_ENTITY
    "8" -> Right OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT
    "9" -> Right OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE
    "A" -> Right OrderRestrictions_RISKLESS_ARBITRAGE
    v -> Left ("Unknown OrderRestrictions: " <> show v)

-- FieldSpec {fieldNumber = 530, fieldName = "MassCancelRequestType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL_ORDERS_FOR_A_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCEL_ORDERS_FOR_A_PRODUCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCEL_ORDERS_FOR_ACFI_CODE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CANCEL_ORDERS_FOR_A_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CANCEL_ORDERS_FOR_A_TRADING_SESSION"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "CANCEL_ALL_ORDERS"}]}
data MassCancelRequestType
  = MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY
  | MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
  | MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT
  | MassCancelRequestType_CANCEL_ORDERS_FOR_ACFI_CODE
  | MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_TYPE
  | MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION
  | MassCancelRequestType_CANCEL_ALL_ORDERS
  deriving stock (Show, Eq, Generic)

instance Validity MassCancelRequestType

instance IsField MassCancelRequestType where
  fieldTag Proxy = 530
  fieldIsData Proxy = False
  fieldToValue = \case
    MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY -> "1"
    MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY -> "2"
    MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT -> "3"
    MassCancelRequestType_CANCEL_ORDERS_FOR_ACFI_CODE -> "4"
    MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_TYPE -> "5"
    MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION -> "6"
    MassCancelRequestType_CANCEL_ALL_ORDERS -> "7"
  fieldFromValue = \case
    "1" -> Right MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY
    "2" -> Right MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
    "3" -> Right MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT
    "4" -> Right MassCancelRequestType_CANCEL_ORDERS_FOR_ACFI_CODE
    "5" -> Right MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_TYPE
    "6" -> Right MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION
    "7" -> Right MassCancelRequestType_CANCEL_ALL_ORDERS
    v -> Left ("Unknown MassCancelRequestType: " <> show v)

-- FieldSpec {fieldNumber = 531, fieldName = "MassCancelResponse", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "CANCEL_REQUEST_REJECTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL_ORDERS_FOR_A_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCEL_ORDERS_FOR_A_PRODUCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCEL_ORDERS_FOR_ACFI_CODE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CANCEL_ORDERS_FOR_A_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CANCEL_ORDERS_FOR_A_TRADING_SESSION"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "CANCEL_ALL_ORDERS"}]}
data MassCancelResponse
  = MassCancelResponse_CANCEL_REQUEST_REJECTED
  | MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY
  | MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
  | MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT
  | MassCancelResponse_CANCEL_ORDERS_FOR_ACFI_CODE
  | MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_TYPE
  | MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION
  | MassCancelResponse_CANCEL_ALL_ORDERS
  deriving stock (Show, Eq, Generic)

instance Validity MassCancelResponse

instance IsField MassCancelResponse where
  fieldTag Proxy = 531
  fieldIsData Proxy = False
  fieldToValue = \case
    MassCancelResponse_CANCEL_REQUEST_REJECTED -> "0"
    MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY -> "1"
    MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY -> "2"
    MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT -> "3"
    MassCancelResponse_CANCEL_ORDERS_FOR_ACFI_CODE -> "4"
    MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_TYPE -> "5"
    MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION -> "6"
    MassCancelResponse_CANCEL_ALL_ORDERS -> "7"
  fieldFromValue = \case
    "0" -> Right MassCancelResponse_CANCEL_REQUEST_REJECTED
    "1" -> Right MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY
    "2" -> Right MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
    "3" -> Right MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT
    "4" -> Right MassCancelResponse_CANCEL_ORDERS_FOR_ACFI_CODE
    "5" -> Right MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_TYPE
    "6" -> Right MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION
    "7" -> Right MassCancelResponse_CANCEL_ALL_ORDERS
    v -> Left ("Unknown MassCancelResponse: " <> show v)

-- FieldSpec {fieldNumber = 532, fieldName = "MassCancelRejectReason", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "MASS_CANCEL_NOT_SUPPORTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNKNOWN_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INVALID_OR_UNKOWN_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVALID_OR_UNKNOWN_PRODUCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_OR_UNKNOWN_CFI_CODE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_OR_UNKNOWN_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "INVALID_OR_UNKNOWN_TRADING_SESSION"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data MassCancelRejectReason
  = MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED
  | MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY
  | MassCancelRejectReason_INVALID_OR_UNKOWN_UNDERLYING_SECURITY
  | MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT
  | MassCancelRejectReason_INVALID_OR_UNKNOWN_CFI_CODE
  | MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE
  | MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION
  | MassCancelRejectReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity MassCancelRejectReason

instance IsField MassCancelRejectReason where
  fieldTag Proxy = 532
  fieldIsData Proxy = False
  fieldToValue = \case
    MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED -> "0"
    MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY -> "1"
    MassCancelRejectReason_INVALID_OR_UNKOWN_UNDERLYING_SECURITY -> "2"
    MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT -> "3"
    MassCancelRejectReason_INVALID_OR_UNKNOWN_CFI_CODE -> "4"
    MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE -> "5"
    MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION -> "6"
    MassCancelRejectReason_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED
    "1" -> Right MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY
    "2" -> Right MassCancelRejectReason_INVALID_OR_UNKOWN_UNDERLYING_SECURITY
    "3" -> Right MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT
    "4" -> Right MassCancelRejectReason_INVALID_OR_UNKNOWN_CFI_CODE
    "5" -> Right MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE
    "6" -> Right MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION
    "99" -> Right MassCancelRejectReason_OTHER
    v -> Left ("Unknown MassCancelRejectReason: " <> show v)

-- FieldSpec {fieldNumber = 533, fieldName = "TotalAffectedOrders", fieldType = FieldTypeInt, fieldValues = []}
newtype TotalAffectedOrders = TotalAffectedOrders {unTotalAffectedOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalAffectedOrders

instance IsField TotalAffectedOrders where
  fieldTag Proxy = 533
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalAffectedOrders
  fieldFromValue = fromValue >=> (prettyValidate . TotalAffectedOrders)

-- FieldSpec {fieldNumber = 534, fieldName = "NoAffectedOrders", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoAffectedOrders = NoAffectedOrders {unNoAffectedOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoAffectedOrders

instance IsField NoAffectedOrders where
  fieldTag Proxy = 534
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoAffectedOrders
  fieldFromValue = fromValue >=> (prettyValidate . NoAffectedOrders)

-- FieldSpec {fieldNumber = 535, fieldName = "AffectedOrderID", fieldType = FieldTypeString, fieldValues = []}
newtype AffectedOrderID = AffectedOrderID {unAffectedOrderID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AffectedOrderID

instance IsField AffectedOrderID where
  fieldTag Proxy = 535
  fieldIsData Proxy = False
  fieldToValue = toValue . unAffectedOrderID
  fieldFromValue = fromValue >=> (prettyValidate . AffectedOrderID)

-- FieldSpec {fieldNumber = 536, fieldName = "AffectedSecondaryOrderID", fieldType = FieldTypeString, fieldValues = []}
newtype AffectedSecondaryOrderID = AffectedSecondaryOrderID {unAffectedSecondaryOrderID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AffectedSecondaryOrderID

instance IsField AffectedSecondaryOrderID where
  fieldTag Proxy = 536
  fieldIsData Proxy = False
  fieldToValue = toValue . unAffectedSecondaryOrderID
  fieldFromValue = fromValue >=> (prettyValidate . AffectedSecondaryOrderID)

-- FieldSpec {fieldNumber = 537, fieldName = "QuoteType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "INDICATIVE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TRADEABLE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RESTRICTED_TRADEABLE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "COUNTER"}]}
data QuoteType
  = QuoteType_INDICATIVE
  | QuoteType_TRADEABLE
  | QuoteType_RESTRICTED_TRADEABLE
  | QuoteType_COUNTER
  deriving stock (Show, Eq, Generic)

instance Validity QuoteType

instance IsField QuoteType where
  fieldTag Proxy = 537
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteType_INDICATIVE -> "0"
    QuoteType_TRADEABLE -> "1"
    QuoteType_RESTRICTED_TRADEABLE -> "2"
    QuoteType_COUNTER -> "3"
  fieldFromValue = \case
    "0" -> Right QuoteType_INDICATIVE
    "1" -> Right QuoteType_TRADEABLE
    "2" -> Right QuoteType_RESTRICTED_TRADEABLE
    "3" -> Right QuoteType_COUNTER
    v -> Left ("Unknown QuoteType: " <> show v)

-- FieldSpec {fieldNumber = 538, fieldName = "NestedPartyRole", fieldType = FieldTypeInt, fieldValues = []}
newtype NestedPartyRole = NestedPartyRole {unNestedPartyRole :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartyRole

instance IsField NestedPartyRole where
  fieldTag Proxy = 538
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartyRole
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartyRole)

-- FieldSpec {fieldNumber = 539, fieldName = "NoNestedPartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNestedPartyIDs = NoNestedPartyIDs {unNoNestedPartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNestedPartyIDs

instance IsField NoNestedPartyIDs where
  fieldTag Proxy = 539
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNestedPartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNestedPartyIDs)

-- FieldSpec {fieldNumber = 540, fieldName = "TotalAccruedInterestAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype TotalAccruedInterestAmt = TotalAccruedInterestAmt {unTotalAccruedInterestAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalAccruedInterestAmt

instance IsField TotalAccruedInterestAmt where
  fieldTag Proxy = 540
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalAccruedInterestAmt
  fieldFromValue = fromValue >=> (prettyValidate . TotalAccruedInterestAmt)

-- FieldSpec {fieldNumber = 541, fieldName = "MaturityDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype MaturityDate = MaturityDate {unMaturityDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaturityDate

instance IsField MaturityDate where
  fieldTag Proxy = 541
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaturityDate
  fieldFromValue = fromValue >=> (prettyValidate . MaturityDate)

-- FieldSpec {fieldNumber = 542, fieldName = "UnderlyingMaturityDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype UnderlyingMaturityDate = UnderlyingMaturityDate {unUnderlyingMaturityDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingMaturityDate

instance IsField UnderlyingMaturityDate where
  fieldTag Proxy = 542
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingMaturityDate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingMaturityDate)

-- FieldSpec {fieldNumber = 543, fieldName = "InstrRegistry", fieldType = FieldTypeString, fieldValues = []}
newtype InstrRegistry = InstrRegistry {unInstrRegistry :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InstrRegistry

instance IsField InstrRegistry where
  fieldTag Proxy = 543
  fieldIsData Proxy = False
  fieldToValue = toValue . unInstrRegistry
  fieldFromValue = fromValue >=> (prettyValidate . InstrRegistry)

-- FieldSpec {fieldNumber = 544, fieldName = "CashMargin", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CASH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MARGIN_OPEN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MARGIN_CLOSE"}]}
data CashMargin
  = CashMargin_CASH
  | CashMargin_MARGIN_OPEN
  | CashMargin_MARGIN_CLOSE
  deriving stock (Show, Eq, Generic)

instance Validity CashMargin

instance IsField CashMargin where
  fieldTag Proxy = 544
  fieldIsData Proxy = False
  fieldToValue = \case
    CashMargin_CASH -> "1"
    CashMargin_MARGIN_OPEN -> "2"
    CashMargin_MARGIN_CLOSE -> "3"
  fieldFromValue = \case
    "1" -> Right CashMargin_CASH
    "2" -> Right CashMargin_MARGIN_OPEN
    "3" -> Right CashMargin_MARGIN_CLOSE
    v -> Left ("Unknown CashMargin: " <> show v)

-- FieldSpec {fieldNumber = 545, fieldName = "NestedPartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype NestedPartySubID = NestedPartySubID {unNestedPartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartySubID

instance IsField NestedPartySubID where
  fieldTag Proxy = 545
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartySubID
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartySubID)

-- FieldSpec {fieldNumber = 546, fieldName = "Scope", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOCAL_MARKET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NATIONAL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GLOBAL"}]}
data Scope
  = Scope_LOCAL_MARKET
  | Scope_NATIONAL
  | Scope_GLOBAL
  deriving stock (Show, Eq, Generic)

instance Validity Scope

instance IsField Scope where
  fieldTag Proxy = 546
  fieldIsData Proxy = False
  fieldToValue = \case
    Scope_LOCAL_MARKET -> "1"
    Scope_NATIONAL -> "2"
    Scope_GLOBAL -> "3"
  fieldFromValue = \case
    "1" -> Right Scope_LOCAL_MARKET
    "2" -> Right Scope_NATIONAL
    "3" -> Right Scope_GLOBAL
    v -> Left ("Unknown Scope: " <> show v)

-- FieldSpec {fieldNumber = 547, fieldName = "MDImplicitDelete", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data MDImplicitDelete
  = MDImplicitDelete_YES
  | MDImplicitDelete_NO
  deriving stock (Show, Eq, Generic)

instance Validity MDImplicitDelete

instance IsField MDImplicitDelete where
  fieldTag Proxy = 547
  fieldIsData Proxy = False
  fieldToValue = \case
    MDImplicitDelete_YES -> "Y"
    MDImplicitDelete_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right MDImplicitDelete_YES
    "N" -> Right MDImplicitDelete_NO
    v -> Left ("Unknown MDImplicitDelete: " <> show v)

-- FieldSpec {fieldNumber = 548, fieldName = "CrossID", fieldType = FieldTypeString, fieldValues = []}
newtype CrossID = CrossID {unCrossID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CrossID

instance IsField CrossID where
  fieldTag Proxy = 548
  fieldIsData Proxy = False
  fieldToValue = toValue . unCrossID
  fieldFromValue = fromValue >=> (prettyValidate . CrossID)

-- FieldSpec {fieldNumber = 549, fieldName = "CrossType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CROSS_AON"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CROSS_IOC"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CROSS_ONE_SIDE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CROSS_SAME_PRICE"}]}
data CrossType
  = CrossType_CROSS_AON
  | CrossType_CROSS_IOC
  | CrossType_CROSS_ONE_SIDE
  | CrossType_CROSS_SAME_PRICE
  deriving stock (Show, Eq, Generic)

instance Validity CrossType

instance IsField CrossType where
  fieldTag Proxy = 549
  fieldIsData Proxy = False
  fieldToValue = \case
    CrossType_CROSS_AON -> "1"
    CrossType_CROSS_IOC -> "2"
    CrossType_CROSS_ONE_SIDE -> "3"
    CrossType_CROSS_SAME_PRICE -> "4"
  fieldFromValue = \case
    "1" -> Right CrossType_CROSS_AON
    "2" -> Right CrossType_CROSS_IOC
    "3" -> Right CrossType_CROSS_ONE_SIDE
    "4" -> Right CrossType_CROSS_SAME_PRICE
    v -> Left ("Unknown CrossType: " <> show v)

-- FieldSpec {fieldNumber = 550, fieldName = "CrossPrioritization", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NONE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BUY_SIDE_IS_PRIORITIZED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SELL_SIDE_IS_PRIORITIZED"}]}
data CrossPrioritization
  = CrossPrioritization_NONE
  | CrossPrioritization_BUY_SIDE_IS_PRIORITIZED
  | CrossPrioritization_SELL_SIDE_IS_PRIORITIZED
  deriving stock (Show, Eq, Generic)

instance Validity CrossPrioritization

instance IsField CrossPrioritization where
  fieldTag Proxy = 550
  fieldIsData Proxy = False
  fieldToValue = \case
    CrossPrioritization_NONE -> "0"
    CrossPrioritization_BUY_SIDE_IS_PRIORITIZED -> "1"
    CrossPrioritization_SELL_SIDE_IS_PRIORITIZED -> "2"
  fieldFromValue = \case
    "0" -> Right CrossPrioritization_NONE
    "1" -> Right CrossPrioritization_BUY_SIDE_IS_PRIORITIZED
    "2" -> Right CrossPrioritization_SELL_SIDE_IS_PRIORITIZED
    v -> Left ("Unknown CrossPrioritization: " <> show v)

-- FieldSpec {fieldNumber = 551, fieldName = "OrigCrossID", fieldType = FieldTypeString, fieldValues = []}
newtype OrigCrossID = OrigCrossID {unOrigCrossID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigCrossID

instance IsField OrigCrossID where
  fieldTag Proxy = 551
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigCrossID
  fieldFromValue = fromValue >=> (prettyValidate . OrigCrossID)

-- FieldSpec {fieldNumber = 552, fieldName = "NoSides", fieldType = FieldTypeNumInGroup, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ONE_SIDE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BOTH_SIDES"}]}
data NoSides
  = NoSides_ONE_SIDE
  | NoSides_BOTH_SIDES
  deriving stock (Show, Eq, Generic)

instance Validity NoSides

instance IsField NoSides where
  fieldTag Proxy = 552
  fieldIsData Proxy = False
  fieldToValue = \case
    NoSides_ONE_SIDE -> "1"
    NoSides_BOTH_SIDES -> "2"
  fieldFromValue = \case
    "1" -> Right NoSides_ONE_SIDE
    "2" -> Right NoSides_BOTH_SIDES
    v -> Left ("Unknown NoSides: " <> show v)

-- FieldSpec {fieldNumber = 553, fieldName = "Username", fieldType = FieldTypeString, fieldValues = []}
newtype Username = Username {unUsername :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Username

instance IsField Username where
  fieldTag Proxy = 553
  fieldIsData Proxy = False
  fieldToValue = toValue . unUsername
  fieldFromValue = fromValue >=> (prettyValidate . Username)

-- FieldSpec {fieldNumber = 554, fieldName = "Password", fieldType = FieldTypeString, fieldValues = []}
newtype Password = Password {unPassword :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Password

instance IsField Password where
  fieldTag Proxy = 554
  fieldIsData Proxy = False
  fieldToValue = toValue . unPassword
  fieldFromValue = fromValue >=> (prettyValidate . Password)

-- FieldSpec {fieldNumber = 555, fieldName = "NoLegs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLegs = NoLegs {unNoLegs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLegs

instance IsField NoLegs where
  fieldTag Proxy = 555
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLegs
  fieldFromValue = fromValue >=> (prettyValidate . NoLegs)

-- FieldSpec {fieldNumber = 556, fieldName = "LegCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype LegCurrency = LegCurrency {unLegCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCurrency

instance IsField LegCurrency where
  fieldTag Proxy = 556
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCurrency
  fieldFromValue = fromValue >=> (prettyValidate . LegCurrency)

-- FieldSpec {fieldNumber = 557, fieldName = "TotNoSecurityTypes", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoSecurityTypes = TotNoSecurityTypes {unTotNoSecurityTypes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoSecurityTypes

instance IsField TotNoSecurityTypes where
  fieldTag Proxy = 557
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoSecurityTypes
  fieldFromValue = fromValue >=> (prettyValidate . TotNoSecurityTypes)

-- FieldSpec {fieldNumber = 558, fieldName = "NoSecurityTypes", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSecurityTypes = NoSecurityTypes {unNoSecurityTypes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSecurityTypes

instance IsField NoSecurityTypes where
  fieldTag Proxy = 558
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSecurityTypes
  fieldFromValue = fromValue >=> (prettyValidate . NoSecurityTypes)

-- FieldSpec {fieldNumber = 559, fieldName = "SecurityListRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SYMBOL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SECURITY_TYPE_AND"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PRODUCT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TRADING_SESSION_ID"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ALL_SECURITIES"}]}
data SecurityListRequestType
  = SecurityListRequestType_SYMBOL
  | SecurityListRequestType_SECURITY_TYPE_AND
  | SecurityListRequestType_PRODUCT
  | SecurityListRequestType_TRADING_SESSION_ID
  | SecurityListRequestType_ALL_SECURITIES
  deriving stock (Show, Eq, Generic)

instance Validity SecurityListRequestType

instance IsField SecurityListRequestType where
  fieldTag Proxy = 559
  fieldIsData Proxy = False
  fieldToValue = \case
    SecurityListRequestType_SYMBOL -> "0"
    SecurityListRequestType_SECURITY_TYPE_AND -> "1"
    SecurityListRequestType_PRODUCT -> "2"
    SecurityListRequestType_TRADING_SESSION_ID -> "3"
    SecurityListRequestType_ALL_SECURITIES -> "4"
  fieldFromValue = \case
    "0" -> Right SecurityListRequestType_SYMBOL
    "1" -> Right SecurityListRequestType_SECURITY_TYPE_AND
    "2" -> Right SecurityListRequestType_PRODUCT
    "3" -> Right SecurityListRequestType_TRADING_SESSION_ID
    "4" -> Right SecurityListRequestType_ALL_SECURITIES
    v -> Left ("Unknown SecurityListRequestType: " <> show v)

-- FieldSpec {fieldNumber = 560, fieldName = "SecurityRequestResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "VALID_REQUEST"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNSUPPORTED_REQUEST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NO_INSTRUMENTS_FOUND"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED"}]}
data SecurityRequestResult
  = SecurityRequestResult_VALID_REQUEST
  | SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST
  | SecurityRequestResult_NO_INSTRUMENTS_FOUND
  | SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA
  | SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE
  | SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED
  deriving stock (Show, Eq, Generic)

instance Validity SecurityRequestResult

instance IsField SecurityRequestResult where
  fieldTag Proxy = 560
  fieldIsData Proxy = False
  fieldToValue = \case
    SecurityRequestResult_VALID_REQUEST -> "0"
    SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST -> "1"
    SecurityRequestResult_NO_INSTRUMENTS_FOUND -> "2"
    SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA -> "3"
    SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE -> "4"
    SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED -> "5"
  fieldFromValue = \case
    "0" -> Right SecurityRequestResult_VALID_REQUEST
    "1" -> Right SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST
    "2" -> Right SecurityRequestResult_NO_INSTRUMENTS_FOUND
    "3" -> Right SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA
    "4" -> Right SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE
    "5" -> Right SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED
    v -> Left ("Unknown SecurityRequestResult: " <> show v)

-- FieldSpec {fieldNumber = 561, fieldName = "RoundLot", fieldType = FieldTypeQTY, fieldValues = []}
newtype RoundLot = RoundLot {unRoundLot :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RoundLot

instance IsField RoundLot where
  fieldTag Proxy = 561
  fieldIsData Proxy = False
  fieldToValue = toValue . unRoundLot
  fieldFromValue = fromValue >=> (prettyValidate . RoundLot)

-- FieldSpec {fieldNumber = 562, fieldName = "MinTradeVol", fieldType = FieldTypeQTY, fieldValues = []}
newtype MinTradeVol = MinTradeVol {unMinTradeVol :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MinTradeVol

instance IsField MinTradeVol where
  fieldTag Proxy = 562
  fieldIsData Proxy = False
  fieldToValue = toValue . unMinTradeVol
  fieldFromValue = fromValue >=> (prettyValidate . MinTradeVol)

-- FieldSpec {fieldNumber = 563, fieldName = "MultiLegRptTypeReq", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REPORT_BY_MULITLEG_SECURITY_ONLY"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REPORT_BY_INSTRUMENT_LEGS_ONLY"}]}
data MultiLegRptTypeReq
  = MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY
  | MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS
  | MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_ONLY
  deriving stock (Show, Eq, Generic)

instance Validity MultiLegRptTypeReq

instance IsField MultiLegRptTypeReq where
  fieldTag Proxy = 563
  fieldIsData Proxy = False
  fieldToValue = \case
    MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY -> "0"
    MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS -> "1"
    MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_ONLY -> "2"
  fieldFromValue = \case
    "0" -> Right MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY
    "1" -> Right MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS
    "2" -> Right MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_ONLY
    v -> Left ("Unknown MultiLegRptTypeReq: " <> show v)

-- FieldSpec {fieldNumber = 564, fieldName = "LegPositionEffect", fieldType = FieldTypeChar, fieldValues = []}
newtype LegPositionEffect = LegPositionEffect {unLegPositionEffect :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegPositionEffect

instance IsField LegPositionEffect where
  fieldTag Proxy = 564
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegPositionEffect
  fieldFromValue = fromValue >=> (prettyValidate . LegPositionEffect)

-- FieldSpec {fieldNumber = 565, fieldName = "LegCoveredOrUncovered", fieldType = FieldTypeInt, fieldValues = []}
newtype LegCoveredOrUncovered = LegCoveredOrUncovered {unLegCoveredOrUncovered :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCoveredOrUncovered

instance IsField LegCoveredOrUncovered where
  fieldTag Proxy = 565
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCoveredOrUncovered
  fieldFromValue = fromValue >=> (prettyValidate . LegCoveredOrUncovered)

-- FieldSpec {fieldNumber = 566, fieldName = "LegPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype LegPrice = LegPrice {unLegPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegPrice

instance IsField LegPrice where
  fieldTag Proxy = 566
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegPrice
  fieldFromValue = fromValue >=> (prettyValidate . LegPrice)

-- FieldSpec {fieldNumber = 567, fieldName = "TradSesStatusRejReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_OR_INVALID_TRADING_SESSION_ID"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data TradSesStatusRejReason
  = TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADING_SESSION_ID
  | TradSesStatusRejReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity TradSesStatusRejReason

instance IsField TradSesStatusRejReason where
  fieldTag Proxy = 567
  fieldIsData Proxy = False
  fieldToValue = \case
    TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADING_SESSION_ID -> "1"
    TradSesStatusRejReason_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADING_SESSION_ID
    "99" -> Right TradSesStatusRejReason_OTHER
    v -> Left ("Unknown TradSesStatusRejReason: " <> show v)

-- FieldSpec {fieldNumber = 568, fieldName = "TradeRequestID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeRequestID = TradeRequestID {unTradeRequestID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeRequestID

instance IsField TradeRequestID where
  fieldTag Proxy = 568
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeRequestID
  fieldFromValue = fromValue >=> (prettyValidate . TradeRequestID)

-- FieldSpec {fieldNumber = 569, fieldName = "TradeRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ALL_TRADES"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MATCHED_TRADES_MATCHING_CRITERIA"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "UNMATCHED_TRADES_THAT_MATCH_CRITERIA"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNREPORTED_TRADES_THAT_MATCH_CRITERIA"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ADVISORIES_THAT_MATCH_CRITERIA"}]}
data TradeRequestType
  = TradeRequestType_ALL_TRADES
  | TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA
  | TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA
  | TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA
  | TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA
  deriving stock (Show, Eq, Generic)

instance Validity TradeRequestType

instance IsField TradeRequestType where
  fieldTag Proxy = 569
  fieldIsData Proxy = False
  fieldToValue = \case
    TradeRequestType_ALL_TRADES -> "0"
    TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA -> "1"
    TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA -> "2"
    TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA -> "3"
    TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA -> "4"
  fieldFromValue = \case
    "0" -> Right TradeRequestType_ALL_TRADES
    "1" -> Right TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA
    "2" -> Right TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA
    "3" -> Right TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA
    "4" -> Right TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA
    v -> Left ("Unknown TradeRequestType: " <> show v)

-- FieldSpec {fieldNumber = 570, fieldName = "PreviouslyReported", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data PreviouslyReported
  = PreviouslyReported_YES
  | PreviouslyReported_NO
  deriving stock (Show, Eq, Generic)

instance Validity PreviouslyReported

instance IsField PreviouslyReported where
  fieldTag Proxy = 570
  fieldIsData Proxy = False
  fieldToValue = \case
    PreviouslyReported_YES -> "Y"
    PreviouslyReported_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right PreviouslyReported_YES
    "N" -> Right PreviouslyReported_NO
    v -> Left ("Unknown PreviouslyReported: " <> show v)

-- FieldSpec {fieldNumber = 571, fieldName = "TradeReportID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeReportID = TradeReportID {unTradeReportID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportID

instance IsField TradeReportID where
  fieldTag Proxy = 571
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeReportID
  fieldFromValue = fromValue >=> (prettyValidate . TradeReportID)

-- FieldSpec {fieldNumber = 572, fieldName = "TradeReportRefID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeReportRefID = TradeReportRefID {unTradeReportRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportRefID

instance IsField TradeReportRefID where
  fieldTag Proxy = 572
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeReportRefID
  fieldFromValue = fromValue >=> (prettyValidate . TradeReportRefID)

-- FieldSpec {fieldNumber = 573, fieldName = "MatchStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "COMPARED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNCOMPARED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ADVISORY_OR_ALERT"}]}
data MatchStatus
  = MatchStatus_COMPARED
  | MatchStatus_UNCOMPARED
  | MatchStatus_ADVISORY_OR_ALERT
  deriving stock (Show, Eq, Generic)

instance Validity MatchStatus

instance IsField MatchStatus where
  fieldTag Proxy = 573
  fieldIsData Proxy = False
  fieldToValue = \case
    MatchStatus_COMPARED -> "0"
    MatchStatus_UNCOMPARED -> "1"
    MatchStatus_ADVISORY_OR_ALERT -> "2"
  fieldFromValue = \case
    "0" -> Right MatchStatus_COMPARED
    "1" -> Right MatchStatus_UNCOMPARED
    "2" -> Right MatchStatus_ADVISORY_OR_ALERT
    v -> Left ("Unknown MatchStatus: " <> show v)

-- FieldSpec {fieldNumber = 574, fieldName = "MatchType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "A1", fieldValueDescription = "EXACT_MATCH_PLUS4_BADGES_EXEC_TIME"},FieldValueSpec {fieldValueEnum = "A2", fieldValueDescription = "EXACT_MATCH_PLUS4_BADGES"},FieldValueSpec {fieldValueEnum = "A3", fieldValueDescription = "EXACT_MATCH_PLUS2_BADGES_EXEC_TIME"},FieldValueSpec {fieldValueEnum = "A4", fieldValueDescription = "EXACT_MATCH_PLUS2_BADGES"},FieldValueSpec {fieldValueEnum = "A5", fieldValueDescription = "EXACT_MATCH_PLUS_EXEC_TIME"},FieldValueSpec {fieldValueEnum = "AQ", fieldValueDescription = "STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS"},FieldValueSpec {fieldValueEnum = "S1", fieldValueDescription = "A1_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "S2", fieldValueDescription = "A2_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "S3", fieldValueDescription = "A3_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "S4", fieldValueDescription = "A4_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "S5", fieldValueDescription = "A5_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "M1", fieldValueDescription = "EXACT_MATCH_MINUS_BADGES_TIMES"},FieldValueSpec {fieldValueEnum = "M2", fieldValueDescription = "SUMMARIZED_MATCH_MINUS_BADGES_TIMES"},FieldValueSpec {fieldValueEnum = "MT", fieldValueDescription = "OCS_LOCKED_IN"},FieldValueSpec {fieldValueEnum = "M3", fieldValueDescription = "ACT_ACCEPTED_TRADE"},FieldValueSpec {fieldValueEnum = "M4", fieldValueDescription = "ACT_DEFAULT_TRADE"},FieldValueSpec {fieldValueEnum = "M5", fieldValueDescription = "ACT_DEFAULT_AFTER_M2"},FieldValueSpec {fieldValueEnum = "M6", fieldValueDescription = "ACTM6_MATCH"}]}
data MatchType
  = MatchType_EXACT_MATCH_PLUS4_BADGES_EXEC_TIME
  | MatchType_EXACT_MATCH_PLUS4_BADGES
  | MatchType_EXACT_MATCH_PLUS2_BADGES_EXEC_TIME
  | MatchType_EXACT_MATCH_PLUS2_BADGES
  | MatchType_EXACT_MATCH_PLUS_EXEC_TIME
  | MatchType_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS
  | MatchType_A1_EXACT_MATCH_SUMMARIZED_QUANTITY
  | MatchType_A2_EXACT_MATCH_SUMMARIZED_QUANTITY
  | MatchType_A3_EXACT_MATCH_SUMMARIZED_QUANTITY
  | MatchType_A4_EXACT_MATCH_SUMMARIZED_QUANTITY
  | MatchType_A5_EXACT_MATCH_SUMMARIZED_QUANTITY
  | MatchType_EXACT_MATCH_MINUS_BADGES_TIMES
  | MatchType_SUMMARIZED_MATCH_MINUS_BADGES_TIMES
  | MatchType_OCS_LOCKED_IN
  | MatchType_ACT_ACCEPTED_TRADE
  | MatchType_ACT_DEFAULT_TRADE
  | MatchType_ACT_DEFAULT_AFTER_M2
  | MatchType_ACTM6_MATCH
  deriving stock (Show, Eq, Generic)

instance Validity MatchType

instance IsField MatchType where
  fieldTag Proxy = 574
  fieldIsData Proxy = False
  fieldToValue = \case
    MatchType_EXACT_MATCH_PLUS4_BADGES_EXEC_TIME -> "A1"
    MatchType_EXACT_MATCH_PLUS4_BADGES -> "A2"
    MatchType_EXACT_MATCH_PLUS2_BADGES_EXEC_TIME -> "A3"
    MatchType_EXACT_MATCH_PLUS2_BADGES -> "A4"
    MatchType_EXACT_MATCH_PLUS_EXEC_TIME -> "A5"
    MatchType_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS -> "AQ"
    MatchType_A1_EXACT_MATCH_SUMMARIZED_QUANTITY -> "S1"
    MatchType_A2_EXACT_MATCH_SUMMARIZED_QUANTITY -> "S2"
    MatchType_A3_EXACT_MATCH_SUMMARIZED_QUANTITY -> "S3"
    MatchType_A4_EXACT_MATCH_SUMMARIZED_QUANTITY -> "S4"
    MatchType_A5_EXACT_MATCH_SUMMARIZED_QUANTITY -> "S5"
    MatchType_EXACT_MATCH_MINUS_BADGES_TIMES -> "M1"
    MatchType_SUMMARIZED_MATCH_MINUS_BADGES_TIMES -> "M2"
    MatchType_OCS_LOCKED_IN -> "MT"
    MatchType_ACT_ACCEPTED_TRADE -> "M3"
    MatchType_ACT_DEFAULT_TRADE -> "M4"
    MatchType_ACT_DEFAULT_AFTER_M2 -> "M5"
    MatchType_ACTM6_MATCH -> "M6"
  fieldFromValue = \case
    "A1" -> Right MatchType_EXACT_MATCH_PLUS4_BADGES_EXEC_TIME
    "A2" -> Right MatchType_EXACT_MATCH_PLUS4_BADGES
    "A3" -> Right MatchType_EXACT_MATCH_PLUS2_BADGES_EXEC_TIME
    "A4" -> Right MatchType_EXACT_MATCH_PLUS2_BADGES
    "A5" -> Right MatchType_EXACT_MATCH_PLUS_EXEC_TIME
    "AQ" -> Right MatchType_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS
    "S1" -> Right MatchType_A1_EXACT_MATCH_SUMMARIZED_QUANTITY
    "S2" -> Right MatchType_A2_EXACT_MATCH_SUMMARIZED_QUANTITY
    "S3" -> Right MatchType_A3_EXACT_MATCH_SUMMARIZED_QUANTITY
    "S4" -> Right MatchType_A4_EXACT_MATCH_SUMMARIZED_QUANTITY
    "S5" -> Right MatchType_A5_EXACT_MATCH_SUMMARIZED_QUANTITY
    "M1" -> Right MatchType_EXACT_MATCH_MINUS_BADGES_TIMES
    "M2" -> Right MatchType_SUMMARIZED_MATCH_MINUS_BADGES_TIMES
    "MT" -> Right MatchType_OCS_LOCKED_IN
    "M3" -> Right MatchType_ACT_ACCEPTED_TRADE
    "M4" -> Right MatchType_ACT_DEFAULT_TRADE
    "M5" -> Right MatchType_ACT_DEFAULT_AFTER_M2
    "M6" -> Right MatchType_ACTM6_MATCH
    v -> Left ("Unknown MatchType: " <> show v)

-- FieldSpec {fieldNumber = 575, fieldName = "OddLot", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data OddLot
  = OddLot_YES
  | OddLot_NO
  deriving stock (Show, Eq, Generic)

instance Validity OddLot

instance IsField OddLot where
  fieldTag Proxy = 575
  fieldIsData Proxy = False
  fieldToValue = \case
    OddLot_YES -> "Y"
    OddLot_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right OddLot_YES
    "N" -> Right OddLot_NO
    v -> Left ("Unknown OddLot: " <> show v)

-- FieldSpec {fieldNumber = 576, fieldName = "NoClearingInstructions", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoClearingInstructions = NoClearingInstructions {unNoClearingInstructions :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoClearingInstructions

instance IsField NoClearingInstructions where
  fieldTag Proxy = 576
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoClearingInstructions
  fieldFromValue = fromValue >=> (prettyValidate . NoClearingInstructions)

-- FieldSpec {fieldNumber = 577, fieldName = "ClearingInstruction", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PROCESS_NORMALLY"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXCLUDE_FROM_ALL_NETTING"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BILATERAL_NETTING_ONLY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EX_CLEARING"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SPECIAL_TRADE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "MULTILATERAL_NETTING"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CLEAR_AGAINST_CENTRAL_COUNTERPARTY"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "EXCLUDE_FROM_CENTRAL_COUNTERPARTY"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "MANUAL_MODE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "AUTOMATIC_POSTING_MODE"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "AUTOMATIC_GIVE_UP_MODE"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "QUALIFIED_SERVICE_REPRESENTATIVE_QSR"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "CUSTOMER_TRADE"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "SELF_CLEARING"}]}
data ClearingInstruction
  = ClearingInstruction_PROCESS_NORMALLY
  | ClearingInstruction_EXCLUDE_FROM_ALL_NETTING
  | ClearingInstruction_BILATERAL_NETTING_ONLY
  | ClearingInstruction_EX_CLEARING
  | ClearingInstruction_SPECIAL_TRADE
  | ClearingInstruction_MULTILATERAL_NETTING
  | ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY
  | ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY
  | ClearingInstruction_MANUAL_MODE
  | ClearingInstruction_AUTOMATIC_POSTING_MODE
  | ClearingInstruction_AUTOMATIC_GIVE_UP_MODE
  | ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE_QSR
  | ClearingInstruction_CUSTOMER_TRADE
  | ClearingInstruction_SELF_CLEARING
  deriving stock (Show, Eq, Generic)

instance Validity ClearingInstruction

instance IsField ClearingInstruction where
  fieldTag Proxy = 577
  fieldIsData Proxy = False
  fieldToValue = \case
    ClearingInstruction_PROCESS_NORMALLY -> "0"
    ClearingInstruction_EXCLUDE_FROM_ALL_NETTING -> "1"
    ClearingInstruction_BILATERAL_NETTING_ONLY -> "2"
    ClearingInstruction_EX_CLEARING -> "3"
    ClearingInstruction_SPECIAL_TRADE -> "4"
    ClearingInstruction_MULTILATERAL_NETTING -> "5"
    ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY -> "6"
    ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY -> "7"
    ClearingInstruction_MANUAL_MODE -> "8"
    ClearingInstruction_AUTOMATIC_POSTING_MODE -> "9"
    ClearingInstruction_AUTOMATIC_GIVE_UP_MODE -> "10"
    ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE_QSR -> "11"
    ClearingInstruction_CUSTOMER_TRADE -> "12"
    ClearingInstruction_SELF_CLEARING -> "13"
  fieldFromValue = \case
    "0" -> Right ClearingInstruction_PROCESS_NORMALLY
    "1" -> Right ClearingInstruction_EXCLUDE_FROM_ALL_NETTING
    "2" -> Right ClearingInstruction_BILATERAL_NETTING_ONLY
    "3" -> Right ClearingInstruction_EX_CLEARING
    "4" -> Right ClearingInstruction_SPECIAL_TRADE
    "5" -> Right ClearingInstruction_MULTILATERAL_NETTING
    "6" -> Right ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY
    "7" -> Right ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY
    "8" -> Right ClearingInstruction_MANUAL_MODE
    "9" -> Right ClearingInstruction_AUTOMATIC_POSTING_MODE
    "10" -> Right ClearingInstruction_AUTOMATIC_GIVE_UP_MODE
    "11" -> Right ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE_QSR
    "12" -> Right ClearingInstruction_CUSTOMER_TRADE
    "13" -> Right ClearingInstruction_SELF_CLEARING
    v -> Left ("Unknown ClearingInstruction: " <> show v)

-- FieldSpec {fieldNumber = 578, fieldName = "TradeInputSource", fieldType = FieldTypeString, fieldValues = []}
newtype TradeInputSource = TradeInputSource {unTradeInputSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeInputSource

instance IsField TradeInputSource where
  fieldTag Proxy = 578
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeInputSource
  fieldFromValue = fromValue >=> (prettyValidate . TradeInputSource)

-- FieldSpec {fieldNumber = 579, fieldName = "TradeInputDevice", fieldType = FieldTypeString, fieldValues = []}
newtype TradeInputDevice = TradeInputDevice {unTradeInputDevice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeInputDevice

instance IsField TradeInputDevice where
  fieldTag Proxy = 579
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeInputDevice
  fieldFromValue = fromValue >=> (prettyValidate . TradeInputDevice)

-- FieldSpec {fieldNumber = 580, fieldName = "NoDates", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoDates = NoDates {unNoDates :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoDates

instance IsField NoDates where
  fieldTag Proxy = 580
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoDates
  fieldFromValue = fromValue >=> (prettyValidate . NoDates)

-- FieldSpec {fieldNumber = 581, fieldName = "AccountType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CARRIED_CUSTOMER_SIDE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CARRIED_NON_CUSTOMER_SIDE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "HOUSE_TRADER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "FLOOR_TRADER"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "HOUSE_TRADER_CROSS_MARGINED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "JOINT_BACK_OFFICE_ACCOUNT"}]}
data AccountType
  = AccountType_CARRIED_CUSTOMER_SIDE
  | AccountType_CARRIED_NON_CUSTOMER_SIDE
  | AccountType_HOUSE_TRADER
  | AccountType_FLOOR_TRADER
  | AccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED
  | AccountType_HOUSE_TRADER_CROSS_MARGINED
  | AccountType_JOINT_BACK_OFFICE_ACCOUNT
  deriving stock (Show, Eq, Generic)

instance Validity AccountType

instance IsField AccountType where
  fieldTag Proxy = 581
  fieldIsData Proxy = False
  fieldToValue = \case
    AccountType_CARRIED_CUSTOMER_SIDE -> "1"
    AccountType_CARRIED_NON_CUSTOMER_SIDE -> "2"
    AccountType_HOUSE_TRADER -> "3"
    AccountType_FLOOR_TRADER -> "4"
    AccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED -> "6"
    AccountType_HOUSE_TRADER_CROSS_MARGINED -> "7"
    AccountType_JOINT_BACK_OFFICE_ACCOUNT -> "8"
  fieldFromValue = \case
    "1" -> Right AccountType_CARRIED_CUSTOMER_SIDE
    "2" -> Right AccountType_CARRIED_NON_CUSTOMER_SIDE
    "3" -> Right AccountType_HOUSE_TRADER
    "4" -> Right AccountType_FLOOR_TRADER
    "6" -> Right AccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED
    "7" -> Right AccountType_HOUSE_TRADER_CROSS_MARGINED
    "8" -> Right AccountType_JOINT_BACK_OFFICE_ACCOUNT
    v -> Left ("Unknown AccountType: " <> show v)

-- FieldSpec {fieldNumber = 582, fieldName = "CustOrderCapacity", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MEMBER_TRADING_FOR_ANOTHER_MEMBER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ALL_OTHER"}]}
data CustOrderCapacity
  = CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT
  | CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT
  | CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER
  | CustOrderCapacity_ALL_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity CustOrderCapacity

instance IsField CustOrderCapacity where
  fieldTag Proxy = 582
  fieldIsData Proxy = False
  fieldToValue = \case
    CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT -> "1"
    CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT -> "2"
    CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER -> "3"
    CustOrderCapacity_ALL_OTHER -> "4"
  fieldFromValue = \case
    "1" -> Right CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT
    "2" -> Right CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT
    "3" -> Right CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER
    "4" -> Right CustOrderCapacity_ALL_OTHER
    v -> Left ("Unknown CustOrderCapacity: " <> show v)

-- FieldSpec {fieldNumber = 583, fieldName = "ClOrdLinkID", fieldType = FieldTypeString, fieldValues = []}
newtype ClOrdLinkID = ClOrdLinkID {unClOrdLinkID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClOrdLinkID

instance IsField ClOrdLinkID where
  fieldTag Proxy = 583
  fieldIsData Proxy = False
  fieldToValue = toValue . unClOrdLinkID
  fieldFromValue = fromValue >=> (prettyValidate . ClOrdLinkID)

-- FieldSpec {fieldNumber = 584, fieldName = "MassStatusReqID", fieldType = FieldTypeString, fieldValues = []}
newtype MassStatusReqID = MassStatusReqID {unMassStatusReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MassStatusReqID

instance IsField MassStatusReqID where
  fieldTag Proxy = 584
  fieldIsData Proxy = False
  fieldToValue = toValue . unMassStatusReqID
  fieldFromValue = fromValue >=> (prettyValidate . MassStatusReqID)

-- FieldSpec {fieldNumber = 585, fieldName = "MassStatusReqType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_PRODUCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_ACFI_CODE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STATUS_FOR_ALL_ORDERS"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_PARTY_ID"}]}
data MassStatusReqType
  = MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY
  | MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY
  | MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT
  | MassStatusReqType_STATUS_FOR_ORDERS_FOR_ACFI_CODE
  | MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY_TYPE
  | MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION
  | MassStatusReqType_STATUS_FOR_ALL_ORDERS
  | MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTY_ID
  deriving stock (Show, Eq, Generic)

instance Validity MassStatusReqType

instance IsField MassStatusReqType where
  fieldTag Proxy = 585
  fieldIsData Proxy = False
  fieldToValue = \case
    MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY -> "1"
    MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY -> "2"
    MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT -> "3"
    MassStatusReqType_STATUS_FOR_ORDERS_FOR_ACFI_CODE -> "4"
    MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY_TYPE -> "5"
    MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION -> "6"
    MassStatusReqType_STATUS_FOR_ALL_ORDERS -> "7"
    MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTY_ID -> "8"
  fieldFromValue = \case
    "1" -> Right MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY
    "2" -> Right MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY
    "3" -> Right MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT
    "4" -> Right MassStatusReqType_STATUS_FOR_ORDERS_FOR_ACFI_CODE
    "5" -> Right MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY_TYPE
    "6" -> Right MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION
    "7" -> Right MassStatusReqType_STATUS_FOR_ALL_ORDERS
    "8" -> Right MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTY_ID
    v -> Left ("Unknown MassStatusReqType: " <> show v)

-- FieldSpec {fieldNumber = 586, fieldName = "OrigOrdModTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype OrigOrdModTime = OrigOrdModTime {unOrigOrdModTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigOrdModTime

instance IsField OrigOrdModTime where
  fieldTag Proxy = 586
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigOrdModTime
  fieldFromValue = fromValue >=> (prettyValidate . OrigOrdModTime)

-- FieldSpec {fieldNumber = 587, fieldName = "LegSettlType", fieldType = FieldTypeChar, fieldValues = []}
newtype LegSettlType = LegSettlType {unLegSettlType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSettlType

instance IsField LegSettlType where
  fieldTag Proxy = 587
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSettlType
  fieldFromValue = fromValue >=> (prettyValidate . LegSettlType)

-- FieldSpec {fieldNumber = 588, fieldName = "LegSettlDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegSettlDate = LegSettlDate {unLegSettlDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSettlDate

instance IsField LegSettlDate where
  fieldTag Proxy = 588
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSettlDate
  fieldFromValue = fromValue >=> (prettyValidate . LegSettlDate)

-- FieldSpec {fieldNumber = 589, fieldName = "DayBookingInst", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "AUTO"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCUMULATE"}]}
data DayBookingInst
  = DayBookingInst_AUTO
  | DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING
  | DayBookingInst_ACCUMULATE
  deriving stock (Show, Eq, Generic)

instance Validity DayBookingInst

instance IsField DayBookingInst where
  fieldTag Proxy = 589
  fieldIsData Proxy = False
  fieldToValue = \case
    DayBookingInst_AUTO -> "0"
    DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING -> "1"
    DayBookingInst_ACCUMULATE -> "2"
  fieldFromValue = \case
    "0" -> Right DayBookingInst_AUTO
    "1" -> Right DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING
    "2" -> Right DayBookingInst_ACCUMULATE
    v -> Left ("Unknown DayBookingInst: " <> show v)

-- FieldSpec {fieldNumber = 590, fieldName = "BookingUnit", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL"}]}
data BookingUnit
  = BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT
  | BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER
  | BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL
  deriving stock (Show, Eq, Generic)

instance Validity BookingUnit

instance IsField BookingUnit where
  fieldTag Proxy = 590
  fieldIsData Proxy = False
  fieldToValue = \case
    BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT -> "0"
    BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER -> "1"
    BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL -> "2"
  fieldFromValue = \case
    "0" -> Right BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT
    "1" -> Right BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER
    "2" -> Right BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL
    v -> Left ("Unknown BookingUnit: " <> show v)

-- FieldSpec {fieldNumber = 591, fieldName = "PreallocMethod", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PRO_RATA"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DO_NOT_PRO_RATA"}]}
data PreallocMethod
  = PreallocMethod_PRO_RATA
  | PreallocMethod_DO_NOT_PRO_RATA
  deriving stock (Show, Eq, Generic)

instance Validity PreallocMethod

instance IsField PreallocMethod where
  fieldTag Proxy = 591
  fieldIsData Proxy = False
  fieldToValue = \case
    PreallocMethod_PRO_RATA -> "0"
    PreallocMethod_DO_NOT_PRO_RATA -> "1"
  fieldFromValue = \case
    "0" -> Right PreallocMethod_PRO_RATA
    "1" -> Right PreallocMethod_DO_NOT_PRO_RATA
    v -> Left ("Unknown PreallocMethod: " <> show v)

-- FieldSpec {fieldNumber = 592, fieldName = "UnderlyingCountryOfIssue", fieldType = FieldTypeCountry, fieldValues = []}
newtype UnderlyingCountryOfIssue = UnderlyingCountryOfIssue {unUnderlyingCountryOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCountryOfIssue

instance IsField UnderlyingCountryOfIssue where
  fieldTag Proxy = 592
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCountryOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCountryOfIssue)

-- FieldSpec {fieldNumber = 593, fieldName = "UnderlyingStateOrProvinceOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingStateOrProvinceOfIssue = UnderlyingStateOrProvinceOfIssue {unUnderlyingStateOrProvinceOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStateOrProvinceOfIssue

instance IsField UnderlyingStateOrProvinceOfIssue where
  fieldTag Proxy = 593
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStateOrProvinceOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStateOrProvinceOfIssue)

-- FieldSpec {fieldNumber = 594, fieldName = "UnderlyingLocaleOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingLocaleOfIssue = UnderlyingLocaleOfIssue {unUnderlyingLocaleOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingLocaleOfIssue

instance IsField UnderlyingLocaleOfIssue where
  fieldTag Proxy = 594
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingLocaleOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingLocaleOfIssue)

-- FieldSpec {fieldNumber = 595, fieldName = "UnderlyingInstrRegistry", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingInstrRegistry = UnderlyingInstrRegistry {unUnderlyingInstrRegistry :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingInstrRegistry

instance IsField UnderlyingInstrRegistry where
  fieldTag Proxy = 595
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingInstrRegistry
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingInstrRegistry)

-- FieldSpec {fieldNumber = 596, fieldName = "LegCountryOfIssue", fieldType = FieldTypeCountry, fieldValues = []}
newtype LegCountryOfIssue = LegCountryOfIssue {unLegCountryOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCountryOfIssue

instance IsField LegCountryOfIssue where
  fieldTag Proxy = 596
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCountryOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . LegCountryOfIssue)

-- FieldSpec {fieldNumber = 597, fieldName = "LegStateOrProvinceOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype LegStateOrProvinceOfIssue = LegStateOrProvinceOfIssue {unLegStateOrProvinceOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStateOrProvinceOfIssue

instance IsField LegStateOrProvinceOfIssue where
  fieldTag Proxy = 597
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStateOrProvinceOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . LegStateOrProvinceOfIssue)

-- FieldSpec {fieldNumber = 598, fieldName = "LegLocaleOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype LegLocaleOfIssue = LegLocaleOfIssue {unLegLocaleOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegLocaleOfIssue

instance IsField LegLocaleOfIssue where
  fieldTag Proxy = 598
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegLocaleOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . LegLocaleOfIssue)

-- FieldSpec {fieldNumber = 599, fieldName = "LegInstrRegistry", fieldType = FieldTypeString, fieldValues = []}
newtype LegInstrRegistry = LegInstrRegistry {unLegInstrRegistry :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegInstrRegistry

instance IsField LegInstrRegistry where
  fieldTag Proxy = 599
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegInstrRegistry
  fieldFromValue = fromValue >=> (prettyValidate . LegInstrRegistry)

-- FieldSpec {fieldNumber = 600, fieldName = "LegSymbol", fieldType = FieldTypeString, fieldValues = []}
newtype LegSymbol = LegSymbol {unLegSymbol :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSymbol

instance IsField LegSymbol where
  fieldTag Proxy = 600
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSymbol
  fieldFromValue = fromValue >=> (prettyValidate . LegSymbol)

-- FieldSpec {fieldNumber = 601, fieldName = "LegSymbolSfx", fieldType = FieldTypeString, fieldValues = []}
newtype LegSymbolSfx = LegSymbolSfx {unLegSymbolSfx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSymbolSfx

instance IsField LegSymbolSfx where
  fieldTag Proxy = 601
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSymbolSfx
  fieldFromValue = fromValue >=> (prettyValidate . LegSymbolSfx)

-- FieldSpec {fieldNumber = 602, fieldName = "LegSecurityID", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityID = LegSecurityID {unLegSecurityID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityID

instance IsField LegSecurityID where
  fieldTag Proxy = 602
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityID
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityID)

-- FieldSpec {fieldNumber = 603, fieldName = "LegSecurityIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityIDSource = LegSecurityIDSource {unLegSecurityIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityIDSource

instance IsField LegSecurityIDSource where
  fieldTag Proxy = 603
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityIDSource
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityIDSource)

-- FieldSpec {fieldNumber = 604, fieldName = "NoLegSecurityAltID", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLegSecurityAltID = NoLegSecurityAltID {unNoLegSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLegSecurityAltID

instance IsField NoLegSecurityAltID where
  fieldTag Proxy = 604
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLegSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . NoLegSecurityAltID)

-- FieldSpec {fieldNumber = 605, fieldName = "LegSecurityAltID", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityAltID = LegSecurityAltID {unLegSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityAltID

instance IsField LegSecurityAltID where
  fieldTag Proxy = 605
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityAltID)

-- FieldSpec {fieldNumber = 606, fieldName = "LegSecurityAltIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityAltIDSource = LegSecurityAltIDSource {unLegSecurityAltIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityAltIDSource

instance IsField LegSecurityAltIDSource where
  fieldTag Proxy = 606
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityAltIDSource
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityAltIDSource)

-- FieldSpec {fieldNumber = 607, fieldName = "LegProduct", fieldType = FieldTypeInt, fieldValues = []}
newtype LegProduct = LegProduct {unLegProduct :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegProduct

instance IsField LegProduct where
  fieldTag Proxy = 607
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegProduct
  fieldFromValue = fromValue >=> (prettyValidate . LegProduct)

-- FieldSpec {fieldNumber = 608, fieldName = "LegCFICode", fieldType = FieldTypeString, fieldValues = []}
newtype LegCFICode = LegCFICode {unLegCFICode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCFICode

instance IsField LegCFICode where
  fieldTag Proxy = 608
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCFICode
  fieldFromValue = fromValue >=> (prettyValidate . LegCFICode)

-- FieldSpec {fieldNumber = 609, fieldName = "LegSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityType = LegSecurityType {unLegSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityType

instance IsField LegSecurityType where
  fieldTag Proxy = 609
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityType)

-- FieldSpec {fieldNumber = 610, fieldName = "LegMaturityMonthYear", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype LegMaturityMonthYear = LegMaturityMonthYear {unLegMaturityMonthYear :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegMaturityMonthYear

instance IsField LegMaturityMonthYear where
  fieldTag Proxy = 610
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegMaturityMonthYear
  fieldFromValue = fromValue >=> (prettyValidate . LegMaturityMonthYear)

-- FieldSpec {fieldNumber = 611, fieldName = "LegMaturityDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegMaturityDate = LegMaturityDate {unLegMaturityDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegMaturityDate

instance IsField LegMaturityDate where
  fieldTag Proxy = 611
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegMaturityDate
  fieldFromValue = fromValue >=> (prettyValidate . LegMaturityDate)

-- FieldSpec {fieldNumber = 612, fieldName = "LegStrikePrice", fieldType = FieldTypePrice, fieldValues = []}
newtype LegStrikePrice = LegStrikePrice {unLegStrikePrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStrikePrice

instance IsField LegStrikePrice where
  fieldTag Proxy = 612
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStrikePrice
  fieldFromValue = fromValue >=> (prettyValidate . LegStrikePrice)

-- FieldSpec {fieldNumber = 613, fieldName = "LegOptAttribute", fieldType = FieldTypeChar, fieldValues = []}
newtype LegOptAttribute = LegOptAttribute {unLegOptAttribute :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegOptAttribute

instance IsField LegOptAttribute where
  fieldTag Proxy = 613
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegOptAttribute
  fieldFromValue = fromValue >=> (prettyValidate . LegOptAttribute)

-- FieldSpec {fieldNumber = 614, fieldName = "LegContractMultiplier", fieldType = FieldTypeFloat, fieldValues = []}
newtype LegContractMultiplier = LegContractMultiplier {unLegContractMultiplier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegContractMultiplier

instance IsField LegContractMultiplier where
  fieldTag Proxy = 614
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegContractMultiplier
  fieldFromValue = fromValue >=> (prettyValidate . LegContractMultiplier)

-- FieldSpec {fieldNumber = 615, fieldName = "LegCouponRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype LegCouponRate = LegCouponRate {unLegCouponRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCouponRate

instance IsField LegCouponRate where
  fieldTag Proxy = 615
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCouponRate
  fieldFromValue = fromValue >=> (prettyValidate . LegCouponRate)

-- FieldSpec {fieldNumber = 616, fieldName = "LegSecurityExchange", fieldType = FieldTypeExchange, fieldValues = []}
newtype LegSecurityExchange = LegSecurityExchange {unLegSecurityExchange :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityExchange

instance IsField LegSecurityExchange where
  fieldTag Proxy = 616
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityExchange
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityExchange)

-- FieldSpec {fieldNumber = 617, fieldName = "LegIssuer", fieldType = FieldTypeString, fieldValues = []}
newtype LegIssuer = LegIssuer {unLegIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegIssuer

instance IsField LegIssuer where
  fieldTag Proxy = 617
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegIssuer
  fieldFromValue = fromValue >=> (prettyValidate . LegIssuer)

-- FieldSpec {fieldNumber = 618, fieldName = "EncodedLegIssuerLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedLegIssuerLen = EncodedLegIssuerLen {unEncodedLegIssuerLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedLegIssuerLen

instance IsField EncodedLegIssuerLen where
  fieldTag Proxy = 618
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedLegIssuerLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedLegIssuerLen)

-- FieldSpec {fieldNumber = 619, fieldName = "EncodedLegIssuer", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedLegIssuer = EncodedLegIssuer {unEncodedLegIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedLegIssuer

instance IsField EncodedLegIssuer where
  fieldTag Proxy = 619
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedLegIssuer
  fieldFromValue = fromValue >=> (prettyValidate . EncodedLegIssuer)

-- FieldSpec {fieldNumber = 620, fieldName = "LegSecurityDesc", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityDesc = LegSecurityDesc {unLegSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityDesc

instance IsField LegSecurityDesc where
  fieldTag Proxy = 620
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityDesc)

-- FieldSpec {fieldNumber = 621, fieldName = "EncodedLegSecurityDescLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedLegSecurityDescLen = EncodedLegSecurityDescLen {unEncodedLegSecurityDescLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedLegSecurityDescLen

instance IsField EncodedLegSecurityDescLen where
  fieldTag Proxy = 621
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedLegSecurityDescLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedLegSecurityDescLen)

-- FieldSpec {fieldNumber = 622, fieldName = "EncodedLegSecurityDesc", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedLegSecurityDesc = EncodedLegSecurityDesc {unEncodedLegSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedLegSecurityDesc

instance IsField EncodedLegSecurityDesc where
  fieldTag Proxy = 622
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedLegSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . EncodedLegSecurityDesc)

-- FieldSpec {fieldNumber = 623, fieldName = "LegRatioQty", fieldType = FieldTypeFloat, fieldValues = []}
newtype LegRatioQty = LegRatioQty {unLegRatioQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRatioQty

instance IsField LegRatioQty where
  fieldTag Proxy = 623
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRatioQty
  fieldFromValue = fromValue >=> (prettyValidate . LegRatioQty)

-- FieldSpec {fieldNumber = 624, fieldName = "LegSide", fieldType = FieldTypeChar, fieldValues = []}
newtype LegSide = LegSide {unLegSide :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSide

instance IsField LegSide where
  fieldTag Proxy = 624
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSide
  fieldFromValue = fromValue >=> (prettyValidate . LegSide)

-- FieldSpec {fieldNumber = 625, fieldName = "TradingSessionSubID", fieldType = FieldTypeString, fieldValues = []}
newtype TradingSessionSubID = TradingSessionSubID {unTradingSessionSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradingSessionSubID

instance IsField TradingSessionSubID where
  fieldTag Proxy = 625
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradingSessionSubID
  fieldFromValue = fromValue >=> (prettyValidate . TradingSessionSubID)

-- FieldSpec {fieldNumber = 626, fieldName = "AllocType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CALCULATED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PRELIMINARY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "READY_TO_BOOK"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "WAREHOUSE_INSTRUCTION"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "REQUEST_TO_INTERMEDIARY"}]}
data AllocType
  = AllocType_CALCULATED
  | AllocType_PRELIMINARY
  | AllocType_READY_TO_BOOK
  | AllocType_WAREHOUSE_INSTRUCTION
  | AllocType_REQUEST_TO_INTERMEDIARY
  deriving stock (Show, Eq, Generic)

instance Validity AllocType

instance IsField AllocType where
  fieldTag Proxy = 626
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocType_CALCULATED -> "1"
    AllocType_PRELIMINARY -> "2"
    AllocType_READY_TO_BOOK -> "5"
    AllocType_WAREHOUSE_INSTRUCTION -> "7"
    AllocType_REQUEST_TO_INTERMEDIARY -> "8"
  fieldFromValue = \case
    "1" -> Right AllocType_CALCULATED
    "2" -> Right AllocType_PRELIMINARY
    "5" -> Right AllocType_READY_TO_BOOK
    "7" -> Right AllocType_WAREHOUSE_INSTRUCTION
    "8" -> Right AllocType_REQUEST_TO_INTERMEDIARY
    v -> Left ("Unknown AllocType: " <> show v)

-- FieldSpec {fieldNumber = 627, fieldName = "NoHops", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoHops = NoHops {unNoHops :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoHops

instance IsField NoHops where
  fieldTag Proxy = 627
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoHops
  fieldFromValue = fromValue >=> (prettyValidate . NoHops)

-- FieldSpec {fieldNumber = 628, fieldName = "HopCompID", fieldType = FieldTypeString, fieldValues = []}
newtype HopCompID = HopCompID {unHopCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HopCompID

instance IsField HopCompID where
  fieldTag Proxy = 628
  fieldIsData Proxy = False
  fieldToValue = toValue . unHopCompID
  fieldFromValue = fromValue >=> (prettyValidate . HopCompID)

-- FieldSpec {fieldNumber = 629, fieldName = "HopSendingTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype HopSendingTime = HopSendingTime {unHopSendingTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HopSendingTime

instance IsField HopSendingTime where
  fieldTag Proxy = 629
  fieldIsData Proxy = False
  fieldToValue = toValue . unHopSendingTime
  fieldFromValue = fromValue >=> (prettyValidate . HopSendingTime)

-- FieldSpec {fieldNumber = 630, fieldName = "HopRefID", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype HopRefID = HopRefID {unHopRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HopRefID

instance IsField HopRefID where
  fieldTag Proxy = 630
  fieldIsData Proxy = False
  fieldToValue = toValue . unHopRefID
  fieldFromValue = fromValue >=> (prettyValidate . HopRefID)

-- FieldSpec {fieldNumber = 631, fieldName = "MidPx", fieldType = FieldTypePrice, fieldValues = []}
newtype MidPx = MidPx {unMidPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MidPx

instance IsField MidPx where
  fieldTag Proxy = 631
  fieldIsData Proxy = False
  fieldToValue = toValue . unMidPx
  fieldFromValue = fromValue >=> (prettyValidate . MidPx)

-- FieldSpec {fieldNumber = 632, fieldName = "BidYield", fieldType = FieldTypePercentage, fieldValues = []}
newtype BidYield = BidYield {unBidYield :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidYield

instance IsField BidYield where
  fieldTag Proxy = 632
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidYield
  fieldFromValue = fromValue >=> (prettyValidate . BidYield)

-- FieldSpec {fieldNumber = 633, fieldName = "MidYield", fieldType = FieldTypePercentage, fieldValues = []}
newtype MidYield = MidYield {unMidYield :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MidYield

instance IsField MidYield where
  fieldTag Proxy = 633
  fieldIsData Proxy = False
  fieldToValue = toValue . unMidYield
  fieldFromValue = fromValue >=> (prettyValidate . MidYield)

-- FieldSpec {fieldNumber = 634, fieldName = "OfferYield", fieldType = FieldTypePercentage, fieldValues = []}
newtype OfferYield = OfferYield {unOfferYield :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferYield

instance IsField OfferYield where
  fieldTag Proxy = 634
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferYield
  fieldFromValue = fromValue >=> (prettyValidate . OfferYield)

-- FieldSpec {fieldNumber = 635, fieldName = "ClearingFeeIndicator", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "CBOE_MEMBER"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "NON_MEMBER_AND_CUSTOMER"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "EQUITY_MEMBER_AND_CLEARING_MEMBER"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "FULL_AND_ASSOCIATE_MEMBER"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "FIRMS106_H_AND106_J"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "GIM"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LESSEE106_F_EMPLOYEES"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "ALL_OTHER_OWNERSHIP_TYPES"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIRST_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SECOND_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "THIRD_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "FOURTH_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "FIFTH_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "SIXTH_YEAR_DELEGATE"}]}
data ClearingFeeIndicator
  = ClearingFeeIndicator_CBOE_MEMBER
  | ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER
  | ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER
  | ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER
  | ClearingFeeIndicator_FIRMS106_H_AND106_J
  | ClearingFeeIndicator_GIM
  | ClearingFeeIndicator_LESSEE106_F_EMPLOYEES
  | ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES
  | ClearingFeeIndicator_FIRST_YEAR_DELEGATE
  | ClearingFeeIndicator_SECOND_YEAR_DELEGATE
  | ClearingFeeIndicator_THIRD_YEAR_DELEGATE
  | ClearingFeeIndicator_FOURTH_YEAR_DELEGATE
  | ClearingFeeIndicator_FIFTH_YEAR_DELEGATE
  | ClearingFeeIndicator_SIXTH_YEAR_DELEGATE
  deriving stock (Show, Eq, Generic)

instance Validity ClearingFeeIndicator

instance IsField ClearingFeeIndicator where
  fieldTag Proxy = 635
  fieldIsData Proxy = False
  fieldToValue = \case
    ClearingFeeIndicator_CBOE_MEMBER -> "B"
    ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER -> "C"
    ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER -> "E"
    ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER -> "F"
    ClearingFeeIndicator_FIRMS106_H_AND106_J -> "H"
    ClearingFeeIndicator_GIM -> "I"
    ClearingFeeIndicator_LESSEE106_F_EMPLOYEES -> "L"
    ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES -> "M"
    ClearingFeeIndicator_FIRST_YEAR_DELEGATE -> "1"
    ClearingFeeIndicator_SECOND_YEAR_DELEGATE -> "2"
    ClearingFeeIndicator_THIRD_YEAR_DELEGATE -> "3"
    ClearingFeeIndicator_FOURTH_YEAR_DELEGATE -> "4"
    ClearingFeeIndicator_FIFTH_YEAR_DELEGATE -> "5"
    ClearingFeeIndicator_SIXTH_YEAR_DELEGATE -> "9"
  fieldFromValue = \case
    "B" -> Right ClearingFeeIndicator_CBOE_MEMBER
    "C" -> Right ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER
    "E" -> Right ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER
    "F" -> Right ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER
    "H" -> Right ClearingFeeIndicator_FIRMS106_H_AND106_J
    "I" -> Right ClearingFeeIndicator_GIM
    "L" -> Right ClearingFeeIndicator_LESSEE106_F_EMPLOYEES
    "M" -> Right ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES
    "1" -> Right ClearingFeeIndicator_FIRST_YEAR_DELEGATE
    "2" -> Right ClearingFeeIndicator_SECOND_YEAR_DELEGATE
    "3" -> Right ClearingFeeIndicator_THIRD_YEAR_DELEGATE
    "4" -> Right ClearingFeeIndicator_FOURTH_YEAR_DELEGATE
    "5" -> Right ClearingFeeIndicator_FIFTH_YEAR_DELEGATE
    "9" -> Right ClearingFeeIndicator_SIXTH_YEAR_DELEGATE
    v -> Left ("Unknown ClearingFeeIndicator: " <> show v)

-- FieldSpec {fieldNumber = 636, fieldName = "WorkingIndicator", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data WorkingIndicator
  = WorkingIndicator_YES
  | WorkingIndicator_NO
  deriving stock (Show, Eq, Generic)

instance Validity WorkingIndicator

instance IsField WorkingIndicator where
  fieldTag Proxy = 636
  fieldIsData Proxy = False
  fieldToValue = \case
    WorkingIndicator_YES -> "Y"
    WorkingIndicator_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right WorkingIndicator_YES
    "N" -> Right WorkingIndicator_NO
    v -> Left ("Unknown WorkingIndicator: " <> show v)

-- FieldSpec {fieldNumber = 637, fieldName = "LegLastPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LegLastPx = LegLastPx {unLegLastPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegLastPx

instance IsField LegLastPx where
  fieldTag Proxy = 637
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegLastPx
  fieldFromValue = fromValue >=> (prettyValidate . LegLastPx)

-- FieldSpec {fieldNumber = 638, fieldName = "PriorityIndicator", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PRIORITY_UNCHANGED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE"}]}
data PriorityIndicator
  = PriorityIndicator_PRIORITY_UNCHANGED
  | PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE
  deriving stock (Show, Eq, Generic)

instance Validity PriorityIndicator

instance IsField PriorityIndicator where
  fieldTag Proxy = 638
  fieldIsData Proxy = False
  fieldToValue = \case
    PriorityIndicator_PRIORITY_UNCHANGED -> "0"
    PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE -> "1"
  fieldFromValue = \case
    "0" -> Right PriorityIndicator_PRIORITY_UNCHANGED
    "1" -> Right PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE
    v -> Left ("Unknown PriorityIndicator: " <> show v)

-- FieldSpec {fieldNumber = 639, fieldName = "PriceImprovement", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype PriceImprovement = PriceImprovement {unPriceImprovement :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PriceImprovement

instance IsField PriceImprovement where
  fieldTag Proxy = 639
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriceImprovement
  fieldFromValue = fromValue >=> (prettyValidate . PriceImprovement)

-- FieldSpec {fieldNumber = 640, fieldName = "Price2", fieldType = FieldTypePrice, fieldValues = []}
newtype Price2 = Price2 {unPrice2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Price2

instance IsField Price2 where
  fieldTag Proxy = 640
  fieldIsData Proxy = False
  fieldToValue = toValue . unPrice2
  fieldFromValue = fromValue >=> (prettyValidate . Price2)

-- FieldSpec {fieldNumber = 641, fieldName = "LastForwardPoints2", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype LastForwardPoints2 = LastForwardPoints2 {unLastForwardPoints2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastForwardPoints2

instance IsField LastForwardPoints2 where
  fieldTag Proxy = 641
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastForwardPoints2
  fieldFromValue = fromValue >=> (prettyValidate . LastForwardPoints2)

-- FieldSpec {fieldNumber = 642, fieldName = "BidForwardPoints2", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype BidForwardPoints2 = BidForwardPoints2 {unBidForwardPoints2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidForwardPoints2

instance IsField BidForwardPoints2 where
  fieldTag Proxy = 642
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidForwardPoints2
  fieldFromValue = fromValue >=> (prettyValidate . BidForwardPoints2)

-- FieldSpec {fieldNumber = 643, fieldName = "OfferForwardPoints2", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype OfferForwardPoints2 = OfferForwardPoints2 {unOfferForwardPoints2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferForwardPoints2

instance IsField OfferForwardPoints2 where
  fieldTag Proxy = 643
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferForwardPoints2
  fieldFromValue = fromValue >=> (prettyValidate . OfferForwardPoints2)

-- FieldSpec {fieldNumber = 644, fieldName = "RFQReqID", fieldType = FieldTypeString, fieldValues = []}
newtype RFQReqID = RFQReqID {unRFQReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RFQReqID

instance IsField RFQReqID where
  fieldTag Proxy = 644
  fieldIsData Proxy = False
  fieldToValue = toValue . unRFQReqID
  fieldFromValue = fromValue >=> (prettyValidate . RFQReqID)

-- FieldSpec {fieldNumber = 645, fieldName = "MktBidPx", fieldType = FieldTypePrice, fieldValues = []}
newtype MktBidPx = MktBidPx {unMktBidPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MktBidPx

instance IsField MktBidPx where
  fieldTag Proxy = 645
  fieldIsData Proxy = False
  fieldToValue = toValue . unMktBidPx
  fieldFromValue = fromValue >=> (prettyValidate . MktBidPx)

-- FieldSpec {fieldNumber = 646, fieldName = "MktOfferPx", fieldType = FieldTypePrice, fieldValues = []}
newtype MktOfferPx = MktOfferPx {unMktOfferPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MktOfferPx

instance IsField MktOfferPx where
  fieldTag Proxy = 646
  fieldIsData Proxy = False
  fieldToValue = toValue . unMktOfferPx
  fieldFromValue = fromValue >=> (prettyValidate . MktOfferPx)

-- FieldSpec {fieldNumber = 647, fieldName = "MinBidSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype MinBidSize = MinBidSize {unMinBidSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MinBidSize

instance IsField MinBidSize where
  fieldTag Proxy = 647
  fieldIsData Proxy = False
  fieldToValue = toValue . unMinBidSize
  fieldFromValue = fromValue >=> (prettyValidate . MinBidSize)

-- FieldSpec {fieldNumber = 648, fieldName = "MinOfferSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype MinOfferSize = MinOfferSize {unMinOfferSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MinOfferSize

instance IsField MinOfferSize where
  fieldTag Proxy = 648
  fieldIsData Proxy = False
  fieldToValue = toValue . unMinOfferSize
  fieldFromValue = fromValue >=> (prettyValidate . MinOfferSize)

-- FieldSpec {fieldNumber = 649, fieldName = "QuoteStatusReqID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteStatusReqID = QuoteStatusReqID {unQuoteStatusReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteStatusReqID

instance IsField QuoteStatusReqID where
  fieldTag Proxy = 649
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteStatusReqID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteStatusReqID)

-- FieldSpec {fieldNumber = 650, fieldName = "LegalConfirm", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data LegalConfirm
  = LegalConfirm_YES
  | LegalConfirm_NO
  deriving stock (Show, Eq, Generic)

instance Validity LegalConfirm

instance IsField LegalConfirm where
  fieldTag Proxy = 650
  fieldIsData Proxy = False
  fieldToValue = \case
    LegalConfirm_YES -> "Y"
    LegalConfirm_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right LegalConfirm_YES
    "N" -> Right LegalConfirm_NO
    v -> Left ("Unknown LegalConfirm: " <> show v)

-- FieldSpec {fieldNumber = 651, fieldName = "UnderlyingLastPx", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingLastPx = UnderlyingLastPx {unUnderlyingLastPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingLastPx

instance IsField UnderlyingLastPx where
  fieldTag Proxy = 651
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingLastPx
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingLastPx)

-- FieldSpec {fieldNumber = 652, fieldName = "UnderlyingLastQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype UnderlyingLastQty = UnderlyingLastQty {unUnderlyingLastQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingLastQty

instance IsField UnderlyingLastQty where
  fieldTag Proxy = 652
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingLastQty
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingLastQty)

-- FieldSpec {fieldNumber = 654, fieldName = "LegRefID", fieldType = FieldTypeString, fieldValues = []}
newtype LegRefID = LegRefID {unLegRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRefID

instance IsField LegRefID where
  fieldTag Proxy = 654
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRefID
  fieldFromValue = fromValue >=> (prettyValidate . LegRefID)

-- FieldSpec {fieldNumber = 655, fieldName = "ContraLegRefID", fieldType = FieldTypeString, fieldValues = []}
newtype ContraLegRefID = ContraLegRefID {unContraLegRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraLegRefID

instance IsField ContraLegRefID where
  fieldTag Proxy = 655
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraLegRefID
  fieldFromValue = fromValue >=> (prettyValidate . ContraLegRefID)

-- FieldSpec {fieldNumber = 656, fieldName = "SettlCurrBidFxRate", fieldType = FieldTypeFloat, fieldValues = []}
newtype SettlCurrBidFxRate = SettlCurrBidFxRate {unSettlCurrBidFxRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrBidFxRate

instance IsField SettlCurrBidFxRate where
  fieldTag Proxy = 656
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrBidFxRate
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrBidFxRate)

-- FieldSpec {fieldNumber = 657, fieldName = "SettlCurrOfferFxRate", fieldType = FieldTypeFloat, fieldValues = []}
newtype SettlCurrOfferFxRate = SettlCurrOfferFxRate {unSettlCurrOfferFxRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrOfferFxRate

instance IsField SettlCurrOfferFxRate where
  fieldTag Proxy = 657
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrOfferFxRate
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrOfferFxRate)

-- FieldSpec {fieldNumber = 658, fieldName = "QuoteRequestRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXCHANGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "QUOTE_REQUEST_EXCEEDS_LIMIT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "TOO_LATE_TO_ENTER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_PRICE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "NOT_AUTHORIZED_TO_REQUEST_QUOTE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "NO_MATCH_FOR_INQUIRY"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "NO_MARKET_FOR_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "NO_INVENTORY"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "PASS"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data QuoteRequestRejectReason
  = QuoteRequestRejectReason_UNKNOWN_SYMBOL
  | QuoteRequestRejectReason_EXCHANGE
  | QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
  | QuoteRequestRejectReason_TOO_LATE_TO_ENTER
  | QuoteRequestRejectReason_INVALID_PRICE
  | QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE
  | QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY
  | QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT
  | QuoteRequestRejectReason_NO_INVENTORY
  | QuoteRequestRejectReason_PASS
  | QuoteRequestRejectReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestRejectReason

instance IsField QuoteRequestRejectReason where
  fieldTag Proxy = 658
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteRequestRejectReason_UNKNOWN_SYMBOL -> "1"
    QuoteRequestRejectReason_EXCHANGE -> "2"
    QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT -> "3"
    QuoteRequestRejectReason_TOO_LATE_TO_ENTER -> "4"
    QuoteRequestRejectReason_INVALID_PRICE -> "5"
    QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE -> "6"
    QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY -> "7"
    QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT -> "8"
    QuoteRequestRejectReason_NO_INVENTORY -> "9"
    QuoteRequestRejectReason_PASS -> "10"
    QuoteRequestRejectReason_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right QuoteRequestRejectReason_UNKNOWN_SYMBOL
    "2" -> Right QuoteRequestRejectReason_EXCHANGE
    "3" -> Right QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
    "4" -> Right QuoteRequestRejectReason_TOO_LATE_TO_ENTER
    "5" -> Right QuoteRequestRejectReason_INVALID_PRICE
    "6" -> Right QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE
    "7" -> Right QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY
    "8" -> Right QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT
    "9" -> Right QuoteRequestRejectReason_NO_INVENTORY
    "10" -> Right QuoteRequestRejectReason_PASS
    "99" -> Right QuoteRequestRejectReason_OTHER
    v -> Left ("Unknown QuoteRequestRejectReason: " <> show v)

-- FieldSpec {fieldNumber = 659, fieldName = "SideComplianceID", fieldType = FieldTypeString, fieldValues = []}
newtype SideComplianceID = SideComplianceID {unSideComplianceID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SideComplianceID

instance IsField SideComplianceID where
  fieldTag Proxy = 659
  fieldIsData Proxy = False
  fieldToValue = toValue . unSideComplianceID
  fieldFromValue = fromValue >=> (prettyValidate . SideComplianceID)

-- FieldSpec {fieldNumber = 660, fieldName = "AcctIDSource", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BIC"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SID_CODE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TFM"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OMGEO"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "DTCC_CODE"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data AcctIDSource
  = AcctIDSource_BIC
  | AcctIDSource_SID_CODE
  | AcctIDSource_TFM
  | AcctIDSource_OMGEO
  | AcctIDSource_DTCC_CODE
  | AcctIDSource_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity AcctIDSource

instance IsField AcctIDSource where
  fieldTag Proxy = 660
  fieldIsData Proxy = False
  fieldToValue = \case
    AcctIDSource_BIC -> "1"
    AcctIDSource_SID_CODE -> "2"
    AcctIDSource_TFM -> "3"
    AcctIDSource_OMGEO -> "4"
    AcctIDSource_DTCC_CODE -> "5"
    AcctIDSource_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right AcctIDSource_BIC
    "2" -> Right AcctIDSource_SID_CODE
    "3" -> Right AcctIDSource_TFM
    "4" -> Right AcctIDSource_OMGEO
    "5" -> Right AcctIDSource_DTCC_CODE
    "99" -> Right AcctIDSource_OTHER
    v -> Left ("Unknown AcctIDSource: " <> show v)

-- FieldSpec {fieldNumber = 661, fieldName = "AllocAcctIDSource", fieldType = FieldTypeInt, fieldValues = []}
newtype AllocAcctIDSource = AllocAcctIDSource {unAllocAcctIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocAcctIDSource

instance IsField AllocAcctIDSource where
  fieldTag Proxy = 661
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocAcctIDSource
  fieldFromValue = fromValue >=> (prettyValidate . AllocAcctIDSource)

-- FieldSpec {fieldNumber = 662, fieldName = "BenchmarkPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype BenchmarkPrice = BenchmarkPrice {unBenchmarkPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkPrice

instance IsField BenchmarkPrice where
  fieldTag Proxy = 662
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkPrice
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkPrice)

-- FieldSpec {fieldNumber = 663, fieldName = "BenchmarkPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype BenchmarkPriceType = BenchmarkPriceType {unBenchmarkPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkPriceType

instance IsField BenchmarkPriceType where
  fieldTag Proxy = 663
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkPriceType
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkPriceType)

-- FieldSpec {fieldNumber = 664, fieldName = "ConfirmID", fieldType = FieldTypeString, fieldValues = []}
newtype ConfirmID = ConfirmID {unConfirmID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmID

instance IsField ConfirmID where
  fieldTag Proxy = 664
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmID
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmID)

-- FieldSpec {fieldNumber = 665, fieldName = "ConfirmStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "RECEIVED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MISMATCHED_ACCOUNT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MISSING_SETTLEMENT_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CONFIRMED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REQUEST_REJECTED"}]}
data ConfirmStatus
  = ConfirmStatus_RECEIVED
  | ConfirmStatus_MISMATCHED_ACCOUNT
  | ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS
  | ConfirmStatus_CONFIRMED
  | ConfirmStatus_REQUEST_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmStatus

instance IsField ConfirmStatus where
  fieldTag Proxy = 665
  fieldIsData Proxy = False
  fieldToValue = \case
    ConfirmStatus_RECEIVED -> "1"
    ConfirmStatus_MISMATCHED_ACCOUNT -> "2"
    ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS -> "3"
    ConfirmStatus_CONFIRMED -> "4"
    ConfirmStatus_REQUEST_REJECTED -> "5"
  fieldFromValue = \case
    "1" -> Right ConfirmStatus_RECEIVED
    "2" -> Right ConfirmStatus_MISMATCHED_ACCOUNT
    "3" -> Right ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS
    "4" -> Right ConfirmStatus_CONFIRMED
    "5" -> Right ConfirmStatus_REQUEST_REJECTED
    v -> Left ("Unknown ConfirmStatus: " <> show v)

-- FieldSpec {fieldNumber = 666, fieldName = "ConfirmTransType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"}]}
data ConfirmTransType
  = ConfirmTransType_NEW
  | ConfirmTransType_REPLACE
  | ConfirmTransType_CANCEL
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmTransType

instance IsField ConfirmTransType where
  fieldTag Proxy = 666
  fieldIsData Proxy = False
  fieldToValue = \case
    ConfirmTransType_NEW -> "0"
    ConfirmTransType_REPLACE -> "1"
    ConfirmTransType_CANCEL -> "2"
  fieldFromValue = \case
    "0" -> Right ConfirmTransType_NEW
    "1" -> Right ConfirmTransType_REPLACE
    "2" -> Right ConfirmTransType_CANCEL
    v -> Left ("Unknown ConfirmTransType: " <> show v)

-- FieldSpec {fieldNumber = 667, fieldName = "ContractSettlMonth", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype ContractSettlMonth = ContractSettlMonth {unContractSettlMonth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContractSettlMonth

instance IsField ContractSettlMonth where
  fieldTag Proxy = 667
  fieldIsData Proxy = False
  fieldToValue = toValue . unContractSettlMonth
  fieldFromValue = fromValue >=> (prettyValidate . ContractSettlMonth)

-- FieldSpec {fieldNumber = 668, fieldName = "DeliveryForm", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BOOK_ENTRY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BEARER"}]}
data DeliveryForm
  = DeliveryForm_BOOK_ENTRY
  | DeliveryForm_BEARER
  deriving stock (Show, Eq, Generic)

instance Validity DeliveryForm

instance IsField DeliveryForm where
  fieldTag Proxy = 668
  fieldIsData Proxy = False
  fieldToValue = \case
    DeliveryForm_BOOK_ENTRY -> "1"
    DeliveryForm_BEARER -> "2"
  fieldFromValue = \case
    "1" -> Right DeliveryForm_BOOK_ENTRY
    "2" -> Right DeliveryForm_BEARER
    v -> Left ("Unknown DeliveryForm: " <> show v)

-- FieldSpec {fieldNumber = 669, fieldName = "LastParPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LastParPx = LastParPx {unLastParPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastParPx

instance IsField LastParPx where
  fieldTag Proxy = 669
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastParPx
  fieldFromValue = fromValue >=> (prettyValidate . LastParPx)

-- FieldSpec {fieldNumber = 670, fieldName = "NoLegAllocs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLegAllocs = NoLegAllocs {unNoLegAllocs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLegAllocs

instance IsField NoLegAllocs where
  fieldTag Proxy = 670
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLegAllocs
  fieldFromValue = fromValue >=> (prettyValidate . NoLegAllocs)

-- FieldSpec {fieldNumber = 671, fieldName = "LegAllocAccount", fieldType = FieldTypeString, fieldValues = []}
newtype LegAllocAccount = LegAllocAccount {unLegAllocAccount :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegAllocAccount

instance IsField LegAllocAccount where
  fieldTag Proxy = 671
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegAllocAccount
  fieldFromValue = fromValue >=> (prettyValidate . LegAllocAccount)

-- FieldSpec {fieldNumber = 672, fieldName = "LegIndividualAllocID", fieldType = FieldTypeString, fieldValues = []}
newtype LegIndividualAllocID = LegIndividualAllocID {unLegIndividualAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegIndividualAllocID

instance IsField LegIndividualAllocID where
  fieldTag Proxy = 672
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegIndividualAllocID
  fieldFromValue = fromValue >=> (prettyValidate . LegIndividualAllocID)

-- FieldSpec {fieldNumber = 673, fieldName = "LegAllocQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LegAllocQty = LegAllocQty {unLegAllocQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegAllocQty

instance IsField LegAllocQty where
  fieldTag Proxy = 673
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegAllocQty
  fieldFromValue = fromValue >=> (prettyValidate . LegAllocQty)

-- FieldSpec {fieldNumber = 674, fieldName = "LegAllocAcctIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype LegAllocAcctIDSource = LegAllocAcctIDSource {unLegAllocAcctIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegAllocAcctIDSource

instance IsField LegAllocAcctIDSource where
  fieldTag Proxy = 674
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegAllocAcctIDSource
  fieldFromValue = fromValue >=> (prettyValidate . LegAllocAcctIDSource)

-- FieldSpec {fieldNumber = 675, fieldName = "LegSettlCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype LegSettlCurrency = LegSettlCurrency {unLegSettlCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSettlCurrency

instance IsField LegSettlCurrency where
  fieldTag Proxy = 675
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSettlCurrency
  fieldFromValue = fromValue >=> (prettyValidate . LegSettlCurrency)

-- FieldSpec {fieldNumber = 676, fieldName = "LegBenchmarkCurveCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype LegBenchmarkCurveCurrency = LegBenchmarkCurveCurrency {unLegBenchmarkCurveCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkCurveCurrency

instance IsField LegBenchmarkCurveCurrency where
  fieldTag Proxy = 676
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkCurveCurrency
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkCurveCurrency)

-- FieldSpec {fieldNumber = 677, fieldName = "LegBenchmarkCurveName", fieldType = FieldTypeString, fieldValues = []}
newtype LegBenchmarkCurveName = LegBenchmarkCurveName {unLegBenchmarkCurveName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkCurveName

instance IsField LegBenchmarkCurveName where
  fieldTag Proxy = 677
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkCurveName
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkCurveName)

-- FieldSpec {fieldNumber = 678, fieldName = "LegBenchmarkCurvePoint", fieldType = FieldTypeString, fieldValues = []}
newtype LegBenchmarkCurvePoint = LegBenchmarkCurvePoint {unLegBenchmarkCurvePoint :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkCurvePoint

instance IsField LegBenchmarkCurvePoint where
  fieldTag Proxy = 678
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkCurvePoint
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkCurvePoint)

-- FieldSpec {fieldNumber = 679, fieldName = "LegBenchmarkPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype LegBenchmarkPrice = LegBenchmarkPrice {unLegBenchmarkPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkPrice

instance IsField LegBenchmarkPrice where
  fieldTag Proxy = 679
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkPrice
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkPrice)

-- FieldSpec {fieldNumber = 680, fieldName = "LegBenchmarkPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype LegBenchmarkPriceType = LegBenchmarkPriceType {unLegBenchmarkPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkPriceType

instance IsField LegBenchmarkPriceType where
  fieldTag Proxy = 680
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkPriceType
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkPriceType)

-- FieldSpec {fieldNumber = 681, fieldName = "LegBidPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LegBidPx = LegBidPx {unLegBidPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBidPx

instance IsField LegBidPx where
  fieldTag Proxy = 681
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBidPx
  fieldFromValue = fromValue >=> (prettyValidate . LegBidPx)

-- FieldSpec {fieldNumber = 682, fieldName = "LegIOIQty", fieldType = FieldTypeString, fieldValues = []}
newtype LegIOIQty = LegIOIQty {unLegIOIQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegIOIQty

instance IsField LegIOIQty where
  fieldTag Proxy = 682
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegIOIQty
  fieldFromValue = fromValue >=> (prettyValidate . LegIOIQty)

-- FieldSpec {fieldNumber = 683, fieldName = "NoLegStipulations", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLegStipulations = NoLegStipulations {unNoLegStipulations :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLegStipulations

instance IsField NoLegStipulations where
  fieldTag Proxy = 683
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLegStipulations
  fieldFromValue = fromValue >=> (prettyValidate . NoLegStipulations)

-- FieldSpec {fieldNumber = 684, fieldName = "LegOfferPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LegOfferPx = LegOfferPx {unLegOfferPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegOfferPx

instance IsField LegOfferPx where
  fieldTag Proxy = 684
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegOfferPx
  fieldFromValue = fromValue >=> (prettyValidate . LegOfferPx)

-- FieldSpec {fieldNumber = 686, fieldName = "LegPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype LegPriceType = LegPriceType {unLegPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegPriceType

instance IsField LegPriceType where
  fieldTag Proxy = 686
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegPriceType
  fieldFromValue = fromValue >=> (prettyValidate . LegPriceType)

-- FieldSpec {fieldNumber = 687, fieldName = "LegQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LegQty = LegQty {unLegQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegQty

instance IsField LegQty where
  fieldTag Proxy = 687
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegQty
  fieldFromValue = fromValue >=> (prettyValidate . LegQty)

-- FieldSpec {fieldNumber = 688, fieldName = "LegStipulationType", fieldType = FieldTypeString, fieldValues = []}
newtype LegStipulationType = LegStipulationType {unLegStipulationType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStipulationType

instance IsField LegStipulationType where
  fieldTag Proxy = 688
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStipulationType
  fieldFromValue = fromValue >=> (prettyValidate . LegStipulationType)

-- FieldSpec {fieldNumber = 689, fieldName = "LegStipulationValue", fieldType = FieldTypeString, fieldValues = []}
newtype LegStipulationValue = LegStipulationValue {unLegStipulationValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStipulationValue

instance IsField LegStipulationValue where
  fieldTag Proxy = 689
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStipulationValue
  fieldFromValue = fromValue >=> (prettyValidate . LegStipulationValue)

-- FieldSpec {fieldNumber = 690, fieldName = "LegSwapType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PAR_FOR_PAR"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MODIFIED_DURATION"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "RISK"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PROCEEDS"}]}
data LegSwapType
  = LegSwapType_PAR_FOR_PAR
  | LegSwapType_MODIFIED_DURATION
  | LegSwapType_RISK
  | LegSwapType_PROCEEDS
  deriving stock (Show, Eq, Generic)

instance Validity LegSwapType

instance IsField LegSwapType where
  fieldTag Proxy = 690
  fieldIsData Proxy = False
  fieldToValue = \case
    LegSwapType_PAR_FOR_PAR -> "1"
    LegSwapType_MODIFIED_DURATION -> "2"
    LegSwapType_RISK -> "4"
    LegSwapType_PROCEEDS -> "5"
  fieldFromValue = \case
    "1" -> Right LegSwapType_PAR_FOR_PAR
    "2" -> Right LegSwapType_MODIFIED_DURATION
    "4" -> Right LegSwapType_RISK
    "5" -> Right LegSwapType_PROCEEDS
    v -> Left ("Unknown LegSwapType: " <> show v)

-- FieldSpec {fieldNumber = 691, fieldName = "Pool", fieldType = FieldTypeString, fieldValues = []}
newtype Pool = Pool {unPool :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Pool

instance IsField Pool where
  fieldTag Proxy = 691
  fieldIsData Proxy = False
  fieldToValue = toValue . unPool
  fieldFromValue = fromValue >=> (prettyValidate . Pool)

-- FieldSpec {fieldNumber = 692, fieldName = "QuotePriceType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PERCENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PER_SHARE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FIXED_AMOUNT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "DISCOUNT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PREMIUM"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "SPREAD"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "TED_PRICE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TED_YIELD"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "YIELD_SPREAD"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "YIELD"}]}
data QuotePriceType
  = QuotePriceType_PERCENT
  | QuotePriceType_PER_SHARE
  | QuotePriceType_FIXED_AMOUNT
  | QuotePriceType_DISCOUNT
  | QuotePriceType_PREMIUM
  | QuotePriceType_SPREAD
  | QuotePriceType_TED_PRICE
  | QuotePriceType_TED_YIELD
  | QuotePriceType_YIELD_SPREAD
  | QuotePriceType_YIELD
  deriving stock (Show, Eq, Generic)

instance Validity QuotePriceType

instance IsField QuotePriceType where
  fieldTag Proxy = 692
  fieldIsData Proxy = False
  fieldToValue = \case
    QuotePriceType_PERCENT -> "1"
    QuotePriceType_PER_SHARE -> "2"
    QuotePriceType_FIXED_AMOUNT -> "3"
    QuotePriceType_DISCOUNT -> "4"
    QuotePriceType_PREMIUM -> "5"
    QuotePriceType_SPREAD -> "6"
    QuotePriceType_TED_PRICE -> "7"
    QuotePriceType_TED_YIELD -> "8"
    QuotePriceType_YIELD_SPREAD -> "9"
    QuotePriceType_YIELD -> "10"
  fieldFromValue = \case
    "1" -> Right QuotePriceType_PERCENT
    "2" -> Right QuotePriceType_PER_SHARE
    "3" -> Right QuotePriceType_FIXED_AMOUNT
    "4" -> Right QuotePriceType_DISCOUNT
    "5" -> Right QuotePriceType_PREMIUM
    "6" -> Right QuotePriceType_SPREAD
    "7" -> Right QuotePriceType_TED_PRICE
    "8" -> Right QuotePriceType_TED_YIELD
    "9" -> Right QuotePriceType_YIELD_SPREAD
    "10" -> Right QuotePriceType_YIELD
    v -> Left ("Unknown QuotePriceType: " <> show v)

-- FieldSpec {fieldNumber = 693, fieldName = "QuoteRespID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteRespID = QuoteRespID {unQuoteRespID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRespID

instance IsField QuoteRespID where
  fieldTag Proxy = 693
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteRespID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteRespID)

-- FieldSpec {fieldNumber = 694, fieldName = "QuoteRespType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "HIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COUNTER"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EXPIRED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "COVER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "DONE_AWAY"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PASS"}]}
data QuoteRespType
  = QuoteRespType_HIT
  | QuoteRespType_COUNTER
  | QuoteRespType_EXPIRED
  | QuoteRespType_COVER
  | QuoteRespType_DONE_AWAY
  | QuoteRespType_PASS
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRespType

instance IsField QuoteRespType where
  fieldTag Proxy = 694
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteRespType_HIT -> "1"
    QuoteRespType_COUNTER -> "2"
    QuoteRespType_EXPIRED -> "3"
    QuoteRespType_COVER -> "4"
    QuoteRespType_DONE_AWAY -> "5"
    QuoteRespType_PASS -> "6"
  fieldFromValue = \case
    "1" -> Right QuoteRespType_HIT
    "2" -> Right QuoteRespType_COUNTER
    "3" -> Right QuoteRespType_EXPIRED
    "4" -> Right QuoteRespType_COVER
    "5" -> Right QuoteRespType_DONE_AWAY
    "6" -> Right QuoteRespType_PASS
    v -> Left ("Unknown QuoteRespType: " <> show v)

-- FieldSpec {fieldNumber = 695, fieldName = "QuoteQualifier", fieldType = FieldTypeChar, fieldValues = []}
newtype QuoteQualifier = QuoteQualifier {unQuoteQualifier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteQualifier

instance IsField QuoteQualifier where
  fieldTag Proxy = 695
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteQualifier
  fieldFromValue = fromValue >=> (prettyValidate . QuoteQualifier)

-- FieldSpec {fieldNumber = 696, fieldName = "YieldRedemptionDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype YieldRedemptionDate = YieldRedemptionDate {unYieldRedemptionDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity YieldRedemptionDate

instance IsField YieldRedemptionDate where
  fieldTag Proxy = 696
  fieldIsData Proxy = False
  fieldToValue = toValue . unYieldRedemptionDate
  fieldFromValue = fromValue >=> (prettyValidate . YieldRedemptionDate)

-- FieldSpec {fieldNumber = 697, fieldName = "YieldRedemptionPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype YieldRedemptionPrice = YieldRedemptionPrice {unYieldRedemptionPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity YieldRedemptionPrice

instance IsField YieldRedemptionPrice where
  fieldTag Proxy = 697
  fieldIsData Proxy = False
  fieldToValue = toValue . unYieldRedemptionPrice
  fieldFromValue = fromValue >=> (prettyValidate . YieldRedemptionPrice)

-- FieldSpec {fieldNumber = 698, fieldName = "YieldRedemptionPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype YieldRedemptionPriceType = YieldRedemptionPriceType {unYieldRedemptionPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity YieldRedemptionPriceType

instance IsField YieldRedemptionPriceType where
  fieldTag Proxy = 698
  fieldIsData Proxy = False
  fieldToValue = toValue . unYieldRedemptionPriceType
  fieldFromValue = fromValue >=> (prettyValidate . YieldRedemptionPriceType)

-- FieldSpec {fieldNumber = 699, fieldName = "BenchmarkSecurityID", fieldType = FieldTypeString, fieldValues = []}
newtype BenchmarkSecurityID = BenchmarkSecurityID {unBenchmarkSecurityID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkSecurityID

instance IsField BenchmarkSecurityID where
  fieldTag Proxy = 699
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkSecurityID
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkSecurityID)

-- FieldSpec {fieldNumber = 700, fieldName = "ReversalIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype ReversalIndicator = ReversalIndicator {unReversalIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity ReversalIndicator

instance IsField ReversalIndicator where
  fieldTag Proxy = 700
  fieldIsData Proxy = False
  fieldToValue = toValue . unReversalIndicator
  fieldFromValue = fromValue >=> (prettyValidate . ReversalIndicator)

-- FieldSpec {fieldNumber = 701, fieldName = "YieldCalcDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype YieldCalcDate = YieldCalcDate {unYieldCalcDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity YieldCalcDate

instance IsField YieldCalcDate where
  fieldTag Proxy = 701
  fieldIsData Proxy = False
  fieldToValue = toValue . unYieldCalcDate
  fieldFromValue = fromValue >=> (prettyValidate . YieldCalcDate)

-- FieldSpec {fieldNumber = 702, fieldName = "NoPositions", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoPositions = NoPositions {unNoPositions :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoPositions

instance IsField NoPositions where
  fieldTag Proxy = 702
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoPositions
  fieldFromValue = fromValue >=> (prettyValidate . NoPositions)

-- FieldSpec {fieldNumber = 703, fieldName = "PosType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "TQ", fieldValueDescription = "TRANSACTION_QUANTITY"},FieldValueSpec {fieldValueEnum = "IAS", fieldValueDescription = "INTRA_SPREAD_QTY"},FieldValueSpec {fieldValueEnum = "IES", fieldValueDescription = "INTER_SPREAD_QTY"},FieldValueSpec {fieldValueEnum = "FIN", fieldValueDescription = "END_OF_DAY_QTY"},FieldValueSpec {fieldValueEnum = "SOD", fieldValueDescription = "START_OF_DAY_QTY"},FieldValueSpec {fieldValueEnum = "EX", fieldValueDescription = "OPTION_EXERCISE_QTY"},FieldValueSpec {fieldValueEnum = "AS", fieldValueDescription = "OPTION_ASSIGNMENT"},FieldValueSpec {fieldValueEnum = "TX", fieldValueDescription = "TRANSACTION_FROM_EXERCISE"},FieldValueSpec {fieldValueEnum = "TA", fieldValueDescription = "TRANSACTION_FROM_ASSIGNMENT"},FieldValueSpec {fieldValueEnum = "PIT", fieldValueDescription = "PIT_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "TRF", fieldValueDescription = "TRANSFER_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "ETR", fieldValueDescription = "ELECTRONIC_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "ALC", fieldValueDescription = "ALLOCATION_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "PA", fieldValueDescription = "ADJUSTMENT_QTY"},FieldValueSpec {fieldValueEnum = "ASF", fieldValueDescription = "AS_OF_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "DLV", fieldValueDescription = "DELIVERY_QTY"},FieldValueSpec {fieldValueEnum = "TOT", fieldValueDescription = "TOTAL_TRANSACTION_QTY"},FieldValueSpec {fieldValueEnum = "XM", fieldValueDescription = "CROSS_MARGIN_QTY"},FieldValueSpec {fieldValueEnum = "SPL", fieldValueDescription = "INTEGRAL_SPLIT"}]}
data PosType
  = PosType_TRANSACTION_QUANTITY
  | PosType_INTRA_SPREAD_QTY
  | PosType_INTER_SPREAD_QTY
  | PosType_END_OF_DAY_QTY
  | PosType_START_OF_DAY_QTY
  | PosType_OPTION_EXERCISE_QTY
  | PosType_OPTION_ASSIGNMENT
  | PosType_TRANSACTION_FROM_EXERCISE
  | PosType_TRANSACTION_FROM_ASSIGNMENT
  | PosType_PIT_TRADE_QTY
  | PosType_TRANSFER_TRADE_QTY
  | PosType_ELECTRONIC_TRADE_QTY
  | PosType_ALLOCATION_TRADE_QTY
  | PosType_ADJUSTMENT_QTY
  | PosType_AS_OF_TRADE_QTY
  | PosType_DELIVERY_QTY
  | PosType_TOTAL_TRANSACTION_QTY
  | PosType_CROSS_MARGIN_QTY
  | PosType_INTEGRAL_SPLIT
  deriving stock (Show, Eq, Generic)

instance Validity PosType

instance IsField PosType where
  fieldTag Proxy = 703
  fieldIsData Proxy = False
  fieldToValue = \case
    PosType_TRANSACTION_QUANTITY -> "TQ"
    PosType_INTRA_SPREAD_QTY -> "IAS"
    PosType_INTER_SPREAD_QTY -> "IES"
    PosType_END_OF_DAY_QTY -> "FIN"
    PosType_START_OF_DAY_QTY -> "SOD"
    PosType_OPTION_EXERCISE_QTY -> "EX"
    PosType_OPTION_ASSIGNMENT -> "AS"
    PosType_TRANSACTION_FROM_EXERCISE -> "TX"
    PosType_TRANSACTION_FROM_ASSIGNMENT -> "TA"
    PosType_PIT_TRADE_QTY -> "PIT"
    PosType_TRANSFER_TRADE_QTY -> "TRF"
    PosType_ELECTRONIC_TRADE_QTY -> "ETR"
    PosType_ALLOCATION_TRADE_QTY -> "ALC"
    PosType_ADJUSTMENT_QTY -> "PA"
    PosType_AS_OF_TRADE_QTY -> "ASF"
    PosType_DELIVERY_QTY -> "DLV"
    PosType_TOTAL_TRANSACTION_QTY -> "TOT"
    PosType_CROSS_MARGIN_QTY -> "XM"
    PosType_INTEGRAL_SPLIT -> "SPL"
  fieldFromValue = \case
    "TQ" -> Right PosType_TRANSACTION_QUANTITY
    "IAS" -> Right PosType_INTRA_SPREAD_QTY
    "IES" -> Right PosType_INTER_SPREAD_QTY
    "FIN" -> Right PosType_END_OF_DAY_QTY
    "SOD" -> Right PosType_START_OF_DAY_QTY
    "EX" -> Right PosType_OPTION_EXERCISE_QTY
    "AS" -> Right PosType_OPTION_ASSIGNMENT
    "TX" -> Right PosType_TRANSACTION_FROM_EXERCISE
    "TA" -> Right PosType_TRANSACTION_FROM_ASSIGNMENT
    "PIT" -> Right PosType_PIT_TRADE_QTY
    "TRF" -> Right PosType_TRANSFER_TRADE_QTY
    "ETR" -> Right PosType_ELECTRONIC_TRADE_QTY
    "ALC" -> Right PosType_ALLOCATION_TRADE_QTY
    "PA" -> Right PosType_ADJUSTMENT_QTY
    "ASF" -> Right PosType_AS_OF_TRADE_QTY
    "DLV" -> Right PosType_DELIVERY_QTY
    "TOT" -> Right PosType_TOTAL_TRANSACTION_QTY
    "XM" -> Right PosType_CROSS_MARGIN_QTY
    "SPL" -> Right PosType_INTEGRAL_SPLIT
    v -> Left ("Unknown PosType: " <> show v)

-- FieldSpec {fieldNumber = 704, fieldName = "LongQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LongQty = LongQty {unLongQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LongQty

instance IsField LongQty where
  fieldTag Proxy = 704
  fieldIsData Proxy = False
  fieldToValue = toValue . unLongQty
  fieldFromValue = fromValue >=> (prettyValidate . LongQty)

-- FieldSpec {fieldNumber = 705, fieldName = "ShortQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype ShortQty = ShortQty {unShortQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ShortQty

instance IsField ShortQty where
  fieldTag Proxy = 705
  fieldIsData Proxy = False
  fieldToValue = toValue . unShortQty
  fieldFromValue = fromValue >=> (prettyValidate . ShortQty)

-- FieldSpec {fieldNumber = 706, fieldName = "PosQtyStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUBMITTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REJECTED"}]}
data PosQtyStatus
  = PosQtyStatus_SUBMITTED
  | PosQtyStatus_ACCEPTED
  | PosQtyStatus_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity PosQtyStatus

instance IsField PosQtyStatus where
  fieldTag Proxy = 706
  fieldIsData Proxy = False
  fieldToValue = \case
    PosQtyStatus_SUBMITTED -> "0"
    PosQtyStatus_ACCEPTED -> "1"
    PosQtyStatus_REJECTED -> "2"
  fieldFromValue = \case
    "0" -> Right PosQtyStatus_SUBMITTED
    "1" -> Right PosQtyStatus_ACCEPTED
    "2" -> Right PosQtyStatus_REJECTED
    v -> Left ("Unknown PosQtyStatus: " <> show v)

-- FieldSpec {fieldNumber = 707, fieldName = "PosAmtType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "FMTM", fieldValueDescription = "FINAL_MARK_TO_MARKET_AMOUNT"},FieldValueSpec {fieldValueEnum = "IMTM", fieldValueDescription = "INCREMENTAL_MARK_TO_MARKET_AMOUNT"},FieldValueSpec {fieldValueEnum = "TVAR", fieldValueDescription = "TRADE_VARIATION_AMOUNT"},FieldValueSpec {fieldValueEnum = "SMTM", fieldValueDescription = "START_OF_DAY_MARK_TO_MARKET_AMOUNT"},FieldValueSpec {fieldValueEnum = "PREM", fieldValueDescription = "PREMIUM_AMOUNT"},FieldValueSpec {fieldValueEnum = "CRES", fieldValueDescription = "CASH_RESIDUAL_AMOUNT"},FieldValueSpec {fieldValueEnum = "CASH", fieldValueDescription = "CASH_AMOUNT"},FieldValueSpec {fieldValueEnum = "VADJ", fieldValueDescription = "VALUE_ADJUSTED_AMOUNT"}]}
data PosAmtType
  = PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT
  | PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT
  | PosAmtType_TRADE_VARIATION_AMOUNT
  | PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT
  | PosAmtType_PREMIUM_AMOUNT
  | PosAmtType_CASH_RESIDUAL_AMOUNT
  | PosAmtType_CASH_AMOUNT
  | PosAmtType_VALUE_ADJUSTED_AMOUNT
  deriving stock (Show, Eq, Generic)

instance Validity PosAmtType

instance IsField PosAmtType where
  fieldTag Proxy = 707
  fieldIsData Proxy = False
  fieldToValue = \case
    PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT -> "FMTM"
    PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT -> "IMTM"
    PosAmtType_TRADE_VARIATION_AMOUNT -> "TVAR"
    PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT -> "SMTM"
    PosAmtType_PREMIUM_AMOUNT -> "PREM"
    PosAmtType_CASH_RESIDUAL_AMOUNT -> "CRES"
    PosAmtType_CASH_AMOUNT -> "CASH"
    PosAmtType_VALUE_ADJUSTED_AMOUNT -> "VADJ"
  fieldFromValue = \case
    "FMTM" -> Right PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT
    "IMTM" -> Right PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT
    "TVAR" -> Right PosAmtType_TRADE_VARIATION_AMOUNT
    "SMTM" -> Right PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT
    "PREM" -> Right PosAmtType_PREMIUM_AMOUNT
    "CRES" -> Right PosAmtType_CASH_RESIDUAL_AMOUNT
    "CASH" -> Right PosAmtType_CASH_AMOUNT
    "VADJ" -> Right PosAmtType_VALUE_ADJUSTED_AMOUNT
    v -> Left ("Unknown PosAmtType: " <> show v)

-- FieldSpec {fieldNumber = 708, fieldName = "PosAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype PosAmt = PosAmt {unPosAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosAmt

instance IsField PosAmt where
  fieldTag Proxy = 708
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosAmt
  fieldFromValue = fromValue >=> (prettyValidate . PosAmt)

-- FieldSpec {fieldNumber = 709, fieldName = "PosTransType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXERCISE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DO_NOT_EXERCISE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "POSITION_ADJUSTMENT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "POSITION_CHANGE_SUBMISSION"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PLEDGE"}]}
data PosTransType
  = PosTransType_EXERCISE
  | PosTransType_DO_NOT_EXERCISE
  | PosTransType_POSITION_ADJUSTMENT
  | PosTransType_POSITION_CHANGE_SUBMISSION
  | PosTransType_PLEDGE
  deriving stock (Show, Eq, Generic)

instance Validity PosTransType

instance IsField PosTransType where
  fieldTag Proxy = 709
  fieldIsData Proxy = False
  fieldToValue = \case
    PosTransType_EXERCISE -> "1"
    PosTransType_DO_NOT_EXERCISE -> "2"
    PosTransType_POSITION_ADJUSTMENT -> "3"
    PosTransType_POSITION_CHANGE_SUBMISSION -> "4"
    PosTransType_PLEDGE -> "5"
  fieldFromValue = \case
    "1" -> Right PosTransType_EXERCISE
    "2" -> Right PosTransType_DO_NOT_EXERCISE
    "3" -> Right PosTransType_POSITION_ADJUSTMENT
    "4" -> Right PosTransType_POSITION_CHANGE_SUBMISSION
    "5" -> Right PosTransType_PLEDGE
    v -> Left ("Unknown PosTransType: " <> show v)

-- FieldSpec {fieldNumber = 710, fieldName = "PosReqID", fieldType = FieldTypeString, fieldValues = []}
newtype PosReqID = PosReqID {unPosReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosReqID

instance IsField PosReqID where
  fieldTag Proxy = 710
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosReqID
  fieldFromValue = fromValue >=> (prettyValidate . PosReqID)

-- FieldSpec {fieldNumber = 711, fieldName = "NoUnderlyings", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoUnderlyings = NoUnderlyings {unNoUnderlyings :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoUnderlyings

instance IsField NoUnderlyings where
  fieldTag Proxy = 711
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoUnderlyings
  fieldFromValue = fromValue >=> (prettyValidate . NoUnderlyings)

-- FieldSpec {fieldNumber = 712, fieldName = "PosMaintAction", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCEL"}]}
data PosMaintAction
  = PosMaintAction_NEW
  | PosMaintAction_REPLACE
  | PosMaintAction_CANCEL
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintAction

instance IsField PosMaintAction where
  fieldTag Proxy = 712
  fieldIsData Proxy = False
  fieldToValue = \case
    PosMaintAction_NEW -> "1"
    PosMaintAction_REPLACE -> "2"
    PosMaintAction_CANCEL -> "3"
  fieldFromValue = \case
    "1" -> Right PosMaintAction_NEW
    "2" -> Right PosMaintAction_REPLACE
    "3" -> Right PosMaintAction_CANCEL
    v -> Left ("Unknown PosMaintAction: " <> show v)

-- FieldSpec {fieldNumber = 713, fieldName = "OrigPosReqRefID", fieldType = FieldTypeString, fieldValues = []}
newtype OrigPosReqRefID = OrigPosReqRefID {unOrigPosReqRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigPosReqRefID

instance IsField OrigPosReqRefID where
  fieldTag Proxy = 713
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigPosReqRefID
  fieldFromValue = fromValue >=> (prettyValidate . OrigPosReqRefID)

-- FieldSpec {fieldNumber = 714, fieldName = "PosMaintRptRefID", fieldType = FieldTypeString, fieldValues = []}
newtype PosMaintRptRefID = PosMaintRptRefID {unPosMaintRptRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintRptRefID

instance IsField PosMaintRptRefID where
  fieldTag Proxy = 714
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosMaintRptRefID
  fieldFromValue = fromValue >=> (prettyValidate . PosMaintRptRefID)

-- FieldSpec {fieldNumber = 715, fieldName = "ClearingBusinessDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype ClearingBusinessDate = ClearingBusinessDate {unClearingBusinessDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClearingBusinessDate

instance IsField ClearingBusinessDate where
  fieldTag Proxy = 715
  fieldIsData Proxy = False
  fieldToValue = toValue . unClearingBusinessDate
  fieldFromValue = fromValue >=> (prettyValidate . ClearingBusinessDate)

-- FieldSpec {fieldNumber = 716, fieldName = "SettlSessID", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "ITD", fieldValueDescription = "INTRADAY"},FieldValueSpec {fieldValueEnum = "RTH", fieldValueDescription = "REGULAR_TRADING_HOURS"},FieldValueSpec {fieldValueEnum = "ETH", fieldValueDescription = "ELECTRONIC_TRADING_HOURS"}]}
data SettlSessID
  = SettlSessID_INTRADAY
  | SettlSessID_REGULAR_TRADING_HOURS
  | SettlSessID_ELECTRONIC_TRADING_HOURS
  deriving stock (Show, Eq, Generic)

instance Validity SettlSessID

instance IsField SettlSessID where
  fieldTag Proxy = 716
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlSessID_INTRADAY -> "ITD"
    SettlSessID_REGULAR_TRADING_HOURS -> "RTH"
    SettlSessID_ELECTRONIC_TRADING_HOURS -> "ETH"
  fieldFromValue = \case
    "ITD" -> Right SettlSessID_INTRADAY
    "RTH" -> Right SettlSessID_REGULAR_TRADING_HOURS
    "ETH" -> Right SettlSessID_ELECTRONIC_TRADING_HOURS
    v -> Left ("Unknown SettlSessID: " <> show v)

-- FieldSpec {fieldNumber = 717, fieldName = "SettlSessSubID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlSessSubID = SettlSessSubID {unSettlSessSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlSessSubID

instance IsField SettlSessSubID where
  fieldTag Proxy = 717
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlSessSubID
  fieldFromValue = fromValue >=> (prettyValidate . SettlSessSubID)

-- FieldSpec {fieldNumber = 718, fieldName = "AdjustmentType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PROCESS_REQUEST_AS_MARGIN_DISPOSITION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DELTA_PLUS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DELTA_MINUS"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FINAL"}]}
data AdjustmentType
  = AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION
  | AdjustmentType_DELTA_PLUS
  | AdjustmentType_DELTA_MINUS
  | AdjustmentType_FINAL
  deriving stock (Show, Eq, Generic)

instance Validity AdjustmentType

instance IsField AdjustmentType where
  fieldTag Proxy = 718
  fieldIsData Proxy = False
  fieldToValue = \case
    AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION -> "0"
    AdjustmentType_DELTA_PLUS -> "1"
    AdjustmentType_DELTA_MINUS -> "2"
    AdjustmentType_FINAL -> "3"
  fieldFromValue = \case
    "0" -> Right AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION
    "1" -> Right AdjustmentType_DELTA_PLUS
    "2" -> Right AdjustmentType_DELTA_MINUS
    "3" -> Right AdjustmentType_FINAL
    v -> Left ("Unknown AdjustmentType: " <> show v)

-- FieldSpec {fieldNumber = 719, fieldName = "ContraryInstructionIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype ContraryInstructionIndicator = ContraryInstructionIndicator {unContraryInstructionIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity ContraryInstructionIndicator

instance IsField ContraryInstructionIndicator where
  fieldTag Proxy = 719
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraryInstructionIndicator
  fieldFromValue = fromValue >=> (prettyValidate . ContraryInstructionIndicator)

-- FieldSpec {fieldNumber = 720, fieldName = "PriorSpreadIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype PriorSpreadIndicator = PriorSpreadIndicator {unPriorSpreadIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity PriorSpreadIndicator

instance IsField PriorSpreadIndicator where
  fieldTag Proxy = 720
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriorSpreadIndicator
  fieldFromValue = fromValue >=> (prettyValidate . PriorSpreadIndicator)

-- FieldSpec {fieldNumber = 721, fieldName = "PosMaintRptID", fieldType = FieldTypeString, fieldValues = []}
newtype PosMaintRptID = PosMaintRptID {unPosMaintRptID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintRptID

instance IsField PosMaintRptID where
  fieldTag Proxy = 721
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosMaintRptID
  fieldFromValue = fromValue >=> (prettyValidate . PosMaintRptID)

-- FieldSpec {fieldNumber = 722, fieldName = "PosMaintStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPTED_WITH_WARNINGS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "COMPLETED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "COMPLETED_WITH_WARNINGS"}]}
data PosMaintStatus
  = PosMaintStatus_ACCEPTED
  | PosMaintStatus_ACCEPTED_WITH_WARNINGS
  | PosMaintStatus_REJECTED
  | PosMaintStatus_COMPLETED
  | PosMaintStatus_COMPLETED_WITH_WARNINGS
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintStatus

instance IsField PosMaintStatus where
  fieldTag Proxy = 722
  fieldIsData Proxy = False
  fieldToValue = \case
    PosMaintStatus_ACCEPTED -> "0"
    PosMaintStatus_ACCEPTED_WITH_WARNINGS -> "1"
    PosMaintStatus_REJECTED -> "2"
    PosMaintStatus_COMPLETED -> "3"
    PosMaintStatus_COMPLETED_WITH_WARNINGS -> "4"
  fieldFromValue = \case
    "0" -> Right PosMaintStatus_ACCEPTED
    "1" -> Right PosMaintStatus_ACCEPTED_WITH_WARNINGS
    "2" -> Right PosMaintStatus_REJECTED
    "3" -> Right PosMaintStatus_COMPLETED
    "4" -> Right PosMaintStatus_COMPLETED_WITH_WARNINGS
    v -> Left ("Unknown PosMaintStatus: " <> show v)

-- FieldSpec {fieldNumber = 723, fieldName = "PosMaintResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUCCESSFUL_COMPLETION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data PosMaintResult
  = PosMaintResult_SUCCESSFUL_COMPLETION
  | PosMaintResult_REJECTED
  | PosMaintResult_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintResult

instance IsField PosMaintResult where
  fieldTag Proxy = 723
  fieldIsData Proxy = False
  fieldToValue = \case
    PosMaintResult_SUCCESSFUL_COMPLETION -> "0"
    PosMaintResult_REJECTED -> "1"
    PosMaintResult_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right PosMaintResult_SUCCESSFUL_COMPLETION
    "1" -> Right PosMaintResult_REJECTED
    "99" -> Right PosMaintResult_OTHER
    v -> Left ("Unknown PosMaintResult: " <> show v)

-- FieldSpec {fieldNumber = 724, fieldName = "PosReqType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "POSITIONS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TRADES"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXERCISES"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ASSIGNMENTS"}]}
data PosReqType
  = PosReqType_POSITIONS
  | PosReqType_TRADES
  | PosReqType_EXERCISES
  | PosReqType_ASSIGNMENTS
  deriving stock (Show, Eq, Generic)

instance Validity PosReqType

instance IsField PosReqType where
  fieldTag Proxy = 724
  fieldIsData Proxy = False
  fieldToValue = \case
    PosReqType_POSITIONS -> "0"
    PosReqType_TRADES -> "1"
    PosReqType_EXERCISES -> "2"
    PosReqType_ASSIGNMENTS -> "3"
  fieldFromValue = \case
    "0" -> Right PosReqType_POSITIONS
    "1" -> Right PosReqType_TRADES
    "2" -> Right PosReqType_EXERCISES
    "3" -> Right PosReqType_ASSIGNMENTS
    v -> Left ("Unknown PosReqType: " <> show v)

-- FieldSpec {fieldNumber = 725, fieldName = "ResponseTransportType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "INBAND"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "OUT_OF_BAND"}]}
data ResponseTransportType
  = ResponseTransportType_INBAND
  | ResponseTransportType_OUT_OF_BAND
  deriving stock (Show, Eq, Generic)

instance Validity ResponseTransportType

instance IsField ResponseTransportType where
  fieldTag Proxy = 725
  fieldIsData Proxy = False
  fieldToValue = \case
    ResponseTransportType_INBAND -> "0"
    ResponseTransportType_OUT_OF_BAND -> "1"
  fieldFromValue = \case
    "0" -> Right ResponseTransportType_INBAND
    "1" -> Right ResponseTransportType_OUT_OF_BAND
    v -> Left ("Unknown ResponseTransportType: " <> show v)

-- FieldSpec {fieldNumber = 726, fieldName = "ResponseDestination", fieldType = FieldTypeString, fieldValues = []}
newtype ResponseDestination = ResponseDestination {unResponseDestination :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ResponseDestination

instance IsField ResponseDestination where
  fieldTag Proxy = 726
  fieldIsData Proxy = False
  fieldToValue = toValue . unResponseDestination
  fieldFromValue = fromValue >=> (prettyValidate . ResponseDestination)

-- FieldSpec {fieldNumber = 727, fieldName = "TotalNumPosReports", fieldType = FieldTypeInt, fieldValues = []}
newtype TotalNumPosReports = TotalNumPosReports {unTotalNumPosReports :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalNumPosReports

instance IsField TotalNumPosReports where
  fieldTag Proxy = 727
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalNumPosReports
  fieldFromValue = fromValue >=> (prettyValidate . TotalNumPosReports)

-- FieldSpec {fieldNumber = 728, fieldName = "PosReqResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "VALID_REQUEST"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNSUPPORTED_REQUEST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NOT_AUTHORIZED_TO_REQUEST_POSITIONS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "REQUEST_FOR_POSITION_NOT_SUPPORTED"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data PosReqResult
  = PosReqResult_VALID_REQUEST
  | PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST
  | PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA
  | PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS
  | PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED
  | PosReqResult_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity PosReqResult

instance IsField PosReqResult where
  fieldTag Proxy = 728
  fieldIsData Proxy = False
  fieldToValue = \case
    PosReqResult_VALID_REQUEST -> "0"
    PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST -> "1"
    PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA -> "2"
    PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS -> "3"
    PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED -> "4"
    PosReqResult_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right PosReqResult_VALID_REQUEST
    "1" -> Right PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST
    "2" -> Right PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA
    "3" -> Right PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS
    "4" -> Right PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED
    "99" -> Right PosReqResult_OTHER
    v -> Left ("Unknown PosReqResult: " <> show v)

-- FieldSpec {fieldNumber = 729, fieldName = "PosReqStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "COMPLETED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "COMPLETED_WITH_WARNINGS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REJECTED"}]}
data PosReqStatus
  = PosReqStatus_COMPLETED
  | PosReqStatus_COMPLETED_WITH_WARNINGS
  | PosReqStatus_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity PosReqStatus

instance IsField PosReqStatus where
  fieldTag Proxy = 729
  fieldIsData Proxy = False
  fieldToValue = \case
    PosReqStatus_COMPLETED -> "0"
    PosReqStatus_COMPLETED_WITH_WARNINGS -> "1"
    PosReqStatus_REJECTED -> "2"
  fieldFromValue = \case
    "0" -> Right PosReqStatus_COMPLETED
    "1" -> Right PosReqStatus_COMPLETED_WITH_WARNINGS
    "2" -> Right PosReqStatus_REJECTED
    v -> Left ("Unknown PosReqStatus: " <> show v)

-- FieldSpec {fieldNumber = 730, fieldName = "SettlPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype SettlPrice = SettlPrice {unSettlPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPrice

instance IsField SettlPrice where
  fieldTag Proxy = 730
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPrice
  fieldFromValue = fromValue >=> (prettyValidate . SettlPrice)

-- FieldSpec {fieldNumber = 731, fieldName = "SettlPriceType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FINAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "THEORETICAL"}]}
data SettlPriceType
  = SettlPriceType_FINAL
  | SettlPriceType_THEORETICAL
  deriving stock (Show, Eq, Generic)

instance Validity SettlPriceType

instance IsField SettlPriceType where
  fieldTag Proxy = 731
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlPriceType_FINAL -> "1"
    SettlPriceType_THEORETICAL -> "2"
  fieldFromValue = \case
    "1" -> Right SettlPriceType_FINAL
    "2" -> Right SettlPriceType_THEORETICAL
    v -> Left ("Unknown SettlPriceType: " <> show v)

-- FieldSpec {fieldNumber = 732, fieldName = "UnderlyingSettlPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingSettlPrice = UnderlyingSettlPrice {unUnderlyingSettlPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSettlPrice

instance IsField UnderlyingSettlPrice where
  fieldTag Proxy = 732
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSettlPrice
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSettlPrice)

-- FieldSpec {fieldNumber = 733, fieldName = "UnderlyingSettlPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype UnderlyingSettlPriceType = UnderlyingSettlPriceType {unUnderlyingSettlPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSettlPriceType

instance IsField UnderlyingSettlPriceType where
  fieldTag Proxy = 733
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSettlPriceType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSettlPriceType)

-- FieldSpec {fieldNumber = 734, fieldName = "PriorSettlPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype PriorSettlPrice = PriorSettlPrice {unPriorSettlPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PriorSettlPrice

instance IsField PriorSettlPrice where
  fieldTag Proxy = 734
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriorSettlPrice
  fieldFromValue = fromValue >=> (prettyValidate . PriorSettlPrice)

-- FieldSpec {fieldNumber = 735, fieldName = "NoQuoteQualifiers", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoQuoteQualifiers = NoQuoteQualifiers {unNoQuoteQualifiers :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoQuoteQualifiers

instance IsField NoQuoteQualifiers where
  fieldTag Proxy = 735
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoQuoteQualifiers
  fieldFromValue = fromValue >=> (prettyValidate . NoQuoteQualifiers)

-- FieldSpec {fieldNumber = 736, fieldName = "AllocSettlCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype AllocSettlCurrency = AllocSettlCurrency {unAllocSettlCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocSettlCurrency

instance IsField AllocSettlCurrency where
  fieldTag Proxy = 736
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocSettlCurrency
  fieldFromValue = fromValue >=> (prettyValidate . AllocSettlCurrency)

-- FieldSpec {fieldNumber = 737, fieldName = "AllocSettlCurrAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllocSettlCurrAmt = AllocSettlCurrAmt {unAllocSettlCurrAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocSettlCurrAmt

instance IsField AllocSettlCurrAmt where
  fieldTag Proxy = 737
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocSettlCurrAmt
  fieldFromValue = fromValue >=> (prettyValidate . AllocSettlCurrAmt)

-- FieldSpec {fieldNumber = 738, fieldName = "InterestAtMaturity", fieldType = FieldTypeAMT, fieldValues = []}
newtype InterestAtMaturity = InterestAtMaturity {unInterestAtMaturity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InterestAtMaturity

instance IsField InterestAtMaturity where
  fieldTag Proxy = 738
  fieldIsData Proxy = False
  fieldToValue = toValue . unInterestAtMaturity
  fieldFromValue = fromValue >=> (prettyValidate . InterestAtMaturity)

-- FieldSpec {fieldNumber = 739, fieldName = "LegDatedDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegDatedDate = LegDatedDate {unLegDatedDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegDatedDate

instance IsField LegDatedDate where
  fieldTag Proxy = 739
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegDatedDate
  fieldFromValue = fromValue >=> (prettyValidate . LegDatedDate)

-- FieldSpec {fieldNumber = 740, fieldName = "LegPool", fieldType = FieldTypeString, fieldValues = []}
newtype LegPool = LegPool {unLegPool :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegPool

instance IsField LegPool where
  fieldTag Proxy = 740
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegPool
  fieldFromValue = fromValue >=> (prettyValidate . LegPool)

-- FieldSpec {fieldNumber = 741, fieldName = "AllocInterestAtMaturity", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllocInterestAtMaturity = AllocInterestAtMaturity {unAllocInterestAtMaturity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocInterestAtMaturity

instance IsField AllocInterestAtMaturity where
  fieldTag Proxy = 741
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocInterestAtMaturity
  fieldFromValue = fromValue >=> (prettyValidate . AllocInterestAtMaturity)

-- FieldSpec {fieldNumber = 742, fieldName = "AllocAccruedInterestAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllocAccruedInterestAmt = AllocAccruedInterestAmt {unAllocAccruedInterestAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocAccruedInterestAmt

instance IsField AllocAccruedInterestAmt where
  fieldTag Proxy = 742
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocAccruedInterestAmt
  fieldFromValue = fromValue >=> (prettyValidate . AllocAccruedInterestAmt)

-- FieldSpec {fieldNumber = 743, fieldName = "DeliveryDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype DeliveryDate = DeliveryDate {unDeliveryDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliveryDate

instance IsField DeliveryDate where
  fieldTag Proxy = 743
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliveryDate
  fieldFromValue = fromValue >=> (prettyValidate . DeliveryDate)

-- FieldSpec {fieldNumber = 744, fieldName = "AssignmentMethod", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "RANDOM"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "PRO_RATA"}]}
data AssignmentMethod
  = AssignmentMethod_RANDOM
  | AssignmentMethod_PRO_RATA
  deriving stock (Show, Eq, Generic)

instance Validity AssignmentMethod

instance IsField AssignmentMethod where
  fieldTag Proxy = 744
  fieldIsData Proxy = False
  fieldToValue = \case
    AssignmentMethod_RANDOM -> "R"
    AssignmentMethod_PRO_RATA -> "P"
  fieldFromValue = \case
    "R" -> Right AssignmentMethod_RANDOM
    "P" -> Right AssignmentMethod_PRO_RATA
    v -> Left ("Unknown AssignmentMethod: " <> show v)

-- FieldSpec {fieldNumber = 745, fieldName = "AssignmentUnit", fieldType = FieldTypeQTY, fieldValues = []}
newtype AssignmentUnit = AssignmentUnit {unAssignmentUnit :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AssignmentUnit

instance IsField AssignmentUnit where
  fieldTag Proxy = 745
  fieldIsData Proxy = False
  fieldToValue = toValue . unAssignmentUnit
  fieldFromValue = fromValue >=> (prettyValidate . AssignmentUnit)

-- FieldSpec {fieldNumber = 746, fieldName = "OpenInterest", fieldType = FieldTypeAMT, fieldValues = []}
newtype OpenInterest = OpenInterest {unOpenInterest :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OpenInterest

instance IsField OpenInterest where
  fieldTag Proxy = 746
  fieldIsData Proxy = False
  fieldToValue = toValue . unOpenInterest
  fieldFromValue = fromValue >=> (prettyValidate . OpenInterest)

-- FieldSpec {fieldNumber = 747, fieldName = "ExerciseMethod", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "AUTOMATIC"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MANUAL"}]}
data ExerciseMethod
  = ExerciseMethod_AUTOMATIC
  | ExerciseMethod_MANUAL
  deriving stock (Show, Eq, Generic)

instance Validity ExerciseMethod

instance IsField ExerciseMethod where
  fieldTag Proxy = 747
  fieldIsData Proxy = False
  fieldToValue = \case
    ExerciseMethod_AUTOMATIC -> "A"
    ExerciseMethod_MANUAL -> "M"
  fieldFromValue = \case
    "A" -> Right ExerciseMethod_AUTOMATIC
    "M" -> Right ExerciseMethod_MANUAL
    v -> Left ("Unknown ExerciseMethod: " <> show v)

-- FieldSpec {fieldNumber = 748, fieldName = "TotNumTradeReports", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNumTradeReports = TotNumTradeReports {unTotNumTradeReports :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNumTradeReports

instance IsField TotNumTradeReports where
  fieldTag Proxy = 748
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNumTradeReports
  fieldFromValue = fromValue >=> (prettyValidate . TotNumTradeReports)

-- FieldSpec {fieldNumber = 749, fieldName = "TradeRequestResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUCCESSFUL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNKNOWN_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INVALID_TYPE_OF_TRADE_REQUESTED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVALID_PARTIES"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_TRANSPORT_TYPE_REQUESTED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_DESTINATION_REQUESTED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TRADE_REQUEST_TYPE_NOT_SUPPORTED"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "NOT_AUTHORIZED"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data TradeRequestResult
  = TradeRequestResult_SUCCESSFUL
  | TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT
  | TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED
  | TradeRequestResult_INVALID_PARTIES
  | TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED
  | TradeRequestResult_INVALID_DESTINATION_REQUESTED
  | TradeRequestResult_TRADE_REQUEST_TYPE_NOT_SUPPORTED
  | TradeRequestResult_NOT_AUTHORIZED
  | TradeRequestResult_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity TradeRequestResult

instance IsField TradeRequestResult where
  fieldTag Proxy = 749
  fieldIsData Proxy = False
  fieldToValue = \case
    TradeRequestResult_SUCCESSFUL -> "0"
    TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT -> "1"
    TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED -> "2"
    TradeRequestResult_INVALID_PARTIES -> "3"
    TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED -> "4"
    TradeRequestResult_INVALID_DESTINATION_REQUESTED -> "5"
    TradeRequestResult_TRADE_REQUEST_TYPE_NOT_SUPPORTED -> "8"
    TradeRequestResult_NOT_AUTHORIZED -> "9"
    TradeRequestResult_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right TradeRequestResult_SUCCESSFUL
    "1" -> Right TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT
    "2" -> Right TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED
    "3" -> Right TradeRequestResult_INVALID_PARTIES
    "4" -> Right TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED
    "5" -> Right TradeRequestResult_INVALID_DESTINATION_REQUESTED
    "8" -> Right TradeRequestResult_TRADE_REQUEST_TYPE_NOT_SUPPORTED
    "9" -> Right TradeRequestResult_NOT_AUTHORIZED
    "99" -> Right TradeRequestResult_OTHER
    v -> Left ("Unknown TradeRequestResult: " <> show v)

-- FieldSpec {fieldNumber = 750, fieldName = "TradeRequestStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "COMPLETED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REJECTED"}]}
data TradeRequestStatus
  = TradeRequestStatus_ACCEPTED
  | TradeRequestStatus_COMPLETED
  | TradeRequestStatus_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity TradeRequestStatus

instance IsField TradeRequestStatus where
  fieldTag Proxy = 750
  fieldIsData Proxy = False
  fieldToValue = \case
    TradeRequestStatus_ACCEPTED -> "0"
    TradeRequestStatus_COMPLETED -> "1"
    TradeRequestStatus_REJECTED -> "2"
  fieldFromValue = \case
    "0" -> Right TradeRequestStatus_ACCEPTED
    "1" -> Right TradeRequestStatus_COMPLETED
    "2" -> Right TradeRequestStatus_REJECTED
    v -> Left ("Unknown TradeRequestStatus: " <> show v)

-- FieldSpec {fieldNumber = 751, fieldName = "TradeReportRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUCCESSFUL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_PARTY_ONFORMATION"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "UNKNOWN_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNAUTHORIZED_TO_REPORT_TRADES"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_TRADE_TYPE"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data TradeReportRejectReason
  = TradeReportRejectReason_SUCCESSFUL
  | TradeReportRejectReason_INVALID_PARTY_ONFORMATION
  | TradeReportRejectReason_UNKNOWN_INSTRUMENT
  | TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES
  | TradeReportRejectReason_INVALID_TRADE_TYPE
  | TradeReportRejectReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportRejectReason

instance IsField TradeReportRejectReason where
  fieldTag Proxy = 751
  fieldIsData Proxy = False
  fieldToValue = \case
    TradeReportRejectReason_SUCCESSFUL -> "0"
    TradeReportRejectReason_INVALID_PARTY_ONFORMATION -> "1"
    TradeReportRejectReason_UNKNOWN_INSTRUMENT -> "2"
    TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES -> "3"
    TradeReportRejectReason_INVALID_TRADE_TYPE -> "4"
    TradeReportRejectReason_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right TradeReportRejectReason_SUCCESSFUL
    "1" -> Right TradeReportRejectReason_INVALID_PARTY_ONFORMATION
    "2" -> Right TradeReportRejectReason_UNKNOWN_INSTRUMENT
    "3" -> Right TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES
    "4" -> Right TradeReportRejectReason_INVALID_TRADE_TYPE
    "99" -> Right TradeReportRejectReason_OTHER
    v -> Left ("Unknown TradeReportRejectReason: " <> show v)

-- FieldSpec {fieldNumber = 752, fieldName = "SideMultiLegReportingType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SINGLE_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MULTILEG_SECURITY"}]}
data SideMultiLegReportingType
  = SideMultiLegReportingType_SINGLE_SECURITY
  | SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY
  | SideMultiLegReportingType_MULTILEG_SECURITY
  deriving stock (Show, Eq, Generic)

instance Validity SideMultiLegReportingType

instance IsField SideMultiLegReportingType where
  fieldTag Proxy = 752
  fieldIsData Proxy = False
  fieldToValue = \case
    SideMultiLegReportingType_SINGLE_SECURITY -> "1"
    SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY -> "2"
    SideMultiLegReportingType_MULTILEG_SECURITY -> "3"
  fieldFromValue = \case
    "1" -> Right SideMultiLegReportingType_SINGLE_SECURITY
    "2" -> Right SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY
    "3" -> Right SideMultiLegReportingType_MULTILEG_SECURITY
    v -> Left ("Unknown SideMultiLegReportingType: " <> show v)

-- FieldSpec {fieldNumber = 753, fieldName = "NoPosAmt", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoPosAmt = NoPosAmt {unNoPosAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoPosAmt

instance IsField NoPosAmt where
  fieldTag Proxy = 753
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoPosAmt
  fieldFromValue = fromValue >=> (prettyValidate . NoPosAmt)

-- FieldSpec {fieldNumber = 754, fieldName = "AutoAcceptIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype AutoAcceptIndicator = AutoAcceptIndicator {unAutoAcceptIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity AutoAcceptIndicator

instance IsField AutoAcceptIndicator where
  fieldTag Proxy = 754
  fieldIsData Proxy = False
  fieldToValue = toValue . unAutoAcceptIndicator
  fieldFromValue = fromValue >=> (prettyValidate . AutoAcceptIndicator)

-- FieldSpec {fieldNumber = 755, fieldName = "AllocReportID", fieldType = FieldTypeString, fieldValues = []}
newtype AllocReportID = AllocReportID {unAllocReportID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocReportID

instance IsField AllocReportID where
  fieldTag Proxy = 755
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocReportID
  fieldFromValue = fromValue >=> (prettyValidate . AllocReportID)

-- FieldSpec {fieldNumber = 756, fieldName = "NoNested2PartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNested2PartyIDs = NoNested2PartyIDs {unNoNested2PartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNested2PartyIDs

instance IsField NoNested2PartyIDs where
  fieldTag Proxy = 756
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNested2PartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNested2PartyIDs)

-- FieldSpec {fieldNumber = 757, fieldName = "Nested2PartyID", fieldType = FieldTypeString, fieldValues = []}
newtype Nested2PartyID = Nested2PartyID {unNested2PartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartyID

instance IsField Nested2PartyID where
  fieldTag Proxy = 757
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartyID
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartyID)

-- FieldSpec {fieldNumber = 758, fieldName = "Nested2PartyIDSource", fieldType = FieldTypeChar, fieldValues = []}
newtype Nested2PartyIDSource = Nested2PartyIDSource {unNested2PartyIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartyIDSource

instance IsField Nested2PartyIDSource where
  fieldTag Proxy = 758
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartyIDSource
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartyIDSource)

-- FieldSpec {fieldNumber = 759, fieldName = "Nested2PartyRole", fieldType = FieldTypeInt, fieldValues = []}
newtype Nested2PartyRole = Nested2PartyRole {unNested2PartyRole :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartyRole

instance IsField Nested2PartyRole where
  fieldTag Proxy = 759
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartyRole
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartyRole)

-- FieldSpec {fieldNumber = 760, fieldName = "Nested2PartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype Nested2PartySubID = Nested2PartySubID {unNested2PartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartySubID

instance IsField Nested2PartySubID where
  fieldTag Proxy = 760
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartySubID
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartySubID)

-- FieldSpec {fieldNumber = 761, fieldName = "BenchmarkSecurityIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype BenchmarkSecurityIDSource = BenchmarkSecurityIDSource {unBenchmarkSecurityIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkSecurityIDSource

instance IsField BenchmarkSecurityIDSource where
  fieldTag Proxy = 761
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkSecurityIDSource
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkSecurityIDSource)

-- FieldSpec {fieldNumber = 762, fieldName = "SecuritySubType", fieldType = FieldTypeString, fieldValues = []}
newtype SecuritySubType = SecuritySubType {unSecuritySubType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecuritySubType

instance IsField SecuritySubType where
  fieldTag Proxy = 762
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecuritySubType
  fieldFromValue = fromValue >=> (prettyValidate . SecuritySubType)

-- FieldSpec {fieldNumber = 763, fieldName = "UnderlyingSecuritySubType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecuritySubType = UnderlyingSecuritySubType {unUnderlyingSecuritySubType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecuritySubType

instance IsField UnderlyingSecuritySubType where
  fieldTag Proxy = 763
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecuritySubType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecuritySubType)

-- FieldSpec {fieldNumber = 764, fieldName = "LegSecuritySubType", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecuritySubType = LegSecuritySubType {unLegSecuritySubType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecuritySubType

instance IsField LegSecuritySubType where
  fieldTag Proxy = 764
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecuritySubType
  fieldFromValue = fromValue >=> (prettyValidate . LegSecuritySubType)

-- FieldSpec {fieldNumber = 765, fieldName = "AllowableOneSidednessPct", fieldType = FieldTypePercentage, fieldValues = []}
newtype AllowableOneSidednessPct = AllowableOneSidednessPct {unAllowableOneSidednessPct :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllowableOneSidednessPct

instance IsField AllowableOneSidednessPct where
  fieldTag Proxy = 765
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllowableOneSidednessPct
  fieldFromValue = fromValue >=> (prettyValidate . AllowableOneSidednessPct)

-- FieldSpec {fieldNumber = 766, fieldName = "AllowableOneSidednessValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllowableOneSidednessValue = AllowableOneSidednessValue {unAllowableOneSidednessValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllowableOneSidednessValue

instance IsField AllowableOneSidednessValue where
  fieldTag Proxy = 766
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllowableOneSidednessValue
  fieldFromValue = fromValue >=> (prettyValidate . AllowableOneSidednessValue)

-- FieldSpec {fieldNumber = 767, fieldName = "AllowableOneSidednessCurr", fieldType = FieldTypeCurrency, fieldValues = []}
newtype AllowableOneSidednessCurr = AllowableOneSidednessCurr {unAllowableOneSidednessCurr :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllowableOneSidednessCurr

instance IsField AllowableOneSidednessCurr where
  fieldTag Proxy = 767
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllowableOneSidednessCurr
  fieldFromValue = fromValue >=> (prettyValidate . AllowableOneSidednessCurr)

-- FieldSpec {fieldNumber = 768, fieldName = "NoTrdRegTimestamps", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoTrdRegTimestamps = NoTrdRegTimestamps {unNoTrdRegTimestamps :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoTrdRegTimestamps

instance IsField NoTrdRegTimestamps where
  fieldTag Proxy = 768
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoTrdRegTimestamps
  fieldFromValue = fromValue >=> (prettyValidate . NoTrdRegTimestamps)

-- FieldSpec {fieldNumber = 769, fieldName = "TrdRegTimestamp", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TrdRegTimestamp = TrdRegTimestamp {unTrdRegTimestamp :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdRegTimestamp

instance IsField TrdRegTimestamp where
  fieldTag Proxy = 769
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdRegTimestamp
  fieldFromValue = fromValue >=> (prettyValidate . TrdRegTimestamp)

-- FieldSpec {fieldNumber = 770, fieldName = "TrdRegTimestampType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXECUTION_TIME"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TIME_IN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TIME_OUT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "BROKER_RECEIPT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "BROKER_EXECUTION"}]}
data TrdRegTimestampType
  = TrdRegTimestampType_EXECUTION_TIME
  | TrdRegTimestampType_TIME_IN
  | TrdRegTimestampType_TIME_OUT
  | TrdRegTimestampType_BROKER_RECEIPT
  | TrdRegTimestampType_BROKER_EXECUTION
  deriving stock (Show, Eq, Generic)

instance Validity TrdRegTimestampType

instance IsField TrdRegTimestampType where
  fieldTag Proxy = 770
  fieldIsData Proxy = False
  fieldToValue = \case
    TrdRegTimestampType_EXECUTION_TIME -> "1"
    TrdRegTimestampType_TIME_IN -> "2"
    TrdRegTimestampType_TIME_OUT -> "3"
    TrdRegTimestampType_BROKER_RECEIPT -> "4"
    TrdRegTimestampType_BROKER_EXECUTION -> "5"
  fieldFromValue = \case
    "1" -> Right TrdRegTimestampType_EXECUTION_TIME
    "2" -> Right TrdRegTimestampType_TIME_IN
    "3" -> Right TrdRegTimestampType_TIME_OUT
    "4" -> Right TrdRegTimestampType_BROKER_RECEIPT
    "5" -> Right TrdRegTimestampType_BROKER_EXECUTION
    v -> Left ("Unknown TrdRegTimestampType: " <> show v)

-- FieldSpec {fieldNumber = 771, fieldName = "TrdRegTimestampOrigin", fieldType = FieldTypeString, fieldValues = []}
newtype TrdRegTimestampOrigin = TrdRegTimestampOrigin {unTrdRegTimestampOrigin :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdRegTimestampOrigin

instance IsField TrdRegTimestampOrigin where
  fieldTag Proxy = 771
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdRegTimestampOrigin
  fieldFromValue = fromValue >=> (prettyValidate . TrdRegTimestampOrigin)

-- FieldSpec {fieldNumber = 772, fieldName = "ConfirmRefID", fieldType = FieldTypeString, fieldValues = []}
newtype ConfirmRefID = ConfirmRefID {unConfirmRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmRefID

instance IsField ConfirmRefID where
  fieldTag Proxy = 772
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmRefID
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmRefID)

-- FieldSpec {fieldNumber = 773, fieldName = "ConfirmType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STATUS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CONFIRMATION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CONFIRMATION_REQUEST_REJECTED"}]}
data ConfirmType
  = ConfirmType_STATUS
  | ConfirmType_CONFIRMATION
  | ConfirmType_CONFIRMATION_REQUEST_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmType

instance IsField ConfirmType where
  fieldTag Proxy = 773
  fieldIsData Proxy = False
  fieldToValue = \case
    ConfirmType_STATUS -> "1"
    ConfirmType_CONFIRMATION -> "2"
    ConfirmType_CONFIRMATION_REQUEST_REJECTED -> "3"
  fieldFromValue = \case
    "1" -> Right ConfirmType_STATUS
    "2" -> Right ConfirmType_CONFIRMATION
    "3" -> Right ConfirmType_CONFIRMATION_REQUEST_REJECTED
    v -> Left ("Unknown ConfirmType: " <> show v)

-- FieldSpec {fieldNumber = 774, fieldName = "ConfirmRejReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MISMATCHED_ACCOUNT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MISSING_SETTLEMENT_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data ConfirmRejReason
  = ConfirmRejReason_MISMATCHED_ACCOUNT
  | ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS
  | ConfirmRejReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmRejReason

instance IsField ConfirmRejReason where
  fieldTag Proxy = 774
  fieldIsData Proxy = False
  fieldToValue = \case
    ConfirmRejReason_MISMATCHED_ACCOUNT -> "1"
    ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS -> "2"
    ConfirmRejReason_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right ConfirmRejReason_MISMATCHED_ACCOUNT
    "2" -> Right ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS
    "99" -> Right ConfirmRejReason_OTHER
    v -> Left ("Unknown ConfirmRejReason: " <> show v)

-- FieldSpec {fieldNumber = 775, fieldName = "BookingType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REGULAR_BOOKING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CFD"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TOTAL_RETURN_SWAP"}]}
data BookingType
  = BookingType_REGULAR_BOOKING
  | BookingType_CFD
  | BookingType_TOTAL_RETURN_SWAP
  deriving stock (Show, Eq, Generic)

instance Validity BookingType

instance IsField BookingType where
  fieldTag Proxy = 775
  fieldIsData Proxy = False
  fieldToValue = \case
    BookingType_REGULAR_BOOKING -> "0"
    BookingType_CFD -> "1"
    BookingType_TOTAL_RETURN_SWAP -> "2"
  fieldFromValue = \case
    "0" -> Right BookingType_REGULAR_BOOKING
    "1" -> Right BookingType_CFD
    "2" -> Right BookingType_TOTAL_RETURN_SWAP
    v -> Left ("Unknown BookingType: " <> show v)

-- FieldSpec {fieldNumber = 776, fieldName = "IndividualAllocRejCode", fieldType = FieldTypeInt, fieldValues = []}
newtype IndividualAllocRejCode = IndividualAllocRejCode {unIndividualAllocRejCode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IndividualAllocRejCode

instance IsField IndividualAllocRejCode where
  fieldTag Proxy = 776
  fieldIsData Proxy = False
  fieldToValue = toValue . unIndividualAllocRejCode
  fieldFromValue = fromValue >=> (prettyValidate . IndividualAllocRejCode)

-- FieldSpec {fieldNumber = 777, fieldName = "SettlInstMsgID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlInstMsgID = SettlInstMsgID {unSettlInstMsgID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstMsgID

instance IsField SettlInstMsgID where
  fieldTag Proxy = 777
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstMsgID
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstMsgID)

-- FieldSpec {fieldNumber = 778, fieldName = "NoSettlInst", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSettlInst = NoSettlInst {unNoSettlInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSettlInst

instance IsField NoSettlInst where
  fieldTag Proxy = 778
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSettlInst
  fieldFromValue = fromValue >=> (prettyValidate . NoSettlInst)

-- FieldSpec {fieldNumber = 779, fieldName = "LastUpdateTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype LastUpdateTime = LastUpdateTime {unLastUpdateTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastUpdateTime

instance IsField LastUpdateTime where
  fieldTag Proxy = 779
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastUpdateTime
  fieldFromValue = fromValue >=> (prettyValidate . LastUpdateTime)

-- FieldSpec {fieldNumber = 780, fieldName = "AllocSettlInstType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "USE_DEFAULT_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DERIVE_FROM_PARAMETERS_PROVIDED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "FULL_DETAILS_PROVIDED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SSIDBI_DS_PROVIDED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PHONE_FOR_INSTRUCTIONS"}]}
data AllocSettlInstType
  = AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS
  | AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED
  | AllocSettlInstType_FULL_DETAILS_PROVIDED
  | AllocSettlInstType_SSIDBI_DS_PROVIDED
  | AllocSettlInstType_PHONE_FOR_INSTRUCTIONS
  deriving stock (Show, Eq, Generic)

instance Validity AllocSettlInstType

instance IsField AllocSettlInstType where
  fieldTag Proxy = 780
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS -> "0"
    AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED -> "1"
    AllocSettlInstType_FULL_DETAILS_PROVIDED -> "2"
    AllocSettlInstType_SSIDBI_DS_PROVIDED -> "3"
    AllocSettlInstType_PHONE_FOR_INSTRUCTIONS -> "4"
  fieldFromValue = \case
    "0" -> Right AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS
    "1" -> Right AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED
    "2" -> Right AllocSettlInstType_FULL_DETAILS_PROVIDED
    "3" -> Right AllocSettlInstType_SSIDBI_DS_PROVIDED
    "4" -> Right AllocSettlInstType_PHONE_FOR_INSTRUCTIONS
    v -> Left ("Unknown AllocSettlInstType: " <> show v)

-- FieldSpec {fieldNumber = 781, fieldName = "NoSettlPartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSettlPartyIDs = NoSettlPartyIDs {unNoSettlPartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSettlPartyIDs

instance IsField NoSettlPartyIDs where
  fieldTag Proxy = 781
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSettlPartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoSettlPartyIDs)

-- FieldSpec {fieldNumber = 782, fieldName = "SettlPartyID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlPartyID = SettlPartyID {unSettlPartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartyID

instance IsField SettlPartyID where
  fieldTag Proxy = 782
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartyID
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartyID)

-- FieldSpec {fieldNumber = 783, fieldName = "SettlPartyIDSource", fieldType = FieldTypeChar, fieldValues = []}
newtype SettlPartyIDSource = SettlPartyIDSource {unSettlPartyIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartyIDSource

instance IsField SettlPartyIDSource where
  fieldTag Proxy = 783
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartyIDSource
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartyIDSource)

-- FieldSpec {fieldNumber = 784, fieldName = "SettlPartyRole", fieldType = FieldTypeInt, fieldValues = []}
newtype SettlPartyRole = SettlPartyRole {unSettlPartyRole :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartyRole

instance IsField SettlPartyRole where
  fieldTag Proxy = 784
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartyRole
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartyRole)

-- FieldSpec {fieldNumber = 785, fieldName = "SettlPartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlPartySubID = SettlPartySubID {unSettlPartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartySubID

instance IsField SettlPartySubID where
  fieldTag Proxy = 785
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartySubID
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartySubID)

-- FieldSpec {fieldNumber = 786, fieldName = "SettlPartySubIDType", fieldType = FieldTypeInt, fieldValues = []}
newtype SettlPartySubIDType = SettlPartySubIDType {unSettlPartySubIDType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartySubIDType

instance IsField SettlPartySubIDType where
  fieldTag Proxy = 786
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartySubIDType
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartySubIDType)

-- FieldSpec {fieldNumber = 787, fieldName = "DlvyInstType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SECURITIES"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CASH"}]}
data DlvyInstType
  = DlvyInstType_SECURITIES
  | DlvyInstType_CASH
  deriving stock (Show, Eq, Generic)

instance Validity DlvyInstType

instance IsField DlvyInstType where
  fieldTag Proxy = 787
  fieldIsData Proxy = False
  fieldToValue = \case
    DlvyInstType_SECURITIES -> "S"
    DlvyInstType_CASH -> "C"
  fieldFromValue = \case
    "S" -> Right DlvyInstType_SECURITIES
    "C" -> Right DlvyInstType_CASH
    v -> Left ("Unknown DlvyInstType: " <> show v)

-- FieldSpec {fieldNumber = 788, fieldName = "TerminationType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "OVERNIGHT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TERM"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FLEXIBLE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OPEN"}]}
data TerminationType
  = TerminationType_OVERNIGHT
  | TerminationType_TERM
  | TerminationType_FLEXIBLE
  | TerminationType_OPEN
  deriving stock (Show, Eq, Generic)

instance Validity TerminationType

instance IsField TerminationType where
  fieldTag Proxy = 788
  fieldIsData Proxy = False
  fieldToValue = \case
    TerminationType_OVERNIGHT -> "1"
    TerminationType_TERM -> "2"
    TerminationType_FLEXIBLE -> "3"
    TerminationType_OPEN -> "4"
  fieldFromValue = \case
    "1" -> Right TerminationType_OVERNIGHT
    "2" -> Right TerminationType_TERM
    "3" -> Right TerminationType_FLEXIBLE
    "4" -> Right TerminationType_OPEN
    v -> Left ("Unknown TerminationType: " <> show v)

-- FieldSpec {fieldNumber = 789, fieldName = "NextExpectedMsgSeqNum", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype NextExpectedMsgSeqNum = NextExpectedMsgSeqNum {unNextExpectedMsgSeqNum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NextExpectedMsgSeqNum

instance IsField NextExpectedMsgSeqNum where
  fieldTag Proxy = 789
  fieldIsData Proxy = False
  fieldToValue = toValue . unNextExpectedMsgSeqNum
  fieldFromValue = fromValue >=> (prettyValidate . NextExpectedMsgSeqNum)

-- FieldSpec {fieldNumber = 790, fieldName = "OrdStatusReqID", fieldType = FieldTypeString, fieldValues = []}
newtype OrdStatusReqID = OrdStatusReqID {unOrdStatusReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrdStatusReqID

instance IsField OrdStatusReqID where
  fieldTag Proxy = 790
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrdStatusReqID
  fieldFromValue = fromValue >=> (prettyValidate . OrdStatusReqID)

-- FieldSpec {fieldNumber = 791, fieldName = "SettlInstReqID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlInstReqID = SettlInstReqID {unSettlInstReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstReqID

instance IsField SettlInstReqID where
  fieldTag Proxy = 791
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstReqID
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstReqID)

-- FieldSpec {fieldNumber = 792, fieldName = "SettlInstReqRejCode", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNABLE_TO_PROCESS_REQUEST"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_ACCOUNT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data SettlInstReqRejCode
  = SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST
  | SettlInstReqRejCode_UNKNOWN_ACCOUNT
  | SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND
  | SettlInstReqRejCode_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstReqRejCode

instance IsField SettlInstReqRejCode where
  fieldTag Proxy = 792
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST -> "0"
    SettlInstReqRejCode_UNKNOWN_ACCOUNT -> "1"
    SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND -> "2"
    SettlInstReqRejCode_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST
    "1" -> Right SettlInstReqRejCode_UNKNOWN_ACCOUNT
    "2" -> Right SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND
    "99" -> Right SettlInstReqRejCode_OTHER
    v -> Left ("Unknown SettlInstReqRejCode: " <> show v)

-- FieldSpec {fieldNumber = 793, fieldName = "SecondaryAllocID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryAllocID = SecondaryAllocID {unSecondaryAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryAllocID

instance IsField SecondaryAllocID where
  fieldTag Proxy = 793
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryAllocID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryAllocID)

-- FieldSpec {fieldNumber = 794, fieldName = "AllocReportType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SELLSIDE_CALCULATED_USING_PRELIMINARY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "WAREHOUSE_RECAP"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "REQUEST_TO_INTERMEDIARY"}]}
data AllocReportType
  = AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY
  | AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY
  | AllocReportType_WAREHOUSE_RECAP
  | AllocReportType_REQUEST_TO_INTERMEDIARY
  deriving stock (Show, Eq, Generic)

instance Validity AllocReportType

instance IsField AllocReportType where
  fieldTag Proxy = 794
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY -> "3"
    AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY -> "4"
    AllocReportType_WAREHOUSE_RECAP -> "5"
    AllocReportType_REQUEST_TO_INTERMEDIARY -> "8"
  fieldFromValue = \case
    "3" -> Right AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY
    "4" -> Right AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY
    "5" -> Right AllocReportType_WAREHOUSE_RECAP
    "8" -> Right AllocReportType_REQUEST_TO_INTERMEDIARY
    v -> Left ("Unknown AllocReportType: " <> show v)

-- FieldSpec {fieldNumber = 795, fieldName = "AllocReportRefID", fieldType = FieldTypeString, fieldValues = []}
newtype AllocReportRefID = AllocReportRefID {unAllocReportRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocReportRefID

instance IsField AllocReportRefID where
  fieldTag Proxy = 795
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocReportRefID
  fieldFromValue = fromValue >=> (prettyValidate . AllocReportRefID)

-- FieldSpec {fieldNumber = 796, fieldName = "AllocCancReplaceReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ORIGINAL_DETAILS_INCOMPLETE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CHANGE_IN_UNDERLYING_ORDER_DETAILS"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data AllocCancReplaceReason
  = AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE
  | AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS
  | AllocCancReplaceReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity AllocCancReplaceReason

instance IsField AllocCancReplaceReason where
  fieldTag Proxy = 796
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE -> "1"
    AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS -> "2"
    AllocCancReplaceReason_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE
    "2" -> Right AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS
    "99" -> Right AllocCancReplaceReason_OTHER
    v -> Left ("Unknown AllocCancReplaceReason: " <> show v)

-- FieldSpec {fieldNumber = 797, fieldName = "CopyMsgIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype CopyMsgIndicator = CopyMsgIndicator {unCopyMsgIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity CopyMsgIndicator

instance IsField CopyMsgIndicator where
  fieldTag Proxy = 797
  fieldIsData Proxy = False
  fieldToValue = toValue . unCopyMsgIndicator
  fieldFromValue = fromValue >=> (prettyValidate . CopyMsgIndicator)

-- FieldSpec {fieldNumber = 798, fieldName = "AllocAccountType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CARRIED_CUSTOMER_SIDE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CARRIED_NON_CUSTOMER_SIDE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "HOUSE_TRADER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "FLOOR_TRADER"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "HOUSE_TRADER_CROSS_MARGINED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "JOINT_BACK_OFFICE_ACCOUNT"}]}
data AllocAccountType
  = AllocAccountType_CARRIED_CUSTOMER_SIDE
  | AllocAccountType_CARRIED_NON_CUSTOMER_SIDE
  | AllocAccountType_HOUSE_TRADER
  | AllocAccountType_FLOOR_TRADER
  | AllocAccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED
  | AllocAccountType_HOUSE_TRADER_CROSS_MARGINED
  | AllocAccountType_JOINT_BACK_OFFICE_ACCOUNT
  deriving stock (Show, Eq, Generic)

instance Validity AllocAccountType

instance IsField AllocAccountType where
  fieldTag Proxy = 798
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocAccountType_CARRIED_CUSTOMER_SIDE -> "1"
    AllocAccountType_CARRIED_NON_CUSTOMER_SIDE -> "2"
    AllocAccountType_HOUSE_TRADER -> "3"
    AllocAccountType_FLOOR_TRADER -> "4"
    AllocAccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED -> "6"
    AllocAccountType_HOUSE_TRADER_CROSS_MARGINED -> "7"
    AllocAccountType_JOINT_BACK_OFFICE_ACCOUNT -> "8"
  fieldFromValue = \case
    "1" -> Right AllocAccountType_CARRIED_CUSTOMER_SIDE
    "2" -> Right AllocAccountType_CARRIED_NON_CUSTOMER_SIDE
    "3" -> Right AllocAccountType_HOUSE_TRADER
    "4" -> Right AllocAccountType_FLOOR_TRADER
    "6" -> Right AllocAccountType_CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED
    "7" -> Right AllocAccountType_HOUSE_TRADER_CROSS_MARGINED
    "8" -> Right AllocAccountType_JOINT_BACK_OFFICE_ACCOUNT
    v -> Left ("Unknown AllocAccountType: " <> show v)

-- FieldSpec {fieldNumber = 799, fieldName = "OrderAvgPx", fieldType = FieldTypePrice, fieldValues = []}
newtype OrderAvgPx = OrderAvgPx {unOrderAvgPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderAvgPx

instance IsField OrderAvgPx where
  fieldTag Proxy = 799
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderAvgPx
  fieldFromValue = fromValue >=> (prettyValidate . OrderAvgPx)

-- FieldSpec {fieldNumber = 800, fieldName = "OrderBookingQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype OrderBookingQty = OrderBookingQty {unOrderBookingQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderBookingQty

instance IsField OrderBookingQty where
  fieldTag Proxy = 800
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderBookingQty
  fieldFromValue = fromValue >=> (prettyValidate . OrderBookingQty)

-- FieldSpec {fieldNumber = 801, fieldName = "NoSettlPartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSettlPartySubIDs = NoSettlPartySubIDs {unNoSettlPartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSettlPartySubIDs

instance IsField NoSettlPartySubIDs where
  fieldTag Proxy = 801
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSettlPartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoSettlPartySubIDs)

-- FieldSpec {fieldNumber = 802, fieldName = "NoPartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoPartySubIDs = NoPartySubIDs {unNoPartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoPartySubIDs

instance IsField NoPartySubIDs where
  fieldTag Proxy = 802
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoPartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoPartySubIDs)

-- FieldSpec {fieldNumber = 803, fieldName = "PartySubIDType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIRM"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PERSON"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SYSTEM"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "APPLICATION"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "FULL_LEGAL_NAME_OF_FIRM"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "POSTAL_ADDRESS"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "PHONE_NUMBER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "EMAIL_ADDRESS"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CONTACT_NAME"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "SECURITIES_ACCOUNT_NUMBER"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "REGISTRATION_NUMBER"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "REGISTERED_ADDRESS_FOR_CONFIRMATION"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "REGULATORY_STATUS"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "REGISTRATION_NAME"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "CASH_ACCOUNT_NUMBER"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "BIC"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "CSD_PARTICIPANT_MEMBER_CODE"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "REGISTERED_ADDRESS"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "FUND_ACCOUNT_NAME"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "TELEX_NUMBER"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "FAX_NUMBER"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "SECURITIES_ACCOUNT_NAME"},FieldValueSpec {fieldValueEnum = "23", fieldValueDescription = "CASH_ACCOUNT_NAME"},FieldValueSpec {fieldValueEnum = "24", fieldValueDescription = "DEPARTMENT"},FieldValueSpec {fieldValueEnum = "25", fieldValueDescription = "LOCATION_DESK"},FieldValueSpec {fieldValueEnum = "26", fieldValueDescription = "POSITION_ACCOUNT_TYPE"}]}
data PartySubIDType
  = PartySubIDType_FIRM
  | PartySubIDType_PERSON
  | PartySubIDType_SYSTEM
  | PartySubIDType_APPLICATION
  | PartySubIDType_FULL_LEGAL_NAME_OF_FIRM
  | PartySubIDType_POSTAL_ADDRESS
  | PartySubIDType_PHONE_NUMBER
  | PartySubIDType_EMAIL_ADDRESS
  | PartySubIDType_CONTACT_NAME
  | PartySubIDType_SECURITIES_ACCOUNT_NUMBER
  | PartySubIDType_REGISTRATION_NUMBER
  | PartySubIDType_REGISTERED_ADDRESS_FOR_CONFIRMATION
  | PartySubIDType_REGULATORY_STATUS
  | PartySubIDType_REGISTRATION_NAME
  | PartySubIDType_CASH_ACCOUNT_NUMBER
  | PartySubIDType_BIC
  | PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE
  | PartySubIDType_REGISTERED_ADDRESS
  | PartySubIDType_FUND_ACCOUNT_NAME
  | PartySubIDType_TELEX_NUMBER
  | PartySubIDType_FAX_NUMBER
  | PartySubIDType_SECURITIES_ACCOUNT_NAME
  | PartySubIDType_CASH_ACCOUNT_NAME
  | PartySubIDType_DEPARTMENT
  | PartySubIDType_LOCATION_DESK
  | PartySubIDType_POSITION_ACCOUNT_TYPE
  deriving stock (Show, Eq, Generic)

instance Validity PartySubIDType

instance IsField PartySubIDType where
  fieldTag Proxy = 803
  fieldIsData Proxy = False
  fieldToValue = \case
    PartySubIDType_FIRM -> "1"
    PartySubIDType_PERSON -> "2"
    PartySubIDType_SYSTEM -> "3"
    PartySubIDType_APPLICATION -> "4"
    PartySubIDType_FULL_LEGAL_NAME_OF_FIRM -> "5"
    PartySubIDType_POSTAL_ADDRESS -> "6"
    PartySubIDType_PHONE_NUMBER -> "7"
    PartySubIDType_EMAIL_ADDRESS -> "8"
    PartySubIDType_CONTACT_NAME -> "9"
    PartySubIDType_SECURITIES_ACCOUNT_NUMBER -> "10"
    PartySubIDType_REGISTRATION_NUMBER -> "11"
    PartySubIDType_REGISTERED_ADDRESS_FOR_CONFIRMATION -> "12"
    PartySubIDType_REGULATORY_STATUS -> "13"
    PartySubIDType_REGISTRATION_NAME -> "14"
    PartySubIDType_CASH_ACCOUNT_NUMBER -> "15"
    PartySubIDType_BIC -> "16"
    PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE -> "17"
    PartySubIDType_REGISTERED_ADDRESS -> "18"
    PartySubIDType_FUND_ACCOUNT_NAME -> "19"
    PartySubIDType_TELEX_NUMBER -> "20"
    PartySubIDType_FAX_NUMBER -> "21"
    PartySubIDType_SECURITIES_ACCOUNT_NAME -> "22"
    PartySubIDType_CASH_ACCOUNT_NAME -> "23"
    PartySubIDType_DEPARTMENT -> "24"
    PartySubIDType_LOCATION_DESK -> "25"
    PartySubIDType_POSITION_ACCOUNT_TYPE -> "26"
  fieldFromValue = \case
    "1" -> Right PartySubIDType_FIRM
    "2" -> Right PartySubIDType_PERSON
    "3" -> Right PartySubIDType_SYSTEM
    "4" -> Right PartySubIDType_APPLICATION
    "5" -> Right PartySubIDType_FULL_LEGAL_NAME_OF_FIRM
    "6" -> Right PartySubIDType_POSTAL_ADDRESS
    "7" -> Right PartySubIDType_PHONE_NUMBER
    "8" -> Right PartySubIDType_EMAIL_ADDRESS
    "9" -> Right PartySubIDType_CONTACT_NAME
    "10" -> Right PartySubIDType_SECURITIES_ACCOUNT_NUMBER
    "11" -> Right PartySubIDType_REGISTRATION_NUMBER
    "12" -> Right PartySubIDType_REGISTERED_ADDRESS_FOR_CONFIRMATION
    "13" -> Right PartySubIDType_REGULATORY_STATUS
    "14" -> Right PartySubIDType_REGISTRATION_NAME
    "15" -> Right PartySubIDType_CASH_ACCOUNT_NUMBER
    "16" -> Right PartySubIDType_BIC
    "17" -> Right PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE
    "18" -> Right PartySubIDType_REGISTERED_ADDRESS
    "19" -> Right PartySubIDType_FUND_ACCOUNT_NAME
    "20" -> Right PartySubIDType_TELEX_NUMBER
    "21" -> Right PartySubIDType_FAX_NUMBER
    "22" -> Right PartySubIDType_SECURITIES_ACCOUNT_NAME
    "23" -> Right PartySubIDType_CASH_ACCOUNT_NAME
    "24" -> Right PartySubIDType_DEPARTMENT
    "25" -> Right PartySubIDType_LOCATION_DESK
    "26" -> Right PartySubIDType_POSITION_ACCOUNT_TYPE
    v -> Left ("Unknown PartySubIDType: " <> show v)

-- FieldSpec {fieldNumber = 804, fieldName = "NoNestedPartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNestedPartySubIDs = NoNestedPartySubIDs {unNoNestedPartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNestedPartySubIDs

instance IsField NoNestedPartySubIDs where
  fieldTag Proxy = 804
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNestedPartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNestedPartySubIDs)

-- FieldSpec {fieldNumber = 805, fieldName = "NestedPartySubIDType", fieldType = FieldTypeInt, fieldValues = []}
newtype NestedPartySubIDType = NestedPartySubIDType {unNestedPartySubIDType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartySubIDType

instance IsField NestedPartySubIDType where
  fieldTag Proxy = 805
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartySubIDType
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartySubIDType)

-- FieldSpec {fieldNumber = 806, fieldName = "NoNested2PartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNested2PartySubIDs = NoNested2PartySubIDs {unNoNested2PartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNested2PartySubIDs

instance IsField NoNested2PartySubIDs where
  fieldTag Proxy = 806
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNested2PartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNested2PartySubIDs)

-- FieldSpec {fieldNumber = 807, fieldName = "Nested2PartySubIDType", fieldType = FieldTypeInt, fieldValues = []}
newtype Nested2PartySubIDType = Nested2PartySubIDType {unNested2PartySubIDType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartySubIDType

instance IsField Nested2PartySubIDType where
  fieldTag Proxy = 807
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartySubIDType
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartySubIDType)

-- FieldSpec {fieldNumber = 808, fieldName = "AllocIntermedReqType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PENDING_ACCEPT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PENDING_RELEASE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PENDING_REVERSAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ACCEPT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "BLOCK_LEVEL_REJECT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ACCOUNT_LEVEL_REJECT"}]}
data AllocIntermedReqType
  = AllocIntermedReqType_PENDING_ACCEPT
  | AllocIntermedReqType_PENDING_RELEASE
  | AllocIntermedReqType_PENDING_REVERSAL
  | AllocIntermedReqType_ACCEPT
  | AllocIntermedReqType_BLOCK_LEVEL_REJECT
  | AllocIntermedReqType_ACCOUNT_LEVEL_REJECT
  deriving stock (Show, Eq, Generic)

instance Validity AllocIntermedReqType

instance IsField AllocIntermedReqType where
  fieldTag Proxy = 808
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocIntermedReqType_PENDING_ACCEPT -> "1"
    AllocIntermedReqType_PENDING_RELEASE -> "2"
    AllocIntermedReqType_PENDING_REVERSAL -> "3"
    AllocIntermedReqType_ACCEPT -> "4"
    AllocIntermedReqType_BLOCK_LEVEL_REJECT -> "5"
    AllocIntermedReqType_ACCOUNT_LEVEL_REJECT -> "6"
  fieldFromValue = \case
    "1" -> Right AllocIntermedReqType_PENDING_ACCEPT
    "2" -> Right AllocIntermedReqType_PENDING_RELEASE
    "3" -> Right AllocIntermedReqType_PENDING_REVERSAL
    "4" -> Right AllocIntermedReqType_ACCEPT
    "5" -> Right AllocIntermedReqType_BLOCK_LEVEL_REJECT
    "6" -> Right AllocIntermedReqType_ACCOUNT_LEVEL_REJECT
    v -> Left ("Unknown AllocIntermedReqType: " <> show v)

-- FieldSpec {fieldNumber = 810, fieldName = "UnderlyingPx", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingPx = UnderlyingPx {unUnderlyingPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingPx

instance IsField UnderlyingPx where
  fieldTag Proxy = 810
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingPx
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingPx)

-- FieldSpec {fieldNumber = 811, fieldName = "PriceDelta", fieldType = FieldTypeFloat, fieldValues = []}
newtype PriceDelta = PriceDelta {unPriceDelta :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PriceDelta

instance IsField PriceDelta where
  fieldTag Proxy = 811
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriceDelta
  fieldFromValue = fromValue >=> (prettyValidate . PriceDelta)

-- FieldSpec {fieldNumber = 812, fieldName = "ApplQueueMax", fieldType = FieldTypeInt, fieldValues = []}
newtype ApplQueueMax = ApplQueueMax {unApplQueueMax :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ApplQueueMax

instance IsField ApplQueueMax where
  fieldTag Proxy = 812
  fieldIsData Proxy = False
  fieldToValue = toValue . unApplQueueMax
  fieldFromValue = fromValue >=> (prettyValidate . ApplQueueMax)

-- FieldSpec {fieldNumber = 813, fieldName = "ApplQueueDepth", fieldType = FieldTypeInt, fieldValues = []}
newtype ApplQueueDepth = ApplQueueDepth {unApplQueueDepth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ApplQueueDepth

instance IsField ApplQueueDepth where
  fieldTag Proxy = 813
  fieldIsData Proxy = False
  fieldToValue = toValue . unApplQueueDepth
  fieldFromValue = fromValue >=> (prettyValidate . ApplQueueDepth)

-- FieldSpec {fieldNumber = 814, fieldName = "ApplQueueResolution", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NO_ACTION_TAKEN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "QUEUE_FLUSHED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OVERLAY_LAST"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "END_SESSION"}]}
data ApplQueueResolution
  = ApplQueueResolution_NO_ACTION_TAKEN
  | ApplQueueResolution_QUEUE_FLUSHED
  | ApplQueueResolution_OVERLAY_LAST
  | ApplQueueResolution_END_SESSION
  deriving stock (Show, Eq, Generic)

instance Validity ApplQueueResolution

instance IsField ApplQueueResolution where
  fieldTag Proxy = 814
  fieldIsData Proxy = False
  fieldToValue = \case
    ApplQueueResolution_NO_ACTION_TAKEN -> "0"
    ApplQueueResolution_QUEUE_FLUSHED -> "1"
    ApplQueueResolution_OVERLAY_LAST -> "2"
    ApplQueueResolution_END_SESSION -> "3"
  fieldFromValue = \case
    "0" -> Right ApplQueueResolution_NO_ACTION_TAKEN
    "1" -> Right ApplQueueResolution_QUEUE_FLUSHED
    "2" -> Right ApplQueueResolution_OVERLAY_LAST
    "3" -> Right ApplQueueResolution_END_SESSION
    v -> Left ("Unknown ApplQueueResolution: " <> show v)

-- FieldSpec {fieldNumber = 815, fieldName = "ApplQueueAction", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NO_ACTION_TAKEN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "QUEUE_FLUSHED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OVERLAY_LAST"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "END_SESSION"}]}
data ApplQueueAction
  = ApplQueueAction_NO_ACTION_TAKEN
  | ApplQueueAction_QUEUE_FLUSHED
  | ApplQueueAction_OVERLAY_LAST
  | ApplQueueAction_END_SESSION
  deriving stock (Show, Eq, Generic)

instance Validity ApplQueueAction

instance IsField ApplQueueAction where
  fieldTag Proxy = 815
  fieldIsData Proxy = False
  fieldToValue = \case
    ApplQueueAction_NO_ACTION_TAKEN -> "0"
    ApplQueueAction_QUEUE_FLUSHED -> "1"
    ApplQueueAction_OVERLAY_LAST -> "2"
    ApplQueueAction_END_SESSION -> "3"
  fieldFromValue = \case
    "0" -> Right ApplQueueAction_NO_ACTION_TAKEN
    "1" -> Right ApplQueueAction_QUEUE_FLUSHED
    "2" -> Right ApplQueueAction_OVERLAY_LAST
    "3" -> Right ApplQueueAction_END_SESSION
    v -> Left ("Unknown ApplQueueAction: " <> show v)

-- FieldSpec {fieldNumber = 816, fieldName = "NoAltMDSource", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoAltMDSource = NoAltMDSource {unNoAltMDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoAltMDSource

instance IsField NoAltMDSource where
  fieldTag Proxy = 816
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoAltMDSource
  fieldFromValue = fromValue >=> (prettyValidate . NoAltMDSource)

-- FieldSpec {fieldNumber = 817, fieldName = "AltMDSourceID", fieldType = FieldTypeString, fieldValues = []}
newtype AltMDSourceID = AltMDSourceID {unAltMDSourceID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AltMDSourceID

instance IsField AltMDSourceID where
  fieldTag Proxy = 817
  fieldIsData Proxy = False
  fieldToValue = toValue . unAltMDSourceID
  fieldFromValue = fromValue >=> (prettyValidate . AltMDSourceID)

-- FieldSpec {fieldNumber = 818, fieldName = "SecondaryTradeReportID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryTradeReportID = SecondaryTradeReportID {unSecondaryTradeReportID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryTradeReportID

instance IsField SecondaryTradeReportID where
  fieldTag Proxy = 818
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryTradeReportID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryTradeReportID)

-- FieldSpec {fieldNumber = 819, fieldName = "AvgPxIndicator", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NO_AVERAGE_PRICING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TRADE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "LAST_TRADE"}]}
data AvgPxIndicator
  = AvgPxIndicator_NO_AVERAGE_PRICING
  | AvgPxIndicator_TRADE
  | AvgPxIndicator_LAST_TRADE
  deriving stock (Show, Eq, Generic)

instance Validity AvgPxIndicator

instance IsField AvgPxIndicator where
  fieldTag Proxy = 819
  fieldIsData Proxy = False
  fieldToValue = \case
    AvgPxIndicator_NO_AVERAGE_PRICING -> "0"
    AvgPxIndicator_TRADE -> "1"
    AvgPxIndicator_LAST_TRADE -> "2"
  fieldFromValue = \case
    "0" -> Right AvgPxIndicator_NO_AVERAGE_PRICING
    "1" -> Right AvgPxIndicator_TRADE
    "2" -> Right AvgPxIndicator_LAST_TRADE
    v -> Left ("Unknown AvgPxIndicator: " <> show v)

-- FieldSpec {fieldNumber = 820, fieldName = "TradeLinkID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeLinkID = TradeLinkID {unTradeLinkID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeLinkID

instance IsField TradeLinkID where
  fieldTag Proxy = 820
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeLinkID
  fieldFromValue = fromValue >=> (prettyValidate . TradeLinkID)

-- FieldSpec {fieldNumber = 821, fieldName = "OrderInputDevice", fieldType = FieldTypeString, fieldValues = []}
newtype OrderInputDevice = OrderInputDevice {unOrderInputDevice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderInputDevice

instance IsField OrderInputDevice where
  fieldTag Proxy = 821
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderInputDevice
  fieldFromValue = fromValue >=> (prettyValidate . OrderInputDevice)

-- FieldSpec {fieldNumber = 822, fieldName = "UnderlyingTradingSessionID", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingTradingSessionID = UnderlyingTradingSessionID {unUnderlyingTradingSessionID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingTradingSessionID

instance IsField UnderlyingTradingSessionID where
  fieldTag Proxy = 822
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingTradingSessionID
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingTradingSessionID)

-- FieldSpec {fieldNumber = 823, fieldName = "UnderlyingTradingSessionSubID", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingTradingSessionSubID = UnderlyingTradingSessionSubID {unUnderlyingTradingSessionSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingTradingSessionSubID

instance IsField UnderlyingTradingSessionSubID where
  fieldTag Proxy = 823
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingTradingSessionSubID
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingTradingSessionSubID)

-- FieldSpec {fieldNumber = 824, fieldName = "TradeLegRefID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeLegRefID = TradeLegRefID {unTradeLegRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeLegRefID

instance IsField TradeLegRefID where
  fieldTag Proxy = 824
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeLegRefID
  fieldFromValue = fromValue >=> (prettyValidate . TradeLegRefID)

-- FieldSpec {fieldNumber = 825, fieldName = "ExchangeRule", fieldType = FieldTypeString, fieldValues = []}
newtype ExchangeRule = ExchangeRule {unExchangeRule :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExchangeRule

instance IsField ExchangeRule where
  fieldTag Proxy = 825
  fieldIsData Proxy = False
  fieldToValue = toValue . unExchangeRule
  fieldFromValue = fromValue >=> (prettyValidate . ExchangeRule)

-- FieldSpec {fieldNumber = 826, fieldName = "TradeAllocIndicator", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ALLOCATION_NOT_REQUIRED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ALLOCATION_REQUIRED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "USE_ALLOCATION_PROVIDED_WITH_THE_TRADE"}]}
data TradeAllocIndicator
  = TradeAllocIndicator_ALLOCATION_NOT_REQUIRED
  | TradeAllocIndicator_ALLOCATION_REQUIRED
  | TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE
  deriving stock (Show, Eq, Generic)

instance Validity TradeAllocIndicator

instance IsField TradeAllocIndicator where
  fieldTag Proxy = 826
  fieldIsData Proxy = False
  fieldToValue = \case
    TradeAllocIndicator_ALLOCATION_NOT_REQUIRED -> "0"
    TradeAllocIndicator_ALLOCATION_REQUIRED -> "1"
    TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE -> "2"
  fieldFromValue = \case
    "0" -> Right TradeAllocIndicator_ALLOCATION_NOT_REQUIRED
    "1" -> Right TradeAllocIndicator_ALLOCATION_REQUIRED
    "2" -> Right TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE
    v -> Left ("Unknown TradeAllocIndicator: " <> show v)

-- FieldSpec {fieldNumber = 827, fieldName = "ExpirationCycle", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "EXPIRE_ON_TRADING_SESSION_CLOSE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXPIRE_ON_TRADING_SESSION_OPEN"}]}
data ExpirationCycle
  = ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE
  | ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN
  deriving stock (Show, Eq, Generic)

instance Validity ExpirationCycle

instance IsField ExpirationCycle where
  fieldTag Proxy = 827
  fieldIsData Proxy = False
  fieldToValue = \case
    ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE -> "0"
    ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN -> "1"
  fieldFromValue = \case
    "0" -> Right ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE
    "1" -> Right ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN
    v -> Left ("Unknown ExpirationCycle: " <> show v)

-- FieldSpec {fieldNumber = 828, fieldName = "TrdType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REGULAR_TRADE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BLOCK_TRADE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EFP"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TRANSFER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "LATE_TRADE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "T_TRADE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "WEIGHTED_AVERAGE_PRICE_TRADE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "BUNCHED_TRADE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LATE_BUNCHED_TRADE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "PRIOR_REFERENCE_PRICE_TRADE"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "AFTER_HOURS_TRADE"}]}
data TrdType
  = TrdType_REGULAR_TRADE
  | TrdType_BLOCK_TRADE
  | TrdType_EFP
  | TrdType_TRANSFER
  | TrdType_LATE_TRADE
  | TrdType_T_TRADE
  | TrdType_WEIGHTED_AVERAGE_PRICE_TRADE
  | TrdType_BUNCHED_TRADE
  | TrdType_LATE_BUNCHED_TRADE
  | TrdType_PRIOR_REFERENCE_PRICE_TRADE
  | TrdType_AFTER_HOURS_TRADE
  deriving stock (Show, Eq, Generic)

instance Validity TrdType

instance IsField TrdType where
  fieldTag Proxy = 828
  fieldIsData Proxy = False
  fieldToValue = \case
    TrdType_REGULAR_TRADE -> "0"
    TrdType_BLOCK_TRADE -> "1"
    TrdType_EFP -> "2"
    TrdType_TRANSFER -> "3"
    TrdType_LATE_TRADE -> "4"
    TrdType_T_TRADE -> "5"
    TrdType_WEIGHTED_AVERAGE_PRICE_TRADE -> "6"
    TrdType_BUNCHED_TRADE -> "7"
    TrdType_LATE_BUNCHED_TRADE -> "8"
    TrdType_PRIOR_REFERENCE_PRICE_TRADE -> "9"
    TrdType_AFTER_HOURS_TRADE -> "10"
  fieldFromValue = \case
    "0" -> Right TrdType_REGULAR_TRADE
    "1" -> Right TrdType_BLOCK_TRADE
    "2" -> Right TrdType_EFP
    "3" -> Right TrdType_TRANSFER
    "4" -> Right TrdType_LATE_TRADE
    "5" -> Right TrdType_T_TRADE
    "6" -> Right TrdType_WEIGHTED_AVERAGE_PRICE_TRADE
    "7" -> Right TrdType_BUNCHED_TRADE
    "8" -> Right TrdType_LATE_BUNCHED_TRADE
    "9" -> Right TrdType_PRIOR_REFERENCE_PRICE_TRADE
    "10" -> Right TrdType_AFTER_HOURS_TRADE
    v -> Left ("Unknown TrdType: " <> show v)

-- FieldSpec {fieldNumber = 829, fieldName = "TrdSubType", fieldType = FieldTypeInt, fieldValues = []}
newtype TrdSubType = TrdSubType {unTrdSubType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdSubType

instance IsField TrdSubType where
  fieldTag Proxy = 829
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdSubType
  fieldFromValue = fromValue >=> (prettyValidate . TrdSubType)

-- FieldSpec {fieldNumber = 830, fieldName = "TransferReason", fieldType = FieldTypeString, fieldValues = []}
newtype TransferReason = TransferReason {unTransferReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TransferReason

instance IsField TransferReason where
  fieldTag Proxy = 830
  fieldIsData Proxy = False
  fieldToValue = toValue . unTransferReason
  fieldFromValue = fromValue >=> (prettyValidate . TransferReason)

-- FieldSpec {fieldNumber = 832, fieldName = "TotNumAssignmentReports", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNumAssignmentReports = TotNumAssignmentReports {unTotNumAssignmentReports :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNumAssignmentReports

instance IsField TotNumAssignmentReports where
  fieldTag Proxy = 832
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNumAssignmentReports
  fieldFromValue = fromValue >=> (prettyValidate . TotNumAssignmentReports)

-- FieldSpec {fieldNumber = 833, fieldName = "AsgnRptID", fieldType = FieldTypeString, fieldValues = []}
newtype AsgnRptID = AsgnRptID {unAsgnRptID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AsgnRptID

instance IsField AsgnRptID where
  fieldTag Proxy = 833
  fieldIsData Proxy = False
  fieldToValue = toValue . unAsgnRptID
  fieldFromValue = fromValue >=> (prettyValidate . AsgnRptID)

-- FieldSpec {fieldNumber = 834, fieldName = "ThresholdAmount", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype ThresholdAmount = ThresholdAmount {unThresholdAmount :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ThresholdAmount

instance IsField ThresholdAmount where
  fieldTag Proxy = 834
  fieldIsData Proxy = False
  fieldToValue = toValue . unThresholdAmount
  fieldFromValue = fromValue >=> (prettyValidate . ThresholdAmount)

-- FieldSpec {fieldNumber = 835, fieldName = "PegMoveType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FLOATING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIXED"}]}
data PegMoveType
  = PegMoveType_FLOATING
  | PegMoveType_FIXED
  deriving stock (Show, Eq, Generic)

instance Validity PegMoveType

instance IsField PegMoveType where
  fieldTag Proxy = 835
  fieldIsData Proxy = False
  fieldToValue = \case
    PegMoveType_FLOATING -> "0"
    PegMoveType_FIXED -> "1"
  fieldFromValue = \case
    "0" -> Right PegMoveType_FLOATING
    "1" -> Right PegMoveType_FIXED
    v -> Left ("Unknown PegMoveType: " <> show v)

-- FieldSpec {fieldNumber = 836, fieldName = "PegOffsetType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PRICE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BASIS_POINTS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TICKS"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PRICE_TIER"}]}
data PegOffsetType
  = PegOffsetType_PRICE
  | PegOffsetType_BASIS_POINTS
  | PegOffsetType_TICKS
  | PegOffsetType_PRICE_TIER
  deriving stock (Show, Eq, Generic)

instance Validity PegOffsetType

instance IsField PegOffsetType where
  fieldTag Proxy = 836
  fieldIsData Proxy = False
  fieldToValue = \case
    PegOffsetType_PRICE -> "0"
    PegOffsetType_BASIS_POINTS -> "1"
    PegOffsetType_TICKS -> "2"
    PegOffsetType_PRICE_TIER -> "3"
  fieldFromValue = \case
    "0" -> Right PegOffsetType_PRICE
    "1" -> Right PegOffsetType_BASIS_POINTS
    "2" -> Right PegOffsetType_TICKS
    "3" -> Right PegOffsetType_PRICE_TIER
    v -> Left ("Unknown PegOffsetType: " <> show v)

-- FieldSpec {fieldNumber = 837, fieldName = "PegLimitType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "OR_BETTER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STRICT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OR_WORSE"}]}
data PegLimitType
  = PegLimitType_OR_BETTER
  | PegLimitType_STRICT
  | PegLimitType_OR_WORSE
  deriving stock (Show, Eq, Generic)

instance Validity PegLimitType

instance IsField PegLimitType where
  fieldTag Proxy = 837
  fieldIsData Proxy = False
  fieldToValue = \case
    PegLimitType_OR_BETTER -> "0"
    PegLimitType_STRICT -> "1"
    PegLimitType_OR_WORSE -> "2"
  fieldFromValue = \case
    "0" -> Right PegLimitType_OR_BETTER
    "1" -> Right PegLimitType_STRICT
    "2" -> Right PegLimitType_OR_WORSE
    v -> Left ("Unknown PegLimitType: " <> show v)

-- FieldSpec {fieldNumber = 838, fieldName = "PegRoundDirection", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MORE_AGGRESSIVE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MORE_PASSIVE"}]}
data PegRoundDirection
  = PegRoundDirection_MORE_AGGRESSIVE
  | PegRoundDirection_MORE_PASSIVE
  deriving stock (Show, Eq, Generic)

instance Validity PegRoundDirection

instance IsField PegRoundDirection where
  fieldTag Proxy = 838
  fieldIsData Proxy = False
  fieldToValue = \case
    PegRoundDirection_MORE_AGGRESSIVE -> "1"
    PegRoundDirection_MORE_PASSIVE -> "2"
  fieldFromValue = \case
    "1" -> Right PegRoundDirection_MORE_AGGRESSIVE
    "2" -> Right PegRoundDirection_MORE_PASSIVE
    v -> Left ("Unknown PegRoundDirection: " <> show v)

-- FieldSpec {fieldNumber = 839, fieldName = "PeggedPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype PeggedPrice = PeggedPrice {unPeggedPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PeggedPrice

instance IsField PeggedPrice where
  fieldTag Proxy = 839
  fieldIsData Proxy = False
  fieldToValue = toValue . unPeggedPrice
  fieldFromValue = fromValue >=> (prettyValidate . PeggedPrice)

-- FieldSpec {fieldNumber = 840, fieldName = "PegScope", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOCAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NATIONAL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GLOBAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NATIONAL_EXCLUDING_LOCAL"}]}
data PegScope
  = PegScope_LOCAL
  | PegScope_NATIONAL
  | PegScope_GLOBAL
  | PegScope_NATIONAL_EXCLUDING_LOCAL
  deriving stock (Show, Eq, Generic)

instance Validity PegScope

instance IsField PegScope where
  fieldTag Proxy = 840
  fieldIsData Proxy = False
  fieldToValue = \case
    PegScope_LOCAL -> "1"
    PegScope_NATIONAL -> "2"
    PegScope_GLOBAL -> "3"
    PegScope_NATIONAL_EXCLUDING_LOCAL -> "4"
  fieldFromValue = \case
    "1" -> Right PegScope_LOCAL
    "2" -> Right PegScope_NATIONAL
    "3" -> Right PegScope_GLOBAL
    "4" -> Right PegScope_NATIONAL_EXCLUDING_LOCAL
    v -> Left ("Unknown PegScope: " <> show v)

-- FieldSpec {fieldNumber = 841, fieldName = "DiscretionMoveType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FLOATING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIXED"}]}
data DiscretionMoveType
  = DiscretionMoveType_FLOATING
  | DiscretionMoveType_FIXED
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionMoveType

instance IsField DiscretionMoveType where
  fieldTag Proxy = 841
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionMoveType_FLOATING -> "0"
    DiscretionMoveType_FIXED -> "1"
  fieldFromValue = \case
    "0" -> Right DiscretionMoveType_FLOATING
    "1" -> Right DiscretionMoveType_FIXED
    v -> Left ("Unknown DiscretionMoveType: " <> show v)

-- FieldSpec {fieldNumber = 842, fieldName = "DiscretionOffsetType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PRICE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BASIS_POINTS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TICKS"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PRICE_TIER"}]}
data DiscretionOffsetType
  = DiscretionOffsetType_PRICE
  | DiscretionOffsetType_BASIS_POINTS
  | DiscretionOffsetType_TICKS
  | DiscretionOffsetType_PRICE_TIER
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionOffsetType

instance IsField DiscretionOffsetType where
  fieldTag Proxy = 842
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionOffsetType_PRICE -> "0"
    DiscretionOffsetType_BASIS_POINTS -> "1"
    DiscretionOffsetType_TICKS -> "2"
    DiscretionOffsetType_PRICE_TIER -> "3"
  fieldFromValue = \case
    "0" -> Right DiscretionOffsetType_PRICE
    "1" -> Right DiscretionOffsetType_BASIS_POINTS
    "2" -> Right DiscretionOffsetType_TICKS
    "3" -> Right DiscretionOffsetType_PRICE_TIER
    v -> Left ("Unknown DiscretionOffsetType: " <> show v)

-- FieldSpec {fieldNumber = 843, fieldName = "DiscretionLimitType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "OR_BETTER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STRICT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OR_WORSE"}]}
data DiscretionLimitType
  = DiscretionLimitType_OR_BETTER
  | DiscretionLimitType_STRICT
  | DiscretionLimitType_OR_WORSE
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionLimitType

instance IsField DiscretionLimitType where
  fieldTag Proxy = 843
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionLimitType_OR_BETTER -> "0"
    DiscretionLimitType_STRICT -> "1"
    DiscretionLimitType_OR_WORSE -> "2"
  fieldFromValue = \case
    "0" -> Right DiscretionLimitType_OR_BETTER
    "1" -> Right DiscretionLimitType_STRICT
    "2" -> Right DiscretionLimitType_OR_WORSE
    v -> Left ("Unknown DiscretionLimitType: " <> show v)

-- FieldSpec {fieldNumber = 844, fieldName = "DiscretionRoundDirection", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MORE_AGGRESSIVE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MORE_PASSIVE"}]}
data DiscretionRoundDirection
  = DiscretionRoundDirection_MORE_AGGRESSIVE
  | DiscretionRoundDirection_MORE_PASSIVE
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionRoundDirection

instance IsField DiscretionRoundDirection where
  fieldTag Proxy = 844
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionRoundDirection_MORE_AGGRESSIVE -> "1"
    DiscretionRoundDirection_MORE_PASSIVE -> "2"
  fieldFromValue = \case
    "1" -> Right DiscretionRoundDirection_MORE_AGGRESSIVE
    "2" -> Right DiscretionRoundDirection_MORE_PASSIVE
    v -> Left ("Unknown DiscretionRoundDirection: " <> show v)

-- FieldSpec {fieldNumber = 845, fieldName = "DiscretionPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype DiscretionPrice = DiscretionPrice {unDiscretionPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionPrice

instance IsField DiscretionPrice where
  fieldTag Proxy = 845
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionPrice
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionPrice)

-- FieldSpec {fieldNumber = 846, fieldName = "DiscretionScope", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOCAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NATIONAL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GLOBAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NATIONAL_EXCLUDING_LOCAL"}]}
data DiscretionScope
  = DiscretionScope_LOCAL
  | DiscretionScope_NATIONAL
  | DiscretionScope_GLOBAL
  | DiscretionScope_NATIONAL_EXCLUDING_LOCAL
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionScope

instance IsField DiscretionScope where
  fieldTag Proxy = 846
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionScope_LOCAL -> "1"
    DiscretionScope_NATIONAL -> "2"
    DiscretionScope_GLOBAL -> "3"
    DiscretionScope_NATIONAL_EXCLUDING_LOCAL -> "4"
  fieldFromValue = \case
    "1" -> Right DiscretionScope_LOCAL
    "2" -> Right DiscretionScope_NATIONAL
    "3" -> Right DiscretionScope_GLOBAL
    "4" -> Right DiscretionScope_NATIONAL_EXCLUDING_LOCAL
    v -> Left ("Unknown DiscretionScope: " <> show v)

-- FieldSpec {fieldNumber = 847, fieldName = "TargetStrategy", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "VWAP"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PARTICIPATE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MININIZE_MARKET_IMPACT"}]}
data TargetStrategy
  = TargetStrategy_VWAP
  | TargetStrategy_PARTICIPATE
  | TargetStrategy_MININIZE_MARKET_IMPACT
  deriving stock (Show, Eq, Generic)

instance Validity TargetStrategy

instance IsField TargetStrategy where
  fieldTag Proxy = 847
  fieldIsData Proxy = False
  fieldToValue = \case
    TargetStrategy_VWAP -> "1"
    TargetStrategy_PARTICIPATE -> "2"
    TargetStrategy_MININIZE_MARKET_IMPACT -> "3"
  fieldFromValue = \case
    "1" -> Right TargetStrategy_VWAP
    "2" -> Right TargetStrategy_PARTICIPATE
    "3" -> Right TargetStrategy_MININIZE_MARKET_IMPACT
    v -> Left ("Unknown TargetStrategy: " <> show v)

-- FieldSpec {fieldNumber = 848, fieldName = "TargetStrategyParameters", fieldType = FieldTypeString, fieldValues = []}
newtype TargetStrategyParameters = TargetStrategyParameters {unTargetStrategyParameters :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetStrategyParameters

instance IsField TargetStrategyParameters where
  fieldTag Proxy = 848
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetStrategyParameters
  fieldFromValue = fromValue >=> (prettyValidate . TargetStrategyParameters)

-- FieldSpec {fieldNumber = 849, fieldName = "ParticipationRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype ParticipationRate = ParticipationRate {unParticipationRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ParticipationRate

instance IsField ParticipationRate where
  fieldTag Proxy = 849
  fieldIsData Proxy = False
  fieldToValue = toValue . unParticipationRate
  fieldFromValue = fromValue >=> (prettyValidate . ParticipationRate)

-- FieldSpec {fieldNumber = 850, fieldName = "TargetStrategyPerformance", fieldType = FieldTypeFloat, fieldValues = []}
newtype TargetStrategyPerformance = TargetStrategyPerformance {unTargetStrategyPerformance :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetStrategyPerformance

instance IsField TargetStrategyPerformance where
  fieldTag Proxy = 850
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetStrategyPerformance
  fieldFromValue = fromValue >=> (prettyValidate . TargetStrategyPerformance)

-- FieldSpec {fieldNumber = 851, fieldName = "LastLiquidityInd", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ADDED_LIQUIDITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REMOVED_LIQUIDITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "LIQUIDITY_ROUTED_OUT"}]}
data LastLiquidityInd
  = LastLiquidityInd_ADDED_LIQUIDITY
  | LastLiquidityInd_REMOVED_LIQUIDITY
  | LastLiquidityInd_LIQUIDITY_ROUTED_OUT
  deriving stock (Show, Eq, Generic)

instance Validity LastLiquidityInd

instance IsField LastLiquidityInd where
  fieldTag Proxy = 851
  fieldIsData Proxy = False
  fieldToValue = \case
    LastLiquidityInd_ADDED_LIQUIDITY -> "1"
    LastLiquidityInd_REMOVED_LIQUIDITY -> "2"
    LastLiquidityInd_LIQUIDITY_ROUTED_OUT -> "3"
  fieldFromValue = \case
    "1" -> Right LastLiquidityInd_ADDED_LIQUIDITY
    "2" -> Right LastLiquidityInd_REMOVED_LIQUIDITY
    "3" -> Right LastLiquidityInd_LIQUIDITY_ROUTED_OUT
    v -> Left ("Unknown LastLiquidityInd: " <> show v)

-- FieldSpec {fieldNumber = 852, fieldName = "PublishTrdIndicator", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data PublishTrdIndicator
  = PublishTrdIndicator_YES
  | PublishTrdIndicator_NO
  deriving stock (Show, Eq, Generic)

instance Validity PublishTrdIndicator

instance IsField PublishTrdIndicator where
  fieldTag Proxy = 852
  fieldIsData Proxy = False
  fieldToValue = \case
    PublishTrdIndicator_YES -> "Y"
    PublishTrdIndicator_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right PublishTrdIndicator_YES
    "N" -> Right PublishTrdIndicator_NO
    v -> Left ("Unknown PublishTrdIndicator: " <> show v)

-- FieldSpec {fieldNumber = 853, fieldName = "ShortSaleReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "DEALER_SOLD_SHORT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DEALER_SOLD_SHORT_EXEMPT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SELLING_CUSTOMER_SOLD_SHORT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SELLING_CUSTOMER_SOLD_SHORT_EXEMPT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "QUALIFIED_SERVICE_REPRESENTATIVE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT"}]}
data ShortSaleReason
  = ShortSaleReason_DEALER_SOLD_SHORT
  | ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT
  | ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT
  | ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT
  | ShortSaleReason_QUALIFIED_SERVICE_REPRESENTATIVE
  | ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT
  deriving stock (Show, Eq, Generic)

instance Validity ShortSaleReason

instance IsField ShortSaleReason where
  fieldTag Proxy = 853
  fieldIsData Proxy = False
  fieldToValue = \case
    ShortSaleReason_DEALER_SOLD_SHORT -> "0"
    ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT -> "1"
    ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT -> "2"
    ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT -> "3"
    ShortSaleReason_QUALIFIED_SERVICE_REPRESENTATIVE -> "4"
    ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT -> "5"
  fieldFromValue = \case
    "0" -> Right ShortSaleReason_DEALER_SOLD_SHORT
    "1" -> Right ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT
    "2" -> Right ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT
    "3" -> Right ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT
    "4" -> Right ShortSaleReason_QUALIFIED_SERVICE_REPRESENTATIVE
    "5" -> Right ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT
    v -> Left ("Unknown ShortSaleReason: " <> show v)

-- FieldSpec {fieldNumber = 854, fieldName = "QtyType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNITS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CONTRACTS"}]}
data QtyType
  = QtyType_UNITS
  | QtyType_CONTRACTS
  deriving stock (Show, Eq, Generic)

instance Validity QtyType

instance IsField QtyType where
  fieldTag Proxy = 854
  fieldIsData Proxy = False
  fieldToValue = \case
    QtyType_UNITS -> "0"
    QtyType_CONTRACTS -> "1"
  fieldFromValue = \case
    "0" -> Right QtyType_UNITS
    "1" -> Right QtyType_CONTRACTS
    v -> Left ("Unknown QtyType: " <> show v)

-- FieldSpec {fieldNumber = 855, fieldName = "SecondaryTrdType", fieldType = FieldTypeInt, fieldValues = []}
newtype SecondaryTrdType = SecondaryTrdType {unSecondaryTrdType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryTrdType

instance IsField SecondaryTrdType where
  fieldTag Proxy = 855
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryTrdType
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryTrdType)

-- FieldSpec {fieldNumber = 856, fieldName = "TradeReportType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUBMIT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ALLEGED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCEPT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "DECLINE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ADDENDUM"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "NO"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "TRADE_REPORT_CANCEL"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "LOCKED_IN"}]}
data TradeReportType
  = TradeReportType_SUBMIT
  | TradeReportType_ALLEGED
  | TradeReportType_ACCEPT
  | TradeReportType_DECLINE
  | TradeReportType_ADDENDUM
  | TradeReportType_NO
  | TradeReportType_TRADE_REPORT_CANCEL
  | TradeReportType_LOCKED_IN
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportType

instance IsField TradeReportType where
  fieldTag Proxy = 856
  fieldIsData Proxy = False
  fieldToValue = \case
    TradeReportType_SUBMIT -> "0"
    TradeReportType_ALLEGED -> "1"
    TradeReportType_ACCEPT -> "2"
    TradeReportType_DECLINE -> "3"
    TradeReportType_ADDENDUM -> "4"
    TradeReportType_NO -> "5"
    TradeReportType_TRADE_REPORT_CANCEL -> "6"
    TradeReportType_LOCKED_IN -> "7"
  fieldFromValue = \case
    "0" -> Right TradeReportType_SUBMIT
    "1" -> Right TradeReportType_ALLEGED
    "2" -> Right TradeReportType_ACCEPT
    "3" -> Right TradeReportType_DECLINE
    "4" -> Right TradeReportType_ADDENDUM
    "5" -> Right TradeReportType_NO
    "6" -> Right TradeReportType_TRADE_REPORT_CANCEL
    "7" -> Right TradeReportType_LOCKED_IN
    v -> Left ("Unknown TradeReportType: " <> show v)

-- FieldSpec {fieldNumber = 857, fieldName = "AllocNoOrdersType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NOT_SPECIFIED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXPLICIT_LIST_PROVIDED"}]}
data AllocNoOrdersType
  = AllocNoOrdersType_NOT_SPECIFIED
  | AllocNoOrdersType_EXPLICIT_LIST_PROVIDED
  deriving stock (Show, Eq, Generic)

instance Validity AllocNoOrdersType

instance IsField AllocNoOrdersType where
  fieldTag Proxy = 857
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocNoOrdersType_NOT_SPECIFIED -> "0"
    AllocNoOrdersType_EXPLICIT_LIST_PROVIDED -> "1"
  fieldFromValue = \case
    "0" -> Right AllocNoOrdersType_NOT_SPECIFIED
    "1" -> Right AllocNoOrdersType_EXPLICIT_LIST_PROVIDED
    v -> Left ("Unknown AllocNoOrdersType: " <> show v)

-- FieldSpec {fieldNumber = 858, fieldName = "SharedCommission", fieldType = FieldTypeAMT, fieldValues = []}
newtype SharedCommission = SharedCommission {unSharedCommission :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SharedCommission

instance IsField SharedCommission where
  fieldTag Proxy = 858
  fieldIsData Proxy = False
  fieldToValue = toValue . unSharedCommission
  fieldFromValue = fromValue >=> (prettyValidate . SharedCommission)

-- FieldSpec {fieldNumber = 859, fieldName = "ConfirmReqID", fieldType = FieldTypeString, fieldValues = []}
newtype ConfirmReqID = ConfirmReqID {unConfirmReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmReqID

instance IsField ConfirmReqID where
  fieldTag Proxy = 859
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmReqID
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmReqID)

-- FieldSpec {fieldNumber = 860, fieldName = "AvgParPx", fieldType = FieldTypePrice, fieldValues = []}
newtype AvgParPx = AvgParPx {unAvgParPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AvgParPx

instance IsField AvgParPx where
  fieldTag Proxy = 860
  fieldIsData Proxy = False
  fieldToValue = toValue . unAvgParPx
  fieldFromValue = fromValue >=> (prettyValidate . AvgParPx)

-- FieldSpec {fieldNumber = 861, fieldName = "ReportedPx", fieldType = FieldTypePrice, fieldValues = []}
newtype ReportedPx = ReportedPx {unReportedPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ReportedPx

instance IsField ReportedPx where
  fieldTag Proxy = 861
  fieldIsData Proxy = False
  fieldToValue = toValue . unReportedPx
  fieldFromValue = fromValue >=> (prettyValidate . ReportedPx)

-- FieldSpec {fieldNumber = 862, fieldName = "NoCapacities", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoCapacities = NoCapacities {unNoCapacities :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoCapacities

instance IsField NoCapacities where
  fieldTag Proxy = 862
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoCapacities
  fieldFromValue = fromValue >=> (prettyValidate . NoCapacities)

-- FieldSpec {fieldNumber = 863, fieldName = "OrderCapacityQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype OrderCapacityQty = OrderCapacityQty {unOrderCapacityQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderCapacityQty

instance IsField OrderCapacityQty where
  fieldTag Proxy = 863
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderCapacityQty
  fieldFromValue = fromValue >=> (prettyValidate . OrderCapacityQty)

-- FieldSpec {fieldNumber = 864, fieldName = "NoEvents", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoEvents = NoEvents {unNoEvents :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoEvents

instance IsField NoEvents where
  fieldTag Proxy = 864
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoEvents
  fieldFromValue = fromValue >=> (prettyValidate . NoEvents)

-- FieldSpec {fieldNumber = 865, fieldName = "EventType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PUT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CALL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TENDER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SINKING_FUND_CALL"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data EventType
  = EventType_PUT
  | EventType_CALL
  | EventType_TENDER
  | EventType_SINKING_FUND_CALL
  | EventType_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity EventType

instance IsField EventType where
  fieldTag Proxy = 865
  fieldIsData Proxy = False
  fieldToValue = \case
    EventType_PUT -> "1"
    EventType_CALL -> "2"
    EventType_TENDER -> "3"
    EventType_SINKING_FUND_CALL -> "4"
    EventType_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right EventType_PUT
    "2" -> Right EventType_CALL
    "3" -> Right EventType_TENDER
    "4" -> Right EventType_SINKING_FUND_CALL
    "99" -> Right EventType_OTHER
    v -> Left ("Unknown EventType: " <> show v)

-- FieldSpec {fieldNumber = 866, fieldName = "EventDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype EventDate = EventDate {unEventDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EventDate

instance IsField EventDate where
  fieldTag Proxy = 866
  fieldIsData Proxy = False
  fieldToValue = toValue . unEventDate
  fieldFromValue = fromValue >=> (prettyValidate . EventDate)

-- FieldSpec {fieldNumber = 867, fieldName = "EventPx", fieldType = FieldTypePrice, fieldValues = []}
newtype EventPx = EventPx {unEventPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EventPx

instance IsField EventPx where
  fieldTag Proxy = 867
  fieldIsData Proxy = False
  fieldToValue = toValue . unEventPx
  fieldFromValue = fromValue >=> (prettyValidate . EventPx)

-- FieldSpec {fieldNumber = 868, fieldName = "EventText", fieldType = FieldTypeString, fieldValues = []}
newtype EventText = EventText {unEventText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EventText

instance IsField EventText where
  fieldTag Proxy = 868
  fieldIsData Proxy = False
  fieldToValue = toValue . unEventText
  fieldFromValue = fromValue >=> (prettyValidate . EventText)

-- FieldSpec {fieldNumber = 869, fieldName = "PctAtRisk", fieldType = FieldTypePercentage, fieldValues = []}
newtype PctAtRisk = PctAtRisk {unPctAtRisk :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PctAtRisk

instance IsField PctAtRisk where
  fieldTag Proxy = 869
  fieldIsData Proxy = False
  fieldToValue = toValue . unPctAtRisk
  fieldFromValue = fromValue >=> (prettyValidate . PctAtRisk)

-- FieldSpec {fieldNumber = 870, fieldName = "NoInstrAttrib", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoInstrAttrib = NoInstrAttrib {unNoInstrAttrib :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoInstrAttrib

instance IsField NoInstrAttrib where
  fieldTag Proxy = 870
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoInstrAttrib
  fieldFromValue = fromValue >=> (prettyValidate . NoInstrAttrib)

-- FieldSpec {fieldNumber = 871, fieldName = "InstrAttribType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FLAT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ZERO_COUPON"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INTEREST_BEARING"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NO_PERIODIC_PAYMENTS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "VARIABLE_RATE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "LESS_FEE_FOR_PUT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STEPPED_COUPON"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "COUPON_PERIOD"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "WHEN"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "ORIGINAL_ISSUE_DISCOUNT"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "CALLABLE"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "ESCROWED_TO_MATURITY"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "ESCROWED_TO_REDEMPTION_DATE"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "PRE_REFUNDED"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "IN_DEFAULT"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "UNRATED"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "TAXABLE"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "INDEXED"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "ORIGINAL_ISSUE_DISCOUNT_PRICE"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "CALLABLE_BELOW_MATURITY_VALUE"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "CALLABLE_WITHOUT_NOTICE"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "TEXT"}]}
data InstrAttribType
  = InstrAttribType_FLAT
  | InstrAttribType_ZERO_COUPON
  | InstrAttribType_INTEREST_BEARING
  | InstrAttribType_NO_PERIODIC_PAYMENTS
  | InstrAttribType_VARIABLE_RATE
  | InstrAttribType_LESS_FEE_FOR_PUT
  | InstrAttribType_STEPPED_COUPON
  | InstrAttribType_COUPON_PERIOD
  | InstrAttribType_WHEN
  | InstrAttribType_ORIGINAL_ISSUE_DISCOUNT
  | InstrAttribType_CALLABLE
  | InstrAttribType_ESCROWED_TO_MATURITY
  | InstrAttribType_ESCROWED_TO_REDEMPTION_DATE
  | InstrAttribType_PRE_REFUNDED
  | InstrAttribType_IN_DEFAULT
  | InstrAttribType_UNRATED
  | InstrAttribType_TAXABLE
  | InstrAttribType_INDEXED
  | InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX
  | InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE
  | InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE
  | InstrAttribType_CALLABLE_WITHOUT_NOTICE
  | InstrAttribType_TEXT
  deriving stock (Show, Eq, Generic)

instance Validity InstrAttribType

instance IsField InstrAttribType where
  fieldTag Proxy = 871
  fieldIsData Proxy = False
  fieldToValue = \case
    InstrAttribType_FLAT -> "1"
    InstrAttribType_ZERO_COUPON -> "2"
    InstrAttribType_INTEREST_BEARING -> "3"
    InstrAttribType_NO_PERIODIC_PAYMENTS -> "4"
    InstrAttribType_VARIABLE_RATE -> "5"
    InstrAttribType_LESS_FEE_FOR_PUT -> "6"
    InstrAttribType_STEPPED_COUPON -> "7"
    InstrAttribType_COUPON_PERIOD -> "8"
    InstrAttribType_WHEN -> "9"
    InstrAttribType_ORIGINAL_ISSUE_DISCOUNT -> "10"
    InstrAttribType_CALLABLE -> "11"
    InstrAttribType_ESCROWED_TO_MATURITY -> "12"
    InstrAttribType_ESCROWED_TO_REDEMPTION_DATE -> "13"
    InstrAttribType_PRE_REFUNDED -> "14"
    InstrAttribType_IN_DEFAULT -> "15"
    InstrAttribType_UNRATED -> "16"
    InstrAttribType_TAXABLE -> "17"
    InstrAttribType_INDEXED -> "18"
    InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX -> "19"
    InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE -> "20"
    InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE -> "21"
    InstrAttribType_CALLABLE_WITHOUT_NOTICE -> "22"
    InstrAttribType_TEXT -> "99"
  fieldFromValue = \case
    "1" -> Right InstrAttribType_FLAT
    "2" -> Right InstrAttribType_ZERO_COUPON
    "3" -> Right InstrAttribType_INTEREST_BEARING
    "4" -> Right InstrAttribType_NO_PERIODIC_PAYMENTS
    "5" -> Right InstrAttribType_VARIABLE_RATE
    "6" -> Right InstrAttribType_LESS_FEE_FOR_PUT
    "7" -> Right InstrAttribType_STEPPED_COUPON
    "8" -> Right InstrAttribType_COUPON_PERIOD
    "9" -> Right InstrAttribType_WHEN
    "10" -> Right InstrAttribType_ORIGINAL_ISSUE_DISCOUNT
    "11" -> Right InstrAttribType_CALLABLE
    "12" -> Right InstrAttribType_ESCROWED_TO_MATURITY
    "13" -> Right InstrAttribType_ESCROWED_TO_REDEMPTION_DATE
    "14" -> Right InstrAttribType_PRE_REFUNDED
    "15" -> Right InstrAttribType_IN_DEFAULT
    "16" -> Right InstrAttribType_UNRATED
    "17" -> Right InstrAttribType_TAXABLE
    "18" -> Right InstrAttribType_INDEXED
    "19" -> Right InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX
    "20" -> Right InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE
    "21" -> Right InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE
    "22" -> Right InstrAttribType_CALLABLE_WITHOUT_NOTICE
    "99" -> Right InstrAttribType_TEXT
    v -> Left ("Unknown InstrAttribType: " <> show v)

-- FieldSpec {fieldNumber = 872, fieldName = "InstrAttribValue", fieldType = FieldTypeString, fieldValues = []}
newtype InstrAttribValue = InstrAttribValue {unInstrAttribValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InstrAttribValue

instance IsField InstrAttribValue where
  fieldTag Proxy = 872
  fieldIsData Proxy = False
  fieldToValue = toValue . unInstrAttribValue
  fieldFromValue = fromValue >=> (prettyValidate . InstrAttribValue)

-- FieldSpec {fieldNumber = 873, fieldName = "DatedDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype DatedDate = DatedDate {unDatedDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DatedDate

instance IsField DatedDate where
  fieldTag Proxy = 873
  fieldIsData Proxy = False
  fieldToValue = toValue . unDatedDate
  fieldFromValue = fromValue >=> (prettyValidate . DatedDate)

-- FieldSpec {fieldNumber = 874, fieldName = "InterestAccrualDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype InterestAccrualDate = InterestAccrualDate {unInterestAccrualDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InterestAccrualDate

instance IsField InterestAccrualDate where
  fieldTag Proxy = 874
  fieldIsData Proxy = False
  fieldToValue = toValue . unInterestAccrualDate
  fieldFromValue = fromValue >=> (prettyValidate . InterestAccrualDate)

-- FieldSpec {fieldNumber = 875, fieldName = "CPProgram", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PROGRAM3A3"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PROGRAM42"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data CPProgram
  = CPProgram_PROGRAM3A3
  | CPProgram_PROGRAM42
  | CPProgram_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity CPProgram

instance IsField CPProgram where
  fieldTag Proxy = 875
  fieldIsData Proxy = False
  fieldToValue = \case
    CPProgram_PROGRAM3A3 -> "1"
    CPProgram_PROGRAM42 -> "2"
    CPProgram_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right CPProgram_PROGRAM3A3
    "2" -> Right CPProgram_PROGRAM42
    "99" -> Right CPProgram_OTHER
    v -> Left ("Unknown CPProgram: " <> show v)

-- FieldSpec {fieldNumber = 876, fieldName = "CPRegType", fieldType = FieldTypeString, fieldValues = []}
newtype CPRegType = CPRegType {unCPRegType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CPRegType

instance IsField CPRegType where
  fieldTag Proxy = 876
  fieldIsData Proxy = False
  fieldToValue = toValue . unCPRegType
  fieldFromValue = fromValue >=> (prettyValidate . CPRegType)

-- FieldSpec {fieldNumber = 877, fieldName = "UnderlyingCPProgram", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingCPProgram = UnderlyingCPProgram {unUnderlyingCPProgram :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCPProgram

instance IsField UnderlyingCPProgram where
  fieldTag Proxy = 877
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCPProgram
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCPProgram)

-- FieldSpec {fieldNumber = 878, fieldName = "UnderlyingCPRegType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingCPRegType = UnderlyingCPRegType {unUnderlyingCPRegType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCPRegType

instance IsField UnderlyingCPRegType where
  fieldTag Proxy = 878
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCPRegType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCPRegType)

-- FieldSpec {fieldNumber = 879, fieldName = "UnderlyingQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype UnderlyingQty = UnderlyingQty {unUnderlyingQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingQty

instance IsField UnderlyingQty where
  fieldTag Proxy = 879
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingQty
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingQty)

-- FieldSpec {fieldNumber = 880, fieldName = "TrdMatchID", fieldType = FieldTypeString, fieldValues = []}
newtype TrdMatchID = TrdMatchID {unTrdMatchID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdMatchID

instance IsField TrdMatchID where
  fieldTag Proxy = 880
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdMatchID
  fieldFromValue = fromValue >=> (prettyValidate . TrdMatchID)

-- FieldSpec {fieldNumber = 881, fieldName = "SecondaryTradeReportRefID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryTradeReportRefID = SecondaryTradeReportRefID {unSecondaryTradeReportRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryTradeReportRefID

instance IsField SecondaryTradeReportRefID where
  fieldTag Proxy = 881
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryTradeReportRefID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryTradeReportRefID)

-- FieldSpec {fieldNumber = 882, fieldName = "UnderlyingDirtyPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingDirtyPrice = UnderlyingDirtyPrice {unUnderlyingDirtyPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingDirtyPrice

instance IsField UnderlyingDirtyPrice where
  fieldTag Proxy = 882
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingDirtyPrice
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingDirtyPrice)

-- FieldSpec {fieldNumber = 883, fieldName = "UnderlyingEndPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingEndPrice = UnderlyingEndPrice {unUnderlyingEndPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingEndPrice

instance IsField UnderlyingEndPrice where
  fieldTag Proxy = 883
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingEndPrice
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingEndPrice)

-- FieldSpec {fieldNumber = 884, fieldName = "UnderlyingStartValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype UnderlyingStartValue = UnderlyingStartValue {unUnderlyingStartValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStartValue

instance IsField UnderlyingStartValue where
  fieldTag Proxy = 884
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStartValue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStartValue)

-- FieldSpec {fieldNumber = 885, fieldName = "UnderlyingCurrentValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype UnderlyingCurrentValue = UnderlyingCurrentValue {unUnderlyingCurrentValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCurrentValue

instance IsField UnderlyingCurrentValue where
  fieldTag Proxy = 885
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCurrentValue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCurrentValue)

-- FieldSpec {fieldNumber = 886, fieldName = "UnderlyingEndValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype UnderlyingEndValue = UnderlyingEndValue {unUnderlyingEndValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingEndValue

instance IsField UnderlyingEndValue where
  fieldTag Proxy = 886
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingEndValue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingEndValue)

-- FieldSpec {fieldNumber = 887, fieldName = "NoUnderlyingStips", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoUnderlyingStips = NoUnderlyingStips {unNoUnderlyingStips :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoUnderlyingStips

instance IsField NoUnderlyingStips where
  fieldTag Proxy = 887
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoUnderlyingStips
  fieldFromValue = fromValue >=> (prettyValidate . NoUnderlyingStips)

-- FieldSpec {fieldNumber = 888, fieldName = "UnderlyingStipType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingStipType = UnderlyingStipType {unUnderlyingStipType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStipType

instance IsField UnderlyingStipType where
  fieldTag Proxy = 888
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStipType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStipType)

-- FieldSpec {fieldNumber = 889, fieldName = "UnderlyingStipValue", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingStipValue = UnderlyingStipValue {unUnderlyingStipValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStipValue

instance IsField UnderlyingStipValue where
  fieldTag Proxy = 889
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStipValue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStipValue)

-- FieldSpec {fieldNumber = 890, fieldName = "MaturityNetMoney", fieldType = FieldTypeAMT, fieldValues = []}
newtype MaturityNetMoney = MaturityNetMoney {unMaturityNetMoney :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaturityNetMoney

instance IsField MaturityNetMoney where
  fieldTag Proxy = 890
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaturityNetMoney
  fieldFromValue = fromValue >=> (prettyValidate . MaturityNetMoney)

-- FieldSpec {fieldNumber = 891, fieldName = "MiscFeeBasis", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ABSOLUTE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PER_UNIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PERCENTAGE"}]}
data MiscFeeBasis
  = MiscFeeBasis_ABSOLUTE
  | MiscFeeBasis_PER_UNIT
  | MiscFeeBasis_PERCENTAGE
  deriving stock (Show, Eq, Generic)

instance Validity MiscFeeBasis

instance IsField MiscFeeBasis where
  fieldTag Proxy = 891
  fieldIsData Proxy = False
  fieldToValue = \case
    MiscFeeBasis_ABSOLUTE -> "0"
    MiscFeeBasis_PER_UNIT -> "1"
    MiscFeeBasis_PERCENTAGE -> "2"
  fieldFromValue = \case
    "0" -> Right MiscFeeBasis_ABSOLUTE
    "1" -> Right MiscFeeBasis_PER_UNIT
    "2" -> Right MiscFeeBasis_PERCENTAGE
    v -> Left ("Unknown MiscFeeBasis: " <> show v)

-- FieldSpec {fieldNumber = 892, fieldName = "TotNoAllocs", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoAllocs = TotNoAllocs {unTotNoAllocs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoAllocs

instance IsField TotNoAllocs where
  fieldTag Proxy = 892
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoAllocs
  fieldFromValue = fromValue >=> (prettyValidate . TotNoAllocs)

-- FieldSpec {fieldNumber = 893, fieldName = "LastFragment", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data LastFragment
  = LastFragment_YES
  | LastFragment_NO
  deriving stock (Show, Eq, Generic)

instance Validity LastFragment

instance IsField LastFragment where
  fieldTag Proxy = 893
  fieldIsData Proxy = False
  fieldToValue = \case
    LastFragment_YES -> "Y"
    LastFragment_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right LastFragment_YES
    "N" -> Right LastFragment_NO
    v -> Left ("Unknown LastFragment: " <> show v)

-- FieldSpec {fieldNumber = 894, fieldName = "CollReqID", fieldType = FieldTypeString, fieldValues = []}
newtype CollReqID = CollReqID {unCollReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollReqID

instance IsField CollReqID where
  fieldTag Proxy = 894
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollReqID
  fieldFromValue = fromValue >=> (prettyValidate . CollReqID)

-- FieldSpec {fieldNumber = 895, fieldName = "CollAsgnReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "INITIAL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SCHEDULED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TIME_WARNING"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MARGIN_DEFICIENCY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "MARGIN_EXCESS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "FORWARD_COLLATERAL_DEMAND"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "EVENT_OF_DEFAULT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "ADVERSE_TAX_EVENT"}]}
data CollAsgnReason
  = CollAsgnReason_INITIAL
  | CollAsgnReason_SCHEDULED
  | CollAsgnReason_TIME_WARNING
  | CollAsgnReason_MARGIN_DEFICIENCY
  | CollAsgnReason_MARGIN_EXCESS
  | CollAsgnReason_FORWARD_COLLATERAL_DEMAND
  | CollAsgnReason_EVENT_OF_DEFAULT
  | CollAsgnReason_ADVERSE_TAX_EVENT
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnReason

instance IsField CollAsgnReason where
  fieldTag Proxy = 895
  fieldIsData Proxy = False
  fieldToValue = \case
    CollAsgnReason_INITIAL -> "0"
    CollAsgnReason_SCHEDULED -> "1"
    CollAsgnReason_TIME_WARNING -> "2"
    CollAsgnReason_MARGIN_DEFICIENCY -> "3"
    CollAsgnReason_MARGIN_EXCESS -> "4"
    CollAsgnReason_FORWARD_COLLATERAL_DEMAND -> "5"
    CollAsgnReason_EVENT_OF_DEFAULT -> "6"
    CollAsgnReason_ADVERSE_TAX_EVENT -> "7"
  fieldFromValue = \case
    "0" -> Right CollAsgnReason_INITIAL
    "1" -> Right CollAsgnReason_SCHEDULED
    "2" -> Right CollAsgnReason_TIME_WARNING
    "3" -> Right CollAsgnReason_MARGIN_DEFICIENCY
    "4" -> Right CollAsgnReason_MARGIN_EXCESS
    "5" -> Right CollAsgnReason_FORWARD_COLLATERAL_DEMAND
    "6" -> Right CollAsgnReason_EVENT_OF_DEFAULT
    "7" -> Right CollAsgnReason_ADVERSE_TAX_EVENT
    v -> Left ("Unknown CollAsgnReason: " <> show v)

-- FieldSpec {fieldNumber = 896, fieldName = "CollInquiryQualifier", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "TRADE_DATE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "GC_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COLLATERAL_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SUBSTITUTION_ELIGIBLE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NOT_ASSIGNED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PARTIALLY_ASSIGNED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "FULLY_ASSIGNED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "OUTSTANDING_TRADES"}]}
data CollInquiryQualifier
  = CollInquiryQualifier_TRADE_DATE
  | CollInquiryQualifier_GC_INSTRUMENT
  | CollInquiryQualifier_COLLATERAL_INSTRUMENT
  | CollInquiryQualifier_SUBSTITUTION_ELIGIBLE
  | CollInquiryQualifier_NOT_ASSIGNED
  | CollInquiryQualifier_PARTIALLY_ASSIGNED
  | CollInquiryQualifier_FULLY_ASSIGNED
  | CollInquiryQualifier_OUTSTANDING_TRADES
  deriving stock (Show, Eq, Generic)

instance Validity CollInquiryQualifier

instance IsField CollInquiryQualifier where
  fieldTag Proxy = 896
  fieldIsData Proxy = False
  fieldToValue = \case
    CollInquiryQualifier_TRADE_DATE -> "0"
    CollInquiryQualifier_GC_INSTRUMENT -> "1"
    CollInquiryQualifier_COLLATERAL_INSTRUMENT -> "2"
    CollInquiryQualifier_SUBSTITUTION_ELIGIBLE -> "3"
    CollInquiryQualifier_NOT_ASSIGNED -> "4"
    CollInquiryQualifier_PARTIALLY_ASSIGNED -> "5"
    CollInquiryQualifier_FULLY_ASSIGNED -> "6"
    CollInquiryQualifier_OUTSTANDING_TRADES -> "7"
  fieldFromValue = \case
    "0" -> Right CollInquiryQualifier_TRADE_DATE
    "1" -> Right CollInquiryQualifier_GC_INSTRUMENT
    "2" -> Right CollInquiryQualifier_COLLATERAL_INSTRUMENT
    "3" -> Right CollInquiryQualifier_SUBSTITUTION_ELIGIBLE
    "4" -> Right CollInquiryQualifier_NOT_ASSIGNED
    "5" -> Right CollInquiryQualifier_PARTIALLY_ASSIGNED
    "6" -> Right CollInquiryQualifier_FULLY_ASSIGNED
    "7" -> Right CollInquiryQualifier_OUTSTANDING_TRADES
    v -> Left ("Unknown CollInquiryQualifier: " <> show v)

-- FieldSpec {fieldNumber = 897, fieldName = "NoTrades", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoTrades = NoTrades {unNoTrades :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoTrades

instance IsField NoTrades where
  fieldTag Proxy = 897
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoTrades
  fieldFromValue = fromValue >=> (prettyValidate . NoTrades)

-- FieldSpec {fieldNumber = 898, fieldName = "MarginRatio", fieldType = FieldTypePercentage, fieldValues = []}
newtype MarginRatio = MarginRatio {unMarginRatio :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MarginRatio

instance IsField MarginRatio where
  fieldTag Proxy = 898
  fieldIsData Proxy = False
  fieldToValue = toValue . unMarginRatio
  fieldFromValue = fromValue >=> (prettyValidate . MarginRatio)

-- FieldSpec {fieldNumber = 899, fieldName = "MarginExcess", fieldType = FieldTypeAMT, fieldValues = []}
newtype MarginExcess = MarginExcess {unMarginExcess :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MarginExcess

instance IsField MarginExcess where
  fieldTag Proxy = 899
  fieldIsData Proxy = False
  fieldToValue = toValue . unMarginExcess
  fieldFromValue = fromValue >=> (prettyValidate . MarginExcess)

-- FieldSpec {fieldNumber = 900, fieldName = "TotalNetValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype TotalNetValue = TotalNetValue {unTotalNetValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalNetValue

instance IsField TotalNetValue where
  fieldTag Proxy = 900
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalNetValue
  fieldFromValue = fromValue >=> (prettyValidate . TotalNetValue)

-- FieldSpec {fieldNumber = 901, fieldName = "CashOutstanding", fieldType = FieldTypeAMT, fieldValues = []}
newtype CashOutstanding = CashOutstanding {unCashOutstanding :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashOutstanding

instance IsField CashOutstanding where
  fieldTag Proxy = 901
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashOutstanding
  fieldFromValue = fromValue >=> (prettyValidate . CashOutstanding)

-- FieldSpec {fieldNumber = 902, fieldName = "CollAsgnID", fieldType = FieldTypeString, fieldValues = []}
newtype CollAsgnID = CollAsgnID {unCollAsgnID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnID

instance IsField CollAsgnID where
  fieldTag Proxy = 902
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollAsgnID
  fieldFromValue = fromValue >=> (prettyValidate . CollAsgnID)

-- FieldSpec {fieldNumber = 903, fieldName = "CollAsgnTransType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "RELEASE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "REVERSE"}]}
data CollAsgnTransType
  = CollAsgnTransType_NEW
  | CollAsgnTransType_REPLACE
  | CollAsgnTransType_CANCEL
  | CollAsgnTransType_RELEASE
  | CollAsgnTransType_REVERSE
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnTransType

instance IsField CollAsgnTransType where
  fieldTag Proxy = 903
  fieldIsData Proxy = False
  fieldToValue = \case
    CollAsgnTransType_NEW -> "0"
    CollAsgnTransType_REPLACE -> "1"
    CollAsgnTransType_CANCEL -> "2"
    CollAsgnTransType_RELEASE -> "3"
    CollAsgnTransType_REVERSE -> "4"
  fieldFromValue = \case
    "0" -> Right CollAsgnTransType_NEW
    "1" -> Right CollAsgnTransType_REPLACE
    "2" -> Right CollAsgnTransType_CANCEL
    "3" -> Right CollAsgnTransType_RELEASE
    "4" -> Right CollAsgnTransType_REVERSE
    v -> Left ("Unknown CollAsgnTransType: " <> show v)

-- FieldSpec {fieldNumber = 904, fieldName = "CollRespID", fieldType = FieldTypeString, fieldValues = []}
newtype CollRespID = CollRespID {unCollRespID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollRespID

instance IsField CollRespID where
  fieldTag Proxy = 904
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollRespID
  fieldFromValue = fromValue >=> (prettyValidate . CollRespID)

-- FieldSpec {fieldNumber = 905, fieldName = "CollAsgnRespType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "RECEIVED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DECLINED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REJECTED"}]}
data CollAsgnRespType
  = CollAsgnRespType_RECEIVED
  | CollAsgnRespType_ACCEPTED
  | CollAsgnRespType_DECLINED
  | CollAsgnRespType_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnRespType

instance IsField CollAsgnRespType where
  fieldTag Proxy = 905
  fieldIsData Proxy = False
  fieldToValue = \case
    CollAsgnRespType_RECEIVED -> "0"
    CollAsgnRespType_ACCEPTED -> "1"
    CollAsgnRespType_DECLINED -> "2"
    CollAsgnRespType_REJECTED -> "3"
  fieldFromValue = \case
    "0" -> Right CollAsgnRespType_RECEIVED
    "1" -> Right CollAsgnRespType_ACCEPTED
    "2" -> Right CollAsgnRespType_DECLINED
    "3" -> Right CollAsgnRespType_REJECTED
    v -> Left ("Unknown CollAsgnRespType: " <> show v)

-- FieldSpec {fieldNumber = 906, fieldName = "CollAsgnRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNKNOWN_DEAL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_OR_INVALID_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "UNAUTHORIZED_TRANSACTION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INSUFFICIENT_COLLATERAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_TYPE_OF_COLLATERAL"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "EXCESSIVE_SUBSTITUTION"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data CollAsgnRejectReason
  = CollAsgnRejectReason_UNKNOWN_DEAL
  | CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT
  | CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION
  | CollAsgnRejectReason_INSUFFICIENT_COLLATERAL
  | CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL
  | CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION
  | CollAsgnRejectReason_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnRejectReason

instance IsField CollAsgnRejectReason where
  fieldTag Proxy = 906
  fieldIsData Proxy = False
  fieldToValue = \case
    CollAsgnRejectReason_UNKNOWN_DEAL -> "0"
    CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT -> "1"
    CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION -> "2"
    CollAsgnRejectReason_INSUFFICIENT_COLLATERAL -> "3"
    CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL -> "4"
    CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION -> "5"
    CollAsgnRejectReason_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right CollAsgnRejectReason_UNKNOWN_DEAL
    "1" -> Right CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT
    "2" -> Right CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION
    "3" -> Right CollAsgnRejectReason_INSUFFICIENT_COLLATERAL
    "4" -> Right CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL
    "5" -> Right CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION
    "99" -> Right CollAsgnRejectReason_OTHER
    v -> Left ("Unknown CollAsgnRejectReason: " <> show v)

-- FieldSpec {fieldNumber = 907, fieldName = "CollAsgnRefID", fieldType = FieldTypeString, fieldValues = []}
newtype CollAsgnRefID = CollAsgnRefID {unCollAsgnRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnRefID

instance IsField CollAsgnRefID where
  fieldTag Proxy = 907
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollAsgnRefID
  fieldFromValue = fromValue >=> (prettyValidate . CollAsgnRefID)

-- FieldSpec {fieldNumber = 908, fieldName = "CollRptID", fieldType = FieldTypeString, fieldValues = []}
newtype CollRptID = CollRptID {unCollRptID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollRptID

instance IsField CollRptID where
  fieldTag Proxy = 908
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollRptID
  fieldFromValue = fromValue >=> (prettyValidate . CollRptID)

-- FieldSpec {fieldNumber = 909, fieldName = "CollInquiryID", fieldType = FieldTypeString, fieldValues = []}
newtype CollInquiryID = CollInquiryID {unCollInquiryID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollInquiryID

instance IsField CollInquiryID where
  fieldTag Proxy = 909
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollInquiryID
  fieldFromValue = fromValue >=> (prettyValidate . CollInquiryID)

-- FieldSpec {fieldNumber = 910, fieldName = "CollStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNASSIGNED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PARTIALLY_ASSIGNED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ASSIGNMENT_PROPOSED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ASSIGNED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CHALLENGED"}]}
data CollStatus
  = CollStatus_UNASSIGNED
  | CollStatus_PARTIALLY_ASSIGNED
  | CollStatus_ASSIGNMENT_PROPOSED
  | CollStatus_ASSIGNED
  | CollStatus_CHALLENGED
  deriving stock (Show, Eq, Generic)

instance Validity CollStatus

instance IsField CollStatus where
  fieldTag Proxy = 910
  fieldIsData Proxy = False
  fieldToValue = \case
    CollStatus_UNASSIGNED -> "0"
    CollStatus_PARTIALLY_ASSIGNED -> "1"
    CollStatus_ASSIGNMENT_PROPOSED -> "2"
    CollStatus_ASSIGNED -> "3"
    CollStatus_CHALLENGED -> "4"
  fieldFromValue = \case
    "0" -> Right CollStatus_UNASSIGNED
    "1" -> Right CollStatus_PARTIALLY_ASSIGNED
    "2" -> Right CollStatus_ASSIGNMENT_PROPOSED
    "3" -> Right CollStatus_ASSIGNED
    "4" -> Right CollStatus_CHALLENGED
    v -> Left ("Unknown CollStatus: " <> show v)

-- FieldSpec {fieldNumber = 911, fieldName = "TotNumReports", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNumReports = TotNumReports {unTotNumReports :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNumReports

instance IsField TotNumReports where
  fieldTag Proxy = 911
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNumReports
  fieldFromValue = fromValue >=> (prettyValidate . TotNumReports)

-- FieldSpec {fieldNumber = 912, fieldName = "LastRptRequested", fieldType = FieldTypeBoolean, fieldValues = []}
newtype LastRptRequested = LastRptRequested {unLastRptRequested :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity LastRptRequested

instance IsField LastRptRequested where
  fieldTag Proxy = 912
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastRptRequested
  fieldFromValue = fromValue >=> (prettyValidate . LastRptRequested)

-- FieldSpec {fieldNumber = 913, fieldName = "AgreementDesc", fieldType = FieldTypeString, fieldValues = []}
newtype AgreementDesc = AgreementDesc {unAgreementDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AgreementDesc

instance IsField AgreementDesc where
  fieldTag Proxy = 913
  fieldIsData Proxy = False
  fieldToValue = toValue . unAgreementDesc
  fieldFromValue = fromValue >=> (prettyValidate . AgreementDesc)

-- FieldSpec {fieldNumber = 914, fieldName = "AgreementID", fieldType = FieldTypeString, fieldValues = []}
newtype AgreementID = AgreementID {unAgreementID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AgreementID

instance IsField AgreementID where
  fieldTag Proxy = 914
  fieldIsData Proxy = False
  fieldToValue = toValue . unAgreementID
  fieldFromValue = fromValue >=> (prettyValidate . AgreementID)

-- FieldSpec {fieldNumber = 915, fieldName = "AgreementDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype AgreementDate = AgreementDate {unAgreementDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AgreementDate

instance IsField AgreementDate where
  fieldTag Proxy = 915
  fieldIsData Proxy = False
  fieldToValue = toValue . unAgreementDate
  fieldFromValue = fromValue >=> (prettyValidate . AgreementDate)

-- FieldSpec {fieldNumber = 916, fieldName = "StartDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype StartDate = StartDate {unStartDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StartDate

instance IsField StartDate where
  fieldTag Proxy = 916
  fieldIsData Proxy = False
  fieldToValue = toValue . unStartDate
  fieldFromValue = fromValue >=> (prettyValidate . StartDate)

-- FieldSpec {fieldNumber = 917, fieldName = "EndDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype EndDate = EndDate {unEndDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EndDate

instance IsField EndDate where
  fieldTag Proxy = 917
  fieldIsData Proxy = False
  fieldToValue = toValue . unEndDate
  fieldFromValue = fromValue >=> (prettyValidate . EndDate)

-- FieldSpec {fieldNumber = 918, fieldName = "AgreementCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype AgreementCurrency = AgreementCurrency {unAgreementCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AgreementCurrency

instance IsField AgreementCurrency where
  fieldTag Proxy = 918
  fieldIsData Proxy = False
  fieldToValue = toValue . unAgreementCurrency
  fieldFromValue = fromValue >=> (prettyValidate . AgreementCurrency)

-- FieldSpec {fieldNumber = 919, fieldName = "DeliveryType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "VERSUS_PAYMENT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FREE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TRI_PARTY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "HOLD_IN_CUSTODY"}]}
data DeliveryType
  = DeliveryType_VERSUS_PAYMENT
  | DeliveryType_FREE
  | DeliveryType_TRI_PARTY
  | DeliveryType_HOLD_IN_CUSTODY
  deriving stock (Show, Eq, Generic)

instance Validity DeliveryType

instance IsField DeliveryType where
  fieldTag Proxy = 919
  fieldIsData Proxy = False
  fieldToValue = \case
    DeliveryType_VERSUS_PAYMENT -> "0"
    DeliveryType_FREE -> "1"
    DeliveryType_TRI_PARTY -> "2"
    DeliveryType_HOLD_IN_CUSTODY -> "3"
  fieldFromValue = \case
    "0" -> Right DeliveryType_VERSUS_PAYMENT
    "1" -> Right DeliveryType_FREE
    "2" -> Right DeliveryType_TRI_PARTY
    "3" -> Right DeliveryType_HOLD_IN_CUSTODY
    v -> Left ("Unknown DeliveryType: " <> show v)

-- FieldSpec {fieldNumber = 920, fieldName = "EndAccruedInterestAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype EndAccruedInterestAmt = EndAccruedInterestAmt {unEndAccruedInterestAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EndAccruedInterestAmt

instance IsField EndAccruedInterestAmt where
  fieldTag Proxy = 920
  fieldIsData Proxy = False
  fieldToValue = toValue . unEndAccruedInterestAmt
  fieldFromValue = fromValue >=> (prettyValidate . EndAccruedInterestAmt)

-- FieldSpec {fieldNumber = 921, fieldName = "StartCash", fieldType = FieldTypeAMT, fieldValues = []}
newtype StartCash = StartCash {unStartCash :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StartCash

instance IsField StartCash where
  fieldTag Proxy = 921
  fieldIsData Proxy = False
  fieldToValue = toValue . unStartCash
  fieldFromValue = fromValue >=> (prettyValidate . StartCash)

-- FieldSpec {fieldNumber = 922, fieldName = "EndCash", fieldType = FieldTypeAMT, fieldValues = []}
newtype EndCash = EndCash {unEndCash :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EndCash

instance IsField EndCash where
  fieldTag Proxy = 922
  fieldIsData Proxy = False
  fieldToValue = toValue . unEndCash
  fieldFromValue = fromValue >=> (prettyValidate . EndCash)

-- FieldSpec {fieldNumber = 923, fieldName = "UserRequestID", fieldType = FieldTypeString, fieldValues = []}
newtype UserRequestID = UserRequestID {unUserRequestID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UserRequestID

instance IsField UserRequestID where
  fieldTag Proxy = 923
  fieldIsData Proxy = False
  fieldToValue = toValue . unUserRequestID
  fieldFromValue = fromValue >=> (prettyValidate . UserRequestID)

-- FieldSpec {fieldNumber = 924, fieldName = "UserRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOG_ON_USER"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "LOG_OFF_USER"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CHANGE_PASSWORD_FOR_USER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "REQUEST_INDIVIDUAL_USER_STATUS"}]}
data UserRequestType
  = UserRequestType_LOG_ON_USER
  | UserRequestType_LOG_OFF_USER
  | UserRequestType_CHANGE_PASSWORD_FOR_USER
  | UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS
  deriving stock (Show, Eq, Generic)

instance Validity UserRequestType

instance IsField UserRequestType where
  fieldTag Proxy = 924
  fieldIsData Proxy = False
  fieldToValue = \case
    UserRequestType_LOG_ON_USER -> "1"
    UserRequestType_LOG_OFF_USER -> "2"
    UserRequestType_CHANGE_PASSWORD_FOR_USER -> "3"
    UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS -> "4"
  fieldFromValue = \case
    "1" -> Right UserRequestType_LOG_ON_USER
    "2" -> Right UserRequestType_LOG_OFF_USER
    "3" -> Right UserRequestType_CHANGE_PASSWORD_FOR_USER
    "4" -> Right UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS
    v -> Left ("Unknown UserRequestType: " <> show v)

-- FieldSpec {fieldNumber = 925, fieldName = "NewPassword", fieldType = FieldTypeString, fieldValues = []}
newtype NewPassword = NewPassword {unNewPassword :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NewPassword

instance IsField NewPassword where
  fieldTag Proxy = 925
  fieldIsData Proxy = False
  fieldToValue = toValue . unNewPassword
  fieldFromValue = fromValue >=> (prettyValidate . NewPassword)

-- FieldSpec {fieldNumber = 926, fieldName = "UserStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOGGED_IN"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NOT_LOGGED_IN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "USER_NOT_RECOGNISED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PASSWORD_INCORRECT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PASSWORD_CHANGED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "OTHER"}]}
data UserStatus
  = UserStatus_LOGGED_IN
  | UserStatus_NOT_LOGGED_IN
  | UserStatus_USER_NOT_RECOGNISED
  | UserStatus_PASSWORD_INCORRECT
  | UserStatus_PASSWORD_CHANGED
  | UserStatus_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity UserStatus

instance IsField UserStatus where
  fieldTag Proxy = 926
  fieldIsData Proxy = False
  fieldToValue = \case
    UserStatus_LOGGED_IN -> "1"
    UserStatus_NOT_LOGGED_IN -> "2"
    UserStatus_USER_NOT_RECOGNISED -> "3"
    UserStatus_PASSWORD_INCORRECT -> "4"
    UserStatus_PASSWORD_CHANGED -> "5"
    UserStatus_OTHER -> "6"
  fieldFromValue = \case
    "1" -> Right UserStatus_LOGGED_IN
    "2" -> Right UserStatus_NOT_LOGGED_IN
    "3" -> Right UserStatus_USER_NOT_RECOGNISED
    "4" -> Right UserStatus_PASSWORD_INCORRECT
    "5" -> Right UserStatus_PASSWORD_CHANGED
    "6" -> Right UserStatus_OTHER
    v -> Left ("Unknown UserStatus: " <> show v)

-- FieldSpec {fieldNumber = 927, fieldName = "UserStatusText", fieldType = FieldTypeString, fieldValues = []}
newtype UserStatusText = UserStatusText {unUserStatusText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UserStatusText

instance IsField UserStatusText where
  fieldTag Proxy = 927
  fieldIsData Proxy = False
  fieldToValue = toValue . unUserStatusText
  fieldFromValue = fromValue >=> (prettyValidate . UserStatusText)

-- FieldSpec {fieldNumber = 928, fieldName = "StatusValue", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CONNECTED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NOT_CONNECTED_UNEXPECTED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NOT_CONNECTED_EXPECTED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "IN_PROCESS"}]}
data StatusValue
  = StatusValue_CONNECTED
  | StatusValue_NOT_CONNECTED_UNEXPECTED
  | StatusValue_NOT_CONNECTED_EXPECTED
  | StatusValue_IN_PROCESS
  deriving stock (Show, Eq, Generic)

instance Validity StatusValue

instance IsField StatusValue where
  fieldTag Proxy = 928
  fieldIsData Proxy = False
  fieldToValue = \case
    StatusValue_CONNECTED -> "1"
    StatusValue_NOT_CONNECTED_UNEXPECTED -> "2"
    StatusValue_NOT_CONNECTED_EXPECTED -> "3"
    StatusValue_IN_PROCESS -> "4"
  fieldFromValue = \case
    "1" -> Right StatusValue_CONNECTED
    "2" -> Right StatusValue_NOT_CONNECTED_UNEXPECTED
    "3" -> Right StatusValue_NOT_CONNECTED_EXPECTED
    "4" -> Right StatusValue_IN_PROCESS
    v -> Left ("Unknown StatusValue: " <> show v)

-- FieldSpec {fieldNumber = 929, fieldName = "StatusText", fieldType = FieldTypeString, fieldValues = []}
newtype StatusText = StatusText {unStatusText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StatusText

instance IsField StatusText where
  fieldTag Proxy = 929
  fieldIsData Proxy = False
  fieldToValue = toValue . unStatusText
  fieldFromValue = fromValue >=> (prettyValidate . StatusText)

-- FieldSpec {fieldNumber = 930, fieldName = "RefCompID", fieldType = FieldTypeString, fieldValues = []}
newtype RefCompID = RefCompID {unRefCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefCompID

instance IsField RefCompID where
  fieldTag Proxy = 930
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefCompID
  fieldFromValue = fromValue >=> (prettyValidate . RefCompID)

-- FieldSpec {fieldNumber = 931, fieldName = "RefSubID", fieldType = FieldTypeString, fieldValues = []}
newtype RefSubID = RefSubID {unRefSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefSubID

instance IsField RefSubID where
  fieldTag Proxy = 931
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefSubID
  fieldFromValue = fromValue >=> (prettyValidate . RefSubID)

-- FieldSpec {fieldNumber = 932, fieldName = "NetworkResponseID", fieldType = FieldTypeString, fieldValues = []}
newtype NetworkResponseID = NetworkResponseID {unNetworkResponseID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetworkResponseID

instance IsField NetworkResponseID where
  fieldTag Proxy = 932
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetworkResponseID
  fieldFromValue = fromValue >=> (prettyValidate . NetworkResponseID)

-- FieldSpec {fieldNumber = 933, fieldName = "NetworkRequestID", fieldType = FieldTypeString, fieldValues = []}
newtype NetworkRequestID = NetworkRequestID {unNetworkRequestID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetworkRequestID

instance IsField NetworkRequestID where
  fieldTag Proxy = 933
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetworkRequestID
  fieldFromValue = fromValue >=> (prettyValidate . NetworkRequestID)

-- FieldSpec {fieldNumber = 934, fieldName = "LastNetworkResponseID", fieldType = FieldTypeString, fieldValues = []}
newtype LastNetworkResponseID = LastNetworkResponseID {unLastNetworkResponseID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastNetworkResponseID

instance IsField LastNetworkResponseID where
  fieldTag Proxy = 934
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastNetworkResponseID
  fieldFromValue = fromValue >=> (prettyValidate . LastNetworkResponseID)

-- FieldSpec {fieldNumber = 935, fieldName = "NetworkRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SNAPSHOT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SUBSCRIBE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "STOP_SUBSCRIBING"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LEVEL_OF_DETAIL"}]}
data NetworkRequestType
  = NetworkRequestType_SNAPSHOT
  | NetworkRequestType_SUBSCRIBE
  | NetworkRequestType_STOP_SUBSCRIBING
  | NetworkRequestType_LEVEL_OF_DETAIL
  deriving stock (Show, Eq, Generic)

instance Validity NetworkRequestType

instance IsField NetworkRequestType where
  fieldTag Proxy = 935
  fieldIsData Proxy = False
  fieldToValue = \case
    NetworkRequestType_SNAPSHOT -> "1"
    NetworkRequestType_SUBSCRIBE -> "2"
    NetworkRequestType_STOP_SUBSCRIBING -> "4"
    NetworkRequestType_LEVEL_OF_DETAIL -> "8"
  fieldFromValue = \case
    "1" -> Right NetworkRequestType_SNAPSHOT
    "2" -> Right NetworkRequestType_SUBSCRIBE
    "4" -> Right NetworkRequestType_STOP_SUBSCRIBING
    "8" -> Right NetworkRequestType_LEVEL_OF_DETAIL
    v -> Left ("Unknown NetworkRequestType: " <> show v)

-- FieldSpec {fieldNumber = 936, fieldName = "NoCompIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoCompIDs = NoCompIDs {unNoCompIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoCompIDs

instance IsField NoCompIDs where
  fieldTag Proxy = 936
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoCompIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoCompIDs)

-- FieldSpec {fieldNumber = 937, fieldName = "NetworkStatusResponseType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FULL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INCREMENTAL_UPDATE"}]}
data NetworkStatusResponseType
  = NetworkStatusResponseType_FULL
  | NetworkStatusResponseType_INCREMENTAL_UPDATE
  deriving stock (Show, Eq, Generic)

instance Validity NetworkStatusResponseType

instance IsField NetworkStatusResponseType where
  fieldTag Proxy = 937
  fieldIsData Proxy = False
  fieldToValue = \case
    NetworkStatusResponseType_FULL -> "1"
    NetworkStatusResponseType_INCREMENTAL_UPDATE -> "2"
  fieldFromValue = \case
    "1" -> Right NetworkStatusResponseType_FULL
    "2" -> Right NetworkStatusResponseType_INCREMENTAL_UPDATE
    v -> Left ("Unknown NetworkStatusResponseType: " <> show v)

-- FieldSpec {fieldNumber = 938, fieldName = "NoCollInquiryQualifier", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoCollInquiryQualifier = NoCollInquiryQualifier {unNoCollInquiryQualifier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoCollInquiryQualifier

instance IsField NoCollInquiryQualifier where
  fieldTag Proxy = 938
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoCollInquiryQualifier
  fieldFromValue = fromValue >=> (prettyValidate . NoCollInquiryQualifier)

-- FieldSpec {fieldNumber = 939, fieldName = "TrdRptStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REJECTED"}]}
data TrdRptStatus
  = TrdRptStatus_ACCEPTED
  | TrdRptStatus_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity TrdRptStatus

instance IsField TrdRptStatus where
  fieldTag Proxy = 939
  fieldIsData Proxy = False
  fieldToValue = \case
    TrdRptStatus_ACCEPTED -> "0"
    TrdRptStatus_REJECTED -> "1"
  fieldFromValue = \case
    "0" -> Right TrdRptStatus_ACCEPTED
    "1" -> Right TrdRptStatus_REJECTED
    v -> Left ("Unknown TrdRptStatus: " <> show v)

-- FieldSpec {fieldNumber = 940, fieldName = "AffirmStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "RECEIVED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CONFIRM_REJECTED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "AFFIRMED"}]}
data AffirmStatus
  = AffirmStatus_RECEIVED
  | AffirmStatus_CONFIRM_REJECTED
  | AffirmStatus_AFFIRMED
  deriving stock (Show, Eq, Generic)

instance Validity AffirmStatus

instance IsField AffirmStatus where
  fieldTag Proxy = 940
  fieldIsData Proxy = False
  fieldToValue = \case
    AffirmStatus_RECEIVED -> "1"
    AffirmStatus_CONFIRM_REJECTED -> "2"
    AffirmStatus_AFFIRMED -> "3"
  fieldFromValue = \case
    "1" -> Right AffirmStatus_RECEIVED
    "2" -> Right AffirmStatus_CONFIRM_REJECTED
    "3" -> Right AffirmStatus_AFFIRMED
    v -> Left ("Unknown AffirmStatus: " <> show v)

-- FieldSpec {fieldNumber = 941, fieldName = "UnderlyingStrikeCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype UnderlyingStrikeCurrency = UnderlyingStrikeCurrency {unUnderlyingStrikeCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStrikeCurrency

instance IsField UnderlyingStrikeCurrency where
  fieldTag Proxy = 941
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStrikeCurrency
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStrikeCurrency)

-- FieldSpec {fieldNumber = 942, fieldName = "LegStrikeCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype LegStrikeCurrency = LegStrikeCurrency {unLegStrikeCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStrikeCurrency

instance IsField LegStrikeCurrency where
  fieldTag Proxy = 942
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStrikeCurrency
  fieldFromValue = fromValue >=> (prettyValidate . LegStrikeCurrency)

-- FieldSpec {fieldNumber = 943, fieldName = "TimeBracket", fieldType = FieldTypeString, fieldValues = []}
newtype TimeBracket = TimeBracket {unTimeBracket :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TimeBracket

instance IsField TimeBracket where
  fieldTag Proxy = 943
  fieldIsData Proxy = False
  fieldToValue = toValue . unTimeBracket
  fieldFromValue = fromValue >=> (prettyValidate . TimeBracket)

-- FieldSpec {fieldNumber = 944, fieldName = "CollAction", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "RETAIN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ADD"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REMOVE"}]}
data CollAction
  = CollAction_RETAIN
  | CollAction_ADD
  | CollAction_REMOVE
  deriving stock (Show, Eq, Generic)

instance Validity CollAction

instance IsField CollAction where
  fieldTag Proxy = 944
  fieldIsData Proxy = False
  fieldToValue = \case
    CollAction_RETAIN -> "0"
    CollAction_ADD -> "1"
    CollAction_REMOVE -> "2"
  fieldFromValue = \case
    "0" -> Right CollAction_RETAIN
    "1" -> Right CollAction_ADD
    "2" -> Right CollAction_REMOVE
    v -> Left ("Unknown CollAction: " <> show v)

-- FieldSpec {fieldNumber = 945, fieldName = "CollInquiryStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPTED_WITH_WARNINGS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COMPLETED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "COMPLETED_WITH_WARNINGS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "REJECTED"}]}
data CollInquiryStatus
  = CollInquiryStatus_ACCEPTED
  | CollInquiryStatus_ACCEPTED_WITH_WARNINGS
  | CollInquiryStatus_COMPLETED
  | CollInquiryStatus_COMPLETED_WITH_WARNINGS
  | CollInquiryStatus_REJECTED
  deriving stock (Show, Eq, Generic)

instance Validity CollInquiryStatus

instance IsField CollInquiryStatus where
  fieldTag Proxy = 945
  fieldIsData Proxy = False
  fieldToValue = \case
    CollInquiryStatus_ACCEPTED -> "0"
    CollInquiryStatus_ACCEPTED_WITH_WARNINGS -> "1"
    CollInquiryStatus_COMPLETED -> "2"
    CollInquiryStatus_COMPLETED_WITH_WARNINGS -> "3"
    CollInquiryStatus_REJECTED -> "4"
  fieldFromValue = \case
    "0" -> Right CollInquiryStatus_ACCEPTED
    "1" -> Right CollInquiryStatus_ACCEPTED_WITH_WARNINGS
    "2" -> Right CollInquiryStatus_COMPLETED
    "3" -> Right CollInquiryStatus_COMPLETED_WITH_WARNINGS
    "4" -> Right CollInquiryStatus_REJECTED
    v -> Left ("Unknown CollInquiryStatus: " <> show v)

-- FieldSpec {fieldNumber = 946, fieldName = "CollInquiryResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUCCESSFUL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNKNOWN_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INVALID_OR_UNKNOWN_COLLATERAL_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVALID_PARTIES"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_TRANSPORT_TYPE_REQUESTED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_DESTINATION_REQUESTED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "UNAUTHORIZED_FOR_COLLATERAL_INQUIRY"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data CollInquiryResult
  = CollInquiryResult_SUCCESSFUL
  | CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT
  | CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE
  | CollInquiryResult_INVALID_PARTIES
  | CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED
  | CollInquiryResult_INVALID_DESTINATION_REQUESTED
  | CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED
  | CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED
  | CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED
  | CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY
  | CollInquiryResult_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity CollInquiryResult

instance IsField CollInquiryResult where
  fieldTag Proxy = 946
  fieldIsData Proxy = False
  fieldToValue = \case
    CollInquiryResult_SUCCESSFUL -> "0"
    CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT -> "1"
    CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE -> "2"
    CollInquiryResult_INVALID_PARTIES -> "3"
    CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED -> "4"
    CollInquiryResult_INVALID_DESTINATION_REQUESTED -> "5"
    CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED -> "6"
    CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED -> "7"
    CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED -> "8"
    CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY -> "9"
    CollInquiryResult_OTHER -> "99"
  fieldFromValue = \case
    "0" -> Right CollInquiryResult_SUCCESSFUL
    "1" -> Right CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT
    "2" -> Right CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE
    "3" -> Right CollInquiryResult_INVALID_PARTIES
    "4" -> Right CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED
    "5" -> Right CollInquiryResult_INVALID_DESTINATION_REQUESTED
    "6" -> Right CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED
    "7" -> Right CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED
    "8" -> Right CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED
    "9" -> Right CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY
    "99" -> Right CollInquiryResult_OTHER
    v -> Left ("Unknown CollInquiryResult: " <> show v)

-- FieldSpec {fieldNumber = 947, fieldName = "StrikeCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype StrikeCurrency = StrikeCurrency {unStrikeCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StrikeCurrency

instance IsField StrikeCurrency where
  fieldTag Proxy = 947
  fieldIsData Proxy = False
  fieldToValue = toValue . unStrikeCurrency
  fieldFromValue = fromValue >=> (prettyValidate . StrikeCurrency)

-- FieldSpec {fieldNumber = 948, fieldName = "NoNested3PartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNested3PartyIDs = NoNested3PartyIDs {unNoNested3PartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNested3PartyIDs

instance IsField NoNested3PartyIDs where
  fieldTag Proxy = 948
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNested3PartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNested3PartyIDs)

-- FieldSpec {fieldNumber = 949, fieldName = "Nested3PartyID", fieldType = FieldTypeString, fieldValues = []}
newtype Nested3PartyID = Nested3PartyID {unNested3PartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartyID

instance IsField Nested3PartyID where
  fieldTag Proxy = 949
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartyID
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartyID)

-- FieldSpec {fieldNumber = 950, fieldName = "Nested3PartyIDSource", fieldType = FieldTypeChar, fieldValues = []}
newtype Nested3PartyIDSource = Nested3PartyIDSource {unNested3PartyIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartyIDSource

instance IsField Nested3PartyIDSource where
  fieldTag Proxy = 950
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartyIDSource
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartyIDSource)

-- FieldSpec {fieldNumber = 951, fieldName = "Nested3PartyRole", fieldType = FieldTypeInt, fieldValues = []}
newtype Nested3PartyRole = Nested3PartyRole {unNested3PartyRole :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartyRole

instance IsField Nested3PartyRole where
  fieldTag Proxy = 951
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartyRole
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartyRole)

-- FieldSpec {fieldNumber = 952, fieldName = "NoNested3PartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNested3PartySubIDs = NoNested3PartySubIDs {unNoNested3PartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNested3PartySubIDs

instance IsField NoNested3PartySubIDs where
  fieldTag Proxy = 952
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNested3PartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNested3PartySubIDs)

-- FieldSpec {fieldNumber = 953, fieldName = "Nested3PartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype Nested3PartySubID = Nested3PartySubID {unNested3PartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartySubID

instance IsField Nested3PartySubID where
  fieldTag Proxy = 953
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartySubID
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartySubID)

-- FieldSpec {fieldNumber = 954, fieldName = "Nested3PartySubIDType", fieldType = FieldTypeInt, fieldValues = []}
newtype Nested3PartySubIDType = Nested3PartySubIDType {unNested3PartySubIDType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartySubIDType

instance IsField Nested3PartySubIDType where
  fieldTag Proxy = 954
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartySubIDType
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartySubIDType)

-- FieldSpec {fieldNumber = 955, fieldName = "LegContractSettlMonth", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype LegContractSettlMonth = LegContractSettlMonth {unLegContractSettlMonth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegContractSettlMonth

instance IsField LegContractSettlMonth where
  fieldTag Proxy = 955
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegContractSettlMonth
  fieldFromValue = fromValue >=> (prettyValidate . LegContractSettlMonth)

-- FieldSpec {fieldNumber = 956, fieldName = "LegInterestAccrualDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegInterestAccrualDate = LegInterestAccrualDate {unLegInterestAccrualDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegInterestAccrualDate

instance IsField LegInterestAccrualDate where
  fieldTag Proxy = 956
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegInterestAccrualDate
  fieldFromValue = fromValue >=> (prettyValidate . LegInterestAccrualDate)
