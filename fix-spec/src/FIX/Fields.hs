{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

-- FieldSpec {fieldNumber = 1, fieldName = "Account", fieldType = FieldTypeString, fieldValues = []}
newtype Account = Account {unAccount :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Account

instance IsField Account where
  fieldTag Proxy = 1
  fieldIsData Proxy = False
  fieldToValue = toValue . unAccount
  fieldFromValue = fromValue >=> (prettyValidate . Account)

-- FieldSpec {fieldNumber = 2, fieldName = "AdvId", fieldType = FieldTypeString, fieldValues = []}
newtype AdvId = AdvId {unAdvId :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AdvId

instance IsField AdvId where
  fieldTag Proxy = 2
  fieldIsData Proxy = False
  fieldToValue = toValue . unAdvId
  fieldFromValue = fromValue >=> (prettyValidate . AdvId)

-- FieldSpec {fieldNumber = 3, fieldName = "AdvRefID", fieldType = FieldTypeString, fieldValues = []}
newtype AdvRefID = AdvRefID {unAdvRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AdvRefID

instance IsField AdvRefID where
  fieldTag Proxy = 3
  fieldIsData Proxy = False
  fieldToValue = toValue . unAdvRefID
  fieldFromValue = fromValue >=> (prettyValidate . AdvRefID)

-- FieldSpec {fieldNumber = 4, fieldName = "AdvSide", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "BUY"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SELL"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "CROSS"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "TRADE"}]}
newtype AdvSide = AdvSide {unAdvSide :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AdvSide

instance IsField AdvSide where
  fieldTag Proxy = 4
  fieldIsData Proxy = False
  fieldToValue = toValue . unAdvSide
  fieldFromValue = fromValue >=> (prettyValidate . AdvSide)

-- FieldSpec {fieldNumber = 5, fieldName = "AdvTransType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REPLACE"}]}
newtype AdvTransType = AdvTransType {unAdvTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AdvTransType

instance IsField AdvTransType where
  fieldTag Proxy = 5
  fieldIsData Proxy = False
  fieldToValue = toValue . unAdvTransType
  fieldFromValue = fromValue >=> (prettyValidate . AdvTransType)

-- FieldSpec {fieldNumber = 6, fieldName = "AvgPx", fieldType = FieldTypePrice, fieldValues = []}
newtype AvgPx = AvgPx {unAvgPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AvgPx

instance IsField AvgPx where
  fieldTag Proxy = 6
  fieldIsData Proxy = False
  fieldToValue = toValue . unAvgPx
  fieldFromValue = fromValue >=> (prettyValidate . AvgPx)

-- FieldSpec {fieldNumber = 7, fieldName = "BeginSeqNo", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype BeginSeqNo = BeginSeqNo {unBeginSeqNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BeginSeqNo

instance IsField BeginSeqNo where
  fieldTag Proxy = 7
  fieldIsData Proxy = False
  fieldToValue = toValue . unBeginSeqNo
  fieldFromValue = fromValue >=> (prettyValidate . BeginSeqNo)

-- FieldSpec {fieldNumber = 8, fieldName = "BeginString", fieldType = FieldTypeString, fieldValues = []}
newtype BeginString = BeginString {unBeginString :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BeginString

instance IsField BeginString where
  fieldTag Proxy = 8
  fieldIsData Proxy = False
  fieldToValue = toValue . unBeginString
  fieldFromValue = fromValue >=> (prettyValidate . BeginString)

-- FieldSpec {fieldNumber = 9, fieldName = "BodyLength", fieldType = FieldTypeLength, fieldValues = []}
newtype BodyLength = BodyLength {unBodyLength :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BodyLength

instance IsField BodyLength where
  fieldTag Proxy = 9
  fieldIsData Proxy = False
  fieldToValue = toValue . unBodyLength
  fieldFromValue = fromValue >=> (prettyValidate . BodyLength)

-- FieldSpec {fieldNumber = 10, fieldName = "CheckSum", fieldType = FieldTypeString, fieldValues = []}
newtype CheckSum = CheckSum {unCheckSum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CheckSum

instance IsField CheckSum where
  fieldTag Proxy = 10
  fieldIsData Proxy = False
  fieldToValue = toValue . unCheckSum
  fieldFromValue = fromValue >=> (prettyValidate . CheckSum)

-- FieldSpec {fieldNumber = 11, fieldName = "ClOrdID", fieldType = FieldTypeString, fieldValues = []}
newtype ClOrdID = ClOrdID {unClOrdID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClOrdID

instance IsField ClOrdID where
  fieldTag Proxy = 11
  fieldIsData Proxy = False
  fieldToValue = toValue . unClOrdID
  fieldFromValue = fromValue >=> (prettyValidate . ClOrdID)

-- FieldSpec {fieldNumber = 12, fieldName = "Commission", fieldType = FieldTypeAMT, fieldValues = []}
newtype Commission = Commission {unCommission :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Commission

instance IsField Commission where
  fieldTag Proxy = 12
  fieldIsData Proxy = False
  fieldToValue = toValue . unCommission
  fieldFromValue = fromValue >=> (prettyValidate . Commission)

-- FieldSpec {fieldNumber = 13, fieldName = "CommType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PER_UNIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PERCENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ABSOLUTE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PERCENTAGE_WAIVED_CASH_DISCOUNT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PERCENTAGE_WAIVED_ENHANCED_UNITS"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "POINTS_PER_BOND_OR_CONTRACT"}]}
newtype CommType = CommType {unCommType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CommType

instance IsField CommType where
  fieldTag Proxy = 13
  fieldIsData Proxy = False
  fieldToValue = toValue . unCommType
  fieldFromValue = fromValue >=> (prettyValidate . CommType)

-- FieldSpec {fieldNumber = 14, fieldName = "CumQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype CumQty = CumQty {unCumQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CumQty

instance IsField CumQty where
  fieldTag Proxy = 14
  fieldIsData Proxy = False
  fieldToValue = toValue . unCumQty
  fieldFromValue = fromValue >=> (prettyValidate . CumQty)

-- FieldSpec {fieldNumber = 15, fieldName = "Currency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype Currency = Currency {unCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Currency

instance IsField Currency where
  fieldTag Proxy = 15
  fieldIsData Proxy = False
  fieldToValue = toValue . unCurrency
  fieldFromValue = fromValue >=> (prettyValidate . Currency)

-- FieldSpec {fieldNumber = 16, fieldName = "EndSeqNo", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype EndSeqNo = EndSeqNo {unEndSeqNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EndSeqNo

instance IsField EndSeqNo where
  fieldTag Proxy = 16
  fieldIsData Proxy = False
  fieldToValue = toValue . unEndSeqNo
  fieldFromValue = fromValue >=> (prettyValidate . EndSeqNo)

-- FieldSpec {fieldNumber = 17, fieldName = "ExecID", fieldType = FieldTypeString, fieldValues = []}
newtype ExecID = ExecID {unExecID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecID

instance IsField ExecID where
  fieldTag Proxy = 17
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecID
  fieldFromValue = fromValue >=> (prettyValidate . ExecID)

-- FieldSpec {fieldNumber = 18, fieldName = "ExecInst", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NOT_HELD"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "WORK"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GO_ALONG"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OVER_THE_DAY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "HELD"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PARTICIPATE_DO_NOT_INITIATE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STRICT_SCALE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TRY_TO_SCALE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "STAY_ON_BID_SIDE"},FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "STAY_ON_OFFER_SIDE"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "NO_CROSS"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "OK_TO_CROSS"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CALL_FIRST"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "PERCENT_OF_VOLUME"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "DO_NOT_INCREASE"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "DO_NOT_REDUCE"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "ALL_OR_NONE"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "REINSTATE_ON_SYSTEM_FAILURE"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "INSTITUTIONS_ONLY"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "REINSTATE_ON_TRADING_HALT"},FieldValueSpec {fieldValueEnum = "K", fieldValueDescription = "CANCEL_ON_TRADING_HALT"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LAST_PEG"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MID_PRICE_PEG"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NON_NEGOTIABLE"},FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "OPENING_PEG"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "MARKET_PEG"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "CANCEL_ON_SYSTEM_FAILURE"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "PRIMARY_PEG"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SUSPEND"},FieldValueSpec {fieldValueEnum = "U", fieldValueDescription = "CUSTOMER_DISPLAY_INSTRUCTION"},FieldValueSpec {fieldValueEnum = "V", fieldValueDescription = "NETTING"},FieldValueSpec {fieldValueEnum = "W", fieldValueDescription = "PEG_TO_VWAP"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "TRADE_ALONG"},FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "TRY_TO_STOP"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "CANCEL_IF_NOT_BEST"},FieldValueSpec {fieldValueEnum = "a", fieldValueDescription = "TRAILING_STOP_PEG"},FieldValueSpec {fieldValueEnum = "b", fieldValueDescription = "STRICT_LIMIT"},FieldValueSpec {fieldValueEnum = "c", fieldValueDescription = "IGNORE_PRICE_VALIDITY_CHECKS"},FieldValueSpec {fieldValueEnum = "d", fieldValueDescription = "PEG_TO_LIMIT_PRICE"},FieldValueSpec {fieldValueEnum = "e", fieldValueDescription = "WORK_TO_TARGET_STRATEGY"}]}
newtype ExecInst = ExecInst {unExecInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecInst

instance IsField ExecInst where
  fieldTag Proxy = 18
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecInst
  fieldFromValue = fromValue >=> (prettyValidate . ExecInst)

-- FieldSpec {fieldNumber = 19, fieldName = "ExecRefID", fieldType = FieldTypeString, fieldValues = []}
newtype ExecRefID = ExecRefID {unExecRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecRefID

instance IsField ExecRefID where
  fieldTag Proxy = 19
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecRefID
  fieldFromValue = fromValue >=> (prettyValidate . ExecRefID)

-- FieldSpec {fieldNumber = 21, fieldName = "HandlInst", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "AUTOMATED_EXECUTION_NO_INTERVENTION"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "AUTOMATED_EXECUTION_INTERVENTION_OK"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MANUAL_ORDER"}]}
newtype HandlInst = HandlInst {unHandlInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HandlInst

instance IsField HandlInst where
  fieldTag Proxy = 21
  fieldIsData Proxy = False
  fieldToValue = toValue . unHandlInst
  fieldFromValue = fromValue >=> (prettyValidate . HandlInst)

-- FieldSpec {fieldNumber = 22, fieldName = "SecurityIDSource", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CUSIP"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SEDOL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "QUIK"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ISIN_NUMBER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "RIC_CODE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ISO_CURRENCY_CODE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "ISO_COUNTRY_CODE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "EXCHANGE_SYMBOL"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CONSOLIDATED_TAPE_ASSOCIATION"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "BLOOMBERG_SYMBOL"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "WERTPAPIER"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "DUTCH"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "VALOREN"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "SICOVAM"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "BELGIAN"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "COMMON"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "CLEARING_HOUSE"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "ISDA_FP_ML_SPECIFICATION"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "OPTION_PRICE_REPORTING_AUTHORITY"}]}
newtype SecurityIDSource = SecurityIDSource {unSecurityIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityIDSource

instance IsField SecurityIDSource where
  fieldTag Proxy = 22
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityIDSource
  fieldFromValue = fromValue >=> (prettyValidate . SecurityIDSource)

-- FieldSpec {fieldNumber = 23, fieldName = "IOIID", fieldType = FieldTypeString, fieldValues = []}
newtype IOIID = IOIID {unIOIID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IOIID

instance IsField IOIID where
  fieldTag Proxy = 23
  fieldIsData Proxy = False
  fieldToValue = toValue . unIOIID
  fieldFromValue = fromValue >=> (prettyValidate . IOIID)

-- FieldSpec {fieldNumber = 25, fieldName = "IOIQltyInd", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LOW"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MEDIUM"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "HIGH"}]}
newtype IOIQltyInd = IOIQltyInd {unIOIQltyInd :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IOIQltyInd

instance IsField IOIQltyInd where
  fieldTag Proxy = 25
  fieldIsData Proxy = False
  fieldToValue = toValue . unIOIQltyInd
  fieldFromValue = fromValue >=> (prettyValidate . IOIQltyInd)

-- FieldSpec {fieldNumber = 26, fieldName = "IOIRefID", fieldType = FieldTypeString, fieldValues = []}
newtype IOIRefID = IOIRefID {unIOIRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IOIRefID

instance IsField IOIRefID where
  fieldTag Proxy = 26
  fieldIsData Proxy = False
  fieldToValue = toValue . unIOIRefID
  fieldFromValue = fromValue >=> (prettyValidate . IOIRefID)

-- FieldSpec {fieldNumber = 27, fieldName = "IOIQty", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SMALL"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MEDIUM"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LARGE"}]}
newtype IOIQty = IOIQty {unIOIQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IOIQty

instance IsField IOIQty where
  fieldTag Proxy = 27
  fieldIsData Proxy = False
  fieldToValue = toValue . unIOIQty
  fieldFromValue = fromValue >=> (prettyValidate . IOIQty)

-- FieldSpec {fieldNumber = 28, fieldName = "IOITransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REPLACE"}]}
newtype IOITransType = IOITransType {unIOITransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IOITransType

instance IsField IOITransType where
  fieldTag Proxy = 28
  fieldIsData Proxy = False
  fieldToValue = toValue . unIOITransType
  fieldFromValue = fromValue >=> (prettyValidate . IOITransType)

-- FieldSpec {fieldNumber = 29, fieldName = "LastCapacity", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "AGENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CROSS_AS_AGENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CROSS_AS_PRINCIPAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PRINCIPAL"}]}
newtype LastCapacity = LastCapacity {unLastCapacity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastCapacity

instance IsField LastCapacity where
  fieldTag Proxy = 29
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastCapacity
  fieldFromValue = fromValue >=> (prettyValidate . LastCapacity)

-- FieldSpec {fieldNumber = 30, fieldName = "LastMkt", fieldType = FieldTypeExchange, fieldValues = []}
newtype LastMkt = LastMkt {unLastMkt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastMkt

instance IsField LastMkt where
  fieldTag Proxy = 30
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastMkt
  fieldFromValue = fromValue >=> (prettyValidate . LastMkt)

-- FieldSpec {fieldNumber = 31, fieldName = "LastPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LastPx = LastPx {unLastPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastPx

instance IsField LastPx where
  fieldTag Proxy = 31
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastPx
  fieldFromValue = fromValue >=> (prettyValidate . LastPx)

-- FieldSpec {fieldNumber = 32, fieldName = "LastQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LastQty = LastQty {unLastQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastQty

instance IsField LastQty where
  fieldTag Proxy = 32
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastQty
  fieldFromValue = fromValue >=> (prettyValidate . LastQty)

-- FieldSpec {fieldNumber = 33, fieldName = "NoLinesOfText", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLinesOfText = NoLinesOfText {unNoLinesOfText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLinesOfText

instance IsField NoLinesOfText where
  fieldTag Proxy = 33
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLinesOfText
  fieldFromValue = fromValue >=> (prettyValidate . NoLinesOfText)

-- FieldSpec {fieldNumber = 34, fieldName = "MsgSeqNum", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype MsgSeqNum = MsgSeqNum {unMsgSeqNum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MsgSeqNum

instance IsField MsgSeqNum where
  fieldTag Proxy = 34
  fieldIsData Proxy = False
  fieldToValue = toValue . unMsgSeqNum
  fieldFromValue = fromValue >=> (prettyValidate . MsgSeqNum)

-- FieldSpec {fieldNumber = 35, fieldName = "MsgType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "HEARTBEAT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TEST_REQUEST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RESEND_REQUEST"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REJECT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SEQUENCE_RESET"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "LOGOUT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "IOI"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "ADVERTISEMENT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "EXECUTION_REPORT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "ORDER_CANCEL_REJECT"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "LOGON"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "NEWS"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EMAIL"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NEW_ORDER_SINGLE"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "NEW_ORDER_LIST"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "ORDER_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "ORDER_CANCEL_REPLACE_REQUEST"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "ORDER_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "ALLOCATION_INSTRUCTION"},FieldValueSpec {fieldValueEnum = "K", fieldValueDescription = "LIST_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LIST_EXECUTE"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "LIST_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "LIST_STATUS"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "ALLOCATION_INSTRUCTION_ACK"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "DONT_KNOW_TRADE"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "QUOTE_REQUEST"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "QUOTE"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "SETTLEMENT_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "V", fieldValueDescription = "MARKET_DATA_REQUEST"},FieldValueSpec {fieldValueEnum = "W", fieldValueDescription = "MARKET_DATA_SNAPSHOT_FULL_REFRESH"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "MARKET_DATA_INCREMENTAL_REFRESH"},FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "MARKET_DATA_REQUEST_REJECT"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "QUOTE_CANCEL"},FieldValueSpec {fieldValueEnum = "a", fieldValueDescription = "QUOTE_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "b", fieldValueDescription = "MASS_QUOTE_ACKNOWLEDGEMENT"},FieldValueSpec {fieldValueEnum = "c", fieldValueDescription = "SECURITY_DEFINITION_REQUEST"},FieldValueSpec {fieldValueEnum = "d", fieldValueDescription = "SECURITY_DEFINITION"},FieldValueSpec {fieldValueEnum = "e", fieldValueDescription = "SECURITY_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "f", fieldValueDescription = "SECURITY_STATUS"},FieldValueSpec {fieldValueEnum = "g", fieldValueDescription = "TRADING_SESSION_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "h", fieldValueDescription = "TRADING_SESSION_STATUS"},FieldValueSpec {fieldValueEnum = "i", fieldValueDescription = "MASS_QUOTE"},FieldValueSpec {fieldValueEnum = "j", fieldValueDescription = "BUSINESS_MESSAGE_REJECT"},FieldValueSpec {fieldValueEnum = "k", fieldValueDescription = "BID_REQUEST"},FieldValueSpec {fieldValueEnum = "l", fieldValueDescription = "BID_RESPONSE"},FieldValueSpec {fieldValueEnum = "m", fieldValueDescription = "LIST_STRIKE_PRICE"},FieldValueSpec {fieldValueEnum = "n", fieldValueDescription = "XML_NON_FIX"},FieldValueSpec {fieldValueEnum = "o", fieldValueDescription = "REGISTRATION_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "p", fieldValueDescription = "REGISTRATION_INSTRUCTIONS_RESPONSE"},FieldValueSpec {fieldValueEnum = "q", fieldValueDescription = "ORDER_MASS_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "r", fieldValueDescription = "ORDER_MASS_CANCEL_REPORT"},FieldValueSpec {fieldValueEnum = "s", fieldValueDescription = "NEW_ORDER_CROSS"},FieldValueSpec {fieldValueEnum = "t", fieldValueDescription = "CROSS_ORDER_CANCEL_REPLACE_REQUEST"},FieldValueSpec {fieldValueEnum = "u", fieldValueDescription = "CROSS_ORDER_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "v", fieldValueDescription = "SECURITY_TYPE_REQUEST"},FieldValueSpec {fieldValueEnum = "w", fieldValueDescription = "SECURITY_TYPES"},FieldValueSpec {fieldValueEnum = "x", fieldValueDescription = "SECURITY_LIST_REQUEST"},FieldValueSpec {fieldValueEnum = "y", fieldValueDescription = "SECURITY_LIST"},FieldValueSpec {fieldValueEnum = "z", fieldValueDescription = "DERIVATIVE_SECURITY_LIST_REQUEST"},FieldValueSpec {fieldValueEnum = "AA", fieldValueDescription = "DERIVATIVE_SECURITY_LIST"},FieldValueSpec {fieldValueEnum = "AB", fieldValueDescription = "NEW_ORDER_MULTILEG"},FieldValueSpec {fieldValueEnum = "AC", fieldValueDescription = "MULTILEG_ORDER_CANCEL_REPLACE"},FieldValueSpec {fieldValueEnum = "AD", fieldValueDescription = "TRADE_CAPTURE_REPORT_REQUEST"},FieldValueSpec {fieldValueEnum = "AE", fieldValueDescription = "TRADE_CAPTURE_REPORT"},FieldValueSpec {fieldValueEnum = "AF", fieldValueDescription = "ORDER_MASS_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "AG", fieldValueDescription = "QUOTE_REQUEST_REJECT"},FieldValueSpec {fieldValueEnum = "AH", fieldValueDescription = "RFQ_REQUEST"},FieldValueSpec {fieldValueEnum = "AI", fieldValueDescription = "QUOTE_STATUS_REPORT"},FieldValueSpec {fieldValueEnum = "AJ", fieldValueDescription = "QUOTE_RESPONSE"},FieldValueSpec {fieldValueEnum = "AK", fieldValueDescription = "CONFIRMATION"},FieldValueSpec {fieldValueEnum = "AL", fieldValueDescription = "POSITION_MAINTENANCE_REQUEST"},FieldValueSpec {fieldValueEnum = "AM", fieldValueDescription = "POSITION_MAINTENANCE_REPORT"},FieldValueSpec {fieldValueEnum = "AN", fieldValueDescription = "REQUEST_FOR_POSITIONS"},FieldValueSpec {fieldValueEnum = "AO", fieldValueDescription = "REQUEST_FOR_POSITIONS_ACK"},FieldValueSpec {fieldValueEnum = "AP", fieldValueDescription = "POSITION_REPORT"},FieldValueSpec {fieldValueEnum = "AQ", fieldValueDescription = "TRADE_CAPTURE_REPORT_REQUEST_ACK"},FieldValueSpec {fieldValueEnum = "AR", fieldValueDescription = "TRADE_CAPTURE_REPORT_ACK"},FieldValueSpec {fieldValueEnum = "AS", fieldValueDescription = "ALLOCATION_REPORT"},FieldValueSpec {fieldValueEnum = "AT", fieldValueDescription = "ALLOCATION_REPORT_ACK"},FieldValueSpec {fieldValueEnum = "AU", fieldValueDescription = "CONFIRMATION_ACK"},FieldValueSpec {fieldValueEnum = "AV", fieldValueDescription = "SETTLEMENT_INSTRUCTION_REQUEST"},FieldValueSpec {fieldValueEnum = "AW", fieldValueDescription = "ASSIGNMENT_REPORT"},FieldValueSpec {fieldValueEnum = "AX", fieldValueDescription = "COLLATERAL_REQUEST"},FieldValueSpec {fieldValueEnum = "AY", fieldValueDescription = "COLLATERAL_ASSIGNMENT"},FieldValueSpec {fieldValueEnum = "AZ", fieldValueDescription = "COLLATERAL_RESPONSE"},FieldValueSpec {fieldValueEnum = "BA", fieldValueDescription = "COLLATERAL_REPORT"},FieldValueSpec {fieldValueEnum = "BB", fieldValueDescription = "COLLATERAL_INQUIRY"},FieldValueSpec {fieldValueEnum = "BC", fieldValueDescription = "NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST"},FieldValueSpec {fieldValueEnum = "BD", fieldValueDescription = "NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE"},FieldValueSpec {fieldValueEnum = "BE", fieldValueDescription = "USER_REQUEST"},FieldValueSpec {fieldValueEnum = "BF", fieldValueDescription = "USER_RESPONSE"},FieldValueSpec {fieldValueEnum = "BG", fieldValueDescription = "COLLATERAL_INQUIRY_ACK"},FieldValueSpec {fieldValueEnum = "BH", fieldValueDescription = "CONFIRMATION_REQUEST"}]}
newtype MsgType = MsgType {unMsgType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MsgType

instance IsField MsgType where
  fieldTag Proxy = 35
  fieldIsData Proxy = False
  fieldToValue = toValue . unMsgType
  fieldFromValue = fromValue >=> (prettyValidate . MsgType)

-- FieldSpec {fieldNumber = 36, fieldName = "NewSeqNo", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype NewSeqNo = NewSeqNo {unNewSeqNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NewSeqNo

instance IsField NewSeqNo where
  fieldTag Proxy = 36
  fieldIsData Proxy = False
  fieldToValue = toValue . unNewSeqNo
  fieldFromValue = fromValue >=> (prettyValidate . NewSeqNo)

-- FieldSpec {fieldNumber = 37, fieldName = "OrderID", fieldType = FieldTypeString, fieldValues = []}
newtype OrderID = OrderID {unOrderID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderID

instance IsField OrderID where
  fieldTag Proxy = 37
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderID
  fieldFromValue = fromValue >=> (prettyValidate . OrderID)

-- FieldSpec {fieldNumber = 38, fieldName = "OrderQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype OrderQty = OrderQty {unOrderQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderQty

instance IsField OrderQty where
  fieldTag Proxy = 38
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderQty
  fieldFromValue = fromValue >=> (prettyValidate . OrderQty)

-- FieldSpec {fieldNumber = 39, fieldName = "OrdStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PARTIALLY_FILLED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "FILLED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "DONE_FOR_DAY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCELED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PENDING_CANCEL"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STOPPED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "SUSPENDED"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "PENDING_NEW"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "CALCULATED"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EXPIRED"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "ACCEPTED_FOR_BIDDING"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "PENDING_REPLACE"}]}
newtype OrdStatus = OrdStatus {unOrdStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrdStatus

instance IsField OrdStatus where
  fieldTag Proxy = 39
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrdStatus
  fieldFromValue = fromValue >=> (prettyValidate . OrdStatus)

-- FieldSpec {fieldNumber = 40, fieldName = "OrdType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MARKET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "LIMIT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "STOP"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "STOP_LIMIT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "WITH_OR_WITHOUT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "LIMIT_OR_BETTER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LIMIT_WITH_OR_WITHOUT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "ON_BASIS"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "PREVIOUSLY_QUOTED"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "PREVIOUSLY_INDICATED"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "FOREX_SWAP"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "FUNARI"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "MARKET_IF_TOUCHED"},FieldValueSpec {fieldValueEnum = "K", fieldValueDescription = "MARKET_WITH_LEFT_OVER_AS_LIMIT"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "PREVIOUS_FUND_VALUATION_POINT"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "NEXT_FUND_VALUATION_POINT"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "PEGGED"}]}
newtype OrdType = OrdType {unOrdType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrdType

instance IsField OrdType where
  fieldTag Proxy = 40
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrdType
  fieldFromValue = fromValue >=> (prettyValidate . OrdType)

-- FieldSpec {fieldNumber = 41, fieldName = "OrigClOrdID", fieldType = FieldTypeString, fieldValues = []}
newtype OrigClOrdID = OrigClOrdID {unOrigClOrdID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigClOrdID

instance IsField OrigClOrdID where
  fieldTag Proxy = 41
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigClOrdID
  fieldFromValue = fromValue >=> (prettyValidate . OrigClOrdID)

-- FieldSpec {fieldNumber = 42, fieldName = "OrigTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype OrigTime = OrigTime {unOrigTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigTime

instance IsField OrigTime where
  fieldTag Proxy = 42
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigTime
  fieldFromValue = fromValue >=> (prettyValidate . OrigTime)

-- FieldSpec {fieldNumber = 43, fieldName = "PossDupFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype PossDupFlag = PossDupFlag {unPossDupFlag :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity PossDupFlag

instance IsField PossDupFlag where
  fieldTag Proxy = 43
  fieldIsData Proxy = False
  fieldToValue = toValue . unPossDupFlag
  fieldFromValue = fromValue >=> (prettyValidate . PossDupFlag)

-- FieldSpec {fieldNumber = 44, fieldName = "Price", fieldType = FieldTypePrice, fieldValues = []}
newtype Price = Price {unPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Price

instance IsField Price where
  fieldTag Proxy = 44
  fieldIsData Proxy = False
  fieldToValue = toValue . unPrice
  fieldFromValue = fromValue >=> (prettyValidate . Price)

-- FieldSpec {fieldNumber = 45, fieldName = "RefSeqNum", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype RefSeqNum = RefSeqNum {unRefSeqNum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefSeqNum

instance IsField RefSeqNum where
  fieldTag Proxy = 45
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefSeqNum
  fieldFromValue = fromValue >=> (prettyValidate . RefSeqNum)

-- FieldSpec {fieldNumber = 48, fieldName = "SecurityID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityID = SecurityID {unSecurityID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityID

instance IsField SecurityID where
  fieldTag Proxy = 48
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityID)

-- FieldSpec {fieldNumber = 49, fieldName = "SenderCompID", fieldType = FieldTypeString, fieldValues = []}
newtype SenderCompID = SenderCompID {unSenderCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SenderCompID

instance IsField SenderCompID where
  fieldTag Proxy = 49
  fieldIsData Proxy = False
  fieldToValue = toValue . unSenderCompID
  fieldFromValue = fromValue >=> (prettyValidate . SenderCompID)

-- FieldSpec {fieldNumber = 50, fieldName = "SenderSubID", fieldType = FieldTypeString, fieldValues = []}
newtype SenderSubID = SenderSubID {unSenderSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SenderSubID

instance IsField SenderSubID where
  fieldTag Proxy = 50
  fieldIsData Proxy = False
  fieldToValue = toValue . unSenderSubID
  fieldFromValue = fromValue >=> (prettyValidate . SenderSubID)

-- FieldSpec {fieldNumber = 52, fieldName = "SendingTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype SendingTime = SendingTime {unSendingTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SendingTime

instance IsField SendingTime where
  fieldTag Proxy = 52
  fieldIsData Proxy = False
  fieldToValue = toValue . unSendingTime
  fieldFromValue = fromValue >=> (prettyValidate . SendingTime)

-- FieldSpec {fieldNumber = 53, fieldName = "Quantity", fieldType = FieldTypeQTY, fieldValues = []}
newtype Quantity = Quantity {unQuantity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Quantity

instance IsField Quantity where
  fieldTag Proxy = 53
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuantity
  fieldFromValue = fromValue >=> (prettyValidate . Quantity)

-- FieldSpec {fieldNumber = 54, fieldName = "Side", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BUY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SELL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "BUY_MINUS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SELL_PLUS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "SELL_SHORT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "SELL_SHORT_EXEMPT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "UNDISCLOSED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "CROSS"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CROSS_SHORT"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "CROSS_SHORT_EXEMPT"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "AS_DEFINED"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "OPPOSITE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "SUBSCRIBE"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "REDEEM"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "LEND"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "BORROW"}]}
newtype Side = Side {unSide :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Side

instance IsField Side where
  fieldTag Proxy = 54
  fieldIsData Proxy = False
  fieldToValue = toValue . unSide
  fieldFromValue = fromValue >=> (prettyValidate . Side)

-- FieldSpec {fieldNumber = 55, fieldName = "Symbol", fieldType = FieldTypeString, fieldValues = []}
newtype Symbol = Symbol {unSymbol :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Symbol

instance IsField Symbol where
  fieldTag Proxy = 55
  fieldIsData Proxy = False
  fieldToValue = toValue . unSymbol
  fieldFromValue = fromValue >=> (prettyValidate . Symbol)

-- FieldSpec {fieldNumber = 56, fieldName = "TargetCompID", fieldType = FieldTypeString, fieldValues = []}
newtype TargetCompID = TargetCompID {unTargetCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetCompID

instance IsField TargetCompID where
  fieldTag Proxy = 56
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetCompID
  fieldFromValue = fromValue >=> (prettyValidate . TargetCompID)

-- FieldSpec {fieldNumber = 57, fieldName = "TargetSubID", fieldType = FieldTypeString, fieldValues = []}
newtype TargetSubID = TargetSubID {unTargetSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetSubID

instance IsField TargetSubID where
  fieldTag Proxy = 57
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetSubID
  fieldFromValue = fromValue >=> (prettyValidate . TargetSubID)

-- FieldSpec {fieldNumber = 58, fieldName = "Text", fieldType = FieldTypeString, fieldValues = []}
newtype Text = Text {unText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Text

instance IsField Text where
  fieldTag Proxy = 58
  fieldIsData Proxy = False
  fieldToValue = toValue . unText
  fieldFromValue = fromValue >=> (prettyValidate . Text)

-- FieldSpec {fieldNumber = 59, fieldName = "TimeInForce", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "DAY"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "GOOD_TILL_CANCEL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "AT_THE_OPENING"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "IMMEDIATE_OR_CANCEL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "FILL_OR_KILL"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "GOOD_TILL_CROSSING"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "GOOD_TILL_DATE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "AT_THE_CLOSE"}]}
newtype TimeInForce = TimeInForce {unTimeInForce :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TimeInForce

instance IsField TimeInForce where
  fieldTag Proxy = 59
  fieldIsData Proxy = False
  fieldToValue = toValue . unTimeInForce
  fieldFromValue = fromValue >=> (prettyValidate . TimeInForce)

-- FieldSpec {fieldNumber = 60, fieldName = "TransactTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TransactTime = TransactTime {unTransactTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TransactTime

instance IsField TransactTime where
  fieldTag Proxy = 60
  fieldIsData Proxy = False
  fieldToValue = toValue . unTransactTime
  fieldFromValue = fromValue >=> (prettyValidate . TransactTime)

-- FieldSpec {fieldNumber = 61, fieldName = "Urgency", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NORMAL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FLASH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BACKGROUND"}]}
newtype Urgency = Urgency {unUrgency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Urgency

instance IsField Urgency where
  fieldTag Proxy = 61
  fieldIsData Proxy = False
  fieldToValue = toValue . unUrgency
  fieldFromValue = fromValue >=> (prettyValidate . Urgency)

-- FieldSpec {fieldNumber = 62, fieldName = "ValidUntilTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype ValidUntilTime = ValidUntilTime {unValidUntilTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ValidUntilTime

instance IsField ValidUntilTime where
  fieldTag Proxy = 62
  fieldIsData Proxy = False
  fieldToValue = toValue . unValidUntilTime
  fieldFromValue = fromValue >=> (prettyValidate . ValidUntilTime)

-- FieldSpec {fieldNumber = 63, fieldName = "SettlType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REGULAR"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CASH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NEXT_DAY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "T_PLUS2"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "T_PLUS3"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "T_PLUS4"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "FUTURE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "WHEN_AND_IF_ISSUED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "SELLERS_OPTION"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "T_PLUS5"}]}
newtype SettlType = SettlType {unSettlType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlType

instance IsField SettlType where
  fieldTag Proxy = 63
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlType
  fieldFromValue = fromValue >=> (prettyValidate . SettlType)

-- FieldSpec {fieldNumber = 64, fieldName = "SettlDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype SettlDate = SettlDate {unSettlDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlDate

instance IsField SettlDate where
  fieldTag Proxy = 64
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlDate
  fieldFromValue = fromValue >=> (prettyValidate . SettlDate)

-- FieldSpec {fieldNumber = 65, fieldName = "SymbolSfx", fieldType = FieldTypeString, fieldValues = []}
newtype SymbolSfx = SymbolSfx {unSymbolSfx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SymbolSfx

instance IsField SymbolSfx where
  fieldTag Proxy = 65
  fieldIsData Proxy = False
  fieldToValue = toValue . unSymbolSfx
  fieldFromValue = fromValue >=> (prettyValidate . SymbolSfx)

-- FieldSpec {fieldNumber = 66, fieldName = "ListID", fieldType = FieldTypeString, fieldValues = []}
newtype ListID = ListID {unListID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListID

instance IsField ListID where
  fieldTag Proxy = 66
  fieldIsData Proxy = False
  fieldToValue = toValue . unListID
  fieldFromValue = fromValue >=> (prettyValidate . ListID)

-- FieldSpec {fieldNumber = 67, fieldName = "ListSeqNo", fieldType = FieldTypeInt, fieldValues = []}
newtype ListSeqNo = ListSeqNo {unListSeqNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListSeqNo

instance IsField ListSeqNo where
  fieldTag Proxy = 67
  fieldIsData Proxy = False
  fieldToValue = toValue . unListSeqNo
  fieldFromValue = fromValue >=> (prettyValidate . ListSeqNo)

-- FieldSpec {fieldNumber = 68, fieldName = "TotNoOrders", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoOrders = TotNoOrders {unTotNoOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoOrders

instance IsField TotNoOrders where
  fieldTag Proxy = 68
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoOrders
  fieldFromValue = fromValue >=> (prettyValidate . TotNoOrders)

-- FieldSpec {fieldNumber = 69, fieldName = "ListExecInst", fieldType = FieldTypeString, fieldValues = []}
newtype ListExecInst = ListExecInst {unListExecInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListExecInst

instance IsField ListExecInst where
  fieldTag Proxy = 69
  fieldIsData Proxy = False
  fieldToValue = toValue . unListExecInst
  fieldFromValue = fromValue >=> (prettyValidate . ListExecInst)

-- FieldSpec {fieldNumber = 70, fieldName = "AllocID", fieldType = FieldTypeString, fieldValues = []}
newtype AllocID = AllocID {unAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocID

instance IsField AllocID where
  fieldTag Proxy = 70
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocID
  fieldFromValue = fromValue >=> (prettyValidate . AllocID)

-- FieldSpec {fieldNumber = 71, fieldName = "AllocTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"}]}
newtype AllocTransType = AllocTransType {unAllocTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocTransType

instance IsField AllocTransType where
  fieldTag Proxy = 71
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocTransType
  fieldFromValue = fromValue >=> (prettyValidate . AllocTransType)

-- FieldSpec {fieldNumber = 72, fieldName = "RefAllocID", fieldType = FieldTypeString, fieldValues = []}
newtype RefAllocID = RefAllocID {unRefAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefAllocID

instance IsField RefAllocID where
  fieldTag Proxy = 72
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefAllocID
  fieldFromValue = fromValue >=> (prettyValidate . RefAllocID)

-- FieldSpec {fieldNumber = 73, fieldName = "NoOrders", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoOrders = NoOrders {unNoOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoOrders

instance IsField NoOrders where
  fieldTag Proxy = 73
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoOrders
  fieldFromValue = fromValue >=> (prettyValidate . NoOrders)

-- FieldSpec {fieldNumber = 74, fieldName = "AvgPxPrecision", fieldType = FieldTypeInt, fieldValues = []}
newtype AvgPxPrecision = AvgPxPrecision {unAvgPxPrecision :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AvgPxPrecision

instance IsField AvgPxPrecision where
  fieldTag Proxy = 74
  fieldIsData Proxy = False
  fieldToValue = toValue . unAvgPxPrecision
  fieldFromValue = fromValue >=> (prettyValidate . AvgPxPrecision)

-- FieldSpec {fieldNumber = 75, fieldName = "TradeDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype TradeDate = TradeDate {unTradeDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeDate

instance IsField TradeDate where
  fieldTag Proxy = 75
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeDate
  fieldFromValue = fromValue >=> (prettyValidate . TradeDate)

-- FieldSpec {fieldNumber = 77, fieldName = "PositionEffect", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "OPEN"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CLOSE"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "ROLLED"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "FIFO"}]}
newtype PositionEffect = PositionEffect {unPositionEffect :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PositionEffect

instance IsField PositionEffect where
  fieldTag Proxy = 77
  fieldIsData Proxy = False
  fieldToValue = toValue . unPositionEffect
  fieldFromValue = fromValue >=> (prettyValidate . PositionEffect)

-- FieldSpec {fieldNumber = 78, fieldName = "NoAllocs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoAllocs = NoAllocs {unNoAllocs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoAllocs

instance IsField NoAllocs where
  fieldTag Proxy = 78
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoAllocs
  fieldFromValue = fromValue >=> (prettyValidate . NoAllocs)

-- FieldSpec {fieldNumber = 79, fieldName = "AllocAccount", fieldType = FieldTypeString, fieldValues = []}
newtype AllocAccount = AllocAccount {unAllocAccount :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocAccount

instance IsField AllocAccount where
  fieldTag Proxy = 79
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocAccount
  fieldFromValue = fromValue >=> (prettyValidate . AllocAccount)

-- FieldSpec {fieldNumber = 80, fieldName = "AllocQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype AllocQty = AllocQty {unAllocQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocQty

instance IsField AllocQty where
  fieldTag Proxy = 80
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocQty
  fieldFromValue = fromValue >=> (prettyValidate . AllocQty)

-- FieldSpec {fieldNumber = 81, fieldName = "ProcessCode", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REGULAR"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SOFT_DOLLAR"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "STEP_IN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "STEP_OUT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SOFT_DOLLAR_STEP_IN"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "SOFT_DOLLAR_STEP_OUT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PLAN_SPONSOR"}]}
newtype ProcessCode = ProcessCode {unProcessCode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ProcessCode

instance IsField ProcessCode where
  fieldTag Proxy = 81
  fieldIsData Proxy = False
  fieldToValue = toValue . unProcessCode
  fieldFromValue = fromValue >=> (prettyValidate . ProcessCode)

-- FieldSpec {fieldNumber = 82, fieldName = "NoRpts", fieldType = FieldTypeInt, fieldValues = []}
newtype NoRpts = NoRpts {unNoRpts :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoRpts

instance IsField NoRpts where
  fieldTag Proxy = 82
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoRpts
  fieldFromValue = fromValue >=> (prettyValidate . NoRpts)

-- FieldSpec {fieldNumber = 83, fieldName = "RptSeq", fieldType = FieldTypeInt, fieldValues = []}
newtype RptSeq = RptSeq {unRptSeq :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RptSeq

instance IsField RptSeq where
  fieldTag Proxy = 83
  fieldIsData Proxy = False
  fieldToValue = toValue . unRptSeq
  fieldFromValue = fromValue >=> (prettyValidate . RptSeq)

-- FieldSpec {fieldNumber = 84, fieldName = "CxlQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype CxlQty = CxlQty {unCxlQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CxlQty

instance IsField CxlQty where
  fieldTag Proxy = 84
  fieldIsData Proxy = False
  fieldToValue = toValue . unCxlQty
  fieldFromValue = fromValue >=> (prettyValidate . CxlQty)

-- FieldSpec {fieldNumber = 85, fieldName = "NoDlvyInst", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoDlvyInst = NoDlvyInst {unNoDlvyInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoDlvyInst

instance IsField NoDlvyInst where
  fieldTag Proxy = 85
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoDlvyInst
  fieldFromValue = fromValue >=> (prettyValidate . NoDlvyInst)

-- FieldSpec {fieldNumber = 87, fieldName = "AllocStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BLOCK_LEVEL_REJECT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCOUNT_LEVEL_REJECT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "RECEIVED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INCOMPLETE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REJECTED_BY_INTERMEDIARY"}]}
newtype AllocStatus = AllocStatus {unAllocStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocStatus

instance IsField AllocStatus where
  fieldTag Proxy = 87
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocStatus
  fieldFromValue = fromValue >=> (prettyValidate . AllocStatus)

-- FieldSpec {fieldNumber = 88, fieldName = "AllocRejCode", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNKNOWN_ACCOUNT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INCORRECT_QUANTITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INCORRECT_AVERAGEG_PRICE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNKNOWN_EXECUTING_BROKER_MNEMONIC"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "COMMISSION_DIFFERENCE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "UNKNOWN_ORDER_ID"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "UNKNOWN_LIST_ID"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "OTHER_SEE_TEXT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "INCORRECT_ALLOCATED_QUANTITY"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CALCULATION_DIFFERENCE"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "UNKNOWN_OR_STALE_EXEC_ID"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "MISMATCHED_DATA"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "UNKNOWN_CL_ORD_ID"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "WAREHOUSE_REQUEST_REJECTED"}]}
newtype AllocRejCode = AllocRejCode {unAllocRejCode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocRejCode

instance IsField AllocRejCode where
  fieldTag Proxy = 88
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocRejCode
  fieldFromValue = fromValue >=> (prettyValidate . AllocRejCode)

-- FieldSpec {fieldNumber = 89, fieldName = "Signature", fieldType = FieldTypeData, fieldValues = []}
newtype Signature = Signature {unSignature :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Signature

instance IsField Signature where
  fieldTag Proxy = 89
  fieldIsData Proxy = True
  fieldToValue = toValue . unSignature
  fieldFromValue = fromValue >=> (prettyValidate . Signature)

-- FieldSpec {fieldNumber = 90, fieldName = "SecureDataLen", fieldType = FieldTypeLength, fieldValues = []}
newtype SecureDataLen = SecureDataLen {unSecureDataLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecureDataLen

instance IsField SecureDataLen where
  fieldTag Proxy = 90
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecureDataLen
  fieldFromValue = fromValue >=> (prettyValidate . SecureDataLen)

-- FieldSpec {fieldNumber = 91, fieldName = "SecureData", fieldType = FieldTypeData, fieldValues = []}
newtype SecureData = SecureData {unSecureData :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecureData

instance IsField SecureData where
  fieldTag Proxy = 91
  fieldIsData Proxy = True
  fieldToValue = toValue . unSecureData
  fieldFromValue = fromValue >=> (prettyValidate . SecureData)

-- FieldSpec {fieldNumber = 93, fieldName = "SignatureLength", fieldType = FieldTypeLength, fieldValues = []}
newtype SignatureLength = SignatureLength {unSignatureLength :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SignatureLength

instance IsField SignatureLength where
  fieldTag Proxy = 93
  fieldIsData Proxy = False
  fieldToValue = toValue . unSignatureLength
  fieldFromValue = fromValue >=> (prettyValidate . SignatureLength)

-- FieldSpec {fieldNumber = 94, fieldName = "EmailType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ADMIN_REPLY"}]}
newtype EmailType = EmailType {unEmailType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EmailType

instance IsField EmailType where
  fieldTag Proxy = 94
  fieldIsData Proxy = False
  fieldToValue = toValue . unEmailType
  fieldFromValue = fromValue >=> (prettyValidate . EmailType)

-- FieldSpec {fieldNumber = 95, fieldName = "RawDataLength", fieldType = FieldTypeLength, fieldValues = []}
newtype RawDataLength = RawDataLength {unRawDataLength :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RawDataLength

instance IsField RawDataLength where
  fieldTag Proxy = 95
  fieldIsData Proxy = False
  fieldToValue = toValue . unRawDataLength
  fieldFromValue = fromValue >=> (prettyValidate . RawDataLength)

-- FieldSpec {fieldNumber = 96, fieldName = "RawData", fieldType = FieldTypeData, fieldValues = []}
newtype RawData = RawData {unRawData :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RawData

instance IsField RawData where
  fieldTag Proxy = 96
  fieldIsData Proxy = True
  fieldToValue = toValue . unRawData
  fieldFromValue = fromValue >=> (prettyValidate . RawData)

-- FieldSpec {fieldNumber = 97, fieldName = "PossResend", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype PossResend = PossResend {unPossResend :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity PossResend

instance IsField PossResend where
  fieldTag Proxy = 97
  fieldIsData Proxy = False
  fieldToValue = toValue . unPossResend
  fieldFromValue = fromValue >=> (prettyValidate . PossResend)

-- FieldSpec {fieldNumber = 98, fieldName = "EncryptMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NONE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PKCS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DES"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PKCSDES"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PGPDES"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PGPDESMD5"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PEM"}]}
newtype EncryptMethod = EncryptMethod {unEncryptMethod :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncryptMethod

instance IsField EncryptMethod where
  fieldTag Proxy = 98
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncryptMethod
  fieldFromValue = fromValue >=> (prettyValidate . EncryptMethod)

-- FieldSpec {fieldNumber = 99, fieldName = "StopPx", fieldType = FieldTypePrice, fieldValues = []}
newtype StopPx = StopPx {unStopPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StopPx

instance IsField StopPx where
  fieldTag Proxy = 99
  fieldIsData Proxy = False
  fieldToValue = toValue . unStopPx
  fieldFromValue = fromValue >=> (prettyValidate . StopPx)

-- FieldSpec {fieldNumber = 100, fieldName = "ExDestination", fieldType = FieldTypeExchange, fieldValues = []}
newtype ExDestination = ExDestination {unExDestination :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExDestination

instance IsField ExDestination where
  fieldTag Proxy = 100
  fieldIsData Proxy = False
  fieldToValue = toValue . unExDestination
  fieldFromValue = fromValue >=> (prettyValidate . ExDestination)

-- FieldSpec {fieldNumber = 102, fieldName = "CxlRejReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "TOO_LATE_TO_CANCEL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_ORDER"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BROKER_CREDIT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ORDER_ALREADY_IN_PENDING_STATUS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "ORIG_ORD_MOD_TIME"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "DUPLICATE_CL_ORD_ID"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype CxlRejReason = CxlRejReason {unCxlRejReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CxlRejReason

instance IsField CxlRejReason where
  fieldTag Proxy = 102
  fieldIsData Proxy = False
  fieldToValue = toValue . unCxlRejReason
  fieldFromValue = fromValue >=> (prettyValidate . CxlRejReason)

-- FieldSpec {fieldNumber = 103, fieldName = "OrdRejReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "BROKER_CREDIT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXCHANGE_CLOSED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ORDER_EXCEEDS_LIMIT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "TOO_LATE_TO_ENTER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "UNKNOWN_ORDER"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "DUPLICATE_ORDER"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "STALE_ORDER"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "TRADE_ALONG_REQUIRED"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "INVALID_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "UNSUPPORTED_ORDER_CHARACTERISTIC"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "INCORRECT_QUANTITY"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "INCORRECT_ALLOCATED_QUANTITY"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "UNKNOWN_ACCOUNT"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype OrdRejReason = OrdRejReason {unOrdRejReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrdRejReason

instance IsField OrdRejReason where
  fieldTag Proxy = 103
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrdRejReason
  fieldFromValue = fromValue >=> (prettyValidate . OrdRejReason)

-- FieldSpec {fieldNumber = 104, fieldName = "IOIQualifier", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "ALL_OR_NONE"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "MARKET_ON_CLOSE"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "AT_THE_CLOSE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "VWAP"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "IN_TOUCH_WITH"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LIMIT"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MORE_BEHIND"},FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "AT_THE_OPEN"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "TAKING_A_POSITION"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "AT_THE_MARKET"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "READY_TO_TRADE"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "PORTFOLIO_SHOWN"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "THROUGH_THE_DAY"},FieldValueSpec {fieldValueEnum = "V", fieldValueDescription = "VERSUS"},FieldValueSpec {fieldValueEnum = "W", fieldValueDescription = "INDICATION"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "CROSSING_OPPORTUNITY"},FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "AT_THE_MIDPOINT"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "PRE_OPEN"}]}
newtype IOIQualifier = IOIQualifier {unIOIQualifier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IOIQualifier

instance IsField IOIQualifier where
  fieldTag Proxy = 104
  fieldIsData Proxy = False
  fieldToValue = toValue . unIOIQualifier
  fieldFromValue = fromValue >=> (prettyValidate . IOIQualifier)

-- FieldSpec {fieldNumber = 106, fieldName = "Issuer", fieldType = FieldTypeString, fieldValues = []}
newtype Issuer = Issuer {unIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Issuer

instance IsField Issuer where
  fieldTag Proxy = 106
  fieldIsData Proxy = False
  fieldToValue = toValue . unIssuer
  fieldFromValue = fromValue >=> (prettyValidate . Issuer)

-- FieldSpec {fieldNumber = 107, fieldName = "SecurityDesc", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityDesc = SecurityDesc {unSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityDesc

instance IsField SecurityDesc where
  fieldTag Proxy = 107
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . SecurityDesc)

-- FieldSpec {fieldNumber = 108, fieldName = "HeartBtInt", fieldType = FieldTypeInt, fieldValues = []}
newtype HeartBtInt = HeartBtInt {unHeartBtInt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HeartBtInt

instance IsField HeartBtInt where
  fieldTag Proxy = 108
  fieldIsData Proxy = False
  fieldToValue = toValue . unHeartBtInt
  fieldFromValue = fromValue >=> (prettyValidate . HeartBtInt)

-- FieldSpec {fieldNumber = 110, fieldName = "MinQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype MinQty = MinQty {unMinQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MinQty

instance IsField MinQty where
  fieldTag Proxy = 110
  fieldIsData Proxy = False
  fieldToValue = toValue . unMinQty
  fieldFromValue = fromValue >=> (prettyValidate . MinQty)

-- FieldSpec {fieldNumber = 111, fieldName = "MaxFloor", fieldType = FieldTypeQTY, fieldValues = []}
newtype MaxFloor = MaxFloor {unMaxFloor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaxFloor

instance IsField MaxFloor where
  fieldTag Proxy = 111
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaxFloor
  fieldFromValue = fromValue >=> (prettyValidate . MaxFloor)

-- FieldSpec {fieldNumber = 112, fieldName = "TestReqID", fieldType = FieldTypeString, fieldValues = []}
newtype TestReqID = TestReqID {unTestReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TestReqID

instance IsField TestReqID where
  fieldTag Proxy = 112
  fieldIsData Proxy = False
  fieldToValue = toValue . unTestReqID
  fieldFromValue = fromValue >=> (prettyValidate . TestReqID)

-- FieldSpec {fieldNumber = 113, fieldName = "ReportToExch", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype ReportToExch = ReportToExch {unReportToExch :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity ReportToExch

instance IsField ReportToExch where
  fieldTag Proxy = 113
  fieldIsData Proxy = False
  fieldToValue = toValue . unReportToExch
  fieldFromValue = fromValue >=> (prettyValidate . ReportToExch)

-- FieldSpec {fieldNumber = 114, fieldName = "LocateReqd", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype LocateReqd = LocateReqd {unLocateReqd :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity LocateReqd

instance IsField LocateReqd where
  fieldTag Proxy = 114
  fieldIsData Proxy = False
  fieldToValue = toValue . unLocateReqd
  fieldFromValue = fromValue >=> (prettyValidate . LocateReqd)

-- FieldSpec {fieldNumber = 115, fieldName = "OnBehalfOfCompID", fieldType = FieldTypeString, fieldValues = []}
newtype OnBehalfOfCompID = OnBehalfOfCompID {unOnBehalfOfCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OnBehalfOfCompID

instance IsField OnBehalfOfCompID where
  fieldTag Proxy = 115
  fieldIsData Proxy = False
  fieldToValue = toValue . unOnBehalfOfCompID
  fieldFromValue = fromValue >=> (prettyValidate . OnBehalfOfCompID)

-- FieldSpec {fieldNumber = 116, fieldName = "OnBehalfOfSubID", fieldType = FieldTypeString, fieldValues = []}
newtype OnBehalfOfSubID = OnBehalfOfSubID {unOnBehalfOfSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OnBehalfOfSubID

instance IsField OnBehalfOfSubID where
  fieldTag Proxy = 116
  fieldIsData Proxy = False
  fieldToValue = toValue . unOnBehalfOfSubID
  fieldFromValue = fromValue >=> (prettyValidate . OnBehalfOfSubID)

-- FieldSpec {fieldNumber = 117, fieldName = "QuoteID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteID = QuoteID {unQuoteID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteID

instance IsField QuoteID where
  fieldTag Proxy = 117
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteID)

-- FieldSpec {fieldNumber = 118, fieldName = "NetMoney", fieldType = FieldTypeAMT, fieldValues = []}
newtype NetMoney = NetMoney {unNetMoney :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetMoney

instance IsField NetMoney where
  fieldTag Proxy = 118
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetMoney
  fieldFromValue = fromValue >=> (prettyValidate . NetMoney)

-- FieldSpec {fieldNumber = 119, fieldName = "SettlCurrAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype SettlCurrAmt = SettlCurrAmt {unSettlCurrAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrAmt

instance IsField SettlCurrAmt where
  fieldTag Proxy = 119
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrAmt
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrAmt)

-- FieldSpec {fieldNumber = 120, fieldName = "SettlCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype SettlCurrency = SettlCurrency {unSettlCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrency

instance IsField SettlCurrency where
  fieldTag Proxy = 120
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrency
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrency)

-- FieldSpec {fieldNumber = 121, fieldName = "ForexReq", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype ForexReq = ForexReq {unForexReq :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity ForexReq

instance IsField ForexReq where
  fieldTag Proxy = 121
  fieldIsData Proxy = False
  fieldToValue = toValue . unForexReq
  fieldFromValue = fromValue >=> (prettyValidate . ForexReq)

-- FieldSpec {fieldNumber = 122, fieldName = "OrigSendingTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype OrigSendingTime = OrigSendingTime {unOrigSendingTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigSendingTime

instance IsField OrigSendingTime where
  fieldTag Proxy = 122
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigSendingTime
  fieldFromValue = fromValue >=> (prettyValidate . OrigSendingTime)

-- FieldSpec {fieldNumber = 123, fieldName = "GapFillFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype GapFillFlag = GapFillFlag {unGapFillFlag :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity GapFillFlag

instance IsField GapFillFlag where
  fieldTag Proxy = 123
  fieldIsData Proxy = False
  fieldToValue = toValue . unGapFillFlag
  fieldFromValue = fromValue >=> (prettyValidate . GapFillFlag)

-- FieldSpec {fieldNumber = 124, fieldName = "NoExecs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoExecs = NoExecs {unNoExecs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoExecs

instance IsField NoExecs where
  fieldTag Proxy = 124
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoExecs
  fieldFromValue = fromValue >=> (prettyValidate . NoExecs)

-- FieldSpec {fieldNumber = 126, fieldName = "ExpireTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype ExpireTime = ExpireTime {unExpireTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExpireTime

instance IsField ExpireTime where
  fieldTag Proxy = 126
  fieldIsData Proxy = False
  fieldToValue = toValue . unExpireTime
  fieldFromValue = fromValue >=> (prettyValidate . ExpireTime)

-- FieldSpec {fieldNumber = 127, fieldName = "DKReason", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "WRONG_SIDE"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "QUANTITY_EXCEEDS_ORDER"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NO_MATCHING_ORDER"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "PRICE_EXCEEDS_LIMIT"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "CALCULATION_DIFFERENCE"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "OTHER"}]}
newtype DKReason = DKReason {unDKReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DKReason

instance IsField DKReason where
  fieldTag Proxy = 127
  fieldIsData Proxy = False
  fieldToValue = toValue . unDKReason
  fieldFromValue = fromValue >=> (prettyValidate . DKReason)

-- FieldSpec {fieldNumber = 128, fieldName = "DeliverToCompID", fieldType = FieldTypeString, fieldValues = []}
newtype DeliverToCompID = DeliverToCompID {unDeliverToCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliverToCompID

instance IsField DeliverToCompID where
  fieldTag Proxy = 128
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliverToCompID
  fieldFromValue = fromValue >=> (prettyValidate . DeliverToCompID)

-- FieldSpec {fieldNumber = 129, fieldName = "DeliverToSubID", fieldType = FieldTypeString, fieldValues = []}
newtype DeliverToSubID = DeliverToSubID {unDeliverToSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliverToSubID

instance IsField DeliverToSubID where
  fieldTag Proxy = 129
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliverToSubID
  fieldFromValue = fromValue >=> (prettyValidate . DeliverToSubID)

-- FieldSpec {fieldNumber = 130, fieldName = "IOINaturalFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype IOINaturalFlag = IOINaturalFlag {unIOINaturalFlag :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity IOINaturalFlag

instance IsField IOINaturalFlag where
  fieldTag Proxy = 130
  fieldIsData Proxy = False
  fieldToValue = toValue . unIOINaturalFlag
  fieldFromValue = fromValue >=> (prettyValidate . IOINaturalFlag)

-- FieldSpec {fieldNumber = 131, fieldName = "QuoteReqID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteReqID = QuoteReqID {unQuoteReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteReqID

instance IsField QuoteReqID where
  fieldTag Proxy = 131
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteReqID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteReqID)

-- FieldSpec {fieldNumber = 132, fieldName = "BidPx", fieldType = FieldTypePrice, fieldValues = []}
newtype BidPx = BidPx {unBidPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidPx

instance IsField BidPx where
  fieldTag Proxy = 132
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidPx
  fieldFromValue = fromValue >=> (prettyValidate . BidPx)

-- FieldSpec {fieldNumber = 133, fieldName = "OfferPx", fieldType = FieldTypePrice, fieldValues = []}
newtype OfferPx = OfferPx {unOfferPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferPx

instance IsField OfferPx where
  fieldTag Proxy = 133
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferPx
  fieldFromValue = fromValue >=> (prettyValidate . OfferPx)

-- FieldSpec {fieldNumber = 134, fieldName = "BidSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype BidSize = BidSize {unBidSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidSize

instance IsField BidSize where
  fieldTag Proxy = 134
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidSize
  fieldFromValue = fromValue >=> (prettyValidate . BidSize)

-- FieldSpec {fieldNumber = 135, fieldName = "OfferSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype OfferSize = OfferSize {unOfferSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferSize

instance IsField OfferSize where
  fieldTag Proxy = 135
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferSize
  fieldFromValue = fromValue >=> (prettyValidate . OfferSize)

-- FieldSpec {fieldNumber = 136, fieldName = "NoMiscFees", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoMiscFees = NoMiscFees {unNoMiscFees :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoMiscFees

instance IsField NoMiscFees where
  fieldTag Proxy = 136
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoMiscFees
  fieldFromValue = fromValue >=> (prettyValidate . NoMiscFees)

-- FieldSpec {fieldNumber = 137, fieldName = "MiscFeeAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype MiscFeeAmt = MiscFeeAmt {unMiscFeeAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MiscFeeAmt

instance IsField MiscFeeAmt where
  fieldTag Proxy = 137
  fieldIsData Proxy = False
  fieldToValue = toValue . unMiscFeeAmt
  fieldFromValue = fromValue >=> (prettyValidate . MiscFeeAmt)

-- FieldSpec {fieldNumber = 138, fieldName = "MiscFeeCurr", fieldType = FieldTypeCurrency, fieldValues = []}
newtype MiscFeeCurr = MiscFeeCurr {unMiscFeeCurr :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MiscFeeCurr

instance IsField MiscFeeCurr where
  fieldTag Proxy = 138
  fieldIsData Proxy = False
  fieldToValue = toValue . unMiscFeeCurr
  fieldFromValue = fromValue >=> (prettyValidate . MiscFeeCurr)

-- FieldSpec {fieldNumber = 139, fieldName = "MiscFeeType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REGULATORY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TAX"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "LOCAL_COMMISSION"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "EXCHANGE_FEES"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "STAMP"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "LEVY"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "OTHER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "MARKUP"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CONSUMPTION_TAX"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "PER_TRANSACTION"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "CONVERSION"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "AGENT"}]}
newtype MiscFeeType = MiscFeeType {unMiscFeeType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MiscFeeType

instance IsField MiscFeeType where
  fieldTag Proxy = 139
  fieldIsData Proxy = False
  fieldToValue = toValue . unMiscFeeType
  fieldFromValue = fromValue >=> (prettyValidate . MiscFeeType)

-- FieldSpec {fieldNumber = 140, fieldName = "PrevClosePx", fieldType = FieldTypePrice, fieldValues = []}
newtype PrevClosePx = PrevClosePx {unPrevClosePx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PrevClosePx

instance IsField PrevClosePx where
  fieldTag Proxy = 140
  fieldIsData Proxy = False
  fieldToValue = toValue . unPrevClosePx
  fieldFromValue = fromValue >=> (prettyValidate . PrevClosePx)

-- FieldSpec {fieldNumber = 141, fieldName = "ResetSeqNumFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype ResetSeqNumFlag = ResetSeqNumFlag {unResetSeqNumFlag :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity ResetSeqNumFlag

instance IsField ResetSeqNumFlag where
  fieldTag Proxy = 141
  fieldIsData Proxy = False
  fieldToValue = toValue . unResetSeqNumFlag
  fieldFromValue = fromValue >=> (prettyValidate . ResetSeqNumFlag)

-- FieldSpec {fieldNumber = 142, fieldName = "SenderLocationID", fieldType = FieldTypeString, fieldValues = []}
newtype SenderLocationID = SenderLocationID {unSenderLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SenderLocationID

instance IsField SenderLocationID where
  fieldTag Proxy = 142
  fieldIsData Proxy = False
  fieldToValue = toValue . unSenderLocationID
  fieldFromValue = fromValue >=> (prettyValidate . SenderLocationID)

-- FieldSpec {fieldNumber = 143, fieldName = "TargetLocationID", fieldType = FieldTypeString, fieldValues = []}
newtype TargetLocationID = TargetLocationID {unTargetLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetLocationID

instance IsField TargetLocationID where
  fieldTag Proxy = 143
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetLocationID
  fieldFromValue = fromValue >=> (prettyValidate . TargetLocationID)

-- FieldSpec {fieldNumber = 144, fieldName = "OnBehalfOfLocationID", fieldType = FieldTypeString, fieldValues = []}
newtype OnBehalfOfLocationID = OnBehalfOfLocationID {unOnBehalfOfLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OnBehalfOfLocationID

instance IsField OnBehalfOfLocationID where
  fieldTag Proxy = 144
  fieldIsData Proxy = False
  fieldToValue = toValue . unOnBehalfOfLocationID
  fieldFromValue = fromValue >=> (prettyValidate . OnBehalfOfLocationID)

-- FieldSpec {fieldNumber = 145, fieldName = "DeliverToLocationID", fieldType = FieldTypeString, fieldValues = []}
newtype DeliverToLocationID = DeliverToLocationID {unDeliverToLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliverToLocationID

instance IsField DeliverToLocationID where
  fieldTag Proxy = 145
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliverToLocationID
  fieldFromValue = fromValue >=> (prettyValidate . DeliverToLocationID)

-- FieldSpec {fieldNumber = 146, fieldName = "NoRelatedSym", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoRelatedSym = NoRelatedSym {unNoRelatedSym :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoRelatedSym

instance IsField NoRelatedSym where
  fieldTag Proxy = 146
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoRelatedSym
  fieldFromValue = fromValue >=> (prettyValidate . NoRelatedSym)

-- FieldSpec {fieldNumber = 147, fieldName = "Subject", fieldType = FieldTypeString, fieldValues = []}
newtype Subject = Subject {unSubject :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Subject

instance IsField Subject where
  fieldTag Proxy = 147
  fieldIsData Proxy = False
  fieldToValue = toValue . unSubject
  fieldFromValue = fromValue >=> (prettyValidate . Subject)

-- FieldSpec {fieldNumber = 148, fieldName = "Headline", fieldType = FieldTypeString, fieldValues = []}
newtype Headline = Headline {unHeadline :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Headline

instance IsField Headline where
  fieldTag Proxy = 148
  fieldIsData Proxy = False
  fieldToValue = toValue . unHeadline
  fieldFromValue = fromValue >=> (prettyValidate . Headline)

-- FieldSpec {fieldNumber = 149, fieldName = "URLLink", fieldType = FieldTypeString, fieldValues = []}
newtype URLLink = URLLink {unURLLink :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity URLLink

instance IsField URLLink where
  fieldTag Proxy = 149
  fieldIsData Proxy = False
  fieldToValue = toValue . unURLLink
  fieldFromValue = fromValue >=> (prettyValidate . URLLink)

-- FieldSpec {fieldNumber = 150, fieldName = "ExecType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "DONE_FOR_DAY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCELED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REPLACED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PENDING_CANCEL"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STOPPED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "SUSPENDED"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "PENDING_NEW"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "CALCULATED"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EXPIRED"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "RESTATED"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "PENDING_REPLACE"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "TRADE"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "TRADE_CORRECT"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "TRADE_CANCEL"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "ORDER_STATUS"}]}
newtype ExecType = ExecType {unExecType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecType

instance IsField ExecType where
  fieldTag Proxy = 150
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecType
  fieldFromValue = fromValue >=> (prettyValidate . ExecType)

-- FieldSpec {fieldNumber = 151, fieldName = "LeavesQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LeavesQty = LeavesQty {unLeavesQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LeavesQty

instance IsField LeavesQty where
  fieldTag Proxy = 151
  fieldIsData Proxy = False
  fieldToValue = toValue . unLeavesQty
  fieldFromValue = fromValue >=> (prettyValidate . LeavesQty)

-- FieldSpec {fieldNumber = 152, fieldName = "CashOrderQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype CashOrderQty = CashOrderQty {unCashOrderQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashOrderQty

instance IsField CashOrderQty where
  fieldTag Proxy = 152
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashOrderQty
  fieldFromValue = fromValue >=> (prettyValidate . CashOrderQty)

-- FieldSpec {fieldNumber = 153, fieldName = "AllocAvgPx", fieldType = FieldTypePrice, fieldValues = []}
newtype AllocAvgPx = AllocAvgPx {unAllocAvgPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocAvgPx

instance IsField AllocAvgPx where
  fieldTag Proxy = 153
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocAvgPx
  fieldFromValue = fromValue >=> (prettyValidate . AllocAvgPx)

-- FieldSpec {fieldNumber = 154, fieldName = "AllocNetMoney", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllocNetMoney = AllocNetMoney {unAllocNetMoney :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocNetMoney

instance IsField AllocNetMoney where
  fieldTag Proxy = 154
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocNetMoney
  fieldFromValue = fromValue >=> (prettyValidate . AllocNetMoney)

-- FieldSpec {fieldNumber = 155, fieldName = "SettlCurrFxRate", fieldType = FieldTypeFloat, fieldValues = []}
newtype SettlCurrFxRate = SettlCurrFxRate {unSettlCurrFxRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrFxRate

instance IsField SettlCurrFxRate where
  fieldTag Proxy = 155
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrFxRate
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrFxRate)

-- FieldSpec {fieldNumber = 156, fieldName = "SettlCurrFxRateCalc", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MULTIPLY"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "DIVIDE"}]}
newtype SettlCurrFxRateCalc = SettlCurrFxRateCalc {unSettlCurrFxRateCalc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrFxRateCalc

instance IsField SettlCurrFxRateCalc where
  fieldTag Proxy = 156
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrFxRateCalc
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrFxRateCalc)

-- FieldSpec {fieldNumber = 157, fieldName = "NumDaysInterest", fieldType = FieldTypeInt, fieldValues = []}
newtype NumDaysInterest = NumDaysInterest {unNumDaysInterest :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NumDaysInterest

instance IsField NumDaysInterest where
  fieldTag Proxy = 157
  fieldIsData Proxy = False
  fieldToValue = toValue . unNumDaysInterest
  fieldFromValue = fromValue >=> (prettyValidate . NumDaysInterest)

-- FieldSpec {fieldNumber = 158, fieldName = "AccruedInterestRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype AccruedInterestRate = AccruedInterestRate {unAccruedInterestRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AccruedInterestRate

instance IsField AccruedInterestRate where
  fieldTag Proxy = 158
  fieldIsData Proxy = False
  fieldToValue = toValue . unAccruedInterestRate
  fieldFromValue = fromValue >=> (prettyValidate . AccruedInterestRate)

-- FieldSpec {fieldNumber = 159, fieldName = "AccruedInterestAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype AccruedInterestAmt = AccruedInterestAmt {unAccruedInterestAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AccruedInterestAmt

instance IsField AccruedInterestAmt where
  fieldTag Proxy = 159
  fieldIsData Proxy = False
  fieldToValue = toValue . unAccruedInterestAmt
  fieldFromValue = fromValue >=> (prettyValidate . AccruedInterestAmt)

-- FieldSpec {fieldNumber = 160, fieldName = "SettlInstMode", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STANDING_INSTRUCTIONS_PROVIDED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REQUEST_REJECT"}]}
newtype SettlInstMode = SettlInstMode {unSettlInstMode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstMode

instance IsField SettlInstMode where
  fieldTag Proxy = 160
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstMode
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstMode)

-- FieldSpec {fieldNumber = 161, fieldName = "AllocText", fieldType = FieldTypeString, fieldValues = []}
newtype AllocText = AllocText {unAllocText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocText

instance IsField AllocText where
  fieldTag Proxy = 161
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocText
  fieldFromValue = fromValue >=> (prettyValidate . AllocText)

-- FieldSpec {fieldNumber = 162, fieldName = "SettlInstID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlInstID = SettlInstID {unSettlInstID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstID

instance IsField SettlInstID where
  fieldTag Proxy = 162
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstID
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstID)

-- FieldSpec {fieldNumber = 163, fieldName = "SettlInstTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "RESTATE"}]}
newtype SettlInstTransType = SettlInstTransType {unSettlInstTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstTransType

instance IsField SettlInstTransType where
  fieldTag Proxy = 163
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstTransType
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstTransType)

-- FieldSpec {fieldNumber = 164, fieldName = "EmailThreadID", fieldType = FieldTypeString, fieldValues = []}
newtype EmailThreadID = EmailThreadID {unEmailThreadID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EmailThreadID

instance IsField EmailThreadID where
  fieldTag Proxy = 164
  fieldIsData Proxy = False
  fieldToValue = toValue . unEmailThreadID
  fieldFromValue = fromValue >=> (prettyValidate . EmailThreadID)

-- FieldSpec {fieldNumber = 165, fieldName = "SettlInstSource", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BROKER_CREDIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INSTITUTION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVESTOR"}]}
newtype SettlInstSource = SettlInstSource {unSettlInstSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstSource

instance IsField SettlInstSource where
  fieldTag Proxy = 165
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstSource
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstSource)

-- FieldSpec {fieldNumber = 167, fieldName = "SecurityType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "EUSUPRA", fieldValueDescription = "EURO_SUPRANATIONAL_COUPONS"},FieldValueSpec {fieldValueEnum = "FAC", fieldValueDescription = "FEDERAL_AGENCY_COUPON"},FieldValueSpec {fieldValueEnum = "FADN", fieldValueDescription = "FEDERAL_AGENCY_DISCOUNT_NOTE"},FieldValueSpec {fieldValueEnum = "PEF", fieldValueDescription = "PRIVATE_EXPORT_FUNDING"},FieldValueSpec {fieldValueEnum = "SUPRA", fieldValueDescription = "USD_SUPRANATIONAL_COUPONS"},FieldValueSpec {fieldValueEnum = "CORP", fieldValueDescription = "CORPORATE_BOND"},FieldValueSpec {fieldValueEnum = "CPP", fieldValueDescription = "CORPORATE_PRIVATE_PLACEMENT"},FieldValueSpec {fieldValueEnum = "CB", fieldValueDescription = "CONVERTIBLE_BOND"},FieldValueSpec {fieldValueEnum = "DUAL", fieldValueDescription = "DUAL_CURRENCY"},FieldValueSpec {fieldValueEnum = "EUCORP", fieldValueDescription = "EURO_CORPORATE_BOND"},FieldValueSpec {fieldValueEnum = "XLINKD", fieldValueDescription = "INDEXED_LINKED"},FieldValueSpec {fieldValueEnum = "STRUCT", fieldValueDescription = "STRUCTURED_NOTES"},FieldValueSpec {fieldValueEnum = "YANK", fieldValueDescription = "YANKEE_CORPORATE_BOND"},FieldValueSpec {fieldValueEnum = "FOR", fieldValueDescription = "FOREIGN_EXCHANGE_CONTRACT"},FieldValueSpec {fieldValueEnum = "CS", fieldValueDescription = "COMMON_STOCK"},FieldValueSpec {fieldValueEnum = "PS", fieldValueDescription = "PREFERRED_STOCK"},FieldValueSpec {fieldValueEnum = "BRADY", fieldValueDescription = "BRADY_BOND"},FieldValueSpec {fieldValueEnum = "EUSOV", fieldValueDescription = "EURO_SOVEREIGNS"},FieldValueSpec {fieldValueEnum = "TBOND", fieldValueDescription = "US_TREASURY_BOND"},FieldValueSpec {fieldValueEnum = "TINT", fieldValueDescription = "INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE"},FieldValueSpec {fieldValueEnum = "TIPS", fieldValueDescription = "TREASURY_INFLATION_PROTECTED_SECURITIES"},FieldValueSpec {fieldValueEnum = "TCAL", fieldValueDescription = "PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE"},FieldValueSpec {fieldValueEnum = "TPRN", fieldValueDescription = "PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE"},FieldValueSpec {fieldValueEnum = "UST", fieldValueDescription = "US_TREASURY_NOTE_OLD"},FieldValueSpec {fieldValueEnum = "USTB", fieldValueDescription = "US_TREASURY_BILL_OLD"},FieldValueSpec {fieldValueEnum = "TNOTE", fieldValueDescription = "US_TREASURY_NOTE"},FieldValueSpec {fieldValueEnum = "TBILL", fieldValueDescription = "US_TREASURY_BILL"},FieldValueSpec {fieldValueEnum = "REPO", fieldValueDescription = "REPURCHASE"},FieldValueSpec {fieldValueEnum = "FORWARD", fieldValueDescription = "FORWARD"},FieldValueSpec {fieldValueEnum = "BUYSELL", fieldValueDescription = "BUY_SELLBACK"},FieldValueSpec {fieldValueEnum = "SECLOAN", fieldValueDescription = "SECURITIES_LOAN"},FieldValueSpec {fieldValueEnum = "SECPLEDGE", fieldValueDescription = "SECURITIES_PLEDGE"},FieldValueSpec {fieldValueEnum = "TERM", fieldValueDescription = "TERM_LOAN"},FieldValueSpec {fieldValueEnum = "RVLV", fieldValueDescription = "REVOLVER_LOAN"},FieldValueSpec {fieldValueEnum = "RVLVTRM", fieldValueDescription = "REVOLVER"},FieldValueSpec {fieldValueEnum = "BRIDGE", fieldValueDescription = "BRIDGE_LOAN"},FieldValueSpec {fieldValueEnum = "LOFC", fieldValueDescription = "LETTER_OF_CREDIT"},FieldValueSpec {fieldValueEnum = "SWING", fieldValueDescription = "SWING_LINE_FACILITY"},FieldValueSpec {fieldValueEnum = "DINP", fieldValueDescription = "DEBTOR_IN_POSSESSION"},FieldValueSpec {fieldValueEnum = "DEFLTED", fieldValueDescription = "DEFAULTED"},FieldValueSpec {fieldValueEnum = "WITHDRN", fieldValueDescription = "WITHDRAWN"},FieldValueSpec {fieldValueEnum = "REPLACD", fieldValueDescription = "REPLACED"},FieldValueSpec {fieldValueEnum = "MATURED", fieldValueDescription = "MATURED"},FieldValueSpec {fieldValueEnum = "AMENDED", fieldValueDescription = "AMENDED"},FieldValueSpec {fieldValueEnum = "RETIRED", fieldValueDescription = "RETIRED"},FieldValueSpec {fieldValueEnum = "BA", fieldValueDescription = "BANKERS_ACCEPTANCE"},FieldValueSpec {fieldValueEnum = "BN", fieldValueDescription = "BANK_NOTES"},FieldValueSpec {fieldValueEnum = "BOX", fieldValueDescription = "BILL_OF_EXCHANGES"},FieldValueSpec {fieldValueEnum = "CD", fieldValueDescription = "CERTIFICATE_OF_DEPOSIT"},FieldValueSpec {fieldValueEnum = "CL", fieldValueDescription = "CALL_LOANS"},FieldValueSpec {fieldValueEnum = "CP", fieldValueDescription = "COMMERCIAL_PAPER"},FieldValueSpec {fieldValueEnum = "DN", fieldValueDescription = "DEPOSIT_NOTES"},FieldValueSpec {fieldValueEnum = "EUCD", fieldValueDescription = "EURO_CERTIFICATE_OF_DEPOSIT"},FieldValueSpec {fieldValueEnum = "EUCP", fieldValueDescription = "EURO_COMMERCIAL_PAPER"},FieldValueSpec {fieldValueEnum = "LQN", fieldValueDescription = "LIQUIDITY_NOTE"},FieldValueSpec {fieldValueEnum = "MTN", fieldValueDescription = "MEDIUM_TERM_NOTES"},FieldValueSpec {fieldValueEnum = "ONITE", fieldValueDescription = "OVERNIGHT"},FieldValueSpec {fieldValueEnum = "PN", fieldValueDescription = "PROMISSORY_NOTE"},FieldValueSpec {fieldValueEnum = "PZFJ", fieldValueDescription = "PLAZOS_FIJOS"},FieldValueSpec {fieldValueEnum = "STN", fieldValueDescription = "SHORT_TERM_LOAN_NOTE"},FieldValueSpec {fieldValueEnum = "TD", fieldValueDescription = "TIME_DEPOSIT"},FieldValueSpec {fieldValueEnum = "XCN", fieldValueDescription = "EXTENDED_COMM_NOTE"},FieldValueSpec {fieldValueEnum = "YCD", fieldValueDescription = "YANKEE_CERTIFICATE_OF_DEPOSIT"},FieldValueSpec {fieldValueEnum = "ABS", fieldValueDescription = "ASSET_BACKED_SECURITIES"},FieldValueSpec {fieldValueEnum = "CMBS", fieldValueDescription = "CORP"},FieldValueSpec {fieldValueEnum = "CMO", fieldValueDescription = "COLLATERALIZED_MORTGAGE_OBLIGATION"},FieldValueSpec {fieldValueEnum = "IET", fieldValueDescription = "IOETTE_MORTGAGE"},FieldValueSpec {fieldValueEnum = "MBS", fieldValueDescription = "MORTGAGE_BACKED_SECURITIES"},FieldValueSpec {fieldValueEnum = "MIO", fieldValueDescription = "MORTGAGE_INTEREST_ONLY"},FieldValueSpec {fieldValueEnum = "MPO", fieldValueDescription = "MORTGAGE_PRINCIPAL_ONLY"},FieldValueSpec {fieldValueEnum = "MPP", fieldValueDescription = "MORTGAGE_PRIVATE_PLACEMENT"},FieldValueSpec {fieldValueEnum = "MPT", fieldValueDescription = "MISCELLANEOUS_PASS_THROUGH"},FieldValueSpec {fieldValueEnum = "PFAND", fieldValueDescription = "PFANDBRIEFE"},FieldValueSpec {fieldValueEnum = "TBA", fieldValueDescription = "TO_BE_ANNOUNCED"},FieldValueSpec {fieldValueEnum = "AN", fieldValueDescription = "OTHER_ANTICIPATION_NOTES"},FieldValueSpec {fieldValueEnum = "COFO", fieldValueDescription = "CERTIFICATE_OF_OBLIGATION"},FieldValueSpec {fieldValueEnum = "COFP", fieldValueDescription = "CERTIFICATE_OF_PARTICIPATION"},FieldValueSpec {fieldValueEnum = "GO", fieldValueDescription = "GENERAL_OBLIGATION_BONDS"},FieldValueSpec {fieldValueEnum = "MT", fieldValueDescription = "MANDATORY_TENDER"},FieldValueSpec {fieldValueEnum = "RAN", fieldValueDescription = "REVENUE_ANTICIPATION_NOTE"},FieldValueSpec {fieldValueEnum = "REV", fieldValueDescription = "REVENUE_BONDS"},FieldValueSpec {fieldValueEnum = "SPCLA", fieldValueDescription = "SPECIAL_ASSESSMENT"},FieldValueSpec {fieldValueEnum = "SPCLO", fieldValueDescription = "SPECIAL_OBLIGATION"},FieldValueSpec {fieldValueEnum = "SPCLT", fieldValueDescription = "SPECIAL_TAX"},FieldValueSpec {fieldValueEnum = "TAN", fieldValueDescription = "TAX_ANTICIPATION_NOTE"},FieldValueSpec {fieldValueEnum = "TAXA", fieldValueDescription = "TAX_ALLOCATION"},FieldValueSpec {fieldValueEnum = "TECP", fieldValueDescription = "TAX_EXEMPT_COMMERCIAL_PAPER"},FieldValueSpec {fieldValueEnum = "TRAN", fieldValueDescription = "TAX_REVENUE_ANTICIPATION_NOTE"},FieldValueSpec {fieldValueEnum = "VRDN", fieldValueDescription = "VARIABLE_RATE_DEMAND_NOTE"},FieldValueSpec {fieldValueEnum = "WAR", fieldValueDescription = "WARRANT"},FieldValueSpec {fieldValueEnum = "MF", fieldValueDescription = "MUTUAL_FUND"},FieldValueSpec {fieldValueEnum = "MLEG", fieldValueDescription = "MULTILEG_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "NONE", fieldValueDescription = "NO_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "FUT", fieldValueDescription = "FUTURE"},FieldValueSpec {fieldValueEnum = "OPT", fieldValueDescription = "OPTION"}]}
newtype SecurityType = SecurityType {unSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityType

instance IsField SecurityType where
  fieldTag Proxy = 167
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . SecurityType)

-- FieldSpec {fieldNumber = 168, fieldName = "EffectiveTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype EffectiveTime = EffectiveTime {unEffectiveTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EffectiveTime

instance IsField EffectiveTime where
  fieldTag Proxy = 168
  fieldIsData Proxy = False
  fieldToValue = toValue . unEffectiveTime
  fieldFromValue = fromValue >=> (prettyValidate . EffectiveTime)

-- FieldSpec {fieldNumber = 169, fieldName = "StandInstDbType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "OTHER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DTCSID"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "THOMSON_ALERT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "A_GLOBAL_CUSTODIAN"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ACCOUNT_NET"}]}
newtype StandInstDbType = StandInstDbType {unStandInstDbType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StandInstDbType

instance IsField StandInstDbType where
  fieldTag Proxy = 169
  fieldIsData Proxy = False
  fieldToValue = toValue . unStandInstDbType
  fieldFromValue = fromValue >=> (prettyValidate . StandInstDbType)

-- FieldSpec {fieldNumber = 170, fieldName = "StandInstDbName", fieldType = FieldTypeString, fieldValues = []}
newtype StandInstDbName = StandInstDbName {unStandInstDbName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StandInstDbName

instance IsField StandInstDbName where
  fieldTag Proxy = 170
  fieldIsData Proxy = False
  fieldToValue = toValue . unStandInstDbName
  fieldFromValue = fromValue >=> (prettyValidate . StandInstDbName)

-- FieldSpec {fieldNumber = 171, fieldName = "StandInstDbID", fieldType = FieldTypeString, fieldValues = []}
newtype StandInstDbID = StandInstDbID {unStandInstDbID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StandInstDbID

instance IsField StandInstDbID where
  fieldTag Proxy = 171
  fieldIsData Proxy = False
  fieldToValue = toValue . unStandInstDbID
  fieldFromValue = fromValue >=> (prettyValidate . StandInstDbID)

-- FieldSpec {fieldNumber = 172, fieldName = "SettlDeliveryType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "VERSUS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FREE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TRI_PARTY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "HOLD_IN_CUSTODY"}]}
newtype SettlDeliveryType = SettlDeliveryType {unSettlDeliveryType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlDeliveryType

instance IsField SettlDeliveryType where
  fieldTag Proxy = 172
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlDeliveryType
  fieldFromValue = fromValue >=> (prettyValidate . SettlDeliveryType)

-- FieldSpec {fieldNumber = 188, fieldName = "BidSpotRate", fieldType = FieldTypePrice, fieldValues = []}
newtype BidSpotRate = BidSpotRate {unBidSpotRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidSpotRate

instance IsField BidSpotRate where
  fieldTag Proxy = 188
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidSpotRate
  fieldFromValue = fromValue >=> (prettyValidate . BidSpotRate)

-- FieldSpec {fieldNumber = 189, fieldName = "BidForwardPoints", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype BidForwardPoints = BidForwardPoints {unBidForwardPoints :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidForwardPoints

instance IsField BidForwardPoints where
  fieldTag Proxy = 189
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidForwardPoints
  fieldFromValue = fromValue >=> (prettyValidate . BidForwardPoints)

-- FieldSpec {fieldNumber = 190, fieldName = "OfferSpotRate", fieldType = FieldTypePrice, fieldValues = []}
newtype OfferSpotRate = OfferSpotRate {unOfferSpotRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferSpotRate

instance IsField OfferSpotRate where
  fieldTag Proxy = 190
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferSpotRate
  fieldFromValue = fromValue >=> (prettyValidate . OfferSpotRate)

-- FieldSpec {fieldNumber = 191, fieldName = "OfferForwardPoints", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype OfferForwardPoints = OfferForwardPoints {unOfferForwardPoints :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferForwardPoints

instance IsField OfferForwardPoints where
  fieldTag Proxy = 191
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferForwardPoints
  fieldFromValue = fromValue >=> (prettyValidate . OfferForwardPoints)

-- FieldSpec {fieldNumber = 192, fieldName = "OrderQty2", fieldType = FieldTypeQTY, fieldValues = []}
newtype OrderQty2 = OrderQty2 {unOrderQty2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderQty2

instance IsField OrderQty2 where
  fieldTag Proxy = 192
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderQty2
  fieldFromValue = fromValue >=> (prettyValidate . OrderQty2)

-- FieldSpec {fieldNumber = 193, fieldName = "SettlDate2", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype SettlDate2 = SettlDate2 {unSettlDate2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlDate2

instance IsField SettlDate2 where
  fieldTag Proxy = 193
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlDate2
  fieldFromValue = fromValue >=> (prettyValidate . SettlDate2)

-- FieldSpec {fieldNumber = 194, fieldName = "LastSpotRate", fieldType = FieldTypePrice, fieldValues = []}
newtype LastSpotRate = LastSpotRate {unLastSpotRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastSpotRate

instance IsField LastSpotRate where
  fieldTag Proxy = 194
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastSpotRate
  fieldFromValue = fromValue >=> (prettyValidate . LastSpotRate)

-- FieldSpec {fieldNumber = 195, fieldName = "LastForwardPoints", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype LastForwardPoints = LastForwardPoints {unLastForwardPoints :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastForwardPoints

instance IsField LastForwardPoints where
  fieldTag Proxy = 195
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastForwardPoints
  fieldFromValue = fromValue >=> (prettyValidate . LastForwardPoints)

-- FieldSpec {fieldNumber = 196, fieldName = "AllocLinkID", fieldType = FieldTypeString, fieldValues = []}
newtype AllocLinkID = AllocLinkID {unAllocLinkID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocLinkID

instance IsField AllocLinkID where
  fieldTag Proxy = 196
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocLinkID
  fieldFromValue = fromValue >=> (prettyValidate . AllocLinkID)

-- FieldSpec {fieldNumber = 197, fieldName = "AllocLinkType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FX_NETTING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FX_SWAP"}]}
newtype AllocLinkType = AllocLinkType {unAllocLinkType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocLinkType

instance IsField AllocLinkType where
  fieldTag Proxy = 197
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocLinkType
  fieldFromValue = fromValue >=> (prettyValidate . AllocLinkType)

-- FieldSpec {fieldNumber = 198, fieldName = "SecondaryOrderID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryOrderID = SecondaryOrderID {unSecondaryOrderID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryOrderID

instance IsField SecondaryOrderID where
  fieldTag Proxy = 198
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryOrderID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryOrderID)

-- FieldSpec {fieldNumber = 199, fieldName = "NoIOIQualifiers", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoIOIQualifiers = NoIOIQualifiers {unNoIOIQualifiers :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoIOIQualifiers

instance IsField NoIOIQualifiers where
  fieldTag Proxy = 199
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoIOIQualifiers
  fieldFromValue = fromValue >=> (prettyValidate . NoIOIQualifiers)

-- FieldSpec {fieldNumber = 200, fieldName = "MaturityMonthYear", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype MaturityMonthYear = MaturityMonthYear {unMaturityMonthYear :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaturityMonthYear

instance IsField MaturityMonthYear where
  fieldTag Proxy = 200
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaturityMonthYear
  fieldFromValue = fromValue >=> (prettyValidate . MaturityMonthYear)

-- FieldSpec {fieldNumber = 201, fieldName = "PutOrCall", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PUT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CALL"}]}
newtype PutOrCall = PutOrCall {unPutOrCall :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PutOrCall

instance IsField PutOrCall where
  fieldTag Proxy = 201
  fieldIsData Proxy = False
  fieldToValue = toValue . unPutOrCall
  fieldFromValue = fromValue >=> (prettyValidate . PutOrCall)

-- FieldSpec {fieldNumber = 202, fieldName = "StrikePrice", fieldType = FieldTypePrice, fieldValues = []}
newtype StrikePrice = StrikePrice {unStrikePrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StrikePrice

instance IsField StrikePrice where
  fieldTag Proxy = 202
  fieldIsData Proxy = False
  fieldToValue = toValue . unStrikePrice
  fieldFromValue = fromValue >=> (prettyValidate . StrikePrice)

-- FieldSpec {fieldNumber = 203, fieldName = "CoveredOrUncovered", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "COVERED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNCOVERED"}]}
newtype CoveredOrUncovered = CoveredOrUncovered {unCoveredOrUncovered :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CoveredOrUncovered

instance IsField CoveredOrUncovered where
  fieldTag Proxy = 203
  fieldIsData Proxy = False
  fieldToValue = toValue . unCoveredOrUncovered
  fieldFromValue = fromValue >=> (prettyValidate . CoveredOrUncovered)

-- FieldSpec {fieldNumber = 206, fieldName = "OptAttribute", fieldType = FieldTypeChar, fieldValues = []}
newtype OptAttribute = OptAttribute {unOptAttribute :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OptAttribute

instance IsField OptAttribute where
  fieldTag Proxy = 206
  fieldIsData Proxy = False
  fieldToValue = toValue . unOptAttribute
  fieldFromValue = fromValue >=> (prettyValidate . OptAttribute)

-- FieldSpec {fieldNumber = 207, fieldName = "SecurityExchange", fieldType = FieldTypeExchange, fieldValues = []}
newtype SecurityExchange = SecurityExchange {unSecurityExchange :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityExchange

instance IsField SecurityExchange where
  fieldTag Proxy = 207
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityExchange
  fieldFromValue = fromValue >=> (prettyValidate . SecurityExchange)

-- FieldSpec {fieldNumber = 208, fieldName = "NotifyBrokerOfCredit", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype NotifyBrokerOfCredit = NotifyBrokerOfCredit {unNotifyBrokerOfCredit :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity NotifyBrokerOfCredit

instance IsField NotifyBrokerOfCredit where
  fieldTag Proxy = 208
  fieldIsData Proxy = False
  fieldToValue = toValue . unNotifyBrokerOfCredit
  fieldFromValue = fromValue >=> (prettyValidate . NotifyBrokerOfCredit)

-- FieldSpec {fieldNumber = 209, fieldName = "AllocHandlInst", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MATCH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "FORWARD"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FORWARD_AND_MATCH"}]}
newtype AllocHandlInst = AllocHandlInst {unAllocHandlInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocHandlInst

instance IsField AllocHandlInst where
  fieldTag Proxy = 209
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocHandlInst
  fieldFromValue = fromValue >=> (prettyValidate . AllocHandlInst)

-- FieldSpec {fieldNumber = 210, fieldName = "MaxShow", fieldType = FieldTypeQTY, fieldValues = []}
newtype MaxShow = MaxShow {unMaxShow :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaxShow

instance IsField MaxShow where
  fieldTag Proxy = 210
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaxShow
  fieldFromValue = fromValue >=> (prettyValidate . MaxShow)

-- FieldSpec {fieldNumber = 211, fieldName = "PegOffsetValue", fieldType = FieldTypeFloat, fieldValues = []}
newtype PegOffsetValue = PegOffsetValue {unPegOffsetValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PegOffsetValue

instance IsField PegOffsetValue where
  fieldTag Proxy = 211
  fieldIsData Proxy = False
  fieldToValue = toValue . unPegOffsetValue
  fieldFromValue = fromValue >=> (prettyValidate . PegOffsetValue)

-- FieldSpec {fieldNumber = 212, fieldName = "XmlDataLen", fieldType = FieldTypeLength, fieldValues = []}
newtype XmlDataLen = XmlDataLen {unXmlDataLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity XmlDataLen

instance IsField XmlDataLen where
  fieldTag Proxy = 212
  fieldIsData Proxy = False
  fieldToValue = toValue . unXmlDataLen
  fieldFromValue = fromValue >=> (prettyValidate . XmlDataLen)

-- FieldSpec {fieldNumber = 213, fieldName = "XmlData", fieldType = FieldTypeData, fieldValues = []}
newtype XmlData = XmlData {unXmlData :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity XmlData

instance IsField XmlData where
  fieldTag Proxy = 213
  fieldIsData Proxy = True
  fieldToValue = toValue . unXmlData
  fieldFromValue = fromValue >=> (prettyValidate . XmlData)

-- FieldSpec {fieldNumber = 214, fieldName = "SettlInstRefID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlInstRefID = SettlInstRefID {unSettlInstRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstRefID

instance IsField SettlInstRefID where
  fieldTag Proxy = 214
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstRefID
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstRefID)

-- FieldSpec {fieldNumber = 215, fieldName = "NoRoutingIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoRoutingIDs = NoRoutingIDs {unNoRoutingIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoRoutingIDs

instance IsField NoRoutingIDs where
  fieldTag Proxy = 215
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoRoutingIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoRoutingIDs)

-- FieldSpec {fieldNumber = 216, fieldName = "RoutingType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TARGET_FIRM"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TARGET_LIST"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "BLOCK_FIRM"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "BLOCK_LIST"}]}
newtype RoutingType = RoutingType {unRoutingType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RoutingType

instance IsField RoutingType where
  fieldTag Proxy = 216
  fieldIsData Proxy = False
  fieldToValue = toValue . unRoutingType
  fieldFromValue = fromValue >=> (prettyValidate . RoutingType)

-- FieldSpec {fieldNumber = 217, fieldName = "RoutingID", fieldType = FieldTypeString, fieldValues = []}
newtype RoutingID = RoutingID {unRoutingID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RoutingID

instance IsField RoutingID where
  fieldTag Proxy = 217
  fieldIsData Proxy = False
  fieldToValue = toValue . unRoutingID
  fieldFromValue = fromValue >=> (prettyValidate . RoutingID)

-- FieldSpec {fieldNumber = 218, fieldName = "Spread", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype Spread = Spread {unSpread :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Spread

instance IsField Spread where
  fieldTag Proxy = 218
  fieldIsData Proxy = False
  fieldToValue = toValue . unSpread
  fieldFromValue = fromValue >=> (prettyValidate . Spread)

-- FieldSpec {fieldNumber = 220, fieldName = "BenchmarkCurveCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype BenchmarkCurveCurrency = BenchmarkCurveCurrency {unBenchmarkCurveCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkCurveCurrency

instance IsField BenchmarkCurveCurrency where
  fieldTag Proxy = 220
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkCurveCurrency
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkCurveCurrency)

-- FieldSpec {fieldNumber = 221, fieldName = "BenchmarkCurveName", fieldType = FieldTypeString, fieldValues = []}
newtype BenchmarkCurveName = BenchmarkCurveName {unBenchmarkCurveName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkCurveName

instance IsField BenchmarkCurveName where
  fieldTag Proxy = 221
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkCurveName
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkCurveName)

-- FieldSpec {fieldNumber = 222, fieldName = "BenchmarkCurvePoint", fieldType = FieldTypeString, fieldValues = []}
newtype BenchmarkCurvePoint = BenchmarkCurvePoint {unBenchmarkCurvePoint :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkCurvePoint

instance IsField BenchmarkCurvePoint where
  fieldTag Proxy = 222
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkCurvePoint
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkCurvePoint)

-- FieldSpec {fieldNumber = 223, fieldName = "CouponRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype CouponRate = CouponRate {unCouponRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CouponRate

instance IsField CouponRate where
  fieldTag Proxy = 223
  fieldIsData Proxy = False
  fieldToValue = toValue . unCouponRate
  fieldFromValue = fromValue >=> (prettyValidate . CouponRate)

-- FieldSpec {fieldNumber = 224, fieldName = "CouponPaymentDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype CouponPaymentDate = CouponPaymentDate {unCouponPaymentDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CouponPaymentDate

instance IsField CouponPaymentDate where
  fieldTag Proxy = 224
  fieldIsData Proxy = False
  fieldToValue = toValue . unCouponPaymentDate
  fieldFromValue = fromValue >=> (prettyValidate . CouponPaymentDate)

-- FieldSpec {fieldNumber = 225, fieldName = "IssueDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype IssueDate = IssueDate {unIssueDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IssueDate

instance IsField IssueDate where
  fieldTag Proxy = 225
  fieldIsData Proxy = False
  fieldToValue = toValue . unIssueDate
  fieldFromValue = fromValue >=> (prettyValidate . IssueDate)

-- FieldSpec {fieldNumber = 226, fieldName = "RepurchaseTerm", fieldType = FieldTypeInt, fieldValues = []}
newtype RepurchaseTerm = RepurchaseTerm {unRepurchaseTerm :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RepurchaseTerm

instance IsField RepurchaseTerm where
  fieldTag Proxy = 226
  fieldIsData Proxy = False
  fieldToValue = toValue . unRepurchaseTerm
  fieldFromValue = fromValue >=> (prettyValidate . RepurchaseTerm)

-- FieldSpec {fieldNumber = 227, fieldName = "RepurchaseRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype RepurchaseRate = RepurchaseRate {unRepurchaseRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RepurchaseRate

instance IsField RepurchaseRate where
  fieldTag Proxy = 227
  fieldIsData Proxy = False
  fieldToValue = toValue . unRepurchaseRate
  fieldFromValue = fromValue >=> (prettyValidate . RepurchaseRate)

-- FieldSpec {fieldNumber = 228, fieldName = "Factor", fieldType = FieldTypeFloat, fieldValues = []}
newtype Factor = Factor {unFactor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Factor

instance IsField Factor where
  fieldTag Proxy = 228
  fieldIsData Proxy = False
  fieldToValue = toValue . unFactor
  fieldFromValue = fromValue >=> (prettyValidate . Factor)

-- FieldSpec {fieldNumber = 229, fieldName = "TradeOriginationDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype TradeOriginationDate = TradeOriginationDate {unTradeOriginationDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeOriginationDate

instance IsField TradeOriginationDate where
  fieldTag Proxy = 229
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeOriginationDate
  fieldFromValue = fromValue >=> (prettyValidate . TradeOriginationDate)

-- FieldSpec {fieldNumber = 230, fieldName = "ExDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype ExDate = ExDate {unExDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExDate

instance IsField ExDate where
  fieldTag Proxy = 230
  fieldIsData Proxy = False
  fieldToValue = toValue . unExDate
  fieldFromValue = fromValue >=> (prettyValidate . ExDate)

-- FieldSpec {fieldNumber = 231, fieldName = "ContractMultiplier", fieldType = FieldTypeFloat, fieldValues = []}
newtype ContractMultiplier = ContractMultiplier {unContractMultiplier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContractMultiplier

instance IsField ContractMultiplier where
  fieldTag Proxy = 231
  fieldIsData Proxy = False
  fieldToValue = toValue . unContractMultiplier
  fieldFromValue = fromValue >=> (prettyValidate . ContractMultiplier)

-- FieldSpec {fieldNumber = 232, fieldName = "NoStipulations", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoStipulations = NoStipulations {unNoStipulations :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoStipulations

instance IsField NoStipulations where
  fieldTag Proxy = 232
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoStipulations
  fieldFromValue = fromValue >=> (prettyValidate . NoStipulations)

-- FieldSpec {fieldNumber = 233, fieldName = "StipulationType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "AMT", fieldValueDescription = "ALTERNATIVE_MINIMUM_TAX"},FieldValueSpec {fieldValueEnum = "AUTOREINV", fieldValueDescription = "AUTO_REINVESTMENT"},FieldValueSpec {fieldValueEnum = "BANKQUAL", fieldValueDescription = "BANK_QUALIFIED"},FieldValueSpec {fieldValueEnum = "BGNCON", fieldValueDescription = "BARGAIN_CONDITIONS"},FieldValueSpec {fieldValueEnum = "COUPON", fieldValueDescription = "COUPON_RANGE"},FieldValueSpec {fieldValueEnum = "CURRENCY", fieldValueDescription = "ISO_CURRENCY_CODE"},FieldValueSpec {fieldValueEnum = "CUSTOMDATE", fieldValueDescription = "CUSTOM_START"},FieldValueSpec {fieldValueEnum = "GEOG", fieldValueDescription = "GEOGRAPHICS"},FieldValueSpec {fieldValueEnum = "HAIRCUT", fieldValueDescription = "VALUATION_DISCOUNT"},FieldValueSpec {fieldValueEnum = "INSURED", fieldValueDescription = "INSURED"},FieldValueSpec {fieldValueEnum = "ISSUE", fieldValueDescription = "ISSUE_DATE"},FieldValueSpec {fieldValueEnum = "ISSUER", fieldValueDescription = "ISSUER"},FieldValueSpec {fieldValueEnum = "ISSUESIZE", fieldValueDescription = "ISSUE_SIZE_RANGE"},FieldValueSpec {fieldValueEnum = "LOOKBACK", fieldValueDescription = "LOOKBACK_DAYS"},FieldValueSpec {fieldValueEnum = "LOT", fieldValueDescription = "EXPLICIT_LOT_IDENTIFIER"},FieldValueSpec {fieldValueEnum = "LOTVAR", fieldValueDescription = "LOT_VARIANCE"},FieldValueSpec {fieldValueEnum = "MAT", fieldValueDescription = "MATURITY_YEAR_AND_MONTH"},FieldValueSpec {fieldValueEnum = "MATURITY", fieldValueDescription = "MATURITY_RANGE"},FieldValueSpec {fieldValueEnum = "MAXSUBS", fieldValueDescription = "MAXIMUM_SUBSTITUTIONS"},FieldValueSpec {fieldValueEnum = "MINQTY", fieldValueDescription = "MINIMUM_QUANTITY"},FieldValueSpec {fieldValueEnum = "MININCR", fieldValueDescription = "MINIMUM_INCREMENT"},FieldValueSpec {fieldValueEnum = "MINDNOM", fieldValueDescription = "MINIMUM_DENOMINATION"},FieldValueSpec {fieldValueEnum = "PAYFREQ", fieldValueDescription = "PAYMENT_FREQUENCY"},FieldValueSpec {fieldValueEnum = "PIECES", fieldValueDescription = "NUMBER_OF_PIECES"},FieldValueSpec {fieldValueEnum = "PMAX", fieldValueDescription = "POOLS_MAXIMUM"},FieldValueSpec {fieldValueEnum = "PPM", fieldValueDescription = "POOLS_PER_MILLION"},FieldValueSpec {fieldValueEnum = "PPL", fieldValueDescription = "POOLS_PER_LOT"},FieldValueSpec {fieldValueEnum = "PPT", fieldValueDescription = "POOLS_PER_TRADE"},FieldValueSpec {fieldValueEnum = "PRICE", fieldValueDescription = "PRICE_RANGE"},FieldValueSpec {fieldValueEnum = "PRICEFREQ", fieldValueDescription = "PRICING_FREQUENCY"},FieldValueSpec {fieldValueEnum = "PROD", fieldValueDescription = "PRODUCTION_YEAR"},FieldValueSpec {fieldValueEnum = "PROTECT", fieldValueDescription = "CALL_PROTECTION"},FieldValueSpec {fieldValueEnum = "PURPOSE", fieldValueDescription = "PURPOSE"},FieldValueSpec {fieldValueEnum = "PXSOURCE", fieldValueDescription = "BENCHMARK_PRICE_SOURCE"},FieldValueSpec {fieldValueEnum = "RATING", fieldValueDescription = "RATING_SOURCE_AND_RANGE"},FieldValueSpec {fieldValueEnum = "REDEMPTION", fieldValueDescription = "TYPE_OF_REDEMPTION"},FieldValueSpec {fieldValueEnum = "RESTRICTED", fieldValueDescription = "RESTRICTED"},FieldValueSpec {fieldValueEnum = "SECTOR", fieldValueDescription = "MARKET_SECTOR"},FieldValueSpec {fieldValueEnum = "SECTYPE", fieldValueDescription = "SECURITY_TYPE_INCLUDED_OR_EXCLUDED"},FieldValueSpec {fieldValueEnum = "STRUCT", fieldValueDescription = "STRUCTURE"},FieldValueSpec {fieldValueEnum = "SUBSFREQ", fieldValueDescription = "SUBSTITUTIONS_FREQUENCY"},FieldValueSpec {fieldValueEnum = "SUBSLEFT", fieldValueDescription = "SUBSTITUTIONS_LEFT"},FieldValueSpec {fieldValueEnum = "TEXT", fieldValueDescription = "FREEFORM_TEXT"},FieldValueSpec {fieldValueEnum = "TRDVAR", fieldValueDescription = "TRADE_VARIANCE"},FieldValueSpec {fieldValueEnum = "WAC", fieldValueDescription = "WEIGHTED_AVERAGE_COUPON"},FieldValueSpec {fieldValueEnum = "WAL", fieldValueDescription = "WEIGHTED_AVERAGE_LIFE_COUPON"},FieldValueSpec {fieldValueEnum = "WALA", fieldValueDescription = "WEIGHTED_AVERAGE_LOAN_AGE"},FieldValueSpec {fieldValueEnum = "WAM", fieldValueDescription = "WEIGHTED_AVERAGE_MATURITY"},FieldValueSpec {fieldValueEnum = "WHOLE", fieldValueDescription = "WHOLE_POOL"},FieldValueSpec {fieldValueEnum = "YIELD", fieldValueDescription = "YIELD_RANGE"}]}
newtype StipulationType = StipulationType {unStipulationType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StipulationType

instance IsField StipulationType where
  fieldTag Proxy = 233
  fieldIsData Proxy = False
  fieldToValue = toValue . unStipulationType
  fieldFromValue = fromValue >=> (prettyValidate . StipulationType)

-- FieldSpec {fieldNumber = 234, fieldName = "StipulationValue", fieldType = FieldTypeString, fieldValues = []}
newtype StipulationValue = StipulationValue {unStipulationValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StipulationValue

instance IsField StipulationValue where
  fieldTag Proxy = 234
  fieldIsData Proxy = False
  fieldToValue = toValue . unStipulationValue
  fieldFromValue = fromValue >=> (prettyValidate . StipulationValue)

-- FieldSpec {fieldNumber = 235, fieldName = "YieldType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "AFTERTAX", fieldValueDescription = "AFTER_TAX_YIELD"},FieldValueSpec {fieldValueEnum = "ANNUAL", fieldValueDescription = "ANNUAL_YIELD"},FieldValueSpec {fieldValueEnum = "ATISSUE", fieldValueDescription = "YIELD_AT_ISSUE"},FieldValueSpec {fieldValueEnum = "AVGMATURITY", fieldValueDescription = "YIELD_TO_AVERAGE_MATURITY"},FieldValueSpec {fieldValueEnum = "BOOK", fieldValueDescription = "BOOK_YIELD"},FieldValueSpec {fieldValueEnum = "CALL", fieldValueDescription = "YIELD_TO_NEXT_CALL"},FieldValueSpec {fieldValueEnum = "CHANGE", fieldValueDescription = "YIELD_CHANGE_SINCE_CLOSE"},FieldValueSpec {fieldValueEnum = "CLOSE", fieldValueDescription = "CLOSING_YIELD"},FieldValueSpec {fieldValueEnum = "COMPOUND", fieldValueDescription = "COMPOUND_YIELD"},FieldValueSpec {fieldValueEnum = "CURRENT", fieldValueDescription = "CURRENT_YIELD"},FieldValueSpec {fieldValueEnum = "GROSS", fieldValueDescription = "TRUE_GROSS_YIELD"},FieldValueSpec {fieldValueEnum = "GOVTEQUIV", fieldValueDescription = "GVNT_EQUIVALENT_YIELD"},FieldValueSpec {fieldValueEnum = "INFLATION", fieldValueDescription = "YIELD_WITH_INFLATION_ASSUMPTION"},FieldValueSpec {fieldValueEnum = "INVERSEFLOATER", fieldValueDescription = "INVERSE_FLOATER_BOND_YIELD"},FieldValueSpec {fieldValueEnum = "LASTCLOSE", fieldValueDescription = "MOST_RECENT_CLOSING_YIELD"},FieldValueSpec {fieldValueEnum = "LASTMONTH", fieldValueDescription = "CLOSING_YIELD_MOST_RECENT_MONTH"},FieldValueSpec {fieldValueEnum = "LASTQUARTER", fieldValueDescription = "CLOSING_YIELD_MOST_RECENT_QUARTER"},FieldValueSpec {fieldValueEnum = "LASTYEAR", fieldValueDescription = "CLOSING_YIELD_MOST_RECENT_YEAR"},FieldValueSpec {fieldValueEnum = "LONGAVGLIFE", fieldValueDescription = "YIELD_TO_LONGEST_AVERAGE_LIFE"},FieldValueSpec {fieldValueEnum = "MARK", fieldValueDescription = "MARK_TO_MARKET_YIELD"},FieldValueSpec {fieldValueEnum = "MATURITY", fieldValueDescription = "YIELD_TO_MATURITY"},FieldValueSpec {fieldValueEnum = "NEXTREFUND", fieldValueDescription = "YIELD_TO_NEXT_REFUND"},FieldValueSpec {fieldValueEnum = "OPENAVG", fieldValueDescription = "OPEN_AVERAGE_YIELD"},FieldValueSpec {fieldValueEnum = "PUT", fieldValueDescription = "YIELD_TO_NEXT_PUT"},FieldValueSpec {fieldValueEnum = "PREVCLOSE", fieldValueDescription = "PREVIOUS_CLOSE_YIELD"},FieldValueSpec {fieldValueEnum = "PROCEEDS", fieldValueDescription = "PROCEEDS_YIELD"},FieldValueSpec {fieldValueEnum = "SEMIANNUAL", fieldValueDescription = "SEMI_ANNUAL_YIELD"},FieldValueSpec {fieldValueEnum = "SHORTAVGLIFE", fieldValueDescription = "YIELD_TO_SHORTEST_AVERAGE_LIFE"},FieldValueSpec {fieldValueEnum = "SIMPLE", fieldValueDescription = "SIMPLE_YIELD"},FieldValueSpec {fieldValueEnum = "TAXEQUIV", fieldValueDescription = "TAX_EQUIVALENT_YIELD"},FieldValueSpec {fieldValueEnum = "TENDER", fieldValueDescription = "YIELD_TO_TENDER_DATE"},FieldValueSpec {fieldValueEnum = "TRUE", fieldValueDescription = "TRUE_YIELD"},FieldValueSpec {fieldValueEnum = "VALUE1/32", fieldValueDescription = "YIELD_VALUE_OF132"},FieldValueSpec {fieldValueEnum = "WORST", fieldValueDescription = "YIELD_TO_WORST"}]}
newtype YieldType = YieldType {unYieldType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity YieldType

instance IsField YieldType where
  fieldTag Proxy = 235
  fieldIsData Proxy = False
  fieldToValue = toValue . unYieldType
  fieldFromValue = fromValue >=> (prettyValidate . YieldType)

-- FieldSpec {fieldNumber = 236, fieldName = "Yield", fieldType = FieldTypePercentage, fieldValues = []}
newtype Yield = Yield {unYield :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Yield

instance IsField Yield where
  fieldTag Proxy = 236
  fieldIsData Proxy = False
  fieldToValue = toValue . unYield
  fieldFromValue = fromValue >=> (prettyValidate . Yield)

-- FieldSpec {fieldNumber = 237, fieldName = "TotalTakedown", fieldType = FieldTypeAMT, fieldValues = []}
newtype TotalTakedown = TotalTakedown {unTotalTakedown :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalTakedown

instance IsField TotalTakedown where
  fieldTag Proxy = 237
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalTakedown
  fieldFromValue = fromValue >=> (prettyValidate . TotalTakedown)

-- FieldSpec {fieldNumber = 238, fieldName = "Concession", fieldType = FieldTypeAMT, fieldValues = []}
newtype Concession = Concession {unConcession :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Concession

instance IsField Concession where
  fieldTag Proxy = 238
  fieldIsData Proxy = False
  fieldToValue = toValue . unConcession
  fieldFromValue = fromValue >=> (prettyValidate . Concession)

-- FieldSpec {fieldNumber = 239, fieldName = "RepoCollateralSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype RepoCollateralSecurityType = RepoCollateralSecurityType {unRepoCollateralSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RepoCollateralSecurityType

instance IsField RepoCollateralSecurityType where
  fieldTag Proxy = 239
  fieldIsData Proxy = False
  fieldToValue = toValue . unRepoCollateralSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . RepoCollateralSecurityType)

-- FieldSpec {fieldNumber = 240, fieldName = "RedemptionDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype RedemptionDate = RedemptionDate {unRedemptionDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RedemptionDate

instance IsField RedemptionDate where
  fieldTag Proxy = 240
  fieldIsData Proxy = False
  fieldToValue = toValue . unRedemptionDate
  fieldFromValue = fromValue >=> (prettyValidate . RedemptionDate)

-- FieldSpec {fieldNumber = 241, fieldName = "UnderlyingCouponPaymentDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype UnderlyingCouponPaymentDate = UnderlyingCouponPaymentDate {unUnderlyingCouponPaymentDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCouponPaymentDate

instance IsField UnderlyingCouponPaymentDate where
  fieldTag Proxy = 241
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCouponPaymentDate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCouponPaymentDate)

-- FieldSpec {fieldNumber = 242, fieldName = "UnderlyingIssueDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype UnderlyingIssueDate = UnderlyingIssueDate {unUnderlyingIssueDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingIssueDate

instance IsField UnderlyingIssueDate where
  fieldTag Proxy = 242
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingIssueDate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingIssueDate)

-- FieldSpec {fieldNumber = 243, fieldName = "UnderlyingRepoCollateralSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingRepoCollateralSecurityType = UnderlyingRepoCollateralSecurityType {unUnderlyingRepoCollateralSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingRepoCollateralSecurityType

instance IsField UnderlyingRepoCollateralSecurityType where
  fieldTag Proxy = 243
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingRepoCollateralSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingRepoCollateralSecurityType)

-- FieldSpec {fieldNumber = 244, fieldName = "UnderlyingRepurchaseTerm", fieldType = FieldTypeInt, fieldValues = []}
newtype UnderlyingRepurchaseTerm = UnderlyingRepurchaseTerm {unUnderlyingRepurchaseTerm :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingRepurchaseTerm

instance IsField UnderlyingRepurchaseTerm where
  fieldTag Proxy = 244
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingRepurchaseTerm
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingRepurchaseTerm)

-- FieldSpec {fieldNumber = 245, fieldName = "UnderlyingRepurchaseRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype UnderlyingRepurchaseRate = UnderlyingRepurchaseRate {unUnderlyingRepurchaseRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingRepurchaseRate

instance IsField UnderlyingRepurchaseRate where
  fieldTag Proxy = 245
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingRepurchaseRate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingRepurchaseRate)

-- FieldSpec {fieldNumber = 246, fieldName = "UnderlyingFactor", fieldType = FieldTypeFloat, fieldValues = []}
newtype UnderlyingFactor = UnderlyingFactor {unUnderlyingFactor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingFactor

instance IsField UnderlyingFactor where
  fieldTag Proxy = 246
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingFactor
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingFactor)

-- FieldSpec {fieldNumber = 247, fieldName = "UnderlyingRedemptionDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype UnderlyingRedemptionDate = UnderlyingRedemptionDate {unUnderlyingRedemptionDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingRedemptionDate

instance IsField UnderlyingRedemptionDate where
  fieldTag Proxy = 247
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingRedemptionDate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingRedemptionDate)

-- FieldSpec {fieldNumber = 248, fieldName = "LegCouponPaymentDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegCouponPaymentDate = LegCouponPaymentDate {unLegCouponPaymentDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCouponPaymentDate

instance IsField LegCouponPaymentDate where
  fieldTag Proxy = 248
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCouponPaymentDate
  fieldFromValue = fromValue >=> (prettyValidate . LegCouponPaymentDate)

-- FieldSpec {fieldNumber = 249, fieldName = "LegIssueDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegIssueDate = LegIssueDate {unLegIssueDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegIssueDate

instance IsField LegIssueDate where
  fieldTag Proxy = 249
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegIssueDate
  fieldFromValue = fromValue >=> (prettyValidate . LegIssueDate)

-- FieldSpec {fieldNumber = 250, fieldName = "LegRepoCollateralSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype LegRepoCollateralSecurityType = LegRepoCollateralSecurityType {unLegRepoCollateralSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRepoCollateralSecurityType

instance IsField LegRepoCollateralSecurityType where
  fieldTag Proxy = 250
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRepoCollateralSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . LegRepoCollateralSecurityType)

-- FieldSpec {fieldNumber = 251, fieldName = "LegRepurchaseTerm", fieldType = FieldTypeInt, fieldValues = []}
newtype LegRepurchaseTerm = LegRepurchaseTerm {unLegRepurchaseTerm :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRepurchaseTerm

instance IsField LegRepurchaseTerm where
  fieldTag Proxy = 251
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRepurchaseTerm
  fieldFromValue = fromValue >=> (prettyValidate . LegRepurchaseTerm)

-- FieldSpec {fieldNumber = 252, fieldName = "LegRepurchaseRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype LegRepurchaseRate = LegRepurchaseRate {unLegRepurchaseRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRepurchaseRate

instance IsField LegRepurchaseRate where
  fieldTag Proxy = 252
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRepurchaseRate
  fieldFromValue = fromValue >=> (prettyValidate . LegRepurchaseRate)

-- FieldSpec {fieldNumber = 253, fieldName = "LegFactor", fieldType = FieldTypeFloat, fieldValues = []}
newtype LegFactor = LegFactor {unLegFactor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegFactor

instance IsField LegFactor where
  fieldTag Proxy = 253
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegFactor
  fieldFromValue = fromValue >=> (prettyValidate . LegFactor)

-- FieldSpec {fieldNumber = 254, fieldName = "LegRedemptionDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegRedemptionDate = LegRedemptionDate {unLegRedemptionDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRedemptionDate

instance IsField LegRedemptionDate where
  fieldTag Proxy = 254
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRedemptionDate
  fieldFromValue = fromValue >=> (prettyValidate . LegRedemptionDate)

-- FieldSpec {fieldNumber = 255, fieldName = "CreditRating", fieldType = FieldTypeString, fieldValues = []}
newtype CreditRating = CreditRating {unCreditRating :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CreditRating

instance IsField CreditRating where
  fieldTag Proxy = 255
  fieldIsData Proxy = False
  fieldToValue = toValue . unCreditRating
  fieldFromValue = fromValue >=> (prettyValidate . CreditRating)

-- FieldSpec {fieldNumber = 256, fieldName = "UnderlyingCreditRating", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingCreditRating = UnderlyingCreditRating {unUnderlyingCreditRating :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCreditRating

instance IsField UnderlyingCreditRating where
  fieldTag Proxy = 256
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCreditRating
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCreditRating)

-- FieldSpec {fieldNumber = 257, fieldName = "LegCreditRating", fieldType = FieldTypeString, fieldValues = []}
newtype LegCreditRating = LegCreditRating {unLegCreditRating :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCreditRating

instance IsField LegCreditRating where
  fieldTag Proxy = 257
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCreditRating
  fieldFromValue = fromValue >=> (prettyValidate . LegCreditRating)

-- FieldSpec {fieldNumber = 258, fieldName = "TradedFlatSwitch", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype TradedFlatSwitch = TradedFlatSwitch {unTradedFlatSwitch :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity TradedFlatSwitch

instance IsField TradedFlatSwitch where
  fieldTag Proxy = 258
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradedFlatSwitch
  fieldFromValue = fromValue >=> (prettyValidate . TradedFlatSwitch)

-- FieldSpec {fieldNumber = 259, fieldName = "BasisFeatureDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype BasisFeatureDate = BasisFeatureDate {unBasisFeatureDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BasisFeatureDate

instance IsField BasisFeatureDate where
  fieldTag Proxy = 259
  fieldIsData Proxy = False
  fieldToValue = toValue . unBasisFeatureDate
  fieldFromValue = fromValue >=> (prettyValidate . BasisFeatureDate)

-- FieldSpec {fieldNumber = 260, fieldName = "BasisFeaturePrice", fieldType = FieldTypePrice, fieldValues = []}
newtype BasisFeaturePrice = BasisFeaturePrice {unBasisFeaturePrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BasisFeaturePrice

instance IsField BasisFeaturePrice where
  fieldTag Proxy = 260
  fieldIsData Proxy = False
  fieldToValue = toValue . unBasisFeaturePrice
  fieldFromValue = fromValue >=> (prettyValidate . BasisFeaturePrice)

-- FieldSpec {fieldNumber = 262, fieldName = "MDReqID", fieldType = FieldTypeString, fieldValues = []}
newtype MDReqID = MDReqID {unMDReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDReqID

instance IsField MDReqID where
  fieldTag Proxy = 262
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDReqID
  fieldFromValue = fromValue >=> (prettyValidate . MDReqID)

-- FieldSpec {fieldNumber = 263, fieldName = "SubscriptionRequestType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SNAPSHOT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SNAPSHOT_AND_UPDATES"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DISABLE_PREVIOUS_SNAPSHOT"}]}
newtype SubscriptionRequestType = SubscriptionRequestType {unSubscriptionRequestType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SubscriptionRequestType

instance IsField SubscriptionRequestType where
  fieldTag Proxy = 263
  fieldIsData Proxy = False
  fieldToValue = toValue . unSubscriptionRequestType
  fieldFromValue = fromValue >=> (prettyValidate . SubscriptionRequestType)

-- FieldSpec {fieldNumber = 264, fieldName = "MarketDepth", fieldType = FieldTypeInt, fieldValues = []}
newtype MarketDepth = MarketDepth {unMarketDepth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MarketDepth

instance IsField MarketDepth where
  fieldTag Proxy = 264
  fieldIsData Proxy = False
  fieldToValue = toValue . unMarketDepth
  fieldFromValue = fromValue >=> (prettyValidate . MarketDepth)

-- FieldSpec {fieldNumber = 265, fieldName = "MDUpdateType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FULL_REFRESH"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INCREMENTAL_REFRESH"}]}
newtype MDUpdateType = MDUpdateType {unMDUpdateType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDUpdateType

instance IsField MDUpdateType where
  fieldTag Proxy = 265
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDUpdateType
  fieldFromValue = fromValue >=> (prettyValidate . MDUpdateType)

-- FieldSpec {fieldNumber = 266, fieldName = "AggregatedBook", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype AggregatedBook = AggregatedBook {unAggregatedBook :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity AggregatedBook

instance IsField AggregatedBook where
  fieldTag Proxy = 266
  fieldIsData Proxy = False
  fieldToValue = toValue . unAggregatedBook
  fieldFromValue = fromValue >=> (prettyValidate . AggregatedBook)

-- FieldSpec {fieldNumber = 267, fieldName = "NoMDEntryTypes", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoMDEntryTypes = NoMDEntryTypes {unNoMDEntryTypes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoMDEntryTypes

instance IsField NoMDEntryTypes where
  fieldTag Proxy = 267
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoMDEntryTypes
  fieldFromValue = fromValue >=> (prettyValidate . NoMDEntryTypes)

-- FieldSpec {fieldNumber = 268, fieldName = "NoMDEntries", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoMDEntries = NoMDEntries {unNoMDEntries :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoMDEntries

instance IsField NoMDEntries where
  fieldTag Proxy = 268
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoMDEntries
  fieldFromValue = fromValue >=> (prettyValidate . NoMDEntries)

-- FieldSpec {fieldNumber = 269, fieldName = "MDEntryType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "BID"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "OFFER"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TRADE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INDEX_VALUE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OPENING_PRICE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CLOSING_PRICE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "SETTLEMENT_PRICE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "TRADING_SESSION_HIGH_PRICE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TRADING_SESSION_LOW_PRICE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "TRADING_SESSION_VWAP_PRICE"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "IMBALANCE"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "TRADE_VOLUME"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "OPEN_INTEREST"}]}
newtype MDEntryType = MDEntryType {unMDEntryType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryType

instance IsField MDEntryType where
  fieldTag Proxy = 269
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryType
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryType)

-- FieldSpec {fieldNumber = 270, fieldName = "MDEntryPx", fieldType = FieldTypePrice, fieldValues = []}
newtype MDEntryPx = MDEntryPx {unMDEntryPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryPx

instance IsField MDEntryPx where
  fieldTag Proxy = 270
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryPx
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryPx)

-- FieldSpec {fieldNumber = 271, fieldName = "MDEntrySize", fieldType = FieldTypeQTY, fieldValues = []}
newtype MDEntrySize = MDEntrySize {unMDEntrySize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntrySize

instance IsField MDEntrySize where
  fieldTag Proxy = 271
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntrySize
  fieldFromValue = fromValue >=> (prettyValidate . MDEntrySize)

-- FieldSpec {fieldNumber = 272, fieldName = "MDEntryDate", fieldType = FieldTypeUTCDateOnly, fieldValues = []}
newtype MDEntryDate = MDEntryDate {unMDEntryDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryDate

instance IsField MDEntryDate where
  fieldTag Proxy = 272
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryDate
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryDate)

-- FieldSpec {fieldNumber = 273, fieldName = "MDEntryTime", fieldType = FieldTypeUTCTimeOnly, fieldValues = []}
newtype MDEntryTime = MDEntryTime {unMDEntryTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryTime

instance IsField MDEntryTime where
  fieldTag Proxy = 273
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryTime
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryTime)

-- FieldSpec {fieldNumber = 274, fieldName = "TickDirection", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PLUS_TICK"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ZERO_PLUS_TICK"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MINUS_TICK"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ZERO_MINUS_TICK"}]}
newtype TickDirection = TickDirection {unTickDirection :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TickDirection

instance IsField TickDirection where
  fieldTag Proxy = 274
  fieldIsData Proxy = False
  fieldToValue = toValue . unTickDirection
  fieldFromValue = fromValue >=> (prettyValidate . TickDirection)

-- FieldSpec {fieldNumber = 275, fieldName = "MDMkt", fieldType = FieldTypeExchange, fieldValues = []}
newtype MDMkt = MDMkt {unMDMkt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDMkt

instance IsField MDMkt where
  fieldTag Proxy = 275
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDMkt
  fieldFromValue = fromValue >=> (prettyValidate . MDMkt)

-- FieldSpec {fieldNumber = 276, fieldName = "QuoteCondition", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "OPEN"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "CLOSED"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EXCHANGE_BEST"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "CONSOLIDATED_BEST"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "LOCKED"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "CROSSED"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "DEPTH"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "FAST_TRADING"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "NON_FIRM"}]}
newtype QuoteCondition = QuoteCondition {unQuoteCondition :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteCondition

instance IsField QuoteCondition where
  fieldTag Proxy = 276
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteCondition
  fieldFromValue = fromValue >=> (prettyValidate . QuoteCondition)

-- FieldSpec {fieldNumber = 277, fieldName = "TradeCondition", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "CASH"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "AVERAGE_PRICE_TRADE"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CASH_TRADE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NEXT_DAY"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "OPENING"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "INTRADAY_TRADE_DETAIL"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "RULE127_TRADE"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "RULE155_TRADE"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "SOLD_LAST"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "NEXT_DAY_TRADE"},FieldValueSpec {fieldValueEnum = "K", fieldValueDescription = "OPENED"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "SELLER"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "SOLD"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "STOPPED_STOCK"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "IMBALANCE_MORE_BUYERS"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "IMBALANCE_MORE_SELLERS"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "OPENING_PRICE"}]}
newtype TradeCondition = TradeCondition {unTradeCondition :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeCondition

instance IsField TradeCondition where
  fieldTag Proxy = 277
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeCondition
  fieldFromValue = fromValue >=> (prettyValidate . TradeCondition)

-- FieldSpec {fieldNumber = 278, fieldName = "MDEntryID", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntryID = MDEntryID {unMDEntryID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryID

instance IsField MDEntryID where
  fieldTag Proxy = 278
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryID
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryID)

-- FieldSpec {fieldNumber = 279, fieldName = "MDUpdateAction", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CHANGE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DELETE"}]}
newtype MDUpdateAction = MDUpdateAction {unMDUpdateAction :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDUpdateAction

instance IsField MDUpdateAction where
  fieldTag Proxy = 279
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDUpdateAction
  fieldFromValue = fromValue >=> (prettyValidate . MDUpdateAction)

-- FieldSpec {fieldNumber = 280, fieldName = "MDEntryRefID", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntryRefID = MDEntryRefID {unMDEntryRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryRefID

instance IsField MDEntryRefID where
  fieldTag Proxy = 280
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryRefID
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryRefID)

-- FieldSpec {fieldNumber = 281, fieldName = "MDReqRejReason", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DUPLICATE_MD_REQ_ID"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INSUFFICIENT_BANDWIDTH"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INSUFFICIENT_PERMISSIONS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "UNSUPPORTED_SUBSCRIPTION_REQUEST_TYPE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "UNSUPPORTED_MARKET_DEPTH"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "UNSUPPORTED_MD_UPDATE_TYPE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "UNSUPPORTED_AGGREGATED_BOOK"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "UNSUPPORTED_MD_ENTRY_TYPE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "UNSUPPORTED_TRADING_SESSION_ID"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "UNSUPPORTED_SCOPE"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "UNSUPPORTED_OPEN_CLOSE_SETTLE_FLAG"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "UNSUPPORTED_MD_IMPLICIT_DELETE"}]}
newtype MDReqRejReason = MDReqRejReason {unMDReqRejReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDReqRejReason

instance IsField MDReqRejReason where
  fieldTag Proxy = 281
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDReqRejReason
  fieldFromValue = fromValue >=> (prettyValidate . MDReqRejReason)

-- FieldSpec {fieldNumber = 282, fieldName = "MDEntryOriginator", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntryOriginator = MDEntryOriginator {unMDEntryOriginator :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryOriginator

instance IsField MDEntryOriginator where
  fieldTag Proxy = 282
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryOriginator
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryOriginator)

-- FieldSpec {fieldNumber = 283, fieldName = "LocationID", fieldType = FieldTypeString, fieldValues = []}
newtype LocationID = LocationID {unLocationID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LocationID

instance IsField LocationID where
  fieldTag Proxy = 283
  fieldIsData Proxy = False
  fieldToValue = toValue . unLocationID
  fieldFromValue = fromValue >=> (prettyValidate . LocationID)

-- FieldSpec {fieldNumber = 284, fieldName = "DeskID", fieldType = FieldTypeString, fieldValues = []}
newtype DeskID = DeskID {unDeskID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeskID

instance IsField DeskID where
  fieldTag Proxy = 284
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeskID
  fieldFromValue = fromValue >=> (prettyValidate . DeskID)

-- FieldSpec {fieldNumber = 285, fieldName = "DeleteReason", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "CANCELLATION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ERROR"}]}
newtype DeleteReason = DeleteReason {unDeleteReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeleteReason

instance IsField DeleteReason where
  fieldTag Proxy = 285
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeleteReason
  fieldFromValue = fromValue >=> (prettyValidate . DeleteReason)

-- FieldSpec {fieldNumber = 286, fieldName = "OpenCloseSettlFlag", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "DAILY_OPEN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SESSION_OPEN"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DELIVERY_SETTLEMENT_ENTRY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EXPECTED_ENTRY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ENTRY_FROM_PREVIOUS_BUSINESS_DAY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "THEORETICAL_PRICE_VALUE"}]}
newtype OpenCloseSettlFlag = OpenCloseSettlFlag {unOpenCloseSettlFlag :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OpenCloseSettlFlag

instance IsField OpenCloseSettlFlag where
  fieldTag Proxy = 286
  fieldIsData Proxy = False
  fieldToValue = toValue . unOpenCloseSettlFlag
  fieldFromValue = fromValue >=> (prettyValidate . OpenCloseSettlFlag)

-- FieldSpec {fieldNumber = 287, fieldName = "SellerDays", fieldType = FieldTypeInt, fieldValues = []}
newtype SellerDays = SellerDays {unSellerDays :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SellerDays

instance IsField SellerDays where
  fieldTag Proxy = 287
  fieldIsData Proxy = False
  fieldToValue = toValue . unSellerDays
  fieldFromValue = fromValue >=> (prettyValidate . SellerDays)

-- FieldSpec {fieldNumber = 288, fieldName = "MDEntryBuyer", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntryBuyer = MDEntryBuyer {unMDEntryBuyer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryBuyer

instance IsField MDEntryBuyer where
  fieldTag Proxy = 288
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryBuyer
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryBuyer)

-- FieldSpec {fieldNumber = 289, fieldName = "MDEntrySeller", fieldType = FieldTypeString, fieldValues = []}
newtype MDEntrySeller = MDEntrySeller {unMDEntrySeller :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntrySeller

instance IsField MDEntrySeller where
  fieldTag Proxy = 289
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntrySeller
  fieldFromValue = fromValue >=> (prettyValidate . MDEntrySeller)

-- FieldSpec {fieldNumber = 290, fieldName = "MDEntryPositionNo", fieldType = FieldTypeInt, fieldValues = []}
newtype MDEntryPositionNo = MDEntryPositionNo {unMDEntryPositionNo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MDEntryPositionNo

instance IsField MDEntryPositionNo where
  fieldTag Proxy = 290
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDEntryPositionNo
  fieldFromValue = fromValue >=> (prettyValidate . MDEntryPositionNo)

-- FieldSpec {fieldNumber = 291, fieldName = "FinancialStatus", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BANKRUPT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PENDING_DELISTING"}]}
newtype FinancialStatus = FinancialStatus {unFinancialStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity FinancialStatus

instance IsField FinancialStatus where
  fieldTag Proxy = 291
  fieldIsData Proxy = False
  fieldToValue = toValue . unFinancialStatus
  fieldFromValue = fromValue >=> (prettyValidate . FinancialStatus)

-- FieldSpec {fieldNumber = 292, fieldName = "CorporateAction", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "EX_DIVIDEND"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "EX_DISTRIBUTION"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EX_RIGHTS"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "EX_INTEREST"}]}
newtype CorporateAction = CorporateAction {unCorporateAction :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CorporateAction

instance IsField CorporateAction where
  fieldTag Proxy = 292
  fieldIsData Proxy = False
  fieldToValue = toValue . unCorporateAction
  fieldFromValue = fromValue >=> (prettyValidate . CorporateAction)

-- FieldSpec {fieldNumber = 293, fieldName = "DefBidSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype DefBidSize = DefBidSize {unDefBidSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DefBidSize

instance IsField DefBidSize where
  fieldTag Proxy = 293
  fieldIsData Proxy = False
  fieldToValue = toValue . unDefBidSize
  fieldFromValue = fromValue >=> (prettyValidate . DefBidSize)

-- FieldSpec {fieldNumber = 294, fieldName = "DefOfferSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype DefOfferSize = DefOfferSize {unDefOfferSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DefOfferSize

instance IsField DefOfferSize where
  fieldTag Proxy = 294
  fieldIsData Proxy = False
  fieldToValue = toValue . unDefOfferSize
  fieldFromValue = fromValue >=> (prettyValidate . DefOfferSize)

-- FieldSpec {fieldNumber = 295, fieldName = "NoQuoteEntries", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoQuoteEntries = NoQuoteEntries {unNoQuoteEntries :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoQuoteEntries

instance IsField NoQuoteEntries where
  fieldTag Proxy = 295
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoQuoteEntries
  fieldFromValue = fromValue >=> (prettyValidate . NoQuoteEntries)

-- FieldSpec {fieldNumber = 296, fieldName = "NoQuoteSets", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoQuoteSets = NoQuoteSets {unNoQuoteSets :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoQuoteSets

instance IsField NoQuoteSets where
  fieldTag Proxy = 296
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoQuoteSets
  fieldFromValue = fromValue >=> (prettyValidate . NoQuoteSets)

-- FieldSpec {fieldNumber = 297, fieldName = "QuoteStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL_FOR_SYMBOL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCELED_FOR_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCELED_FOR_UNDERLYING"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCELED_ALL"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "REMOVED_FROM_MARKET"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "EXPIRED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "QUERY"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "QUOTE_NOT_FOUND"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "PENDING"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "PASS"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "LOCKED_MARKET_WARNING"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "CROSS_MARKET_WARNING"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "CANCELED_DUE_TO_LOCK_MARKET"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "CANCELED_DUE_TO_CROSS_MARKET"}]}
newtype QuoteStatus = QuoteStatus {unQuoteStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteStatus

instance IsField QuoteStatus where
  fieldTag Proxy = 297
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteStatus
  fieldFromValue = fromValue >=> (prettyValidate . QuoteStatus)

-- FieldSpec {fieldNumber = 298, fieldName = "QuoteCancelType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL_FOR_ONE_OR_MORE_SECURITIES"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL_FOR_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCEL_FOR_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCEL_ALL_QUOTES"}]}
newtype QuoteCancelType = QuoteCancelType {unQuoteCancelType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteCancelType

instance IsField QuoteCancelType where
  fieldTag Proxy = 298
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteCancelType
  fieldFromValue = fromValue >=> (prettyValidate . QuoteCancelType)

-- FieldSpec {fieldNumber = 299, fieldName = "QuoteEntryID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteEntryID = QuoteEntryID {unQuoteEntryID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteEntryID

instance IsField QuoteEntryID where
  fieldTag Proxy = 299
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteEntryID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteEntryID)

-- FieldSpec {fieldNumber = 300, fieldName = "QuoteRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXCHANGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "QUOTE_REQUEST_EXCEEDS_LIMIT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "TOO_LATE_TO_ENTER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "UNKNOWN_QUOTE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "DUPLICATE_QUOTE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "INVALID_BID"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "INVALID_PRICE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "NOT_AUTHORIZED_TO_QUOTE_SECURITY"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype QuoteRejectReason = QuoteRejectReason {unQuoteRejectReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRejectReason

instance IsField QuoteRejectReason where
  fieldTag Proxy = 300
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteRejectReason
  fieldFromValue = fromValue >=> (prettyValidate . QuoteRejectReason)

-- FieldSpec {fieldNumber = 301, fieldName = "QuoteResponseLevel", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NO_ACKNOWLEDGEMENT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACKNOWLEDGE_EACH_QUOTE_MESSAGE"}]}
newtype QuoteResponseLevel = QuoteResponseLevel {unQuoteResponseLevel :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteResponseLevel

instance IsField QuoteResponseLevel where
  fieldTag Proxy = 301
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteResponseLevel
  fieldFromValue = fromValue >=> (prettyValidate . QuoteResponseLevel)

-- FieldSpec {fieldNumber = 302, fieldName = "QuoteSetID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteSetID = QuoteSetID {unQuoteSetID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteSetID

instance IsField QuoteSetID where
  fieldTag Proxy = 302
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteSetID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteSetID)

-- FieldSpec {fieldNumber = 303, fieldName = "QuoteRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MANUAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "AUTOMATIC"}]}
newtype QuoteRequestType = QuoteRequestType {unQuoteRequestType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestType

instance IsField QuoteRequestType where
  fieldTag Proxy = 303
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteRequestType
  fieldFromValue = fromValue >=> (prettyValidate . QuoteRequestType)

-- FieldSpec {fieldNumber = 304, fieldName = "TotNoQuoteEntries", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoQuoteEntries = TotNoQuoteEntries {unTotNoQuoteEntries :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoQuoteEntries

instance IsField TotNoQuoteEntries where
  fieldTag Proxy = 304
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoQuoteEntries
  fieldFromValue = fromValue >=> (prettyValidate . TotNoQuoteEntries)

-- FieldSpec {fieldNumber = 305, fieldName = "UnderlyingSecurityIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityIDSource = UnderlyingSecurityIDSource {unUnderlyingSecurityIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityIDSource

instance IsField UnderlyingSecurityIDSource where
  fieldTag Proxy = 305
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityIDSource
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityIDSource)

-- FieldSpec {fieldNumber = 306, fieldName = "UnderlyingIssuer", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingIssuer = UnderlyingIssuer {unUnderlyingIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingIssuer

instance IsField UnderlyingIssuer where
  fieldTag Proxy = 306
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingIssuer
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingIssuer)

-- FieldSpec {fieldNumber = 307, fieldName = "UnderlyingSecurityDesc", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityDesc = UnderlyingSecurityDesc {unUnderlyingSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityDesc

instance IsField UnderlyingSecurityDesc where
  fieldTag Proxy = 307
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityDesc)

-- FieldSpec {fieldNumber = 308, fieldName = "UnderlyingSecurityExchange", fieldType = FieldTypeExchange, fieldValues = []}
newtype UnderlyingSecurityExchange = UnderlyingSecurityExchange {unUnderlyingSecurityExchange :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityExchange

instance IsField UnderlyingSecurityExchange where
  fieldTag Proxy = 308
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityExchange
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityExchange)

-- FieldSpec {fieldNumber = 309, fieldName = "UnderlyingSecurityID", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityID = UnderlyingSecurityID {unUnderlyingSecurityID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityID

instance IsField UnderlyingSecurityID where
  fieldTag Proxy = 309
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityID
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityID)

-- FieldSpec {fieldNumber = 310, fieldName = "UnderlyingSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityType = UnderlyingSecurityType {unUnderlyingSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityType

instance IsField UnderlyingSecurityType where
  fieldTag Proxy = 310
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityType)

-- FieldSpec {fieldNumber = 311, fieldName = "UnderlyingSymbol", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSymbol = UnderlyingSymbol {unUnderlyingSymbol :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSymbol

instance IsField UnderlyingSymbol where
  fieldTag Proxy = 311
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSymbol
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSymbol)

-- FieldSpec {fieldNumber = 312, fieldName = "UnderlyingSymbolSfx", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSymbolSfx = UnderlyingSymbolSfx {unUnderlyingSymbolSfx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSymbolSfx

instance IsField UnderlyingSymbolSfx where
  fieldTag Proxy = 312
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSymbolSfx
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSymbolSfx)

-- FieldSpec {fieldNumber = 313, fieldName = "UnderlyingMaturityMonthYear", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype UnderlyingMaturityMonthYear = UnderlyingMaturityMonthYear {unUnderlyingMaturityMonthYear :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingMaturityMonthYear

instance IsField UnderlyingMaturityMonthYear where
  fieldTag Proxy = 313
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingMaturityMonthYear
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingMaturityMonthYear)

-- FieldSpec {fieldNumber = 315, fieldName = "UnderlyingPutOrCall", fieldType = FieldTypeInt, fieldValues = []}
newtype UnderlyingPutOrCall = UnderlyingPutOrCall {unUnderlyingPutOrCall :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingPutOrCall

instance IsField UnderlyingPutOrCall where
  fieldTag Proxy = 315
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingPutOrCall
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingPutOrCall)

-- FieldSpec {fieldNumber = 316, fieldName = "UnderlyingStrikePrice", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingStrikePrice = UnderlyingStrikePrice {unUnderlyingStrikePrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStrikePrice

instance IsField UnderlyingStrikePrice where
  fieldTag Proxy = 316
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStrikePrice
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStrikePrice)

-- FieldSpec {fieldNumber = 317, fieldName = "UnderlyingOptAttribute", fieldType = FieldTypeChar, fieldValues = []}
newtype UnderlyingOptAttribute = UnderlyingOptAttribute {unUnderlyingOptAttribute :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingOptAttribute

instance IsField UnderlyingOptAttribute where
  fieldTag Proxy = 317
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingOptAttribute
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingOptAttribute)

-- FieldSpec {fieldNumber = 318, fieldName = "UnderlyingCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype UnderlyingCurrency = UnderlyingCurrency {unUnderlyingCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCurrency

instance IsField UnderlyingCurrency where
  fieldTag Proxy = 318
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCurrency
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCurrency)

-- FieldSpec {fieldNumber = 320, fieldName = "SecurityReqID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityReqID = SecurityReqID {unSecurityReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityReqID

instance IsField SecurityReqID where
  fieldTag Proxy = 320
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityReqID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityReqID)

-- FieldSpec {fieldNumber = 321, fieldName = "SecurityRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REQUEST_SECURITY_IDENTITY_FOR_SPECIFICATIONS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REQUEST_LIST_SECURITY_TYPES"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REQUEST_LIST_SECURITIES"}]}
newtype SecurityRequestType = SecurityRequestType {unSecurityRequestType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityRequestType

instance IsField SecurityRequestType where
  fieldTag Proxy = 321
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityRequestType
  fieldFromValue = fromValue >=> (prettyValidate . SecurityRequestType)

-- FieldSpec {fieldNumber = 322, fieldName = "SecurityResponseID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityResponseID = SecurityResponseID {unSecurityResponseID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityResponseID

instance IsField SecurityResponseID where
  fieldTag Proxy = 322
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityResponseID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityResponseID)

-- FieldSpec {fieldNumber = 323, fieldName = "SecurityResponseType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPT_AS_IS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCEPT_WITH_REVISIONS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REJECT_SECURITY_PROPOSAL"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CANNOT_MATCH_SELECTION_CRITERIA"}]}
newtype SecurityResponseType = SecurityResponseType {unSecurityResponseType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityResponseType

instance IsField SecurityResponseType where
  fieldTag Proxy = 323
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityResponseType
  fieldFromValue = fromValue >=> (prettyValidate . SecurityResponseType)

-- FieldSpec {fieldNumber = 324, fieldName = "SecurityStatusReqID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityStatusReqID = SecurityStatusReqID {unSecurityStatusReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityStatusReqID

instance IsField SecurityStatusReqID where
  fieldTag Proxy = 324
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityStatusReqID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityStatusReqID)

-- FieldSpec {fieldNumber = 325, fieldName = "UnsolicitedIndicator", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype UnsolicitedIndicator = UnsolicitedIndicator {unUnsolicitedIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity UnsolicitedIndicator

instance IsField UnsolicitedIndicator where
  fieldTag Proxy = 325
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnsolicitedIndicator
  fieldFromValue = fromValue >=> (prettyValidate . UnsolicitedIndicator)

-- FieldSpec {fieldNumber = 326, fieldName = "SecurityTradingStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "OPENING_DELAY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TRADING_HALT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "RESUME"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NO_OPEN"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PRICE_INDICATION"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "TRADING_RANGE_INDICATION"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "MARKET_IMBALANCE_BUY"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "MARKET_IMBALANCE_SELL"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "MARKET_ON_CLOSE_IMBALANCE_BUY"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "MARKET_ON_CLOSE_IMBALANCE_SELL"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "NO_MARKET_IMBALANCE"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "NO_MARKET_ON_CLOSE_IMBALANCE"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "ITS_PRE_OPENING"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "NEW_PRICE_INDICATION"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "TRADE_DISSEMINATION_TIME"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "READY_TO_TRADE"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "NOT_AVAILABLE_FOR_TRADING"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "NOT_TRADED_ON_THIS_MARKET"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "UNKNOWN_OR_INVALID"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "PRE_OPEN"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "OPENING_ROTATION"},FieldValueSpec {fieldValueEnum = "23", fieldValueDescription = "FAST_MARKET"}]}
newtype SecurityTradingStatus = SecurityTradingStatus {unSecurityTradingStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityTradingStatus

instance IsField SecurityTradingStatus where
  fieldTag Proxy = 326
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityTradingStatus
  fieldFromValue = fromValue >=> (prettyValidate . SecurityTradingStatus)

-- FieldSpec {fieldNumber = 327, fieldName = "HaltReasonChar", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "ORDER_IMBALANCE"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "EQUIPMENT_CHANGEOVER"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "NEWS_PENDING"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NEWS_DISSEMINATION"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "ORDER_INFLUX"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "ADDITIONAL_INFORMATION"}]}
newtype HaltReasonChar = HaltReasonChar {unHaltReasonChar :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HaltReasonChar

instance IsField HaltReasonChar where
  fieldTag Proxy = 327
  fieldIsData Proxy = False
  fieldToValue = toValue . unHaltReasonChar
  fieldFromValue = fromValue >=> (prettyValidate . HaltReasonChar)

-- FieldSpec {fieldNumber = 328, fieldName = "InViewOfCommon", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype InViewOfCommon = InViewOfCommon {unInViewOfCommon :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity InViewOfCommon

instance IsField InViewOfCommon where
  fieldTag Proxy = 328
  fieldIsData Proxy = False
  fieldToValue = toValue . unInViewOfCommon
  fieldFromValue = fromValue >=> (prettyValidate . InViewOfCommon)

-- FieldSpec {fieldNumber = 329, fieldName = "DueToRelated", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype DueToRelated = DueToRelated {unDueToRelated :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity DueToRelated

instance IsField DueToRelated where
  fieldTag Proxy = 329
  fieldIsData Proxy = False
  fieldToValue = toValue . unDueToRelated
  fieldFromValue = fromValue >=> (prettyValidate . DueToRelated)

-- FieldSpec {fieldNumber = 330, fieldName = "BuyVolume", fieldType = FieldTypeQTY, fieldValues = []}
newtype BuyVolume = BuyVolume {unBuyVolume :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BuyVolume

instance IsField BuyVolume where
  fieldTag Proxy = 330
  fieldIsData Proxy = False
  fieldToValue = toValue . unBuyVolume
  fieldFromValue = fromValue >=> (prettyValidate . BuyVolume)

-- FieldSpec {fieldNumber = 331, fieldName = "SellVolume", fieldType = FieldTypeQTY, fieldValues = []}
newtype SellVolume = SellVolume {unSellVolume :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SellVolume

instance IsField SellVolume where
  fieldTag Proxy = 331
  fieldIsData Proxy = False
  fieldToValue = toValue . unSellVolume
  fieldFromValue = fromValue >=> (prettyValidate . SellVolume)

-- FieldSpec {fieldNumber = 332, fieldName = "HighPx", fieldType = FieldTypePrice, fieldValues = []}
newtype HighPx = HighPx {unHighPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HighPx

instance IsField HighPx where
  fieldTag Proxy = 332
  fieldIsData Proxy = False
  fieldToValue = toValue . unHighPx
  fieldFromValue = fromValue >=> (prettyValidate . HighPx)

-- FieldSpec {fieldNumber = 333, fieldName = "LowPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LowPx = LowPx {unLowPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LowPx

instance IsField LowPx where
  fieldTag Proxy = 333
  fieldIsData Proxy = False
  fieldToValue = toValue . unLowPx
  fieldFromValue = fromValue >=> (prettyValidate . LowPx)

-- FieldSpec {fieldNumber = 334, fieldName = "Adjustment", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ERROR"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CORRECTION"}]}
newtype Adjustment = Adjustment {unAdjustment :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Adjustment

instance IsField Adjustment where
  fieldTag Proxy = 334
  fieldIsData Proxy = False
  fieldToValue = toValue . unAdjustment
  fieldFromValue = fromValue >=> (prettyValidate . Adjustment)

-- FieldSpec {fieldNumber = 335, fieldName = "TradSesReqID", fieldType = FieldTypeString, fieldValues = []}
newtype TradSesReqID = TradSesReqID {unTradSesReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesReqID

instance IsField TradSesReqID where
  fieldTag Proxy = 335
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesReqID
  fieldFromValue = fromValue >=> (prettyValidate . TradSesReqID)

-- FieldSpec {fieldNumber = 336, fieldName = "TradingSessionID", fieldType = FieldTypeString, fieldValues = []}
newtype TradingSessionID = TradingSessionID {unTradingSessionID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradingSessionID

instance IsField TradingSessionID where
  fieldTag Proxy = 336
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradingSessionID
  fieldFromValue = fromValue >=> (prettyValidate . TradingSessionID)

-- FieldSpec {fieldNumber = 337, fieldName = "ContraTrader", fieldType = FieldTypeString, fieldValues = []}
newtype ContraTrader = ContraTrader {unContraTrader :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraTrader

instance IsField ContraTrader where
  fieldTag Proxy = 337
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraTrader
  fieldFromValue = fromValue >=> (prettyValidate . ContraTrader)

-- FieldSpec {fieldNumber = 338, fieldName = "TradSesMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ELECTRONIC"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OPEN_OUTCRY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TWO_PARTY"}]}
newtype TradSesMethod = TradSesMethod {unTradSesMethod :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesMethod

instance IsField TradSesMethod where
  fieldTag Proxy = 338
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesMethod
  fieldFromValue = fromValue >=> (prettyValidate . TradSesMethod)

-- FieldSpec {fieldNumber = 339, fieldName = "TradSesMode", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TESTING"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SIMULATED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PRODUCTION"}]}
newtype TradSesMode = TradSesMode {unTradSesMode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesMode

instance IsField TradSesMode where
  fieldTag Proxy = 339
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesMode
  fieldFromValue = fromValue >=> (prettyValidate . TradSesMode)

-- FieldSpec {fieldNumber = 340, fieldName = "TradSesStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNKNOWN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "HALTED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OPEN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CLOSED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PRE_OPEN"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PRE_CLOSE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "REQUEST_REJECTED"}]}
newtype TradSesStatus = TradSesStatus {unTradSesStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesStatus

instance IsField TradSesStatus where
  fieldTag Proxy = 340
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesStatus
  fieldFromValue = fromValue >=> (prettyValidate . TradSesStatus)

-- FieldSpec {fieldNumber = 341, fieldName = "TradSesStartTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesStartTime = TradSesStartTime {unTradSesStartTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesStartTime

instance IsField TradSesStartTime where
  fieldTag Proxy = 341
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesStartTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesStartTime)

-- FieldSpec {fieldNumber = 342, fieldName = "TradSesOpenTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesOpenTime = TradSesOpenTime {unTradSesOpenTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesOpenTime

instance IsField TradSesOpenTime where
  fieldTag Proxy = 342
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesOpenTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesOpenTime)

-- FieldSpec {fieldNumber = 343, fieldName = "TradSesPreCloseTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesPreCloseTime = TradSesPreCloseTime {unTradSesPreCloseTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesPreCloseTime

instance IsField TradSesPreCloseTime where
  fieldTag Proxy = 343
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesPreCloseTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesPreCloseTime)

-- FieldSpec {fieldNumber = 344, fieldName = "TradSesCloseTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesCloseTime = TradSesCloseTime {unTradSesCloseTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesCloseTime

instance IsField TradSesCloseTime where
  fieldTag Proxy = 344
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesCloseTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesCloseTime)

-- FieldSpec {fieldNumber = 345, fieldName = "TradSesEndTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TradSesEndTime = TradSesEndTime {unTradSesEndTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesEndTime

instance IsField TradSesEndTime where
  fieldTag Proxy = 345
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesEndTime
  fieldFromValue = fromValue >=> (prettyValidate . TradSesEndTime)

-- FieldSpec {fieldNumber = 346, fieldName = "NumberOfOrders", fieldType = FieldTypeInt, fieldValues = []}
newtype NumberOfOrders = NumberOfOrders {unNumberOfOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NumberOfOrders

instance IsField NumberOfOrders where
  fieldTag Proxy = 346
  fieldIsData Proxy = False
  fieldToValue = toValue . unNumberOfOrders
  fieldFromValue = fromValue >=> (prettyValidate . NumberOfOrders)

-- FieldSpec {fieldNumber = 347, fieldName = "MessageEncoding", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "ISO-2022-JP", fieldValueDescription = "ISO2022_JP"},FieldValueSpec {fieldValueEnum = "EUC-JP", fieldValueDescription = "EUCJP"},FieldValueSpec {fieldValueEnum = "Shift_JIS", fieldValueDescription = "SHIFT_JIS"},FieldValueSpec {fieldValueEnum = "UTF-8", fieldValueDescription = "UTF8"}]}
newtype MessageEncoding = MessageEncoding {unMessageEncoding :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MessageEncoding

instance IsField MessageEncoding where
  fieldTag Proxy = 347
  fieldIsData Proxy = False
  fieldToValue = toValue . unMessageEncoding
  fieldFromValue = fromValue >=> (prettyValidate . MessageEncoding)

-- FieldSpec {fieldNumber = 348, fieldName = "EncodedIssuerLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedIssuerLen = EncodedIssuerLen {unEncodedIssuerLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedIssuerLen

instance IsField EncodedIssuerLen where
  fieldTag Proxy = 348
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedIssuerLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedIssuerLen)

-- FieldSpec {fieldNumber = 349, fieldName = "EncodedIssuer", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedIssuer = EncodedIssuer {unEncodedIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedIssuer

instance IsField EncodedIssuer where
  fieldTag Proxy = 349
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedIssuer
  fieldFromValue = fromValue >=> (prettyValidate . EncodedIssuer)

-- FieldSpec {fieldNumber = 350, fieldName = "EncodedSecurityDescLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedSecurityDescLen = EncodedSecurityDescLen {unEncodedSecurityDescLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedSecurityDescLen

instance IsField EncodedSecurityDescLen where
  fieldTag Proxy = 350
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedSecurityDescLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedSecurityDescLen)

-- FieldSpec {fieldNumber = 351, fieldName = "EncodedSecurityDesc", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedSecurityDesc = EncodedSecurityDesc {unEncodedSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedSecurityDesc

instance IsField EncodedSecurityDesc where
  fieldTag Proxy = 351
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . EncodedSecurityDesc)

-- FieldSpec {fieldNumber = 352, fieldName = "EncodedListExecInstLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedListExecInstLen = EncodedListExecInstLen {unEncodedListExecInstLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedListExecInstLen

instance IsField EncodedListExecInstLen where
  fieldTag Proxy = 352
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedListExecInstLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedListExecInstLen)

-- FieldSpec {fieldNumber = 353, fieldName = "EncodedListExecInst", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedListExecInst = EncodedListExecInst {unEncodedListExecInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedListExecInst

instance IsField EncodedListExecInst where
  fieldTag Proxy = 353
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedListExecInst
  fieldFromValue = fromValue >=> (prettyValidate . EncodedListExecInst)

-- FieldSpec {fieldNumber = 354, fieldName = "EncodedTextLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedTextLen = EncodedTextLen {unEncodedTextLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedTextLen

instance IsField EncodedTextLen where
  fieldTag Proxy = 354
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedTextLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedTextLen)

-- FieldSpec {fieldNumber = 355, fieldName = "EncodedText", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedText = EncodedText {unEncodedText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedText

instance IsField EncodedText where
  fieldTag Proxy = 355
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedText
  fieldFromValue = fromValue >=> (prettyValidate . EncodedText)

-- FieldSpec {fieldNumber = 356, fieldName = "EncodedSubjectLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedSubjectLen = EncodedSubjectLen {unEncodedSubjectLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedSubjectLen

instance IsField EncodedSubjectLen where
  fieldTag Proxy = 356
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedSubjectLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedSubjectLen)

-- FieldSpec {fieldNumber = 357, fieldName = "EncodedSubject", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedSubject = EncodedSubject {unEncodedSubject :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedSubject

instance IsField EncodedSubject where
  fieldTag Proxy = 357
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedSubject
  fieldFromValue = fromValue >=> (prettyValidate . EncodedSubject)

-- FieldSpec {fieldNumber = 358, fieldName = "EncodedHeadlineLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedHeadlineLen = EncodedHeadlineLen {unEncodedHeadlineLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedHeadlineLen

instance IsField EncodedHeadlineLen where
  fieldTag Proxy = 358
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedHeadlineLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedHeadlineLen)

-- FieldSpec {fieldNumber = 359, fieldName = "EncodedHeadline", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedHeadline = EncodedHeadline {unEncodedHeadline :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedHeadline

instance IsField EncodedHeadline where
  fieldTag Proxy = 359
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedHeadline
  fieldFromValue = fromValue >=> (prettyValidate . EncodedHeadline)

-- FieldSpec {fieldNumber = 360, fieldName = "EncodedAllocTextLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedAllocTextLen = EncodedAllocTextLen {unEncodedAllocTextLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedAllocTextLen

instance IsField EncodedAllocTextLen where
  fieldTag Proxy = 360
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedAllocTextLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedAllocTextLen)

-- FieldSpec {fieldNumber = 361, fieldName = "EncodedAllocText", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedAllocText = EncodedAllocText {unEncodedAllocText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedAllocText

instance IsField EncodedAllocText where
  fieldTag Proxy = 361
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedAllocText
  fieldFromValue = fromValue >=> (prettyValidate . EncodedAllocText)

-- FieldSpec {fieldNumber = 362, fieldName = "EncodedUnderlyingIssuerLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedUnderlyingIssuerLen = EncodedUnderlyingIssuerLen {unEncodedUnderlyingIssuerLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedUnderlyingIssuerLen

instance IsField EncodedUnderlyingIssuerLen where
  fieldTag Proxy = 362
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedUnderlyingIssuerLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedUnderlyingIssuerLen)

-- FieldSpec {fieldNumber = 363, fieldName = "EncodedUnderlyingIssuer", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedUnderlyingIssuer = EncodedUnderlyingIssuer {unEncodedUnderlyingIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedUnderlyingIssuer

instance IsField EncodedUnderlyingIssuer where
  fieldTag Proxy = 363
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedUnderlyingIssuer
  fieldFromValue = fromValue >=> (prettyValidate . EncodedUnderlyingIssuer)

-- FieldSpec {fieldNumber = 364, fieldName = "EncodedUnderlyingSecurityDescLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedUnderlyingSecurityDescLen = EncodedUnderlyingSecurityDescLen {unEncodedUnderlyingSecurityDescLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedUnderlyingSecurityDescLen

instance IsField EncodedUnderlyingSecurityDescLen where
  fieldTag Proxy = 364
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedUnderlyingSecurityDescLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedUnderlyingSecurityDescLen)

-- FieldSpec {fieldNumber = 365, fieldName = "EncodedUnderlyingSecurityDesc", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedUnderlyingSecurityDesc = EncodedUnderlyingSecurityDesc {unEncodedUnderlyingSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedUnderlyingSecurityDesc

instance IsField EncodedUnderlyingSecurityDesc where
  fieldTag Proxy = 365
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedUnderlyingSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . EncodedUnderlyingSecurityDesc)

-- FieldSpec {fieldNumber = 366, fieldName = "AllocPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype AllocPrice = AllocPrice {unAllocPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocPrice

instance IsField AllocPrice where
  fieldTag Proxy = 366
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocPrice
  fieldFromValue = fromValue >=> (prettyValidate . AllocPrice)

-- FieldSpec {fieldNumber = 367, fieldName = "QuoteSetValidUntilTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype QuoteSetValidUntilTime = QuoteSetValidUntilTime {unQuoteSetValidUntilTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteSetValidUntilTime

instance IsField QuoteSetValidUntilTime where
  fieldTag Proxy = 367
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteSetValidUntilTime
  fieldFromValue = fromValue >=> (prettyValidate . QuoteSetValidUntilTime)

-- FieldSpec {fieldNumber = 368, fieldName = "QuoteEntryRejectReason", fieldType = FieldTypeInt, fieldValues = []}
newtype QuoteEntryRejectReason = QuoteEntryRejectReason {unQuoteEntryRejectReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteEntryRejectReason

instance IsField QuoteEntryRejectReason where
  fieldTag Proxy = 368
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteEntryRejectReason
  fieldFromValue = fromValue >=> (prettyValidate . QuoteEntryRejectReason)

-- FieldSpec {fieldNumber = 369, fieldName = "LastMsgSeqNumProcessed", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype LastMsgSeqNumProcessed = LastMsgSeqNumProcessed {unLastMsgSeqNumProcessed :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastMsgSeqNumProcessed

instance IsField LastMsgSeqNumProcessed where
  fieldTag Proxy = 369
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastMsgSeqNumProcessed
  fieldFromValue = fromValue >=> (prettyValidate . LastMsgSeqNumProcessed)

-- FieldSpec {fieldNumber = 371, fieldName = "RefTagID", fieldType = FieldTypeInt, fieldValues = []}
newtype RefTagID = RefTagID {unRefTagID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefTagID

instance IsField RefTagID where
  fieldTag Proxy = 371
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefTagID
  fieldFromValue = fromValue >=> (prettyValidate . RefTagID)

-- FieldSpec {fieldNumber = 372, fieldName = "RefMsgType", fieldType = FieldTypeString, fieldValues = []}
newtype RefMsgType = RefMsgType {unRefMsgType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefMsgType

instance IsField RefMsgType where
  fieldTag Proxy = 372
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefMsgType
  fieldFromValue = fromValue >=> (prettyValidate . RefMsgType)

-- FieldSpec {fieldNumber = 373, fieldName = "SessionRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "INVALID_TAG_NUMBER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REQUIRED_TAG_MISSING"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNDEFINED_TAG"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "TAG_SPECIFIED_WITHOUT_A_VALUE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "VALUE_IS_INCORRECT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "INCORRECT_DATA_FORMAT_FOR_VALUE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "DECRYPTION_PROBLEM"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "SIGNATURE_PROBLEM"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "COMP_ID_PROBLEM"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "SENDING_TIME_ACCURACY_PROBLEM"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "INVALID_MSG_TYPE"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "XML_VALIDATION_ERROR"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "TAG_APPEARS_MORE_THAN_ONCE"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "REPEATING_GROUP_FIELDS_OUT_OF_ORDER"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "NON"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype SessionRejectReason = SessionRejectReason {unSessionRejectReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SessionRejectReason

instance IsField SessionRejectReason where
  fieldTag Proxy = 373
  fieldIsData Proxy = False
  fieldToValue = toValue . unSessionRejectReason
  fieldFromValue = fromValue >=> (prettyValidate . SessionRejectReason)

-- FieldSpec {fieldNumber = 374, fieldName = "BidRequestTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"}]}
newtype BidRequestTransType = BidRequestTransType {unBidRequestTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidRequestTransType

instance IsField BidRequestTransType where
  fieldTag Proxy = 374
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidRequestTransType
  fieldFromValue = fromValue >=> (prettyValidate . BidRequestTransType)

-- FieldSpec {fieldNumber = 375, fieldName = "ContraBroker", fieldType = FieldTypeString, fieldValues = []}
newtype ContraBroker = ContraBroker {unContraBroker :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraBroker

instance IsField ContraBroker where
  fieldTag Proxy = 375
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraBroker
  fieldFromValue = fromValue >=> (prettyValidate . ContraBroker)

-- FieldSpec {fieldNumber = 376, fieldName = "ComplianceID", fieldType = FieldTypeString, fieldValues = []}
newtype ComplianceID = ComplianceID {unComplianceID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ComplianceID

instance IsField ComplianceID where
  fieldTag Proxy = 376
  fieldIsData Proxy = False
  fieldToValue = toValue . unComplianceID
  fieldFromValue = fromValue >=> (prettyValidate . ComplianceID)

-- FieldSpec {fieldNumber = 377, fieldName = "SolicitedFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype SolicitedFlag = SolicitedFlag {unSolicitedFlag :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity SolicitedFlag

instance IsField SolicitedFlag where
  fieldTag Proxy = 377
  fieldIsData Proxy = False
  fieldToValue = toValue . unSolicitedFlag
  fieldFromValue = fromValue >=> (prettyValidate . SolicitedFlag)

-- FieldSpec {fieldNumber = 378, fieldName = "ExecRestatementReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "GT_CORPORATE_ACTION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "GT_RENEWAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "VERBAL_CHANGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REPRICING_OF_ORDER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "BROKER_OPTION"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PARTIAL_DECLINE_OF_ORDER_QTY"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CANCEL_ON_TRADING_HALT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "CANCEL_ON_SYSTEM_FAILURE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "MARKET"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CANCELED"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "WAREHOUSE_RECAP"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype ExecRestatementReason = ExecRestatementReason {unExecRestatementReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecRestatementReason

instance IsField ExecRestatementReason where
  fieldTag Proxy = 378
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecRestatementReason
  fieldFromValue = fromValue >=> (prettyValidate . ExecRestatementReason)

-- FieldSpec {fieldNumber = 379, fieldName = "BusinessRejectRefID", fieldType = FieldTypeString, fieldValues = []}
newtype BusinessRejectRefID = BusinessRejectRefID {unBusinessRejectRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BusinessRejectRefID

instance IsField BusinessRejectRefID where
  fieldTag Proxy = 379
  fieldIsData Proxy = False
  fieldToValue = toValue . unBusinessRejectRefID
  fieldFromValue = fromValue >=> (prettyValidate . BusinessRejectRefID)

-- FieldSpec {fieldNumber = 380, fieldName = "BusinessRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "OTHER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_ID"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "UNKNOWN_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNSUPPORTED_MESSAGE_TYPE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "APPLICATION_NOT_AVAILABLE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CONDITIONALLY_REQUIRED_FIELD_MISSING"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "NOT_AUTHORIZED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "DELIVER_TO_FIRM_NOT_AVAILABLE_AT_THIS_TIME"}]}
newtype BusinessRejectReason = BusinessRejectReason {unBusinessRejectReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BusinessRejectReason

instance IsField BusinessRejectReason where
  fieldTag Proxy = 380
  fieldIsData Proxy = False
  fieldToValue = toValue . unBusinessRejectReason
  fieldFromValue = fromValue >=> (prettyValidate . BusinessRejectReason)

-- FieldSpec {fieldNumber = 381, fieldName = "GrossTradeAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype GrossTradeAmt = GrossTradeAmt {unGrossTradeAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity GrossTradeAmt

instance IsField GrossTradeAmt where
  fieldTag Proxy = 381
  fieldIsData Proxy = False
  fieldToValue = toValue . unGrossTradeAmt
  fieldFromValue = fromValue >=> (prettyValidate . GrossTradeAmt)

-- FieldSpec {fieldNumber = 382, fieldName = "NoContraBrokers", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoContraBrokers = NoContraBrokers {unNoContraBrokers :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoContraBrokers

instance IsField NoContraBrokers where
  fieldTag Proxy = 382
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoContraBrokers
  fieldFromValue = fromValue >=> (prettyValidate . NoContraBrokers)

-- FieldSpec {fieldNumber = 383, fieldName = "MaxMessageSize", fieldType = FieldTypeLength, fieldValues = []}
newtype MaxMessageSize = MaxMessageSize {unMaxMessageSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaxMessageSize

instance IsField MaxMessageSize where
  fieldTag Proxy = 383
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaxMessageSize
  fieldFromValue = fromValue >=> (prettyValidate . MaxMessageSize)

-- FieldSpec {fieldNumber = 384, fieldName = "NoMsgTypes", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoMsgTypes = NoMsgTypes {unNoMsgTypes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoMsgTypes

instance IsField NoMsgTypes where
  fieldTag Proxy = 384
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoMsgTypes
  fieldFromValue = fromValue >=> (prettyValidate . NoMsgTypes)

-- FieldSpec {fieldNumber = 385, fieldName = "MsgDirection", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SEND"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "RECEIVE"}]}
newtype MsgDirection = MsgDirection {unMsgDirection :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MsgDirection

instance IsField MsgDirection where
  fieldTag Proxy = 385
  fieldIsData Proxy = False
  fieldToValue = toValue . unMsgDirection
  fieldFromValue = fromValue >=> (prettyValidate . MsgDirection)

-- FieldSpec {fieldNumber = 386, fieldName = "NoTradingSessions", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoTradingSessions = NoTradingSessions {unNoTradingSessions :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoTradingSessions

instance IsField NoTradingSessions where
  fieldTag Proxy = 386
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoTradingSessions
  fieldFromValue = fromValue >=> (prettyValidate . NoTradingSessions)

-- FieldSpec {fieldNumber = 387, fieldName = "TotalVolumeTraded", fieldType = FieldTypeQTY, fieldValues = []}
newtype TotalVolumeTraded = TotalVolumeTraded {unTotalVolumeTraded :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalVolumeTraded

instance IsField TotalVolumeTraded where
  fieldTag Proxy = 387
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalVolumeTraded
  fieldFromValue = fromValue >=> (prettyValidate . TotalVolumeTraded)

-- FieldSpec {fieldNumber = 388, fieldName = "DiscretionInst", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "RELATED_TO_DISPLAYED_PRICE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "RELATED_TO_MARKET_PRICE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RELATED_TO_PRIMARY_PRICE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "RELATED_TO_LOCAL_PRIMARY_PRICE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "RELATED_TO_MIDPOINT_PRICE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "RELATED_TO_LAST_TRADE_PRICE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "RELATED_TO_VWAP"}]}
newtype DiscretionInst = DiscretionInst {unDiscretionInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionInst

instance IsField DiscretionInst where
  fieldTag Proxy = 388
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionInst
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionInst)

-- FieldSpec {fieldNumber = 389, fieldName = "DiscretionOffsetValue", fieldType = FieldTypeFloat, fieldValues = []}
newtype DiscretionOffsetValue = DiscretionOffsetValue {unDiscretionOffsetValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionOffsetValue

instance IsField DiscretionOffsetValue where
  fieldTag Proxy = 389
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionOffsetValue
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionOffsetValue)

-- FieldSpec {fieldNumber = 390, fieldName = "BidID", fieldType = FieldTypeString, fieldValues = []}
newtype BidID = BidID {unBidID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidID

instance IsField BidID where
  fieldTag Proxy = 390
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidID
  fieldFromValue = fromValue >=> (prettyValidate . BidID)

-- FieldSpec {fieldNumber = 391, fieldName = "ClientBidID", fieldType = FieldTypeString, fieldValues = []}
newtype ClientBidID = ClientBidID {unClientBidID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClientBidID

instance IsField ClientBidID where
  fieldTag Proxy = 391
  fieldIsData Proxy = False
  fieldToValue = toValue . unClientBidID
  fieldFromValue = fromValue >=> (prettyValidate . ClientBidID)

-- FieldSpec {fieldNumber = 392, fieldName = "ListName", fieldType = FieldTypeString, fieldValues = []}
newtype ListName = ListName {unListName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListName

instance IsField ListName where
  fieldTag Proxy = 392
  fieldIsData Proxy = False
  fieldToValue = toValue . unListName
  fieldFromValue = fromValue >=> (prettyValidate . ListName)

-- FieldSpec {fieldNumber = 393, fieldName = "TotNoRelatedSym", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoRelatedSym = TotNoRelatedSym {unTotNoRelatedSym :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoRelatedSym

instance IsField TotNoRelatedSym where
  fieldTag Proxy = 393
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoRelatedSym
  fieldFromValue = fromValue >=> (prettyValidate . TotNoRelatedSym)

-- FieldSpec {fieldNumber = 394, fieldName = "BidType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NON_DISCLOSED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DISCLOSED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NO_BIDDING_PROCESS"}]}
newtype BidType = BidType {unBidType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidType

instance IsField BidType where
  fieldTag Proxy = 394
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidType
  fieldFromValue = fromValue >=> (prettyValidate . BidType)

-- FieldSpec {fieldNumber = 395, fieldName = "NumTickets", fieldType = FieldTypeInt, fieldValues = []}
newtype NumTickets = NumTickets {unNumTickets :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NumTickets

instance IsField NumTickets where
  fieldTag Proxy = 395
  fieldIsData Proxy = False
  fieldToValue = toValue . unNumTickets
  fieldFromValue = fromValue >=> (prettyValidate . NumTickets)

-- FieldSpec {fieldNumber = 396, fieldName = "SideValue1", fieldType = FieldTypeAMT, fieldValues = []}
newtype SideValue1 = SideValue1 {unSideValue1 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SideValue1

instance IsField SideValue1 where
  fieldTag Proxy = 396
  fieldIsData Proxy = False
  fieldToValue = toValue . unSideValue1
  fieldFromValue = fromValue >=> (prettyValidate . SideValue1)

-- FieldSpec {fieldNumber = 397, fieldName = "SideValue2", fieldType = FieldTypeAMT, fieldValues = []}
newtype SideValue2 = SideValue2 {unSideValue2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SideValue2

instance IsField SideValue2 where
  fieldTag Proxy = 397
  fieldIsData Proxy = False
  fieldToValue = toValue . unSideValue2
  fieldFromValue = fromValue >=> (prettyValidate . SideValue2)

-- FieldSpec {fieldNumber = 398, fieldName = "NoBidDescriptors", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoBidDescriptors = NoBidDescriptors {unNoBidDescriptors :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoBidDescriptors

instance IsField NoBidDescriptors where
  fieldTag Proxy = 398
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoBidDescriptors
  fieldFromValue = fromValue >=> (prettyValidate . NoBidDescriptors)

-- FieldSpec {fieldNumber = 399, fieldName = "BidDescriptorType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SECTOR"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COUNTRY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INDEX"}]}
newtype BidDescriptorType = BidDescriptorType {unBidDescriptorType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidDescriptorType

instance IsField BidDescriptorType where
  fieldTag Proxy = 399
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidDescriptorType
  fieldFromValue = fromValue >=> (prettyValidate . BidDescriptorType)

-- FieldSpec {fieldNumber = 400, fieldName = "BidDescriptor", fieldType = FieldTypeString, fieldValues = []}
newtype BidDescriptor = BidDescriptor {unBidDescriptor :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidDescriptor

instance IsField BidDescriptor where
  fieldTag Proxy = 400
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidDescriptor
  fieldFromValue = fromValue >=> (prettyValidate . BidDescriptor)

-- FieldSpec {fieldNumber = 401, fieldName = "SideValueInd", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SIDE_VALUE1"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SIDE_VALUE2"}]}
newtype SideValueInd = SideValueInd {unSideValueInd :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SideValueInd

instance IsField SideValueInd where
  fieldTag Proxy = 401
  fieldIsData Proxy = False
  fieldToValue = toValue . unSideValueInd
  fieldFromValue = fromValue >=> (prettyValidate . SideValueInd)

-- FieldSpec {fieldNumber = 402, fieldName = "LiquidityPctLow", fieldType = FieldTypePercentage, fieldValues = []}
newtype LiquidityPctLow = LiquidityPctLow {unLiquidityPctLow :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityPctLow

instance IsField LiquidityPctLow where
  fieldTag Proxy = 402
  fieldIsData Proxy = False
  fieldToValue = toValue . unLiquidityPctLow
  fieldFromValue = fromValue >=> (prettyValidate . LiquidityPctLow)

-- FieldSpec {fieldNumber = 403, fieldName = "LiquidityPctHigh", fieldType = FieldTypePercentage, fieldValues = []}
newtype LiquidityPctHigh = LiquidityPctHigh {unLiquidityPctHigh :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityPctHigh

instance IsField LiquidityPctHigh where
  fieldTag Proxy = 403
  fieldIsData Proxy = False
  fieldToValue = toValue . unLiquidityPctHigh
  fieldFromValue = fromValue >=> (prettyValidate . LiquidityPctHigh)

-- FieldSpec {fieldNumber = 404, fieldName = "LiquidityValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype LiquidityValue = LiquidityValue {unLiquidityValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityValue

instance IsField LiquidityValue where
  fieldTag Proxy = 404
  fieldIsData Proxy = False
  fieldToValue = toValue . unLiquidityValue
  fieldFromValue = fromValue >=> (prettyValidate . LiquidityValue)

-- FieldSpec {fieldNumber = 405, fieldName = "EFPTrackingError", fieldType = FieldTypePercentage, fieldValues = []}
newtype EFPTrackingError = EFPTrackingError {unEFPTrackingError :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EFPTrackingError

instance IsField EFPTrackingError where
  fieldTag Proxy = 405
  fieldIsData Proxy = False
  fieldToValue = toValue . unEFPTrackingError
  fieldFromValue = fromValue >=> (prettyValidate . EFPTrackingError)

-- FieldSpec {fieldNumber = 406, fieldName = "FairValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype FairValue = FairValue {unFairValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity FairValue

instance IsField FairValue where
  fieldTag Proxy = 406
  fieldIsData Proxy = False
  fieldToValue = toValue . unFairValue
  fieldFromValue = fromValue >=> (prettyValidate . FairValue)

-- FieldSpec {fieldNumber = 407, fieldName = "OutsideIndexPct", fieldType = FieldTypePercentage, fieldValues = []}
newtype OutsideIndexPct = OutsideIndexPct {unOutsideIndexPct :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OutsideIndexPct

instance IsField OutsideIndexPct where
  fieldTag Proxy = 407
  fieldIsData Proxy = False
  fieldToValue = toValue . unOutsideIndexPct
  fieldFromValue = fromValue >=> (prettyValidate . OutsideIndexPct)

-- FieldSpec {fieldNumber = 408, fieldName = "ValueOfFutures", fieldType = FieldTypeAMT, fieldValues = []}
newtype ValueOfFutures = ValueOfFutures {unValueOfFutures :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ValueOfFutures

instance IsField ValueOfFutures where
  fieldTag Proxy = 408
  fieldIsData Proxy = False
  fieldToValue = toValue . unValueOfFutures
  fieldFromValue = fromValue >=> (prettyValidate . ValueOfFutures)

-- FieldSpec {fieldNumber = 409, fieldName = "LiquidityIndType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIVE_DAY_MOVING_AVERAGE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TWENTY_DAY_MOVING_AVERAGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NORMAL_MARKET_SIZE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OTHER"}]}
newtype LiquidityIndType = LiquidityIndType {unLiquidityIndType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityIndType

instance IsField LiquidityIndType where
  fieldTag Proxy = 409
  fieldIsData Proxy = False
  fieldToValue = toValue . unLiquidityIndType
  fieldFromValue = fromValue >=> (prettyValidate . LiquidityIndType)

-- FieldSpec {fieldNumber = 410, fieldName = "WtAverageLiquidity", fieldType = FieldTypePercentage, fieldValues = []}
newtype WtAverageLiquidity = WtAverageLiquidity {unWtAverageLiquidity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity WtAverageLiquidity

instance IsField WtAverageLiquidity where
  fieldTag Proxy = 410
  fieldIsData Proxy = False
  fieldToValue = toValue . unWtAverageLiquidity
  fieldFromValue = fromValue >=> (prettyValidate . WtAverageLiquidity)

-- FieldSpec {fieldNumber = 411, fieldName = "ExchangeForPhysical", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype ExchangeForPhysical = ExchangeForPhysical {unExchangeForPhysical :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity ExchangeForPhysical

instance IsField ExchangeForPhysical where
  fieldTag Proxy = 411
  fieldIsData Proxy = False
  fieldToValue = toValue . unExchangeForPhysical
  fieldFromValue = fromValue >=> (prettyValidate . ExchangeForPhysical)

-- FieldSpec {fieldNumber = 412, fieldName = "OutMainCntryUIndex", fieldType = FieldTypeAMT, fieldValues = []}
newtype OutMainCntryUIndex = OutMainCntryUIndex {unOutMainCntryUIndex :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OutMainCntryUIndex

instance IsField OutMainCntryUIndex where
  fieldTag Proxy = 412
  fieldIsData Proxy = False
  fieldToValue = toValue . unOutMainCntryUIndex
  fieldFromValue = fromValue >=> (prettyValidate . OutMainCntryUIndex)

-- FieldSpec {fieldNumber = 413, fieldName = "CrossPercent", fieldType = FieldTypePercentage, fieldValues = []}
newtype CrossPercent = CrossPercent {unCrossPercent :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CrossPercent

instance IsField CrossPercent where
  fieldTag Proxy = 413
  fieldIsData Proxy = False
  fieldToValue = toValue . unCrossPercent
  fieldFromValue = fromValue >=> (prettyValidate . CrossPercent)

-- FieldSpec {fieldNumber = 414, fieldName = "ProgRptReqs", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BUY_SIDE_REQUESTS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SELL_SIDE_SENDS"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REAL_TIME_EXECUTION_REPORTS"}]}
newtype ProgRptReqs = ProgRptReqs {unProgRptReqs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ProgRptReqs

instance IsField ProgRptReqs where
  fieldTag Proxy = 414
  fieldIsData Proxy = False
  fieldToValue = toValue . unProgRptReqs
  fieldFromValue = fromValue >=> (prettyValidate . ProgRptReqs)

-- FieldSpec {fieldNumber = 415, fieldName = "ProgPeriodInterval", fieldType = FieldTypeInt, fieldValues = []}
newtype ProgPeriodInterval = ProgPeriodInterval {unProgPeriodInterval :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ProgPeriodInterval

instance IsField ProgPeriodInterval where
  fieldTag Proxy = 415
  fieldIsData Proxy = False
  fieldToValue = toValue . unProgPeriodInterval
  fieldFromValue = fromValue >=> (prettyValidate . ProgPeriodInterval)

-- FieldSpec {fieldNumber = 416, fieldName = "IncTaxInd", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "GROSS"}]}
newtype IncTaxInd = IncTaxInd {unIncTaxInd :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IncTaxInd

instance IsField IncTaxInd where
  fieldTag Proxy = 416
  fieldIsData Proxy = False
  fieldToValue = toValue . unIncTaxInd
  fieldFromValue = fromValue >=> (prettyValidate . IncTaxInd)

-- FieldSpec {fieldNumber = 417, fieldName = "NumBidders", fieldType = FieldTypeInt, fieldValues = []}
newtype NumBidders = NumBidders {unNumBidders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NumBidders

instance IsField NumBidders where
  fieldTag Proxy = 417
  fieldIsData Proxy = False
  fieldToValue = toValue . unNumBidders
  fieldFromValue = fromValue >=> (prettyValidate . NumBidders)

-- FieldSpec {fieldNumber = 418, fieldName = "BidTradeType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "RISK_TRADE"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "VWAP_GUARANTEE"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "AGENCY"},FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "GUARANTEED_CLOSE"}]}
newtype BidTradeType = BidTradeType {unBidTradeType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidTradeType

instance IsField BidTradeType where
  fieldTag Proxy = 418
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidTradeType
  fieldFromValue = fromValue >=> (prettyValidate . BidTradeType)

-- FieldSpec {fieldNumber = 419, fieldName = "BasisPxType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CLOSING_PRICE_AT_MORNING_SESSION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CLOSING_PRICE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CURRENT_PRICE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "SQ"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "VWAP_THROUGH_A_DAY"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "VWAP_THROUGH_A_MORNING_SESSION"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "VWAP_THROUGH_AN_AFTERNOON_SESSION"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "VWAP_THROUGH_A_DAY_EXCEPT"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "VWAP_THROUGH_A_MORNING_SESSION_EXCEPT"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "STRIKE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "OPEN"},FieldValueSpec {fieldValueEnum = "Z", fieldValueDescription = "OTHERS"}]}
newtype BasisPxType = BasisPxType {unBasisPxType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BasisPxType

instance IsField BasisPxType where
  fieldTag Proxy = 419
  fieldIsData Proxy = False
  fieldToValue = toValue . unBasisPxType
  fieldFromValue = fromValue >=> (prettyValidate . BasisPxType)

-- FieldSpec {fieldNumber = 420, fieldName = "NoBidComponents", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoBidComponents = NoBidComponents {unNoBidComponents :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoBidComponents

instance IsField NoBidComponents where
  fieldTag Proxy = 420
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoBidComponents
  fieldFromValue = fromValue >=> (prettyValidate . NoBidComponents)

-- FieldSpec {fieldNumber = 421, fieldName = "Country", fieldType = FieldTypeCountry, fieldValues = []}
newtype Country = Country {unCountry :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Country

instance IsField Country where
  fieldTag Proxy = 421
  fieldIsData Proxy = False
  fieldToValue = toValue . unCountry
  fieldFromValue = fromValue >=> (prettyValidate . Country)

-- FieldSpec {fieldNumber = 422, fieldName = "TotNoStrikes", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoStrikes = TotNoStrikes {unTotNoStrikes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoStrikes

instance IsField TotNoStrikes where
  fieldTag Proxy = 422
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoStrikes
  fieldFromValue = fromValue >=> (prettyValidate . TotNoStrikes)

-- FieldSpec {fieldNumber = 423, fieldName = "PriceType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PERCENTAGE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PER_UNIT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FIXED_AMOUNT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "DISCOUNT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PREMIUM"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "SPREAD"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "TED_PRICE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TED_YIELD"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "YIELD"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "FIXED_CABINET_TRADE_PRICE"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "VARIABLE_CABINET_TRADE_PRICE"}]}
newtype PriceType = PriceType {unPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PriceType

instance IsField PriceType where
  fieldTag Proxy = 423
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriceType
  fieldFromValue = fromValue >=> (prettyValidate . PriceType)

-- FieldSpec {fieldNumber = 424, fieldName = "DayOrderQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype DayOrderQty = DayOrderQty {unDayOrderQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DayOrderQty

instance IsField DayOrderQty where
  fieldTag Proxy = 424
  fieldIsData Proxy = False
  fieldToValue = toValue . unDayOrderQty
  fieldFromValue = fromValue >=> (prettyValidate . DayOrderQty)

-- FieldSpec {fieldNumber = 425, fieldName = "DayCumQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype DayCumQty = DayCumQty {unDayCumQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DayCumQty

instance IsField DayCumQty where
  fieldTag Proxy = 425
  fieldIsData Proxy = False
  fieldToValue = toValue . unDayCumQty
  fieldFromValue = fromValue >=> (prettyValidate . DayCumQty)

-- FieldSpec {fieldNumber = 426, fieldName = "DayAvgPx", fieldType = FieldTypePrice, fieldValues = []}
newtype DayAvgPx = DayAvgPx {unDayAvgPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DayAvgPx

instance IsField DayAvgPx where
  fieldTag Proxy = 426
  fieldIsData Proxy = False
  fieldToValue = toValue . unDayAvgPx
  fieldFromValue = fromValue >=> (prettyValidate . DayAvgPx)

-- FieldSpec {fieldNumber = 427, fieldName = "GTBookingInst", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCUMULATE_UNTIL_FILLED_OR_EXPIRED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE"}]}
newtype GTBookingInst = GTBookingInst {unGTBookingInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity GTBookingInst

instance IsField GTBookingInst where
  fieldTag Proxy = 427
  fieldIsData Proxy = False
  fieldToValue = toValue . unGTBookingInst
  fieldFromValue = fromValue >=> (prettyValidate . GTBookingInst)

-- FieldSpec {fieldNumber = 428, fieldName = "NoStrikes", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoStrikes = NoStrikes {unNoStrikes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoStrikes

instance IsField NoStrikes where
  fieldTag Proxy = 428
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoStrikes
  fieldFromValue = fromValue >=> (prettyValidate . NoStrikes)

-- FieldSpec {fieldNumber = 429, fieldName = "ListStatusType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACK"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RESPONSE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TIMED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "EXEC_STARTED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "ALL_DONE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ALERT"}]}
newtype ListStatusType = ListStatusType {unListStatusType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListStatusType

instance IsField ListStatusType where
  fieldTag Proxy = 429
  fieldIsData Proxy = False
  fieldToValue = toValue . unListStatusType
  fieldFromValue = fromValue >=> (prettyValidate . ListStatusType)

-- FieldSpec {fieldNumber = 430, fieldName = "NetGrossInd", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "GROSS"}]}
newtype NetGrossInd = NetGrossInd {unNetGrossInd :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetGrossInd

instance IsField NetGrossInd where
  fieldTag Proxy = 430
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetGrossInd
  fieldFromValue = fromValue >=> (prettyValidate . NetGrossInd)

-- FieldSpec {fieldNumber = 431, fieldName = "ListOrderStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "IN_BIDDING_PROCESS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RECEIVED_FOR_EXECUTION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EXECUTING"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCELLING"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "ALERT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ALL_DONE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "REJECT"}]}
newtype ListOrderStatus = ListOrderStatus {unListOrderStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListOrderStatus

instance IsField ListOrderStatus where
  fieldTag Proxy = 431
  fieldIsData Proxy = False
  fieldToValue = toValue . unListOrderStatus
  fieldFromValue = fromValue >=> (prettyValidate . ListOrderStatus)

-- FieldSpec {fieldNumber = 432, fieldName = "ExpireDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype ExpireDate = ExpireDate {unExpireDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExpireDate

instance IsField ExpireDate where
  fieldTag Proxy = 432
  fieldIsData Proxy = False
  fieldToValue = toValue . unExpireDate
  fieldFromValue = fromValue >=> (prettyValidate . ExpireDate)

-- FieldSpec {fieldNumber = 433, fieldName = "ListExecInstType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "IMMEDIATE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "WAIT_FOR_INSTRUCTION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SELL_DRIVEN"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "BUY_DRIVEN_CASH_TOP_UP"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "BUY_DRIVEN_CASH_WITHDRAW"}]}
newtype ListExecInstType = ListExecInstType {unListExecInstType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListExecInstType

instance IsField ListExecInstType where
  fieldTag Proxy = 433
  fieldIsData Proxy = False
  fieldToValue = toValue . unListExecInstType
  fieldFromValue = fromValue >=> (prettyValidate . ListExecInstType)

-- FieldSpec {fieldNumber = 434, fieldName = "CxlRejResponseTo", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ORDER_CANCEL_REQUEST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ORDER_CANCEL"}]}
newtype CxlRejResponseTo = CxlRejResponseTo {unCxlRejResponseTo :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CxlRejResponseTo

instance IsField CxlRejResponseTo where
  fieldTag Proxy = 434
  fieldIsData Proxy = False
  fieldToValue = toValue . unCxlRejResponseTo
  fieldFromValue = fromValue >=> (prettyValidate . CxlRejResponseTo)

-- FieldSpec {fieldNumber = 435, fieldName = "UnderlyingCouponRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype UnderlyingCouponRate = UnderlyingCouponRate {unUnderlyingCouponRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCouponRate

instance IsField UnderlyingCouponRate where
  fieldTag Proxy = 435
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCouponRate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCouponRate)

-- FieldSpec {fieldNumber = 436, fieldName = "UnderlyingContractMultiplier", fieldType = FieldTypeFloat, fieldValues = []}
newtype UnderlyingContractMultiplier = UnderlyingContractMultiplier {unUnderlyingContractMultiplier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingContractMultiplier

instance IsField UnderlyingContractMultiplier where
  fieldTag Proxy = 436
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingContractMultiplier
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingContractMultiplier)

-- FieldSpec {fieldNumber = 437, fieldName = "ContraTradeQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype ContraTradeQty = ContraTradeQty {unContraTradeQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraTradeQty

instance IsField ContraTradeQty where
  fieldTag Proxy = 437
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraTradeQty
  fieldFromValue = fromValue >=> (prettyValidate . ContraTradeQty)

-- FieldSpec {fieldNumber = 438, fieldName = "ContraTradeTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype ContraTradeTime = ContraTradeTime {unContraTradeTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraTradeTime

instance IsField ContraTradeTime where
  fieldTag Proxy = 438
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraTradeTime
  fieldFromValue = fromValue >=> (prettyValidate . ContraTradeTime)

-- FieldSpec {fieldNumber = 441, fieldName = "LiquidityNumSecurities", fieldType = FieldTypeInt, fieldValues = []}
newtype LiquidityNumSecurities = LiquidityNumSecurities {unLiquidityNumSecurities :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LiquidityNumSecurities

instance IsField LiquidityNumSecurities where
  fieldTag Proxy = 441
  fieldIsData Proxy = False
  fieldToValue = toValue . unLiquidityNumSecurities
  fieldFromValue = fromValue >=> (prettyValidate . LiquidityNumSecurities)

-- FieldSpec {fieldNumber = 442, fieldName = "MultiLegReportingType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SINGLE_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MULTI_LEG_SECURITY"}]}
newtype MultiLegReportingType = MultiLegReportingType {unMultiLegReportingType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MultiLegReportingType

instance IsField MultiLegReportingType where
  fieldTag Proxy = 442
  fieldIsData Proxy = False
  fieldToValue = toValue . unMultiLegReportingType
  fieldFromValue = fromValue >=> (prettyValidate . MultiLegReportingType)

-- FieldSpec {fieldNumber = 443, fieldName = "StrikeTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype StrikeTime = StrikeTime {unStrikeTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StrikeTime

instance IsField StrikeTime where
  fieldTag Proxy = 443
  fieldIsData Proxy = False
  fieldToValue = toValue . unStrikeTime
  fieldFromValue = fromValue >=> (prettyValidate . StrikeTime)

-- FieldSpec {fieldNumber = 444, fieldName = "ListStatusText", fieldType = FieldTypeString, fieldValues = []}
newtype ListStatusText = ListStatusText {unListStatusText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ListStatusText

instance IsField ListStatusText where
  fieldTag Proxy = 444
  fieldIsData Proxy = False
  fieldToValue = toValue . unListStatusText
  fieldFromValue = fromValue >=> (prettyValidate . ListStatusText)

-- FieldSpec {fieldNumber = 445, fieldName = "EncodedListStatusTextLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedListStatusTextLen = EncodedListStatusTextLen {unEncodedListStatusTextLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedListStatusTextLen

instance IsField EncodedListStatusTextLen where
  fieldTag Proxy = 445
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedListStatusTextLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedListStatusTextLen)

-- FieldSpec {fieldNumber = 446, fieldName = "EncodedListStatusText", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedListStatusText = EncodedListStatusText {unEncodedListStatusText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedListStatusText

instance IsField EncodedListStatusText where
  fieldTag Proxy = 446
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedListStatusText
  fieldFromValue = fromValue >=> (prettyValidate . EncodedListStatusText)

-- FieldSpec {fieldNumber = 447, fieldName = "PartyIDSource", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "BIC"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "GENERAL_IDENTIFIER"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "PROPRIETARY"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "ISO_COUNTRY_CODE"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "SETTLEMENT_ENTITY_LOCATION"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "MIC"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "CSD_PARTICIPANT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "KOREAN_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TAIWANESE_FOREIGN_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TAIWANESE_TRADING_ACCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "MALAYSIAN_CENTRAL_DEPOSITORY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CHINESE_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "US_SOCIAL_SECURITY_NUMBER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "US_EMPLOYER_OR_TAX_ID_NUMBER"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "AUSTRALIAN_BUSINESS_NUMBER"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "AUSTRALIAN_TAX_FILE_NUMBER"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "ISITC_ACRONYM"}]}
newtype PartyIDSource = PartyIDSource {unPartyIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PartyIDSource

instance IsField PartyIDSource where
  fieldTag Proxy = 447
  fieldIsData Proxy = False
  fieldToValue = toValue . unPartyIDSource
  fieldFromValue = fromValue >=> (prettyValidate . PartyIDSource)

-- FieldSpec {fieldNumber = 448, fieldName = "PartyID", fieldType = FieldTypeString, fieldValues = []}
newtype PartyID = PartyID {unPartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PartyID

instance IsField PartyID where
  fieldTag Proxy = 448
  fieldIsData Proxy = False
  fieldToValue = toValue . unPartyID
  fieldFromValue = fromValue >=> (prettyValidate . PartyID)

-- FieldSpec {fieldNumber = 451, fieldName = "NetChgPrevDay", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype NetChgPrevDay = NetChgPrevDay {unNetChgPrevDay :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetChgPrevDay

instance IsField NetChgPrevDay where
  fieldTag Proxy = 451
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetChgPrevDay
  fieldFromValue = fromValue >=> (prettyValidate . NetChgPrevDay)

-- FieldSpec {fieldNumber = 452, fieldName = "PartyRole", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXECUTING_FIRM"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BROKER_OF_CREDIT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CLIENT_ID"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CLEARING_FIRM"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "INTRODUCING_FIRM"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "ENTERING_FIRM"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LOCATE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "FUND_MANAGER_CLIENT_ID"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "SETTLEMENT_LOCATION"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "ORDER_ORIGINATION_TRADER"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "EXECUTING_TRADER"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "ORDER_ORIGINATION_FIRM"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "GIVEUP_CLEARING_FIRM"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "CORRESPONDANT_CLEARING_FIRM"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "EXECUTING_SYSTEM"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "CONTRA_FIRM"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "CONTRA_CLEARING_FIRM"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "SPONSORING_FIRM"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "UNDERLYING_CONTRA_FIRM"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "CLEARING_ORGANIZATION"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "EXCHANGE"},FieldValueSpec {fieldValueEnum = "24", fieldValueDescription = "CUSTOMER_ACCOUNT"},FieldValueSpec {fieldValueEnum = "25", fieldValueDescription = "CORRESPONDENT_CLEARING_ORGANIZATION"},FieldValueSpec {fieldValueEnum = "26", fieldValueDescription = "CORRESPONDENT_BROKER"},FieldValueSpec {fieldValueEnum = "27", fieldValueDescription = "BUYER"},FieldValueSpec {fieldValueEnum = "28", fieldValueDescription = "CUSTODIAN"},FieldValueSpec {fieldValueEnum = "29", fieldValueDescription = "INTERMEDIARY"},FieldValueSpec {fieldValueEnum = "30", fieldValueDescription = "AGENT"},FieldValueSpec {fieldValueEnum = "31", fieldValueDescription = "SUB_CUSTODIAN"},FieldValueSpec {fieldValueEnum = "32", fieldValueDescription = "BENEFICIARY"},FieldValueSpec {fieldValueEnum = "33", fieldValueDescription = "INTERESTED_PARTY"},FieldValueSpec {fieldValueEnum = "34", fieldValueDescription = "REGULATORY_BODY"},FieldValueSpec {fieldValueEnum = "35", fieldValueDescription = "LIQUIDITY_PROVIDER"},FieldValueSpec {fieldValueEnum = "36", fieldValueDescription = "ENTERING_TRADER"},FieldValueSpec {fieldValueEnum = "37", fieldValueDescription = "CONTRA_TRADER"},FieldValueSpec {fieldValueEnum = "38", fieldValueDescription = "POSITION_ACCOUNT"}]}
newtype PartyRole = PartyRole {unPartyRole :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PartyRole

instance IsField PartyRole where
  fieldTag Proxy = 452
  fieldIsData Proxy = False
  fieldToValue = toValue . unPartyRole
  fieldFromValue = fromValue >=> (prettyValidate . PartyRole)

-- FieldSpec {fieldNumber = 453, fieldName = "NoPartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoPartyIDs = NoPartyIDs {unNoPartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoPartyIDs

instance IsField NoPartyIDs where
  fieldTag Proxy = 453
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoPartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoPartyIDs)

-- FieldSpec {fieldNumber = 454, fieldName = "NoSecurityAltID", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSecurityAltID = NoSecurityAltID {unNoSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSecurityAltID

instance IsField NoSecurityAltID where
  fieldTag Proxy = 454
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . NoSecurityAltID)

-- FieldSpec {fieldNumber = 455, fieldName = "SecurityAltID", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityAltID = SecurityAltID {unSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityAltID

instance IsField SecurityAltID where
  fieldTag Proxy = 455
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . SecurityAltID)

-- FieldSpec {fieldNumber = 456, fieldName = "SecurityAltIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype SecurityAltIDSource = SecurityAltIDSource {unSecurityAltIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityAltIDSource

instance IsField SecurityAltIDSource where
  fieldTag Proxy = 456
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityAltIDSource
  fieldFromValue = fromValue >=> (prettyValidate . SecurityAltIDSource)

-- FieldSpec {fieldNumber = 457, fieldName = "NoUnderlyingSecurityAltID", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoUnderlyingSecurityAltID = NoUnderlyingSecurityAltID {unNoUnderlyingSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoUnderlyingSecurityAltID

instance IsField NoUnderlyingSecurityAltID where
  fieldTag Proxy = 457
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoUnderlyingSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . NoUnderlyingSecurityAltID)

-- FieldSpec {fieldNumber = 458, fieldName = "UnderlyingSecurityAltID", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityAltID = UnderlyingSecurityAltID {unUnderlyingSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityAltID

instance IsField UnderlyingSecurityAltID where
  fieldTag Proxy = 458
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityAltID)

-- FieldSpec {fieldNumber = 459, fieldName = "UnderlyingSecurityAltIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecurityAltIDSource = UnderlyingSecurityAltIDSource {unUnderlyingSecurityAltIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecurityAltIDSource

instance IsField UnderlyingSecurityAltIDSource where
  fieldTag Proxy = 459
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecurityAltIDSource
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecurityAltIDSource)

-- FieldSpec {fieldNumber = 460, fieldName = "Product", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "AGENCY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COMMODITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CORPORATE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CURRENCY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "EQUITY"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "GOVERNMENT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "INDEX"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LOAN"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "MONEYMARKET"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "MORTGAGE"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "MUNICIPAL"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "OTHER"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "FINANCING"}]}
newtype Product = Product {unProduct :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Product

instance IsField Product where
  fieldTag Proxy = 460
  fieldIsData Proxy = False
  fieldToValue = toValue . unProduct
  fieldFromValue = fromValue >=> (prettyValidate . Product)

-- FieldSpec {fieldNumber = 461, fieldName = "CFICode", fieldType = FieldTypeString, fieldValues = []}
newtype CFICode = CFICode {unCFICode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CFICode

instance IsField CFICode where
  fieldTag Proxy = 461
  fieldIsData Proxy = False
  fieldToValue = toValue . unCFICode
  fieldFromValue = fromValue >=> (prettyValidate . CFICode)

-- FieldSpec {fieldNumber = 462, fieldName = "UnderlyingProduct", fieldType = FieldTypeInt, fieldValues = []}
newtype UnderlyingProduct = UnderlyingProduct {unUnderlyingProduct :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingProduct

instance IsField UnderlyingProduct where
  fieldTag Proxy = 462
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingProduct
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingProduct)

-- FieldSpec {fieldNumber = 463, fieldName = "UnderlyingCFICode", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingCFICode = UnderlyingCFICode {unUnderlyingCFICode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCFICode

instance IsField UnderlyingCFICode where
  fieldTag Proxy = 463
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCFICode
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCFICode)

-- FieldSpec {fieldNumber = 464, fieldName = "TestMessageIndicator", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype TestMessageIndicator = TestMessageIndicator {unTestMessageIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity TestMessageIndicator

instance IsField TestMessageIndicator where
  fieldTag Proxy = 464
  fieldIsData Proxy = False
  fieldToValue = toValue . unTestMessageIndicator
  fieldFromValue = fromValue >=> (prettyValidate . TestMessageIndicator)

-- FieldSpec {fieldNumber = 466, fieldName = "BookingRefID", fieldType = FieldTypeString, fieldValues = []}
newtype BookingRefID = BookingRefID {unBookingRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BookingRefID

instance IsField BookingRefID where
  fieldTag Proxy = 466
  fieldIsData Proxy = False
  fieldToValue = toValue . unBookingRefID
  fieldFromValue = fromValue >=> (prettyValidate . BookingRefID)

-- FieldSpec {fieldNumber = 467, fieldName = "IndividualAllocID", fieldType = FieldTypeString, fieldValues = []}
newtype IndividualAllocID = IndividualAllocID {unIndividualAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IndividualAllocID

instance IsField IndividualAllocID where
  fieldTag Proxy = 467
  fieldIsData Proxy = False
  fieldToValue = toValue . unIndividualAllocID
  fieldFromValue = fromValue >=> (prettyValidate . IndividualAllocID)

-- FieldSpec {fieldNumber = 468, fieldName = "RoundingDirection", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ROUND_TO_NEAREST"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ROUND_DOWN"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ROUND_UP"}]}
newtype RoundingDirection = RoundingDirection {unRoundingDirection :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RoundingDirection

instance IsField RoundingDirection where
  fieldTag Proxy = 468
  fieldIsData Proxy = False
  fieldToValue = toValue . unRoundingDirection
  fieldFromValue = fromValue >=> (prettyValidate . RoundingDirection)

-- FieldSpec {fieldNumber = 469, fieldName = "RoundingModulus", fieldType = FieldTypeFloat, fieldValues = []}
newtype RoundingModulus = RoundingModulus {unRoundingModulus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RoundingModulus

instance IsField RoundingModulus where
  fieldTag Proxy = 469
  fieldIsData Proxy = False
  fieldToValue = toValue . unRoundingModulus
  fieldFromValue = fromValue >=> (prettyValidate . RoundingModulus)

-- FieldSpec {fieldNumber = 470, fieldName = "CountryOfIssue", fieldType = FieldTypeCountry, fieldValues = []}
newtype CountryOfIssue = CountryOfIssue {unCountryOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CountryOfIssue

instance IsField CountryOfIssue where
  fieldTag Proxy = 470
  fieldIsData Proxy = False
  fieldToValue = toValue . unCountryOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . CountryOfIssue)

-- FieldSpec {fieldNumber = 471, fieldName = "StateOrProvinceOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype StateOrProvinceOfIssue = StateOrProvinceOfIssue {unStateOrProvinceOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StateOrProvinceOfIssue

instance IsField StateOrProvinceOfIssue where
  fieldTag Proxy = 471
  fieldIsData Proxy = False
  fieldToValue = toValue . unStateOrProvinceOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . StateOrProvinceOfIssue)

-- FieldSpec {fieldNumber = 472, fieldName = "LocaleOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype LocaleOfIssue = LocaleOfIssue {unLocaleOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LocaleOfIssue

instance IsField LocaleOfIssue where
  fieldTag Proxy = 472
  fieldIsData Proxy = False
  fieldToValue = toValue . unLocaleOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . LocaleOfIssue)

-- FieldSpec {fieldNumber = 473, fieldName = "NoRegistDtls", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoRegistDtls = NoRegistDtls {unNoRegistDtls :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoRegistDtls

instance IsField NoRegistDtls where
  fieldTag Proxy = 473
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoRegistDtls
  fieldFromValue = fromValue >=> (prettyValidate . NoRegistDtls)

-- FieldSpec {fieldNumber = 474, fieldName = "MailingDtls", fieldType = FieldTypeString, fieldValues = []}
newtype MailingDtls = MailingDtls {unMailingDtls :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MailingDtls

instance IsField MailingDtls where
  fieldTag Proxy = 474
  fieldIsData Proxy = False
  fieldToValue = toValue . unMailingDtls
  fieldFromValue = fromValue >=> (prettyValidate . MailingDtls)

-- FieldSpec {fieldNumber = 475, fieldName = "InvestorCountryOfResidence", fieldType = FieldTypeCountry, fieldValues = []}
newtype InvestorCountryOfResidence = InvestorCountryOfResidence {unInvestorCountryOfResidence :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InvestorCountryOfResidence

instance IsField InvestorCountryOfResidence where
  fieldTag Proxy = 475
  fieldIsData Proxy = False
  fieldToValue = toValue . unInvestorCountryOfResidence
  fieldFromValue = fromValue >=> (prettyValidate . InvestorCountryOfResidence)

-- FieldSpec {fieldNumber = 476, fieldName = "PaymentRef", fieldType = FieldTypeString, fieldValues = []}
newtype PaymentRef = PaymentRef {unPaymentRef :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PaymentRef

instance IsField PaymentRef where
  fieldTag Proxy = 476
  fieldIsData Proxy = False
  fieldToValue = toValue . unPaymentRef
  fieldFromValue = fromValue >=> (prettyValidate . PaymentRef)

-- FieldSpec {fieldNumber = 477, fieldName = "DistribPaymentMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CREST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NSCC"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EUROCLEAR"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CLEARSTREAM"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CHEQUE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "TELEGRAPHIC_TRANSFER"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "FED_WIRE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "DIRECT_CREDIT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "ACH_CREDIT"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "BPAY"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "HIGH_VALUE_CLEARING_SYSTEM_HVACS"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "REINVEST_IN_FUND"}]}
newtype DistribPaymentMethod = DistribPaymentMethod {unDistribPaymentMethod :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DistribPaymentMethod

instance IsField DistribPaymentMethod where
  fieldTag Proxy = 477
  fieldIsData Proxy = False
  fieldToValue = toValue . unDistribPaymentMethod
  fieldFromValue = fromValue >=> (prettyValidate . DistribPaymentMethod)

-- FieldSpec {fieldNumber = 478, fieldName = "CashDistribCurr", fieldType = FieldTypeCurrency, fieldValues = []}
newtype CashDistribCurr = CashDistribCurr {unCashDistribCurr :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribCurr

instance IsField CashDistribCurr where
  fieldTag Proxy = 478
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribCurr
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribCurr)

-- FieldSpec {fieldNumber = 479, fieldName = "CommCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype CommCurrency = CommCurrency {unCommCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CommCurrency

instance IsField CommCurrency where
  fieldTag Proxy = 479
  fieldIsData Proxy = False
  fieldToValue = toValue . unCommCurrency
  fieldFromValue = fromValue >=> (prettyValidate . CommCurrency)

-- FieldSpec {fieldNumber = 480, fieldName = "CancellationRights", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO_EXECUTION_ONLY"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "NO_WAIVER_AGREEMENT"},FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "NO_INSTITUTIONAL"}]}
newtype CancellationRights = CancellationRights {unCancellationRights :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CancellationRights

instance IsField CancellationRights where
  fieldTag Proxy = 480
  fieldIsData Proxy = False
  fieldToValue = toValue . unCancellationRights
  fieldFromValue = fromValue >=> (prettyValidate . CancellationRights)

-- FieldSpec {fieldNumber = 481, fieldName = "MoneyLaunderingStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "PASSED"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NOT_CHECKED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXEMPT_BELOW_LIMIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXEMPT_MONEY_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EXEMPT_AUTHORISED"}]}
newtype MoneyLaunderingStatus = MoneyLaunderingStatus {unMoneyLaunderingStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MoneyLaunderingStatus

instance IsField MoneyLaunderingStatus where
  fieldTag Proxy = 481
  fieldIsData Proxy = False
  fieldToValue = toValue . unMoneyLaunderingStatus
  fieldFromValue = fromValue >=> (prettyValidate . MoneyLaunderingStatus)

-- FieldSpec {fieldNumber = 482, fieldName = "MailingInst", fieldType = FieldTypeString, fieldValues = []}
newtype MailingInst = MailingInst {unMailingInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MailingInst

instance IsField MailingInst where
  fieldTag Proxy = 482
  fieldIsData Proxy = False
  fieldToValue = toValue . unMailingInst
  fieldFromValue = fromValue >=> (prettyValidate . MailingInst)

-- FieldSpec {fieldNumber = 483, fieldName = "TransBkdTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TransBkdTime = TransBkdTime {unTransBkdTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TransBkdTime

instance IsField TransBkdTime where
  fieldTag Proxy = 483
  fieldIsData Proxy = False
  fieldToValue = toValue . unTransBkdTime
  fieldFromValue = fromValue >=> (prettyValidate . TransBkdTime)

-- FieldSpec {fieldNumber = 484, fieldName = "ExecPriceType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "BID_PRICE"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CREATION_PRICE"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT"},FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "OFFER_PRICE"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT"},FieldValueSpec {fieldValueEnum = "Q", fieldValueDescription = "OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SINGLE_PRICE"}]}
newtype ExecPriceType = ExecPriceType {unExecPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecPriceType

instance IsField ExecPriceType where
  fieldTag Proxy = 484
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecPriceType
  fieldFromValue = fromValue >=> (prettyValidate . ExecPriceType)

-- FieldSpec {fieldNumber = 485, fieldName = "ExecPriceAdjustment", fieldType = FieldTypeFloat, fieldValues = []}
newtype ExecPriceAdjustment = ExecPriceAdjustment {unExecPriceAdjustment :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecPriceAdjustment

instance IsField ExecPriceAdjustment where
  fieldTag Proxy = 485
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecPriceAdjustment
  fieldFromValue = fromValue >=> (prettyValidate . ExecPriceAdjustment)

-- FieldSpec {fieldNumber = 486, fieldName = "DateOfBirth", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype DateOfBirth = DateOfBirth {unDateOfBirth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DateOfBirth

instance IsField DateOfBirth where
  fieldTag Proxy = 486
  fieldIsData Proxy = False
  fieldToValue = toValue . unDateOfBirth
  fieldFromValue = fromValue >=> (prettyValidate . DateOfBirth)

-- FieldSpec {fieldNumber = 487, fieldName = "TradeReportTransType", fieldType = FieldTypeInt, fieldValues = []}
newtype TradeReportTransType = TradeReportTransType {unTradeReportTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportTransType

instance IsField TradeReportTransType where
  fieldTag Proxy = 487
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeReportTransType
  fieldFromValue = fromValue >=> (prettyValidate . TradeReportTransType)

-- FieldSpec {fieldNumber = 488, fieldName = "CardHolderName", fieldType = FieldTypeString, fieldValues = []}
newtype CardHolderName = CardHolderName {unCardHolderName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardHolderName

instance IsField CardHolderName where
  fieldTag Proxy = 488
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardHolderName
  fieldFromValue = fromValue >=> (prettyValidate . CardHolderName)

-- FieldSpec {fieldNumber = 489, fieldName = "CardNumber", fieldType = FieldTypeString, fieldValues = []}
newtype CardNumber = CardNumber {unCardNumber :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardNumber

instance IsField CardNumber where
  fieldTag Proxy = 489
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardNumber
  fieldFromValue = fromValue >=> (prettyValidate . CardNumber)

-- FieldSpec {fieldNumber = 490, fieldName = "CardExpDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype CardExpDate = CardExpDate {unCardExpDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardExpDate

instance IsField CardExpDate where
  fieldTag Proxy = 490
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardExpDate
  fieldFromValue = fromValue >=> (prettyValidate . CardExpDate)

-- FieldSpec {fieldNumber = 491, fieldName = "CardIssNum", fieldType = FieldTypeString, fieldValues = []}
newtype CardIssNum = CardIssNum {unCardIssNum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardIssNum

instance IsField CardIssNum where
  fieldTag Proxy = 491
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardIssNum
  fieldFromValue = fromValue >=> (prettyValidate . CardIssNum)

-- FieldSpec {fieldNumber = 492, fieldName = "PaymentMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CREST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NSCC"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EUROCLEAR"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CLEARSTREAM"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CHEQUE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "TELEGRAPHIC_TRANSFER"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "FED_WIRE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "DEBIT_CARD"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "DIRECT_DEBIT"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "DIRECT_CREDIT"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "CREDIT_CARD"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "ACH_DEBIT"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "ACH_CREDIT"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "BPAY"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "HIGH_VALUE_CLEARING_SYSTEM"}]}
newtype PaymentMethod = PaymentMethod {unPaymentMethod :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PaymentMethod

instance IsField PaymentMethod where
  fieldTag Proxy = 492
  fieldIsData Proxy = False
  fieldToValue = toValue . unPaymentMethod
  fieldFromValue = fromValue >=> (prettyValidate . PaymentMethod)

-- FieldSpec {fieldNumber = 493, fieldName = "RegistAcctType", fieldType = FieldTypeString, fieldValues = []}
newtype RegistAcctType = RegistAcctType {unRegistAcctType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistAcctType

instance IsField RegistAcctType where
  fieldTag Proxy = 493
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistAcctType
  fieldFromValue = fromValue >=> (prettyValidate . RegistAcctType)

-- FieldSpec {fieldNumber = 494, fieldName = "Designation", fieldType = FieldTypeString, fieldValues = []}
newtype Designation = Designation {unDesignation :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Designation

instance IsField Designation where
  fieldTag Proxy = 494
  fieldIsData Proxy = False
  fieldToValue = toValue . unDesignation
  fieldFromValue = fromValue >=> (prettyValidate . Designation)

-- FieldSpec {fieldNumber = 495, fieldName = "TaxAdvantageType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NONE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MAXI_ISA"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TESSA"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MINI_CASH_ISA"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "MINI_STOCKS_AND_SHARES_ISA"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "MINI_INSURANCE_ISA"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CURRENT_YEAR_PAYMENT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "PRIOR_YEAR_PAYMENT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "ASSET_TRANSFER"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "EMPLOYEE_PRIOR_YEAR"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "EMPLOYEE_CURRENT_YEAR"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "EMPLOYER_PRIOR_YEAR"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "EMPLOYER_CURRENT_YEAR"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "NON_FUND_PROTOTYPE_IRA"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "NON_FUND_QUALIFIED_PLAN"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "DEFINED_CONTRIBUTION_PLAN"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "IRA"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "IRA_ROLLOVER"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "KEOGH"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "PROFIT_SHARING_PLAN"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "US401_K"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "SELF_DIRECTED_IRA"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "US403B"},FieldValueSpec {fieldValueEnum = "23", fieldValueDescription = "US457"},FieldValueSpec {fieldValueEnum = "24", fieldValueDescription = "ROTH_IRA_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "25", fieldValueDescription = "ROTH_IRA_NON_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "26", fieldValueDescription = "ROTH_CONVERSION_IRA_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "27", fieldValueDescription = "ROTH_CONVERSION_IRA_NON_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "28", fieldValueDescription = "EDUCATION_IRA_PROTOTYPE"},FieldValueSpec {fieldValueEnum = "29", fieldValueDescription = "EDUCATION_IRA_NON_PROTOTYPE"}]}
newtype TaxAdvantageType = TaxAdvantageType {unTaxAdvantageType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TaxAdvantageType

instance IsField TaxAdvantageType where
  fieldTag Proxy = 495
  fieldIsData Proxy = False
  fieldToValue = toValue . unTaxAdvantageType
  fieldFromValue = fromValue >=> (prettyValidate . TaxAdvantageType)

-- FieldSpec {fieldNumber = 496, fieldName = "RegistRejReasonText", fieldType = FieldTypeString, fieldValues = []}
newtype RegistRejReasonText = RegistRejReasonText {unRegistRejReasonText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistRejReasonText

instance IsField RegistRejReasonText where
  fieldTag Proxy = 496
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistRejReasonText
  fieldFromValue = fromValue >=> (prettyValidate . RegistRejReasonText)

-- FieldSpec {fieldNumber = 497, fieldName = "FundRenewWaiv", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype FundRenewWaiv = FundRenewWaiv {unFundRenewWaiv :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity FundRenewWaiv

instance IsField FundRenewWaiv where
  fieldTag Proxy = 497
  fieldIsData Proxy = False
  fieldToValue = toValue . unFundRenewWaiv
  fieldFromValue = fromValue >=> (prettyValidate . FundRenewWaiv)

-- FieldSpec {fieldNumber = 498, fieldName = "CashDistribAgentName", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribAgentName = CashDistribAgentName {unCashDistribAgentName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribAgentName

instance IsField CashDistribAgentName where
  fieldTag Proxy = 498
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribAgentName
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribAgentName)

-- FieldSpec {fieldNumber = 499, fieldName = "CashDistribAgentCode", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribAgentCode = CashDistribAgentCode {unCashDistribAgentCode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribAgentCode

instance IsField CashDistribAgentCode where
  fieldTag Proxy = 499
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribAgentCode
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribAgentCode)

-- FieldSpec {fieldNumber = 500, fieldName = "CashDistribAgentAcctNumber", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribAgentAcctNumber = CashDistribAgentAcctNumber {unCashDistribAgentAcctNumber :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribAgentAcctNumber

instance IsField CashDistribAgentAcctNumber where
  fieldTag Proxy = 500
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribAgentAcctNumber
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribAgentAcctNumber)

-- FieldSpec {fieldNumber = 501, fieldName = "CashDistribPayRef", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribPayRef = CashDistribPayRef {unCashDistribPayRef :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribPayRef

instance IsField CashDistribPayRef where
  fieldTag Proxy = 501
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribPayRef
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribPayRef)

-- FieldSpec {fieldNumber = 502, fieldName = "CashDistribAgentAcctName", fieldType = FieldTypeString, fieldValues = []}
newtype CashDistribAgentAcctName = CashDistribAgentAcctName {unCashDistribAgentAcctName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashDistribAgentAcctName

instance IsField CashDistribAgentAcctName where
  fieldTag Proxy = 502
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashDistribAgentAcctName
  fieldFromValue = fromValue >=> (prettyValidate . CashDistribAgentAcctName)

-- FieldSpec {fieldNumber = 503, fieldName = "CardStartDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype CardStartDate = CardStartDate {unCardStartDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CardStartDate

instance IsField CardStartDate where
  fieldTag Proxy = 503
  fieldIsData Proxy = False
  fieldToValue = toValue . unCardStartDate
  fieldFromValue = fromValue >=> (prettyValidate . CardStartDate)

-- FieldSpec {fieldNumber = 504, fieldName = "PaymentDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype PaymentDate = PaymentDate {unPaymentDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PaymentDate

instance IsField PaymentDate where
  fieldTag Proxy = 504
  fieldIsData Proxy = False
  fieldToValue = toValue . unPaymentDate
  fieldFromValue = fromValue >=> (prettyValidate . PaymentDate)

-- FieldSpec {fieldNumber = 505, fieldName = "PaymentRemitterID", fieldType = FieldTypeString, fieldValues = []}
newtype PaymentRemitterID = PaymentRemitterID {unPaymentRemitterID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PaymentRemitterID

instance IsField PaymentRemitterID where
  fieldTag Proxy = 505
  fieldIsData Proxy = False
  fieldToValue = toValue . unPaymentRemitterID
  fieldFromValue = fromValue >=> (prettyValidate . PaymentRemitterID)

-- FieldSpec {fieldNumber = 506, fieldName = "RegistStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "HELD"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "REMINDER"}]}
newtype RegistStatus = RegistStatus {unRegistStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistStatus

instance IsField RegistStatus where
  fieldTag Proxy = 506
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistStatus
  fieldFromValue = fromValue >=> (prettyValidate . RegistStatus)

-- FieldSpec {fieldNumber = 507, fieldName = "RegistRejReasonCode", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_ACCOUNT_TYPE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INVALID_TAX_EXEMPT_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVALID_OWNERSHIP_TYPE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NO_REG_DETAILS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_REG_SEQ_NO"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "INVALID_REG_DETAILS"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "INVALID_MAILING_DETAILS"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "INVALID_MAILING_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "INVALID_INVESTOR_ID"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "INVALID_INVESTOR_ID_SOURCE"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "INVALID_DATE_OF_BIRTH"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "INVALID_COUNTRY"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "INVALID_DISTRIB_INSTNS"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "INVALID_PERCENTAGE"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "INVALID_PAYMENT_METHOD"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "INVALID_ACCOUNT_NAME"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "INVALID_AGENT_CODE"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "INVALID_ACCOUNT_NUM"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype RegistRejReasonCode = RegistRejReasonCode {unRegistRejReasonCode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistRejReasonCode

instance IsField RegistRejReasonCode where
  fieldTag Proxy = 507
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistRejReasonCode
  fieldFromValue = fromValue >=> (prettyValidate . RegistRejReasonCode)

-- FieldSpec {fieldNumber = 508, fieldName = "RegistRefID", fieldType = FieldTypeString, fieldValues = []}
newtype RegistRefID = RegistRefID {unRegistRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistRefID

instance IsField RegistRefID where
  fieldTag Proxy = 508
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistRefID
  fieldFromValue = fromValue >=> (prettyValidate . RegistRefID)

-- FieldSpec {fieldNumber = 509, fieldName = "RegistDtls", fieldType = FieldTypeString, fieldValues = []}
newtype RegistDtls = RegistDtls {unRegistDtls :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistDtls

instance IsField RegistDtls where
  fieldTag Proxy = 509
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistDtls
  fieldFromValue = fromValue >=> (prettyValidate . RegistDtls)

-- FieldSpec {fieldNumber = 510, fieldName = "NoDistribInsts", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoDistribInsts = NoDistribInsts {unNoDistribInsts :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoDistribInsts

instance IsField NoDistribInsts where
  fieldTag Proxy = 510
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoDistribInsts
  fieldFromValue = fromValue >=> (prettyValidate . NoDistribInsts)

-- FieldSpec {fieldNumber = 511, fieldName = "RegistEmail", fieldType = FieldTypeString, fieldValues = []}
newtype RegistEmail = RegistEmail {unRegistEmail :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistEmail

instance IsField RegistEmail where
  fieldTag Proxy = 511
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistEmail
  fieldFromValue = fromValue >=> (prettyValidate . RegistEmail)

-- FieldSpec {fieldNumber = 512, fieldName = "DistribPercentage", fieldType = FieldTypePercentage, fieldValues = []}
newtype DistribPercentage = DistribPercentage {unDistribPercentage :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DistribPercentage

instance IsField DistribPercentage where
  fieldTag Proxy = 512
  fieldIsData Proxy = False
  fieldToValue = toValue . unDistribPercentage
  fieldFromValue = fromValue >=> (prettyValidate . DistribPercentage)

-- FieldSpec {fieldNumber = 513, fieldName = "RegistID", fieldType = FieldTypeString, fieldValues = []}
newtype RegistID = RegistID {unRegistID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistID

instance IsField RegistID where
  fieldTag Proxy = 513
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistID
  fieldFromValue = fromValue >=> (prettyValidate . RegistID)

-- FieldSpec {fieldNumber = 514, fieldName = "RegistTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"}]}
newtype RegistTransType = RegistTransType {unRegistTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RegistTransType

instance IsField RegistTransType where
  fieldTag Proxy = 514
  fieldIsData Proxy = False
  fieldToValue = toValue . unRegistTransType
  fieldFromValue = fromValue >=> (prettyValidate . RegistTransType)

-- FieldSpec {fieldNumber = 515, fieldName = "ExecValuationPoint", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype ExecValuationPoint = ExecValuationPoint {unExecValuationPoint :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExecValuationPoint

instance IsField ExecValuationPoint where
  fieldTag Proxy = 515
  fieldIsData Proxy = False
  fieldToValue = toValue . unExecValuationPoint
  fieldFromValue = fromValue >=> (prettyValidate . ExecValuationPoint)

-- FieldSpec {fieldNumber = 516, fieldName = "OrderPercent", fieldType = FieldTypePercentage, fieldValues = []}
newtype OrderPercent = OrderPercent {unOrderPercent :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderPercent

instance IsField OrderPercent where
  fieldTag Proxy = 516
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderPercent
  fieldFromValue = fromValue >=> (prettyValidate . OrderPercent)

-- FieldSpec {fieldNumber = 517, fieldName = "OwnershipType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "J", fieldValueDescription = "JOINT_INVESTORS"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "TENANTS_IN_COMMON"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "JOINT_TRUSTEES"}]}
newtype OwnershipType = OwnershipType {unOwnershipType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OwnershipType

instance IsField OwnershipType where
  fieldTag Proxy = 517
  fieldIsData Proxy = False
  fieldToValue = toValue . unOwnershipType
  fieldFromValue = fromValue >=> (prettyValidate . OwnershipType)

-- FieldSpec {fieldNumber = 518, fieldName = "NoContAmts", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoContAmts = NoContAmts {unNoContAmts :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoContAmts

instance IsField NoContAmts where
  fieldTag Proxy = 518
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoContAmts
  fieldFromValue = fromValue >=> (prettyValidate . NoContAmts)

-- FieldSpec {fieldNumber = 519, fieldName = "ContAmtType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "COMMISSION_AMOUNT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COMMISSION_PERCENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INITIAL_CHARGE_AMOUNT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INITIAL_CHARGE_PERCENT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "DISCOUNT_AMOUNT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "DISCOUNT_PERCENT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "DILUTION_LEVY_AMOUNT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "DILUTION_LEVY_PERCENT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "EXIT_CHARGE_AMOUNT"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "EXIT_CHARGE_PERCENT"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "FUND_BASED_RENEWAL_COMMISSION_PERCENT"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "PROJECTED_FUND_VALUE"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "FUND_BASED_RENEWAL_COMMISSION_ON_ORDER"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "FUND_BASED_RENEWAL_COMMISSION_ON_FUND"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "NET_SETTLEMENT_AMOUNT"}]}
newtype ContAmtType = ContAmtType {unContAmtType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContAmtType

instance IsField ContAmtType where
  fieldTag Proxy = 519
  fieldIsData Proxy = False
  fieldToValue = toValue . unContAmtType
  fieldFromValue = fromValue >=> (prettyValidate . ContAmtType)

-- FieldSpec {fieldNumber = 520, fieldName = "ContAmtValue", fieldType = FieldTypeFloat, fieldValues = []}
newtype ContAmtValue = ContAmtValue {unContAmtValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContAmtValue

instance IsField ContAmtValue where
  fieldTag Proxy = 520
  fieldIsData Proxy = False
  fieldToValue = toValue . unContAmtValue
  fieldFromValue = fromValue >=> (prettyValidate . ContAmtValue)

-- FieldSpec {fieldNumber = 521, fieldName = "ContAmtCurr", fieldType = FieldTypeCurrency, fieldValues = []}
newtype ContAmtCurr = ContAmtCurr {unContAmtCurr :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContAmtCurr

instance IsField ContAmtCurr where
  fieldTag Proxy = 521
  fieldIsData Proxy = False
  fieldToValue = toValue . unContAmtCurr
  fieldFromValue = fromValue >=> (prettyValidate . ContAmtCurr)

-- FieldSpec {fieldNumber = 522, fieldName = "OwnerType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INDIVIDUAL_INVESTOR"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PUBLIC_COMPANY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PRIVATE_COMPANY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INDIVIDUAL_TRUSTEE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "COMPANY_TRUSTEE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PENSION_PLAN"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TRUSTS"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "FIDUCIARIES"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "NETWORKING_SUB_ACCOUNT"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "NON_PROFIT_ORGANIZATION"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "CORPORATE_BODY"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "NOMINEE"}]}
newtype OwnerType = OwnerType {unOwnerType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OwnerType

instance IsField OwnerType where
  fieldTag Proxy = 522
  fieldIsData Proxy = False
  fieldToValue = toValue . unOwnerType
  fieldFromValue = fromValue >=> (prettyValidate . OwnerType)

-- FieldSpec {fieldNumber = 523, fieldName = "PartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype PartySubID = PartySubID {unPartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PartySubID

instance IsField PartySubID where
  fieldTag Proxy = 523
  fieldIsData Proxy = False
  fieldToValue = toValue . unPartySubID
  fieldFromValue = fromValue >=> (prettyValidate . PartySubID)

-- FieldSpec {fieldNumber = 524, fieldName = "NestedPartyID", fieldType = FieldTypeString, fieldValues = []}
newtype NestedPartyID = NestedPartyID {unNestedPartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartyID

instance IsField NestedPartyID where
  fieldTag Proxy = 524
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartyID
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartyID)

-- FieldSpec {fieldNumber = 525, fieldName = "NestedPartyIDSource", fieldType = FieldTypeChar, fieldValues = []}
newtype NestedPartyIDSource = NestedPartyIDSource {unNestedPartyIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartyIDSource

instance IsField NestedPartyIDSource where
  fieldTag Proxy = 525
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartyIDSource
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartyIDSource)

-- FieldSpec {fieldNumber = 526, fieldName = "SecondaryClOrdID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryClOrdID = SecondaryClOrdID {unSecondaryClOrdID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryClOrdID

instance IsField SecondaryClOrdID where
  fieldTag Proxy = 526
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryClOrdID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryClOrdID)

-- FieldSpec {fieldNumber = 527, fieldName = "SecondaryExecID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryExecID = SecondaryExecID {unSecondaryExecID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryExecID

instance IsField SecondaryExecID where
  fieldTag Proxy = 527
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryExecID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryExecID)

-- FieldSpec {fieldNumber = 528, fieldName = "OrderCapacity", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "AGENCY"},FieldValueSpec {fieldValueEnum = "G", fieldValueDescription = "PROPRIETARY"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "INDIVIDUAL"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "PRINCIPAL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "RISKLESS_PRINCIPAL"},FieldValueSpec {fieldValueEnum = "W", fieldValueDescription = "AGENT_FOR_OTHER_MEMBER"}]}
newtype OrderCapacity = OrderCapacity {unOrderCapacity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderCapacity

instance IsField OrderCapacity where
  fieldTag Proxy = 528
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderCapacity
  fieldFromValue = fromValue >=> (prettyValidate . OrderCapacity)

-- FieldSpec {fieldNumber = 529, fieldName = "OrderRestrictions", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PROGRAM_TRADE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INDEX_ARBITRAGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NON_INDEX_ARBITRAGE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "COMPETING_MARKET_MAKER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_SECURITY"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_UNDERLYING"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "FOREIGN_ENTITY"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "EXTERNAL_MARKET_PARTICIPANT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE"},FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "RISKLESS_ARBITRAGE"}]}
newtype OrderRestrictions = OrderRestrictions {unOrderRestrictions :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderRestrictions

instance IsField OrderRestrictions where
  fieldTag Proxy = 529
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderRestrictions
  fieldFromValue = fromValue >=> (prettyValidate . OrderRestrictions)

-- FieldSpec {fieldNumber = 530, fieldName = "MassCancelRequestType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL_ORDERS_FOR_A_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCEL_ORDERS_FOR_A_PRODUCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCEL_ORDERS_FOR_ACFI_CODE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CANCEL_ORDERS_FOR_A_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CANCEL_ORDERS_FOR_A_TRADING_SESSION"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "CANCEL_ALL_ORDERS"}]}
newtype MassCancelRequestType = MassCancelRequestType {unMassCancelRequestType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MassCancelRequestType

instance IsField MassCancelRequestType where
  fieldTag Proxy = 530
  fieldIsData Proxy = False
  fieldToValue = toValue . unMassCancelRequestType
  fieldFromValue = fromValue >=> (prettyValidate . MassCancelRequestType)

-- FieldSpec {fieldNumber = 531, fieldName = "MassCancelResponse", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "CANCEL_REQUEST_REJECTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL_ORDERS_FOR_A_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCEL_ORDERS_FOR_A_PRODUCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CANCEL_ORDERS_FOR_ACFI_CODE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "CANCEL_ORDERS_FOR_A_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CANCEL_ORDERS_FOR_A_TRADING_SESSION"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "CANCEL_ALL_ORDERS"}]}
newtype MassCancelResponse = MassCancelResponse {unMassCancelResponse :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MassCancelResponse

instance IsField MassCancelResponse where
  fieldTag Proxy = 531
  fieldIsData Proxy = False
  fieldToValue = toValue . unMassCancelResponse
  fieldFromValue = fromValue >=> (prettyValidate . MassCancelResponse)

-- FieldSpec {fieldNumber = 532, fieldName = "MassCancelRejectReason", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "MASS_CANCEL_NOT_SUPPORTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNKNOWN_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INVALID_OR_UNKOWN_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVALID_OR_UNKNOWN_PRODUCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_OR_UNKNOWN_CFI_CODE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_OR_UNKNOWN_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "INVALID_OR_UNKNOWN_TRADING_SESSION"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype MassCancelRejectReason = MassCancelRejectReason {unMassCancelRejectReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MassCancelRejectReason

instance IsField MassCancelRejectReason where
  fieldTag Proxy = 532
  fieldIsData Proxy = False
  fieldToValue = toValue . unMassCancelRejectReason
  fieldFromValue = fromValue >=> (prettyValidate . MassCancelRejectReason)

-- FieldSpec {fieldNumber = 533, fieldName = "TotalAffectedOrders", fieldType = FieldTypeInt, fieldValues = []}
newtype TotalAffectedOrders = TotalAffectedOrders {unTotalAffectedOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalAffectedOrders

instance IsField TotalAffectedOrders where
  fieldTag Proxy = 533
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalAffectedOrders
  fieldFromValue = fromValue >=> (prettyValidate . TotalAffectedOrders)

-- FieldSpec {fieldNumber = 534, fieldName = "NoAffectedOrders", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoAffectedOrders = NoAffectedOrders {unNoAffectedOrders :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoAffectedOrders

instance IsField NoAffectedOrders where
  fieldTag Proxy = 534
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoAffectedOrders
  fieldFromValue = fromValue >=> (prettyValidate . NoAffectedOrders)

-- FieldSpec {fieldNumber = 535, fieldName = "AffectedOrderID", fieldType = FieldTypeString, fieldValues = []}
newtype AffectedOrderID = AffectedOrderID {unAffectedOrderID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AffectedOrderID

instance IsField AffectedOrderID where
  fieldTag Proxy = 535
  fieldIsData Proxy = False
  fieldToValue = toValue . unAffectedOrderID
  fieldFromValue = fromValue >=> (prettyValidate . AffectedOrderID)

-- FieldSpec {fieldNumber = 536, fieldName = "AffectedSecondaryOrderID", fieldType = FieldTypeString, fieldValues = []}
newtype AffectedSecondaryOrderID = AffectedSecondaryOrderID {unAffectedSecondaryOrderID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AffectedSecondaryOrderID

instance IsField AffectedSecondaryOrderID where
  fieldTag Proxy = 536
  fieldIsData Proxy = False
  fieldToValue = toValue . unAffectedSecondaryOrderID
  fieldFromValue = fromValue >=> (prettyValidate . AffectedSecondaryOrderID)

-- FieldSpec {fieldNumber = 537, fieldName = "QuoteType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "INDICATIVE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TRADEABLE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "RESTRICTED_TRADEABLE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "COUNTER"}]}
newtype QuoteType = QuoteType {unQuoteType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteType

instance IsField QuoteType where
  fieldTag Proxy = 537
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteType
  fieldFromValue = fromValue >=> (prettyValidate . QuoteType)

-- FieldSpec {fieldNumber = 538, fieldName = "NestedPartyRole", fieldType = FieldTypeInt, fieldValues = []}
newtype NestedPartyRole = NestedPartyRole {unNestedPartyRole :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartyRole

instance IsField NestedPartyRole where
  fieldTag Proxy = 538
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartyRole
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartyRole)

-- FieldSpec {fieldNumber = 539, fieldName = "NoNestedPartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNestedPartyIDs = NoNestedPartyIDs {unNoNestedPartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNestedPartyIDs

instance IsField NoNestedPartyIDs where
  fieldTag Proxy = 539
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNestedPartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNestedPartyIDs)

-- FieldSpec {fieldNumber = 540, fieldName = "TotalAccruedInterestAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype TotalAccruedInterestAmt = TotalAccruedInterestAmt {unTotalAccruedInterestAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalAccruedInterestAmt

instance IsField TotalAccruedInterestAmt where
  fieldTag Proxy = 540
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalAccruedInterestAmt
  fieldFromValue = fromValue >=> (prettyValidate . TotalAccruedInterestAmt)

-- FieldSpec {fieldNumber = 541, fieldName = "MaturityDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype MaturityDate = MaturityDate {unMaturityDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaturityDate

instance IsField MaturityDate where
  fieldTag Proxy = 541
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaturityDate
  fieldFromValue = fromValue >=> (prettyValidate . MaturityDate)

-- FieldSpec {fieldNumber = 542, fieldName = "UnderlyingMaturityDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype UnderlyingMaturityDate = UnderlyingMaturityDate {unUnderlyingMaturityDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingMaturityDate

instance IsField UnderlyingMaturityDate where
  fieldTag Proxy = 542
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingMaturityDate
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingMaturityDate)

-- FieldSpec {fieldNumber = 543, fieldName = "InstrRegistry", fieldType = FieldTypeString, fieldValues = []}
newtype InstrRegistry = InstrRegistry {unInstrRegistry :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InstrRegistry

instance IsField InstrRegistry where
  fieldTag Proxy = 543
  fieldIsData Proxy = False
  fieldToValue = toValue . unInstrRegistry
  fieldFromValue = fromValue >=> (prettyValidate . InstrRegistry)

-- FieldSpec {fieldNumber = 544, fieldName = "CashMargin", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CASH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MARGIN_OPEN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MARGIN_CLOSE"}]}
newtype CashMargin = CashMargin {unCashMargin :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashMargin

instance IsField CashMargin where
  fieldTag Proxy = 544
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashMargin
  fieldFromValue = fromValue >=> (prettyValidate . CashMargin)

-- FieldSpec {fieldNumber = 545, fieldName = "NestedPartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype NestedPartySubID = NestedPartySubID {unNestedPartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartySubID

instance IsField NestedPartySubID where
  fieldTag Proxy = 545
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartySubID
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartySubID)

-- FieldSpec {fieldNumber = 546, fieldName = "Scope", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOCAL_MARKET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NATIONAL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GLOBAL"}]}
newtype Scope = Scope {unScope :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Scope

instance IsField Scope where
  fieldTag Proxy = 546
  fieldIsData Proxy = False
  fieldToValue = toValue . unScope
  fieldFromValue = fromValue >=> (prettyValidate . Scope)

-- FieldSpec {fieldNumber = 547, fieldName = "MDImplicitDelete", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype MDImplicitDelete = MDImplicitDelete {unMDImplicitDelete :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity MDImplicitDelete

instance IsField MDImplicitDelete where
  fieldTag Proxy = 547
  fieldIsData Proxy = False
  fieldToValue = toValue . unMDImplicitDelete
  fieldFromValue = fromValue >=> (prettyValidate . MDImplicitDelete)

-- FieldSpec {fieldNumber = 548, fieldName = "CrossID", fieldType = FieldTypeString, fieldValues = []}
newtype CrossID = CrossID {unCrossID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CrossID

instance IsField CrossID where
  fieldTag Proxy = 548
  fieldIsData Proxy = False
  fieldToValue = toValue . unCrossID
  fieldFromValue = fromValue >=> (prettyValidate . CrossID)

-- FieldSpec {fieldNumber = 549, fieldName = "CrossType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CROSS_AON"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CROSS_IOC"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CROSS_ONE_SIDE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CROSS_SAME_PRICE"}]}
newtype CrossType = CrossType {unCrossType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CrossType

instance IsField CrossType where
  fieldTag Proxy = 549
  fieldIsData Proxy = False
  fieldToValue = toValue . unCrossType
  fieldFromValue = fromValue >=> (prettyValidate . CrossType)

-- FieldSpec {fieldNumber = 550, fieldName = "CrossPrioritization", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NONE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BUY_SIDE_IS_PRIORITIZED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SELL_SIDE_IS_PRIORITIZED"}]}
newtype CrossPrioritization = CrossPrioritization {unCrossPrioritization :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CrossPrioritization

instance IsField CrossPrioritization where
  fieldTag Proxy = 550
  fieldIsData Proxy = False
  fieldToValue = toValue . unCrossPrioritization
  fieldFromValue = fromValue >=> (prettyValidate . CrossPrioritization)

-- FieldSpec {fieldNumber = 551, fieldName = "OrigCrossID", fieldType = FieldTypeString, fieldValues = []}
newtype OrigCrossID = OrigCrossID {unOrigCrossID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigCrossID

instance IsField OrigCrossID where
  fieldTag Proxy = 551
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigCrossID
  fieldFromValue = fromValue >=> (prettyValidate . OrigCrossID)

-- FieldSpec {fieldNumber = 552, fieldName = "NoSides", fieldType = FieldTypeNumInGroup, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ONE_SIDE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BOTH_SIDES"}]}
newtype NoSides = NoSides {unNoSides :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSides

instance IsField NoSides where
  fieldTag Proxy = 552
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSides
  fieldFromValue = fromValue >=> (prettyValidate . NoSides)

-- FieldSpec {fieldNumber = 553, fieldName = "Username", fieldType = FieldTypeString, fieldValues = []}
newtype Username = Username {unUsername :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Username

instance IsField Username where
  fieldTag Proxy = 553
  fieldIsData Proxy = False
  fieldToValue = toValue . unUsername
  fieldFromValue = fromValue >=> (prettyValidate . Username)

-- FieldSpec {fieldNumber = 554, fieldName = "Password", fieldType = FieldTypeString, fieldValues = []}
newtype Password = Password {unPassword :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Password

instance IsField Password where
  fieldTag Proxy = 554
  fieldIsData Proxy = False
  fieldToValue = toValue . unPassword
  fieldFromValue = fromValue >=> (prettyValidate . Password)

-- FieldSpec {fieldNumber = 555, fieldName = "NoLegs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLegs = NoLegs {unNoLegs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLegs

instance IsField NoLegs where
  fieldTag Proxy = 555
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLegs
  fieldFromValue = fromValue >=> (prettyValidate . NoLegs)

-- FieldSpec {fieldNumber = 556, fieldName = "LegCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype LegCurrency = LegCurrency {unLegCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCurrency

instance IsField LegCurrency where
  fieldTag Proxy = 556
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCurrency
  fieldFromValue = fromValue >=> (prettyValidate . LegCurrency)

-- FieldSpec {fieldNumber = 557, fieldName = "TotNoSecurityTypes", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoSecurityTypes = TotNoSecurityTypes {unTotNoSecurityTypes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoSecurityTypes

instance IsField TotNoSecurityTypes where
  fieldTag Proxy = 557
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoSecurityTypes
  fieldFromValue = fromValue >=> (prettyValidate . TotNoSecurityTypes)

-- FieldSpec {fieldNumber = 558, fieldName = "NoSecurityTypes", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSecurityTypes = NoSecurityTypes {unNoSecurityTypes :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSecurityTypes

instance IsField NoSecurityTypes where
  fieldTag Proxy = 558
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSecurityTypes
  fieldFromValue = fromValue >=> (prettyValidate . NoSecurityTypes)

-- FieldSpec {fieldNumber = 559, fieldName = "SecurityListRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SYMBOL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SECURITY_TYPE_AND"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PRODUCT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TRADING_SESSION_ID"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ALL_SECURITIES"}]}
newtype SecurityListRequestType = SecurityListRequestType {unSecurityListRequestType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityListRequestType

instance IsField SecurityListRequestType where
  fieldTag Proxy = 559
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityListRequestType
  fieldFromValue = fromValue >=> (prettyValidate . SecurityListRequestType)

-- FieldSpec {fieldNumber = 560, fieldName = "SecurityRequestResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "VALID_REQUEST"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNSUPPORTED_REQUEST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NO_INSTRUMENTS_FOUND"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED"}]}
newtype SecurityRequestResult = SecurityRequestResult {unSecurityRequestResult :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecurityRequestResult

instance IsField SecurityRequestResult where
  fieldTag Proxy = 560
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecurityRequestResult
  fieldFromValue = fromValue >=> (prettyValidate . SecurityRequestResult)

-- FieldSpec {fieldNumber = 561, fieldName = "RoundLot", fieldType = FieldTypeQTY, fieldValues = []}
newtype RoundLot = RoundLot {unRoundLot :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RoundLot

instance IsField RoundLot where
  fieldTag Proxy = 561
  fieldIsData Proxy = False
  fieldToValue = toValue . unRoundLot
  fieldFromValue = fromValue >=> (prettyValidate . RoundLot)

-- FieldSpec {fieldNumber = 562, fieldName = "MinTradeVol", fieldType = FieldTypeQTY, fieldValues = []}
newtype MinTradeVol = MinTradeVol {unMinTradeVol :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MinTradeVol

instance IsField MinTradeVol where
  fieldTag Proxy = 562
  fieldIsData Proxy = False
  fieldToValue = toValue . unMinTradeVol
  fieldFromValue = fromValue >=> (prettyValidate . MinTradeVol)

-- FieldSpec {fieldNumber = 563, fieldName = "MultiLegRptTypeReq", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REPORT_BY_MULITLEG_SECURITY_ONLY"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REPORT_BY_INSTRUMENT_LEGS_ONLY"}]}
newtype MultiLegRptTypeReq = MultiLegRptTypeReq {unMultiLegRptTypeReq :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MultiLegRptTypeReq

instance IsField MultiLegRptTypeReq where
  fieldTag Proxy = 563
  fieldIsData Proxy = False
  fieldToValue = toValue . unMultiLegRptTypeReq
  fieldFromValue = fromValue >=> (prettyValidate . MultiLegRptTypeReq)

-- FieldSpec {fieldNumber = 564, fieldName = "LegPositionEffect", fieldType = FieldTypeChar, fieldValues = []}
newtype LegPositionEffect = LegPositionEffect {unLegPositionEffect :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegPositionEffect

instance IsField LegPositionEffect where
  fieldTag Proxy = 564
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegPositionEffect
  fieldFromValue = fromValue >=> (prettyValidate . LegPositionEffect)

-- FieldSpec {fieldNumber = 565, fieldName = "LegCoveredOrUncovered", fieldType = FieldTypeInt, fieldValues = []}
newtype LegCoveredOrUncovered = LegCoveredOrUncovered {unLegCoveredOrUncovered :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCoveredOrUncovered

instance IsField LegCoveredOrUncovered where
  fieldTag Proxy = 565
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCoveredOrUncovered
  fieldFromValue = fromValue >=> (prettyValidate . LegCoveredOrUncovered)

-- FieldSpec {fieldNumber = 566, fieldName = "LegPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype LegPrice = LegPrice {unLegPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegPrice

instance IsField LegPrice where
  fieldTag Proxy = 566
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegPrice
  fieldFromValue = fromValue >=> (prettyValidate . LegPrice)

-- FieldSpec {fieldNumber = 567, fieldName = "TradSesStatusRejReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_OR_INVALID_TRADING_SESSION_ID"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype TradSesStatusRejReason = TradSesStatusRejReason {unTradSesStatusRejReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradSesStatusRejReason

instance IsField TradSesStatusRejReason where
  fieldTag Proxy = 567
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradSesStatusRejReason
  fieldFromValue = fromValue >=> (prettyValidate . TradSesStatusRejReason)

-- FieldSpec {fieldNumber = 568, fieldName = "TradeRequestID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeRequestID = TradeRequestID {unTradeRequestID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeRequestID

instance IsField TradeRequestID where
  fieldTag Proxy = 568
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeRequestID
  fieldFromValue = fromValue >=> (prettyValidate . TradeRequestID)

-- FieldSpec {fieldNumber = 569, fieldName = "TradeRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ALL_TRADES"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MATCHED_TRADES_MATCHING_CRITERIA"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "UNMATCHED_TRADES_THAT_MATCH_CRITERIA"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNREPORTED_TRADES_THAT_MATCH_CRITERIA"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ADVISORIES_THAT_MATCH_CRITERIA"}]}
newtype TradeRequestType = TradeRequestType {unTradeRequestType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeRequestType

instance IsField TradeRequestType where
  fieldTag Proxy = 569
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeRequestType
  fieldFromValue = fromValue >=> (prettyValidate . TradeRequestType)

-- FieldSpec {fieldNumber = 570, fieldName = "PreviouslyReported", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype PreviouslyReported = PreviouslyReported {unPreviouslyReported :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity PreviouslyReported

instance IsField PreviouslyReported where
  fieldTag Proxy = 570
  fieldIsData Proxy = False
  fieldToValue = toValue . unPreviouslyReported
  fieldFromValue = fromValue >=> (prettyValidate . PreviouslyReported)

-- FieldSpec {fieldNumber = 571, fieldName = "TradeReportID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeReportID = TradeReportID {unTradeReportID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportID

instance IsField TradeReportID where
  fieldTag Proxy = 571
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeReportID
  fieldFromValue = fromValue >=> (prettyValidate . TradeReportID)

-- FieldSpec {fieldNumber = 572, fieldName = "TradeReportRefID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeReportRefID = TradeReportRefID {unTradeReportRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportRefID

instance IsField TradeReportRefID where
  fieldTag Proxy = 572
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeReportRefID
  fieldFromValue = fromValue >=> (prettyValidate . TradeReportRefID)

-- FieldSpec {fieldNumber = 573, fieldName = "MatchStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "COMPARED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNCOMPARED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ADVISORY_OR_ALERT"}]}
newtype MatchStatus = MatchStatus {unMatchStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MatchStatus

instance IsField MatchStatus where
  fieldTag Proxy = 573
  fieldIsData Proxy = False
  fieldToValue = toValue . unMatchStatus
  fieldFromValue = fromValue >=> (prettyValidate . MatchStatus)

-- FieldSpec {fieldNumber = 574, fieldName = "MatchType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "A1", fieldValueDescription = "EXACT_MATCH_PLUS4_BADGES_EXEC_TIME"},FieldValueSpec {fieldValueEnum = "A2", fieldValueDescription = "EXACT_MATCH_PLUS4_BADGES"},FieldValueSpec {fieldValueEnum = "A3", fieldValueDescription = "EXACT_MATCH_PLUS2_BADGES_EXEC_TIME"},FieldValueSpec {fieldValueEnum = "A4", fieldValueDescription = "EXACT_MATCH_PLUS2_BADGES"},FieldValueSpec {fieldValueEnum = "A5", fieldValueDescription = "EXACT_MATCH_PLUS_EXEC_TIME"},FieldValueSpec {fieldValueEnum = "AQ", fieldValueDescription = "STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS"},FieldValueSpec {fieldValueEnum = "S1", fieldValueDescription = "A1_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "S2", fieldValueDescription = "A2_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "S3", fieldValueDescription = "A3_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "S4", fieldValueDescription = "A4_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "S5", fieldValueDescription = "A5_EXACT_MATCH_SUMMARIZED_QUANTITY"},FieldValueSpec {fieldValueEnum = "M1", fieldValueDescription = "EXACT_MATCH_MINUS_BADGES_TIMES"},FieldValueSpec {fieldValueEnum = "M2", fieldValueDescription = "SUMMARIZED_MATCH_MINUS_BADGES_TIMES"},FieldValueSpec {fieldValueEnum = "MT", fieldValueDescription = "OCS_LOCKED_IN"},FieldValueSpec {fieldValueEnum = "M3", fieldValueDescription = "ACT_ACCEPTED_TRADE"},FieldValueSpec {fieldValueEnum = "M4", fieldValueDescription = "ACT_DEFAULT_TRADE"},FieldValueSpec {fieldValueEnum = "M5", fieldValueDescription = "ACT_DEFAULT_AFTER_M2"},FieldValueSpec {fieldValueEnum = "M6", fieldValueDescription = "ACTM6_MATCH"}]}
newtype MatchType = MatchType {unMatchType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MatchType

instance IsField MatchType where
  fieldTag Proxy = 574
  fieldIsData Proxy = False
  fieldToValue = toValue . unMatchType
  fieldFromValue = fromValue >=> (prettyValidate . MatchType)

-- FieldSpec {fieldNumber = 575, fieldName = "OddLot", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype OddLot = OddLot {unOddLot :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity OddLot

instance IsField OddLot where
  fieldTag Proxy = 575
  fieldIsData Proxy = False
  fieldToValue = toValue . unOddLot
  fieldFromValue = fromValue >=> (prettyValidate . OddLot)

-- FieldSpec {fieldNumber = 576, fieldName = "NoClearingInstructions", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoClearingInstructions = NoClearingInstructions {unNoClearingInstructions :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoClearingInstructions

instance IsField NoClearingInstructions where
  fieldTag Proxy = 576
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoClearingInstructions
  fieldFromValue = fromValue >=> (prettyValidate . NoClearingInstructions)

-- FieldSpec {fieldNumber = 577, fieldName = "ClearingInstruction", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PROCESS_NORMALLY"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXCLUDE_FROM_ALL_NETTING"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BILATERAL_NETTING_ONLY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EX_CLEARING"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SPECIAL_TRADE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "MULTILATERAL_NETTING"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CLEAR_AGAINST_CENTRAL_COUNTERPARTY"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "EXCLUDE_FROM_CENTRAL_COUNTERPARTY"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "MANUAL_MODE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "AUTOMATIC_POSTING_MODE"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "AUTOMATIC_GIVE_UP_MODE"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "QUALIFIED_SERVICE_REPRESENTATIVE_QSR"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "CUSTOMER_TRADE"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "SELF_CLEARING"}]}
newtype ClearingInstruction = ClearingInstruction {unClearingInstruction :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClearingInstruction

instance IsField ClearingInstruction where
  fieldTag Proxy = 577
  fieldIsData Proxy = False
  fieldToValue = toValue . unClearingInstruction
  fieldFromValue = fromValue >=> (prettyValidate . ClearingInstruction)

-- FieldSpec {fieldNumber = 578, fieldName = "TradeInputSource", fieldType = FieldTypeString, fieldValues = []}
newtype TradeInputSource = TradeInputSource {unTradeInputSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeInputSource

instance IsField TradeInputSource where
  fieldTag Proxy = 578
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeInputSource
  fieldFromValue = fromValue >=> (prettyValidate . TradeInputSource)

-- FieldSpec {fieldNumber = 579, fieldName = "TradeInputDevice", fieldType = FieldTypeString, fieldValues = []}
newtype TradeInputDevice = TradeInputDevice {unTradeInputDevice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeInputDevice

instance IsField TradeInputDevice where
  fieldTag Proxy = 579
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeInputDevice
  fieldFromValue = fromValue >=> (prettyValidate . TradeInputDevice)

-- FieldSpec {fieldNumber = 580, fieldName = "NoDates", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoDates = NoDates {unNoDates :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoDates

instance IsField NoDates where
  fieldTag Proxy = 580
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoDates
  fieldFromValue = fromValue >=> (prettyValidate . NoDates)

-- FieldSpec {fieldNumber = 581, fieldName = "AccountType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CARRIED_CUSTOMER_SIDE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CARRIED_NON_CUSTOMER_SIDE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "HOUSE_TRADER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "FLOOR_TRADER"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "HOUSE_TRADER_CROSS_MARGINED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "JOINT_BACK_OFFICE_ACCOUNT"}]}
newtype AccountType = AccountType {unAccountType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AccountType

instance IsField AccountType where
  fieldTag Proxy = 581
  fieldIsData Proxy = False
  fieldToValue = toValue . unAccountType
  fieldFromValue = fromValue >=> (prettyValidate . AccountType)

-- FieldSpec {fieldNumber = 582, fieldName = "CustOrderCapacity", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MEMBER_TRADING_FOR_ANOTHER_MEMBER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ALL_OTHER"}]}
newtype CustOrderCapacity = CustOrderCapacity {unCustOrderCapacity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CustOrderCapacity

instance IsField CustOrderCapacity where
  fieldTag Proxy = 582
  fieldIsData Proxy = False
  fieldToValue = toValue . unCustOrderCapacity
  fieldFromValue = fromValue >=> (prettyValidate . CustOrderCapacity)

-- FieldSpec {fieldNumber = 583, fieldName = "ClOrdLinkID", fieldType = FieldTypeString, fieldValues = []}
newtype ClOrdLinkID = ClOrdLinkID {unClOrdLinkID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClOrdLinkID

instance IsField ClOrdLinkID where
  fieldTag Proxy = 583
  fieldIsData Proxy = False
  fieldToValue = toValue . unClOrdLinkID
  fieldFromValue = fromValue >=> (prettyValidate . ClOrdLinkID)

-- FieldSpec {fieldNumber = 584, fieldName = "MassStatusReqID", fieldType = FieldTypeString, fieldValues = []}
newtype MassStatusReqID = MassStatusReqID {unMassStatusReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MassStatusReqID

instance IsField MassStatusReqID where
  fieldTag Proxy = 584
  fieldIsData Proxy = False
  fieldToValue = toValue . unMassStatusReqID
  fieldFromValue = fromValue >=> (prettyValidate . MassStatusReqID)

-- FieldSpec {fieldNumber = 585, fieldName = "MassStatusReqType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_PRODUCT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_ACFI_CODE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_SECURITY_TYPE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STATUS_FOR_ALL_ORDERS"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "STATUS_FOR_ORDERS_FOR_A_PARTY_ID"}]}
newtype MassStatusReqType = MassStatusReqType {unMassStatusReqType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MassStatusReqType

instance IsField MassStatusReqType where
  fieldTag Proxy = 585
  fieldIsData Proxy = False
  fieldToValue = toValue . unMassStatusReqType
  fieldFromValue = fromValue >=> (prettyValidate . MassStatusReqType)

-- FieldSpec {fieldNumber = 586, fieldName = "OrigOrdModTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype OrigOrdModTime = OrigOrdModTime {unOrigOrdModTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigOrdModTime

instance IsField OrigOrdModTime where
  fieldTag Proxy = 586
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigOrdModTime
  fieldFromValue = fromValue >=> (prettyValidate . OrigOrdModTime)

-- FieldSpec {fieldNumber = 587, fieldName = "LegSettlType", fieldType = FieldTypeChar, fieldValues = []}
newtype LegSettlType = LegSettlType {unLegSettlType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSettlType

instance IsField LegSettlType where
  fieldTag Proxy = 587
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSettlType
  fieldFromValue = fromValue >=> (prettyValidate . LegSettlType)

-- FieldSpec {fieldNumber = 588, fieldName = "LegSettlDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegSettlDate = LegSettlDate {unLegSettlDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSettlDate

instance IsField LegSettlDate where
  fieldTag Proxy = 588
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSettlDate
  fieldFromValue = fromValue >=> (prettyValidate . LegSettlDate)

-- FieldSpec {fieldNumber = 589, fieldName = "DayBookingInst", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "AUTO"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCUMULATE"}]}
newtype DayBookingInst = DayBookingInst {unDayBookingInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DayBookingInst

instance IsField DayBookingInst where
  fieldTag Proxy = 589
  fieldIsData Proxy = False
  fieldToValue = toValue . unDayBookingInst
  fieldFromValue = fromValue >=> (prettyValidate . DayBookingInst)

-- FieldSpec {fieldNumber = 590, fieldName = "BookingUnit", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL"}]}
newtype BookingUnit = BookingUnit {unBookingUnit :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BookingUnit

instance IsField BookingUnit where
  fieldTag Proxy = 590
  fieldIsData Proxy = False
  fieldToValue = toValue . unBookingUnit
  fieldFromValue = fromValue >=> (prettyValidate . BookingUnit)

-- FieldSpec {fieldNumber = 591, fieldName = "PreallocMethod", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PRO_RATA"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DO_NOT_PRO_RATA"}]}
newtype PreallocMethod = PreallocMethod {unPreallocMethod :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PreallocMethod

instance IsField PreallocMethod where
  fieldTag Proxy = 591
  fieldIsData Proxy = False
  fieldToValue = toValue . unPreallocMethod
  fieldFromValue = fromValue >=> (prettyValidate . PreallocMethod)

-- FieldSpec {fieldNumber = 592, fieldName = "UnderlyingCountryOfIssue", fieldType = FieldTypeCountry, fieldValues = []}
newtype UnderlyingCountryOfIssue = UnderlyingCountryOfIssue {unUnderlyingCountryOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCountryOfIssue

instance IsField UnderlyingCountryOfIssue where
  fieldTag Proxy = 592
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCountryOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCountryOfIssue)

-- FieldSpec {fieldNumber = 593, fieldName = "UnderlyingStateOrProvinceOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingStateOrProvinceOfIssue = UnderlyingStateOrProvinceOfIssue {unUnderlyingStateOrProvinceOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStateOrProvinceOfIssue

instance IsField UnderlyingStateOrProvinceOfIssue where
  fieldTag Proxy = 593
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStateOrProvinceOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStateOrProvinceOfIssue)

-- FieldSpec {fieldNumber = 594, fieldName = "UnderlyingLocaleOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingLocaleOfIssue = UnderlyingLocaleOfIssue {unUnderlyingLocaleOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingLocaleOfIssue

instance IsField UnderlyingLocaleOfIssue where
  fieldTag Proxy = 594
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingLocaleOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingLocaleOfIssue)

-- FieldSpec {fieldNumber = 595, fieldName = "UnderlyingInstrRegistry", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingInstrRegistry = UnderlyingInstrRegistry {unUnderlyingInstrRegistry :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingInstrRegistry

instance IsField UnderlyingInstrRegistry where
  fieldTag Proxy = 595
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingInstrRegistry
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingInstrRegistry)

-- FieldSpec {fieldNumber = 596, fieldName = "LegCountryOfIssue", fieldType = FieldTypeCountry, fieldValues = []}
newtype LegCountryOfIssue = LegCountryOfIssue {unLegCountryOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCountryOfIssue

instance IsField LegCountryOfIssue where
  fieldTag Proxy = 596
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCountryOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . LegCountryOfIssue)

-- FieldSpec {fieldNumber = 597, fieldName = "LegStateOrProvinceOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype LegStateOrProvinceOfIssue = LegStateOrProvinceOfIssue {unLegStateOrProvinceOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStateOrProvinceOfIssue

instance IsField LegStateOrProvinceOfIssue where
  fieldTag Proxy = 597
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStateOrProvinceOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . LegStateOrProvinceOfIssue)

-- FieldSpec {fieldNumber = 598, fieldName = "LegLocaleOfIssue", fieldType = FieldTypeString, fieldValues = []}
newtype LegLocaleOfIssue = LegLocaleOfIssue {unLegLocaleOfIssue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegLocaleOfIssue

instance IsField LegLocaleOfIssue where
  fieldTag Proxy = 598
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegLocaleOfIssue
  fieldFromValue = fromValue >=> (prettyValidate . LegLocaleOfIssue)

-- FieldSpec {fieldNumber = 599, fieldName = "LegInstrRegistry", fieldType = FieldTypeString, fieldValues = []}
newtype LegInstrRegistry = LegInstrRegistry {unLegInstrRegistry :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegInstrRegistry

instance IsField LegInstrRegistry where
  fieldTag Proxy = 599
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegInstrRegistry
  fieldFromValue = fromValue >=> (prettyValidate . LegInstrRegistry)

-- FieldSpec {fieldNumber = 600, fieldName = "LegSymbol", fieldType = FieldTypeString, fieldValues = []}
newtype LegSymbol = LegSymbol {unLegSymbol :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSymbol

instance IsField LegSymbol where
  fieldTag Proxy = 600
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSymbol
  fieldFromValue = fromValue >=> (prettyValidate . LegSymbol)

-- FieldSpec {fieldNumber = 601, fieldName = "LegSymbolSfx", fieldType = FieldTypeString, fieldValues = []}
newtype LegSymbolSfx = LegSymbolSfx {unLegSymbolSfx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSymbolSfx

instance IsField LegSymbolSfx where
  fieldTag Proxy = 601
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSymbolSfx
  fieldFromValue = fromValue >=> (prettyValidate . LegSymbolSfx)

-- FieldSpec {fieldNumber = 602, fieldName = "LegSecurityID", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityID = LegSecurityID {unLegSecurityID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityID

instance IsField LegSecurityID where
  fieldTag Proxy = 602
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityID
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityID)

-- FieldSpec {fieldNumber = 603, fieldName = "LegSecurityIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityIDSource = LegSecurityIDSource {unLegSecurityIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityIDSource

instance IsField LegSecurityIDSource where
  fieldTag Proxy = 603
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityIDSource
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityIDSource)

-- FieldSpec {fieldNumber = 604, fieldName = "NoLegSecurityAltID", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLegSecurityAltID = NoLegSecurityAltID {unNoLegSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLegSecurityAltID

instance IsField NoLegSecurityAltID where
  fieldTag Proxy = 604
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLegSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . NoLegSecurityAltID)

-- FieldSpec {fieldNumber = 605, fieldName = "LegSecurityAltID", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityAltID = LegSecurityAltID {unLegSecurityAltID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityAltID

instance IsField LegSecurityAltID where
  fieldTag Proxy = 605
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityAltID
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityAltID)

-- FieldSpec {fieldNumber = 606, fieldName = "LegSecurityAltIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityAltIDSource = LegSecurityAltIDSource {unLegSecurityAltIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityAltIDSource

instance IsField LegSecurityAltIDSource where
  fieldTag Proxy = 606
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityAltIDSource
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityAltIDSource)

-- FieldSpec {fieldNumber = 607, fieldName = "LegProduct", fieldType = FieldTypeInt, fieldValues = []}
newtype LegProduct = LegProduct {unLegProduct :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegProduct

instance IsField LegProduct where
  fieldTag Proxy = 607
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegProduct
  fieldFromValue = fromValue >=> (prettyValidate . LegProduct)

-- FieldSpec {fieldNumber = 608, fieldName = "LegCFICode", fieldType = FieldTypeString, fieldValues = []}
newtype LegCFICode = LegCFICode {unLegCFICode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCFICode

instance IsField LegCFICode where
  fieldTag Proxy = 608
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCFICode
  fieldFromValue = fromValue >=> (prettyValidate . LegCFICode)

-- FieldSpec {fieldNumber = 609, fieldName = "LegSecurityType", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityType = LegSecurityType {unLegSecurityType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityType

instance IsField LegSecurityType where
  fieldTag Proxy = 609
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityType
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityType)

-- FieldSpec {fieldNumber = 610, fieldName = "LegMaturityMonthYear", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype LegMaturityMonthYear = LegMaturityMonthYear {unLegMaturityMonthYear :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegMaturityMonthYear

instance IsField LegMaturityMonthYear where
  fieldTag Proxy = 610
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegMaturityMonthYear
  fieldFromValue = fromValue >=> (prettyValidate . LegMaturityMonthYear)

-- FieldSpec {fieldNumber = 611, fieldName = "LegMaturityDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegMaturityDate = LegMaturityDate {unLegMaturityDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegMaturityDate

instance IsField LegMaturityDate where
  fieldTag Proxy = 611
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegMaturityDate
  fieldFromValue = fromValue >=> (prettyValidate . LegMaturityDate)

-- FieldSpec {fieldNumber = 612, fieldName = "LegStrikePrice", fieldType = FieldTypePrice, fieldValues = []}
newtype LegStrikePrice = LegStrikePrice {unLegStrikePrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStrikePrice

instance IsField LegStrikePrice where
  fieldTag Proxy = 612
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStrikePrice
  fieldFromValue = fromValue >=> (prettyValidate . LegStrikePrice)

-- FieldSpec {fieldNumber = 613, fieldName = "LegOptAttribute", fieldType = FieldTypeChar, fieldValues = []}
newtype LegOptAttribute = LegOptAttribute {unLegOptAttribute :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegOptAttribute

instance IsField LegOptAttribute where
  fieldTag Proxy = 613
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegOptAttribute
  fieldFromValue = fromValue >=> (prettyValidate . LegOptAttribute)

-- FieldSpec {fieldNumber = 614, fieldName = "LegContractMultiplier", fieldType = FieldTypeFloat, fieldValues = []}
newtype LegContractMultiplier = LegContractMultiplier {unLegContractMultiplier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegContractMultiplier

instance IsField LegContractMultiplier where
  fieldTag Proxy = 614
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegContractMultiplier
  fieldFromValue = fromValue >=> (prettyValidate . LegContractMultiplier)

-- FieldSpec {fieldNumber = 615, fieldName = "LegCouponRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype LegCouponRate = LegCouponRate {unLegCouponRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegCouponRate

instance IsField LegCouponRate where
  fieldTag Proxy = 615
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegCouponRate
  fieldFromValue = fromValue >=> (prettyValidate . LegCouponRate)

-- FieldSpec {fieldNumber = 616, fieldName = "LegSecurityExchange", fieldType = FieldTypeExchange, fieldValues = []}
newtype LegSecurityExchange = LegSecurityExchange {unLegSecurityExchange :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityExchange

instance IsField LegSecurityExchange where
  fieldTag Proxy = 616
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityExchange
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityExchange)

-- FieldSpec {fieldNumber = 617, fieldName = "LegIssuer", fieldType = FieldTypeString, fieldValues = []}
newtype LegIssuer = LegIssuer {unLegIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegIssuer

instance IsField LegIssuer where
  fieldTag Proxy = 617
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegIssuer
  fieldFromValue = fromValue >=> (prettyValidate . LegIssuer)

-- FieldSpec {fieldNumber = 618, fieldName = "EncodedLegIssuerLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedLegIssuerLen = EncodedLegIssuerLen {unEncodedLegIssuerLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedLegIssuerLen

instance IsField EncodedLegIssuerLen where
  fieldTag Proxy = 618
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedLegIssuerLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedLegIssuerLen)

-- FieldSpec {fieldNumber = 619, fieldName = "EncodedLegIssuer", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedLegIssuer = EncodedLegIssuer {unEncodedLegIssuer :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedLegIssuer

instance IsField EncodedLegIssuer where
  fieldTag Proxy = 619
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedLegIssuer
  fieldFromValue = fromValue >=> (prettyValidate . EncodedLegIssuer)

-- FieldSpec {fieldNumber = 620, fieldName = "LegSecurityDesc", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecurityDesc = LegSecurityDesc {unLegSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecurityDesc

instance IsField LegSecurityDesc where
  fieldTag Proxy = 620
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . LegSecurityDesc)

-- FieldSpec {fieldNumber = 621, fieldName = "EncodedLegSecurityDescLen", fieldType = FieldTypeLength, fieldValues = []}
newtype EncodedLegSecurityDescLen = EncodedLegSecurityDescLen {unEncodedLegSecurityDescLen :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedLegSecurityDescLen

instance IsField EncodedLegSecurityDescLen where
  fieldTag Proxy = 621
  fieldIsData Proxy = False
  fieldToValue = toValue . unEncodedLegSecurityDescLen
  fieldFromValue = fromValue >=> (prettyValidate . EncodedLegSecurityDescLen)

-- FieldSpec {fieldNumber = 622, fieldName = "EncodedLegSecurityDesc", fieldType = FieldTypeData, fieldValues = []}
newtype EncodedLegSecurityDesc = EncodedLegSecurityDesc {unEncodedLegSecurityDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EncodedLegSecurityDesc

instance IsField EncodedLegSecurityDesc where
  fieldTag Proxy = 622
  fieldIsData Proxy = True
  fieldToValue = toValue . unEncodedLegSecurityDesc
  fieldFromValue = fromValue >=> (prettyValidate . EncodedLegSecurityDesc)

-- FieldSpec {fieldNumber = 623, fieldName = "LegRatioQty", fieldType = FieldTypeFloat, fieldValues = []}
newtype LegRatioQty = LegRatioQty {unLegRatioQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRatioQty

instance IsField LegRatioQty where
  fieldTag Proxy = 623
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRatioQty
  fieldFromValue = fromValue >=> (prettyValidate . LegRatioQty)

-- FieldSpec {fieldNumber = 624, fieldName = "LegSide", fieldType = FieldTypeChar, fieldValues = []}
newtype LegSide = LegSide {unLegSide :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSide

instance IsField LegSide where
  fieldTag Proxy = 624
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSide
  fieldFromValue = fromValue >=> (prettyValidate . LegSide)

-- FieldSpec {fieldNumber = 625, fieldName = "TradingSessionSubID", fieldType = FieldTypeString, fieldValues = []}
newtype TradingSessionSubID = TradingSessionSubID {unTradingSessionSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradingSessionSubID

instance IsField TradingSessionSubID where
  fieldTag Proxy = 625
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradingSessionSubID
  fieldFromValue = fromValue >=> (prettyValidate . TradingSessionSubID)

-- FieldSpec {fieldNumber = 626, fieldName = "AllocType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CALCULATED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PRELIMINARY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "READY_TO_BOOK"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "WAREHOUSE_INSTRUCTION"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "REQUEST_TO_INTERMEDIARY"}]}
newtype AllocType = AllocType {unAllocType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocType

instance IsField AllocType where
  fieldTag Proxy = 626
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocType
  fieldFromValue = fromValue >=> (prettyValidate . AllocType)

-- FieldSpec {fieldNumber = 627, fieldName = "NoHops", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoHops = NoHops {unNoHops :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoHops

instance IsField NoHops where
  fieldTag Proxy = 627
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoHops
  fieldFromValue = fromValue >=> (prettyValidate . NoHops)

-- FieldSpec {fieldNumber = 628, fieldName = "HopCompID", fieldType = FieldTypeString, fieldValues = []}
newtype HopCompID = HopCompID {unHopCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HopCompID

instance IsField HopCompID where
  fieldTag Proxy = 628
  fieldIsData Proxy = False
  fieldToValue = toValue . unHopCompID
  fieldFromValue = fromValue >=> (prettyValidate . HopCompID)

-- FieldSpec {fieldNumber = 629, fieldName = "HopSendingTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype HopSendingTime = HopSendingTime {unHopSendingTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HopSendingTime

instance IsField HopSendingTime where
  fieldTag Proxy = 629
  fieldIsData Proxy = False
  fieldToValue = toValue . unHopSendingTime
  fieldFromValue = fromValue >=> (prettyValidate . HopSendingTime)

-- FieldSpec {fieldNumber = 630, fieldName = "HopRefID", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype HopRefID = HopRefID {unHopRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity HopRefID

instance IsField HopRefID where
  fieldTag Proxy = 630
  fieldIsData Proxy = False
  fieldToValue = toValue . unHopRefID
  fieldFromValue = fromValue >=> (prettyValidate . HopRefID)

-- FieldSpec {fieldNumber = 631, fieldName = "MidPx", fieldType = FieldTypePrice, fieldValues = []}
newtype MidPx = MidPx {unMidPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MidPx

instance IsField MidPx where
  fieldTag Proxy = 631
  fieldIsData Proxy = False
  fieldToValue = toValue . unMidPx
  fieldFromValue = fromValue >=> (prettyValidate . MidPx)

-- FieldSpec {fieldNumber = 632, fieldName = "BidYield", fieldType = FieldTypePercentage, fieldValues = []}
newtype BidYield = BidYield {unBidYield :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidYield

instance IsField BidYield where
  fieldTag Proxy = 632
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidYield
  fieldFromValue = fromValue >=> (prettyValidate . BidYield)

-- FieldSpec {fieldNumber = 633, fieldName = "MidYield", fieldType = FieldTypePercentage, fieldValues = []}
newtype MidYield = MidYield {unMidYield :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MidYield

instance IsField MidYield where
  fieldTag Proxy = 633
  fieldIsData Proxy = False
  fieldToValue = toValue . unMidYield
  fieldFromValue = fromValue >=> (prettyValidate . MidYield)

-- FieldSpec {fieldNumber = 634, fieldName = "OfferYield", fieldType = FieldTypePercentage, fieldValues = []}
newtype OfferYield = OfferYield {unOfferYield :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferYield

instance IsField OfferYield where
  fieldTag Proxy = 634
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferYield
  fieldFromValue = fromValue >=> (prettyValidate . OfferYield)

-- FieldSpec {fieldNumber = 635, fieldName = "ClearingFeeIndicator", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "CBOE_MEMBER"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "NON_MEMBER_AND_CUSTOMER"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "EQUITY_MEMBER_AND_CLEARING_MEMBER"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "FULL_AND_ASSOCIATE_MEMBER"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "FIRMS106_H_AND106_J"},FieldValueSpec {fieldValueEnum = "I", fieldValueDescription = "GIM"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LESSEE106_F_EMPLOYEES"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "ALL_OTHER_OWNERSHIP_TYPES"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIRST_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SECOND_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "THIRD_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "FOURTH_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "FIFTH_YEAR_DELEGATE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "SIXTH_YEAR_DELEGATE"}]}
newtype ClearingFeeIndicator = ClearingFeeIndicator {unClearingFeeIndicator :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClearingFeeIndicator

instance IsField ClearingFeeIndicator where
  fieldTag Proxy = 635
  fieldIsData Proxy = False
  fieldToValue = toValue . unClearingFeeIndicator
  fieldFromValue = fromValue >=> (prettyValidate . ClearingFeeIndicator)

-- FieldSpec {fieldNumber = 636, fieldName = "WorkingIndicator", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype WorkingIndicator = WorkingIndicator {unWorkingIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity WorkingIndicator

instance IsField WorkingIndicator where
  fieldTag Proxy = 636
  fieldIsData Proxy = False
  fieldToValue = toValue . unWorkingIndicator
  fieldFromValue = fromValue >=> (prettyValidate . WorkingIndicator)

-- FieldSpec {fieldNumber = 637, fieldName = "LegLastPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LegLastPx = LegLastPx {unLegLastPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegLastPx

instance IsField LegLastPx where
  fieldTag Proxy = 637
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegLastPx
  fieldFromValue = fromValue >=> (prettyValidate . LegLastPx)

-- FieldSpec {fieldNumber = 638, fieldName = "PriorityIndicator", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PRIORITY_UNCHANGED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE"}]}
newtype PriorityIndicator = PriorityIndicator {unPriorityIndicator :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PriorityIndicator

instance IsField PriorityIndicator where
  fieldTag Proxy = 638
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriorityIndicator
  fieldFromValue = fromValue >=> (prettyValidate . PriorityIndicator)

-- FieldSpec {fieldNumber = 639, fieldName = "PriceImprovement", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype PriceImprovement = PriceImprovement {unPriceImprovement :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PriceImprovement

instance IsField PriceImprovement where
  fieldTag Proxy = 639
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriceImprovement
  fieldFromValue = fromValue >=> (prettyValidate . PriceImprovement)

-- FieldSpec {fieldNumber = 640, fieldName = "Price2", fieldType = FieldTypePrice, fieldValues = []}
newtype Price2 = Price2 {unPrice2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Price2

instance IsField Price2 where
  fieldTag Proxy = 640
  fieldIsData Proxy = False
  fieldToValue = toValue . unPrice2
  fieldFromValue = fromValue >=> (prettyValidate . Price2)

-- FieldSpec {fieldNumber = 641, fieldName = "LastForwardPoints2", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype LastForwardPoints2 = LastForwardPoints2 {unLastForwardPoints2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastForwardPoints2

instance IsField LastForwardPoints2 where
  fieldTag Proxy = 641
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastForwardPoints2
  fieldFromValue = fromValue >=> (prettyValidate . LastForwardPoints2)

-- FieldSpec {fieldNumber = 642, fieldName = "BidForwardPoints2", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype BidForwardPoints2 = BidForwardPoints2 {unBidForwardPoints2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BidForwardPoints2

instance IsField BidForwardPoints2 where
  fieldTag Proxy = 642
  fieldIsData Proxy = False
  fieldToValue = toValue . unBidForwardPoints2
  fieldFromValue = fromValue >=> (prettyValidate . BidForwardPoints2)

-- FieldSpec {fieldNumber = 643, fieldName = "OfferForwardPoints2", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype OfferForwardPoints2 = OfferForwardPoints2 {unOfferForwardPoints2 :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OfferForwardPoints2

instance IsField OfferForwardPoints2 where
  fieldTag Proxy = 643
  fieldIsData Proxy = False
  fieldToValue = toValue . unOfferForwardPoints2
  fieldFromValue = fromValue >=> (prettyValidate . OfferForwardPoints2)

-- FieldSpec {fieldNumber = 644, fieldName = "RFQReqID", fieldType = FieldTypeString, fieldValues = []}
newtype RFQReqID = RFQReqID {unRFQReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RFQReqID

instance IsField RFQReqID where
  fieldTag Proxy = 644
  fieldIsData Proxy = False
  fieldToValue = toValue . unRFQReqID
  fieldFromValue = fromValue >=> (prettyValidate . RFQReqID)

-- FieldSpec {fieldNumber = 645, fieldName = "MktBidPx", fieldType = FieldTypePrice, fieldValues = []}
newtype MktBidPx = MktBidPx {unMktBidPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MktBidPx

instance IsField MktBidPx where
  fieldTag Proxy = 645
  fieldIsData Proxy = False
  fieldToValue = toValue . unMktBidPx
  fieldFromValue = fromValue >=> (prettyValidate . MktBidPx)

-- FieldSpec {fieldNumber = 646, fieldName = "MktOfferPx", fieldType = FieldTypePrice, fieldValues = []}
newtype MktOfferPx = MktOfferPx {unMktOfferPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MktOfferPx

instance IsField MktOfferPx where
  fieldTag Proxy = 646
  fieldIsData Proxy = False
  fieldToValue = toValue . unMktOfferPx
  fieldFromValue = fromValue >=> (prettyValidate . MktOfferPx)

-- FieldSpec {fieldNumber = 647, fieldName = "MinBidSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype MinBidSize = MinBidSize {unMinBidSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MinBidSize

instance IsField MinBidSize where
  fieldTag Proxy = 647
  fieldIsData Proxy = False
  fieldToValue = toValue . unMinBidSize
  fieldFromValue = fromValue >=> (prettyValidate . MinBidSize)

-- FieldSpec {fieldNumber = 648, fieldName = "MinOfferSize", fieldType = FieldTypeQTY, fieldValues = []}
newtype MinOfferSize = MinOfferSize {unMinOfferSize :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MinOfferSize

instance IsField MinOfferSize where
  fieldTag Proxy = 648
  fieldIsData Proxy = False
  fieldToValue = toValue . unMinOfferSize
  fieldFromValue = fromValue >=> (prettyValidate . MinOfferSize)

-- FieldSpec {fieldNumber = 649, fieldName = "QuoteStatusReqID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteStatusReqID = QuoteStatusReqID {unQuoteStatusReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteStatusReqID

instance IsField QuoteStatusReqID where
  fieldTag Proxy = 649
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteStatusReqID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteStatusReqID)

-- FieldSpec {fieldNumber = 650, fieldName = "LegalConfirm", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype LegalConfirm = LegalConfirm {unLegalConfirm :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity LegalConfirm

instance IsField LegalConfirm where
  fieldTag Proxy = 650
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegalConfirm
  fieldFromValue = fromValue >=> (prettyValidate . LegalConfirm)

-- FieldSpec {fieldNumber = 651, fieldName = "UnderlyingLastPx", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingLastPx = UnderlyingLastPx {unUnderlyingLastPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingLastPx

instance IsField UnderlyingLastPx where
  fieldTag Proxy = 651
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingLastPx
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingLastPx)

-- FieldSpec {fieldNumber = 652, fieldName = "UnderlyingLastQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype UnderlyingLastQty = UnderlyingLastQty {unUnderlyingLastQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingLastQty

instance IsField UnderlyingLastQty where
  fieldTag Proxy = 652
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingLastQty
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingLastQty)

-- FieldSpec {fieldNumber = 654, fieldName = "LegRefID", fieldType = FieldTypeString, fieldValues = []}
newtype LegRefID = LegRefID {unLegRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegRefID

instance IsField LegRefID where
  fieldTag Proxy = 654
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegRefID
  fieldFromValue = fromValue >=> (prettyValidate . LegRefID)

-- FieldSpec {fieldNumber = 655, fieldName = "ContraLegRefID", fieldType = FieldTypeString, fieldValues = []}
newtype ContraLegRefID = ContraLegRefID {unContraLegRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContraLegRefID

instance IsField ContraLegRefID where
  fieldTag Proxy = 655
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraLegRefID
  fieldFromValue = fromValue >=> (prettyValidate . ContraLegRefID)

-- FieldSpec {fieldNumber = 656, fieldName = "SettlCurrBidFxRate", fieldType = FieldTypeFloat, fieldValues = []}
newtype SettlCurrBidFxRate = SettlCurrBidFxRate {unSettlCurrBidFxRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrBidFxRate

instance IsField SettlCurrBidFxRate where
  fieldTag Proxy = 656
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrBidFxRate
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrBidFxRate)

-- FieldSpec {fieldNumber = 657, fieldName = "SettlCurrOfferFxRate", fieldType = FieldTypeFloat, fieldValues = []}
newtype SettlCurrOfferFxRate = SettlCurrOfferFxRate {unSettlCurrOfferFxRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlCurrOfferFxRate

instance IsField SettlCurrOfferFxRate where
  fieldTag Proxy = 657
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlCurrOfferFxRate
  fieldFromValue = fromValue >=> (prettyValidate . SettlCurrOfferFxRate)

-- FieldSpec {fieldNumber = 658, fieldName = "QuoteRequestRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_SYMBOL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXCHANGE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "QUOTE_REQUEST_EXCEEDS_LIMIT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "TOO_LATE_TO_ENTER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_PRICE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "NOT_AUTHORIZED_TO_REQUEST_QUOTE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "NO_MATCH_FOR_INQUIRY"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "NO_MARKET_FOR_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "NO_INVENTORY"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "PASS"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype QuoteRequestRejectReason = QuoteRequestRejectReason {unQuoteRequestRejectReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRequestRejectReason

instance IsField QuoteRequestRejectReason where
  fieldTag Proxy = 658
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteRequestRejectReason
  fieldFromValue = fromValue >=> (prettyValidate . QuoteRequestRejectReason)

-- FieldSpec {fieldNumber = 659, fieldName = "SideComplianceID", fieldType = FieldTypeString, fieldValues = []}
newtype SideComplianceID = SideComplianceID {unSideComplianceID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SideComplianceID

instance IsField SideComplianceID where
  fieldTag Proxy = 659
  fieldIsData Proxy = False
  fieldToValue = toValue . unSideComplianceID
  fieldFromValue = fromValue >=> (prettyValidate . SideComplianceID)

-- FieldSpec {fieldNumber = 660, fieldName = "AcctIDSource", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BIC"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SID_CODE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TFM"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OMGEO"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "DTCC_CODE"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype AcctIDSource = AcctIDSource {unAcctIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AcctIDSource

instance IsField AcctIDSource where
  fieldTag Proxy = 660
  fieldIsData Proxy = False
  fieldToValue = toValue . unAcctIDSource
  fieldFromValue = fromValue >=> (prettyValidate . AcctIDSource)

-- FieldSpec {fieldNumber = 661, fieldName = "AllocAcctIDSource", fieldType = FieldTypeInt, fieldValues = []}
newtype AllocAcctIDSource = AllocAcctIDSource {unAllocAcctIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocAcctIDSource

instance IsField AllocAcctIDSource where
  fieldTag Proxy = 661
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocAcctIDSource
  fieldFromValue = fromValue >=> (prettyValidate . AllocAcctIDSource)

-- FieldSpec {fieldNumber = 662, fieldName = "BenchmarkPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype BenchmarkPrice = BenchmarkPrice {unBenchmarkPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkPrice

instance IsField BenchmarkPrice where
  fieldTag Proxy = 662
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkPrice
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkPrice)

-- FieldSpec {fieldNumber = 663, fieldName = "BenchmarkPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype BenchmarkPriceType = BenchmarkPriceType {unBenchmarkPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkPriceType

instance IsField BenchmarkPriceType where
  fieldTag Proxy = 663
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkPriceType
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkPriceType)

-- FieldSpec {fieldNumber = 664, fieldName = "ConfirmID", fieldType = FieldTypeString, fieldValues = []}
newtype ConfirmID = ConfirmID {unConfirmID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmID

instance IsField ConfirmID where
  fieldTag Proxy = 664
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmID
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmID)

-- FieldSpec {fieldNumber = 665, fieldName = "ConfirmStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "RECEIVED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MISMATCHED_ACCOUNT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MISSING_SETTLEMENT_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CONFIRMED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "REQUEST_REJECTED"}]}
newtype ConfirmStatus = ConfirmStatus {unConfirmStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmStatus

instance IsField ConfirmStatus where
  fieldTag Proxy = 665
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmStatus
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmStatus)

-- FieldSpec {fieldNumber = 666, fieldName = "ConfirmTransType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"}]}
newtype ConfirmTransType = ConfirmTransType {unConfirmTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmTransType

instance IsField ConfirmTransType where
  fieldTag Proxy = 666
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmTransType
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmTransType)

-- FieldSpec {fieldNumber = 667, fieldName = "ContractSettlMonth", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype ContractSettlMonth = ContractSettlMonth {unContractSettlMonth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ContractSettlMonth

instance IsField ContractSettlMonth where
  fieldTag Proxy = 667
  fieldIsData Proxy = False
  fieldToValue = toValue . unContractSettlMonth
  fieldFromValue = fromValue >=> (prettyValidate . ContractSettlMonth)

-- FieldSpec {fieldNumber = 668, fieldName = "DeliveryForm", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BOOK_ENTRY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "BEARER"}]}
newtype DeliveryForm = DeliveryForm {unDeliveryForm :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliveryForm

instance IsField DeliveryForm where
  fieldTag Proxy = 668
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliveryForm
  fieldFromValue = fromValue >=> (prettyValidate . DeliveryForm)

-- FieldSpec {fieldNumber = 669, fieldName = "LastParPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LastParPx = LastParPx {unLastParPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastParPx

instance IsField LastParPx where
  fieldTag Proxy = 669
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastParPx
  fieldFromValue = fromValue >=> (prettyValidate . LastParPx)

-- FieldSpec {fieldNumber = 670, fieldName = "NoLegAllocs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLegAllocs = NoLegAllocs {unNoLegAllocs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLegAllocs

instance IsField NoLegAllocs where
  fieldTag Proxy = 670
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLegAllocs
  fieldFromValue = fromValue >=> (prettyValidate . NoLegAllocs)

-- FieldSpec {fieldNumber = 671, fieldName = "LegAllocAccount", fieldType = FieldTypeString, fieldValues = []}
newtype LegAllocAccount = LegAllocAccount {unLegAllocAccount :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegAllocAccount

instance IsField LegAllocAccount where
  fieldTag Proxy = 671
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegAllocAccount
  fieldFromValue = fromValue >=> (prettyValidate . LegAllocAccount)

-- FieldSpec {fieldNumber = 672, fieldName = "LegIndividualAllocID", fieldType = FieldTypeString, fieldValues = []}
newtype LegIndividualAllocID = LegIndividualAllocID {unLegIndividualAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegIndividualAllocID

instance IsField LegIndividualAllocID where
  fieldTag Proxy = 672
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegIndividualAllocID
  fieldFromValue = fromValue >=> (prettyValidate . LegIndividualAllocID)

-- FieldSpec {fieldNumber = 673, fieldName = "LegAllocQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LegAllocQty = LegAllocQty {unLegAllocQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegAllocQty

instance IsField LegAllocQty where
  fieldTag Proxy = 673
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegAllocQty
  fieldFromValue = fromValue >=> (prettyValidate . LegAllocQty)

-- FieldSpec {fieldNumber = 674, fieldName = "LegAllocAcctIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype LegAllocAcctIDSource = LegAllocAcctIDSource {unLegAllocAcctIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegAllocAcctIDSource

instance IsField LegAllocAcctIDSource where
  fieldTag Proxy = 674
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegAllocAcctIDSource
  fieldFromValue = fromValue >=> (prettyValidate . LegAllocAcctIDSource)

-- FieldSpec {fieldNumber = 675, fieldName = "LegSettlCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype LegSettlCurrency = LegSettlCurrency {unLegSettlCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSettlCurrency

instance IsField LegSettlCurrency where
  fieldTag Proxy = 675
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSettlCurrency
  fieldFromValue = fromValue >=> (prettyValidate . LegSettlCurrency)

-- FieldSpec {fieldNumber = 676, fieldName = "LegBenchmarkCurveCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype LegBenchmarkCurveCurrency = LegBenchmarkCurveCurrency {unLegBenchmarkCurveCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkCurveCurrency

instance IsField LegBenchmarkCurveCurrency where
  fieldTag Proxy = 676
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkCurveCurrency
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkCurveCurrency)

-- FieldSpec {fieldNumber = 677, fieldName = "LegBenchmarkCurveName", fieldType = FieldTypeString, fieldValues = []}
newtype LegBenchmarkCurveName = LegBenchmarkCurveName {unLegBenchmarkCurveName :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkCurveName

instance IsField LegBenchmarkCurveName where
  fieldTag Proxy = 677
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkCurveName
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkCurveName)

-- FieldSpec {fieldNumber = 678, fieldName = "LegBenchmarkCurvePoint", fieldType = FieldTypeString, fieldValues = []}
newtype LegBenchmarkCurvePoint = LegBenchmarkCurvePoint {unLegBenchmarkCurvePoint :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkCurvePoint

instance IsField LegBenchmarkCurvePoint where
  fieldTag Proxy = 678
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkCurvePoint
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkCurvePoint)

-- FieldSpec {fieldNumber = 679, fieldName = "LegBenchmarkPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype LegBenchmarkPrice = LegBenchmarkPrice {unLegBenchmarkPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkPrice

instance IsField LegBenchmarkPrice where
  fieldTag Proxy = 679
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkPrice
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkPrice)

-- FieldSpec {fieldNumber = 680, fieldName = "LegBenchmarkPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype LegBenchmarkPriceType = LegBenchmarkPriceType {unLegBenchmarkPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBenchmarkPriceType

instance IsField LegBenchmarkPriceType where
  fieldTag Proxy = 680
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBenchmarkPriceType
  fieldFromValue = fromValue >=> (prettyValidate . LegBenchmarkPriceType)

-- FieldSpec {fieldNumber = 681, fieldName = "LegBidPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LegBidPx = LegBidPx {unLegBidPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegBidPx

instance IsField LegBidPx where
  fieldTag Proxy = 681
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegBidPx
  fieldFromValue = fromValue >=> (prettyValidate . LegBidPx)

-- FieldSpec {fieldNumber = 682, fieldName = "LegIOIQty", fieldType = FieldTypeString, fieldValues = []}
newtype LegIOIQty = LegIOIQty {unLegIOIQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegIOIQty

instance IsField LegIOIQty where
  fieldTag Proxy = 682
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegIOIQty
  fieldFromValue = fromValue >=> (prettyValidate . LegIOIQty)

-- FieldSpec {fieldNumber = 683, fieldName = "NoLegStipulations", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoLegStipulations = NoLegStipulations {unNoLegStipulations :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoLegStipulations

instance IsField NoLegStipulations where
  fieldTag Proxy = 683
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoLegStipulations
  fieldFromValue = fromValue >=> (prettyValidate . NoLegStipulations)

-- FieldSpec {fieldNumber = 684, fieldName = "LegOfferPx", fieldType = FieldTypePrice, fieldValues = []}
newtype LegOfferPx = LegOfferPx {unLegOfferPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegOfferPx

instance IsField LegOfferPx where
  fieldTag Proxy = 684
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegOfferPx
  fieldFromValue = fromValue >=> (prettyValidate . LegOfferPx)

-- FieldSpec {fieldNumber = 686, fieldName = "LegPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype LegPriceType = LegPriceType {unLegPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegPriceType

instance IsField LegPriceType where
  fieldTag Proxy = 686
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegPriceType
  fieldFromValue = fromValue >=> (prettyValidate . LegPriceType)

-- FieldSpec {fieldNumber = 687, fieldName = "LegQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LegQty = LegQty {unLegQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegQty

instance IsField LegQty where
  fieldTag Proxy = 687
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegQty
  fieldFromValue = fromValue >=> (prettyValidate . LegQty)

-- FieldSpec {fieldNumber = 688, fieldName = "LegStipulationType", fieldType = FieldTypeString, fieldValues = []}
newtype LegStipulationType = LegStipulationType {unLegStipulationType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStipulationType

instance IsField LegStipulationType where
  fieldTag Proxy = 688
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStipulationType
  fieldFromValue = fromValue >=> (prettyValidate . LegStipulationType)

-- FieldSpec {fieldNumber = 689, fieldName = "LegStipulationValue", fieldType = FieldTypeString, fieldValues = []}
newtype LegStipulationValue = LegStipulationValue {unLegStipulationValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStipulationValue

instance IsField LegStipulationValue where
  fieldTag Proxy = 689
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStipulationValue
  fieldFromValue = fromValue >=> (prettyValidate . LegStipulationValue)

-- FieldSpec {fieldNumber = 690, fieldName = "LegSwapType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PAR_FOR_PAR"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MODIFIED_DURATION"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "RISK"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PROCEEDS"}]}
newtype LegSwapType = LegSwapType {unLegSwapType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSwapType

instance IsField LegSwapType where
  fieldTag Proxy = 690
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSwapType
  fieldFromValue = fromValue >=> (prettyValidate . LegSwapType)

-- FieldSpec {fieldNumber = 691, fieldName = "Pool", fieldType = FieldTypeString, fieldValues = []}
newtype Pool = Pool {unPool :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Pool

instance IsField Pool where
  fieldTag Proxy = 691
  fieldIsData Proxy = False
  fieldToValue = toValue . unPool
  fieldFromValue = fromValue >=> (prettyValidate . Pool)

-- FieldSpec {fieldNumber = 692, fieldName = "QuotePriceType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PERCENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PER_SHARE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FIXED_AMOUNT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "DISCOUNT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PREMIUM"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "SPREAD"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "TED_PRICE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TED_YIELD"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "YIELD_SPREAD"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "YIELD"}]}
newtype QuotePriceType = QuotePriceType {unQuotePriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuotePriceType

instance IsField QuotePriceType where
  fieldTag Proxy = 692
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuotePriceType
  fieldFromValue = fromValue >=> (prettyValidate . QuotePriceType)

-- FieldSpec {fieldNumber = 693, fieldName = "QuoteRespID", fieldType = FieldTypeString, fieldValues = []}
newtype QuoteRespID = QuoteRespID {unQuoteRespID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRespID

instance IsField QuoteRespID where
  fieldTag Proxy = 693
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteRespID
  fieldFromValue = fromValue >=> (prettyValidate . QuoteRespID)

-- FieldSpec {fieldNumber = 694, fieldName = "QuoteRespType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "HIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COUNTER"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EXPIRED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "COVER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "DONE_AWAY"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PASS"}]}
newtype QuoteRespType = QuoteRespType {unQuoteRespType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRespType

instance IsField QuoteRespType where
  fieldTag Proxy = 694
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteRespType
  fieldFromValue = fromValue >=> (prettyValidate . QuoteRespType)

-- FieldSpec {fieldNumber = 695, fieldName = "QuoteQualifier", fieldType = FieldTypeChar, fieldValues = []}
newtype QuoteQualifier = QuoteQualifier {unQuoteQualifier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QuoteQualifier

instance IsField QuoteQualifier where
  fieldTag Proxy = 695
  fieldIsData Proxy = False
  fieldToValue = toValue . unQuoteQualifier
  fieldFromValue = fromValue >=> (prettyValidate . QuoteQualifier)

-- FieldSpec {fieldNumber = 696, fieldName = "YieldRedemptionDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype YieldRedemptionDate = YieldRedemptionDate {unYieldRedemptionDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity YieldRedemptionDate

instance IsField YieldRedemptionDate where
  fieldTag Proxy = 696
  fieldIsData Proxy = False
  fieldToValue = toValue . unYieldRedemptionDate
  fieldFromValue = fromValue >=> (prettyValidate . YieldRedemptionDate)

-- FieldSpec {fieldNumber = 697, fieldName = "YieldRedemptionPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype YieldRedemptionPrice = YieldRedemptionPrice {unYieldRedemptionPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity YieldRedemptionPrice

instance IsField YieldRedemptionPrice where
  fieldTag Proxy = 697
  fieldIsData Proxy = False
  fieldToValue = toValue . unYieldRedemptionPrice
  fieldFromValue = fromValue >=> (prettyValidate . YieldRedemptionPrice)

-- FieldSpec {fieldNumber = 698, fieldName = "YieldRedemptionPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype YieldRedemptionPriceType = YieldRedemptionPriceType {unYieldRedemptionPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity YieldRedemptionPriceType

instance IsField YieldRedemptionPriceType where
  fieldTag Proxy = 698
  fieldIsData Proxy = False
  fieldToValue = toValue . unYieldRedemptionPriceType
  fieldFromValue = fromValue >=> (prettyValidate . YieldRedemptionPriceType)

-- FieldSpec {fieldNumber = 699, fieldName = "BenchmarkSecurityID", fieldType = FieldTypeString, fieldValues = []}
newtype BenchmarkSecurityID = BenchmarkSecurityID {unBenchmarkSecurityID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkSecurityID

instance IsField BenchmarkSecurityID where
  fieldTag Proxy = 699
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkSecurityID
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkSecurityID)

-- FieldSpec {fieldNumber = 700, fieldName = "ReversalIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype ReversalIndicator = ReversalIndicator {unReversalIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity ReversalIndicator

instance IsField ReversalIndicator where
  fieldTag Proxy = 700
  fieldIsData Proxy = False
  fieldToValue = toValue . unReversalIndicator
  fieldFromValue = fromValue >=> (prettyValidate . ReversalIndicator)

-- FieldSpec {fieldNumber = 701, fieldName = "YieldCalcDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype YieldCalcDate = YieldCalcDate {unYieldCalcDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity YieldCalcDate

instance IsField YieldCalcDate where
  fieldTag Proxy = 701
  fieldIsData Proxy = False
  fieldToValue = toValue . unYieldCalcDate
  fieldFromValue = fromValue >=> (prettyValidate . YieldCalcDate)

-- FieldSpec {fieldNumber = 702, fieldName = "NoPositions", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoPositions = NoPositions {unNoPositions :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoPositions

instance IsField NoPositions where
  fieldTag Proxy = 702
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoPositions
  fieldFromValue = fromValue >=> (prettyValidate . NoPositions)

-- FieldSpec {fieldNumber = 703, fieldName = "PosType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "TQ", fieldValueDescription = "TRANSACTION_QUANTITY"},FieldValueSpec {fieldValueEnum = "IAS", fieldValueDescription = "INTRA_SPREAD_QTY"},FieldValueSpec {fieldValueEnum = "IES", fieldValueDescription = "INTER_SPREAD_QTY"},FieldValueSpec {fieldValueEnum = "FIN", fieldValueDescription = "END_OF_DAY_QTY"},FieldValueSpec {fieldValueEnum = "SOD", fieldValueDescription = "START_OF_DAY_QTY"},FieldValueSpec {fieldValueEnum = "EX", fieldValueDescription = "OPTION_EXERCISE_QTY"},FieldValueSpec {fieldValueEnum = "AS", fieldValueDescription = "OPTION_ASSIGNMENT"},FieldValueSpec {fieldValueEnum = "TX", fieldValueDescription = "TRANSACTION_FROM_EXERCISE"},FieldValueSpec {fieldValueEnum = "TA", fieldValueDescription = "TRANSACTION_FROM_ASSIGNMENT"},FieldValueSpec {fieldValueEnum = "PIT", fieldValueDescription = "PIT_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "TRF", fieldValueDescription = "TRANSFER_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "ETR", fieldValueDescription = "ELECTRONIC_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "ALC", fieldValueDescription = "ALLOCATION_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "PA", fieldValueDescription = "ADJUSTMENT_QTY"},FieldValueSpec {fieldValueEnum = "ASF", fieldValueDescription = "AS_OF_TRADE_QTY"},FieldValueSpec {fieldValueEnum = "DLV", fieldValueDescription = "DELIVERY_QTY"},FieldValueSpec {fieldValueEnum = "TOT", fieldValueDescription = "TOTAL_TRANSACTION_QTY"},FieldValueSpec {fieldValueEnum = "XM", fieldValueDescription = "CROSS_MARGIN_QTY"},FieldValueSpec {fieldValueEnum = "SPL", fieldValueDescription = "INTEGRAL_SPLIT"}]}
newtype PosType = PosType {unPosType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosType

instance IsField PosType where
  fieldTag Proxy = 703
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosType
  fieldFromValue = fromValue >=> (prettyValidate . PosType)

-- FieldSpec {fieldNumber = 704, fieldName = "LongQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype LongQty = LongQty {unLongQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LongQty

instance IsField LongQty where
  fieldTag Proxy = 704
  fieldIsData Proxy = False
  fieldToValue = toValue . unLongQty
  fieldFromValue = fromValue >=> (prettyValidate . LongQty)

-- FieldSpec {fieldNumber = 705, fieldName = "ShortQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype ShortQty = ShortQty {unShortQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ShortQty

instance IsField ShortQty where
  fieldTag Proxy = 705
  fieldIsData Proxy = False
  fieldToValue = toValue . unShortQty
  fieldFromValue = fromValue >=> (prettyValidate . ShortQty)

-- FieldSpec {fieldNumber = 706, fieldName = "PosQtyStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUBMITTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REJECTED"}]}
newtype PosQtyStatus = PosQtyStatus {unPosQtyStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosQtyStatus

instance IsField PosQtyStatus where
  fieldTag Proxy = 706
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosQtyStatus
  fieldFromValue = fromValue >=> (prettyValidate . PosQtyStatus)

-- FieldSpec {fieldNumber = 707, fieldName = "PosAmtType", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "FMTM", fieldValueDescription = "FINAL_MARK_TO_MARKET_AMOUNT"},FieldValueSpec {fieldValueEnum = "IMTM", fieldValueDescription = "INCREMENTAL_MARK_TO_MARKET_AMOUNT"},FieldValueSpec {fieldValueEnum = "TVAR", fieldValueDescription = "TRADE_VARIATION_AMOUNT"},FieldValueSpec {fieldValueEnum = "SMTM", fieldValueDescription = "START_OF_DAY_MARK_TO_MARKET_AMOUNT"},FieldValueSpec {fieldValueEnum = "PREM", fieldValueDescription = "PREMIUM_AMOUNT"},FieldValueSpec {fieldValueEnum = "CRES", fieldValueDescription = "CASH_RESIDUAL_AMOUNT"},FieldValueSpec {fieldValueEnum = "CASH", fieldValueDescription = "CASH_AMOUNT"},FieldValueSpec {fieldValueEnum = "VADJ", fieldValueDescription = "VALUE_ADJUSTED_AMOUNT"}]}
newtype PosAmtType = PosAmtType {unPosAmtType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosAmtType

instance IsField PosAmtType where
  fieldTag Proxy = 707
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosAmtType
  fieldFromValue = fromValue >=> (prettyValidate . PosAmtType)

-- FieldSpec {fieldNumber = 708, fieldName = "PosAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype PosAmt = PosAmt {unPosAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosAmt

instance IsField PosAmt where
  fieldTag Proxy = 708
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosAmt
  fieldFromValue = fromValue >=> (prettyValidate . PosAmt)

-- FieldSpec {fieldNumber = 709, fieldName = "PosTransType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXERCISE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DO_NOT_EXERCISE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "POSITION_ADJUSTMENT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "POSITION_CHANGE_SUBMISSION"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PLEDGE"}]}
newtype PosTransType = PosTransType {unPosTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosTransType

instance IsField PosTransType where
  fieldTag Proxy = 709
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosTransType
  fieldFromValue = fromValue >=> (prettyValidate . PosTransType)

-- FieldSpec {fieldNumber = 710, fieldName = "PosReqID", fieldType = FieldTypeString, fieldValues = []}
newtype PosReqID = PosReqID {unPosReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosReqID

instance IsField PosReqID where
  fieldTag Proxy = 710
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosReqID
  fieldFromValue = fromValue >=> (prettyValidate . PosReqID)

-- FieldSpec {fieldNumber = 711, fieldName = "NoUnderlyings", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoUnderlyings = NoUnderlyings {unNoUnderlyings :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoUnderlyings

instance IsField NoUnderlyings where
  fieldTag Proxy = 711
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoUnderlyings
  fieldFromValue = fromValue >=> (prettyValidate . NoUnderlyings)

-- FieldSpec {fieldNumber = 712, fieldName = "PosMaintAction", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CANCEL"}]}
newtype PosMaintAction = PosMaintAction {unPosMaintAction :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintAction

instance IsField PosMaintAction where
  fieldTag Proxy = 712
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosMaintAction
  fieldFromValue = fromValue >=> (prettyValidate . PosMaintAction)

-- FieldSpec {fieldNumber = 713, fieldName = "OrigPosReqRefID", fieldType = FieldTypeString, fieldValues = []}
newtype OrigPosReqRefID = OrigPosReqRefID {unOrigPosReqRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrigPosReqRefID

instance IsField OrigPosReqRefID where
  fieldTag Proxy = 713
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrigPosReqRefID
  fieldFromValue = fromValue >=> (prettyValidate . OrigPosReqRefID)

-- FieldSpec {fieldNumber = 714, fieldName = "PosMaintRptRefID", fieldType = FieldTypeString, fieldValues = []}
newtype PosMaintRptRefID = PosMaintRptRefID {unPosMaintRptRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintRptRefID

instance IsField PosMaintRptRefID where
  fieldTag Proxy = 714
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosMaintRptRefID
  fieldFromValue = fromValue >=> (prettyValidate . PosMaintRptRefID)

-- FieldSpec {fieldNumber = 715, fieldName = "ClearingBusinessDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype ClearingBusinessDate = ClearingBusinessDate {unClearingBusinessDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ClearingBusinessDate

instance IsField ClearingBusinessDate where
  fieldTag Proxy = 715
  fieldIsData Proxy = False
  fieldToValue = toValue . unClearingBusinessDate
  fieldFromValue = fromValue >=> (prettyValidate . ClearingBusinessDate)

-- FieldSpec {fieldNumber = 716, fieldName = "SettlSessID", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "ITD", fieldValueDescription = "INTRADAY"},FieldValueSpec {fieldValueEnum = "RTH", fieldValueDescription = "REGULAR_TRADING_HOURS"},FieldValueSpec {fieldValueEnum = "ETH", fieldValueDescription = "ELECTRONIC_TRADING_HOURS"}]}
newtype SettlSessID = SettlSessID {unSettlSessID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlSessID

instance IsField SettlSessID where
  fieldTag Proxy = 716
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlSessID
  fieldFromValue = fromValue >=> (prettyValidate . SettlSessID)

-- FieldSpec {fieldNumber = 717, fieldName = "SettlSessSubID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlSessSubID = SettlSessSubID {unSettlSessSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlSessSubID

instance IsField SettlSessSubID where
  fieldTag Proxy = 717
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlSessSubID
  fieldFromValue = fromValue >=> (prettyValidate . SettlSessSubID)

-- FieldSpec {fieldNumber = 718, fieldName = "AdjustmentType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PROCESS_REQUEST_AS_MARGIN_DISPOSITION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DELTA_PLUS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DELTA_MINUS"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FINAL"}]}
newtype AdjustmentType = AdjustmentType {unAdjustmentType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AdjustmentType

instance IsField AdjustmentType where
  fieldTag Proxy = 718
  fieldIsData Proxy = False
  fieldToValue = toValue . unAdjustmentType
  fieldFromValue = fromValue >=> (prettyValidate . AdjustmentType)

-- FieldSpec {fieldNumber = 719, fieldName = "ContraryInstructionIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype ContraryInstructionIndicator = ContraryInstructionIndicator {unContraryInstructionIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity ContraryInstructionIndicator

instance IsField ContraryInstructionIndicator where
  fieldTag Proxy = 719
  fieldIsData Proxy = False
  fieldToValue = toValue . unContraryInstructionIndicator
  fieldFromValue = fromValue >=> (prettyValidate . ContraryInstructionIndicator)

-- FieldSpec {fieldNumber = 720, fieldName = "PriorSpreadIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype PriorSpreadIndicator = PriorSpreadIndicator {unPriorSpreadIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity PriorSpreadIndicator

instance IsField PriorSpreadIndicator where
  fieldTag Proxy = 720
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriorSpreadIndicator
  fieldFromValue = fromValue >=> (prettyValidate . PriorSpreadIndicator)

-- FieldSpec {fieldNumber = 721, fieldName = "PosMaintRptID", fieldType = FieldTypeString, fieldValues = []}
newtype PosMaintRptID = PosMaintRptID {unPosMaintRptID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintRptID

instance IsField PosMaintRptID where
  fieldTag Proxy = 721
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosMaintRptID
  fieldFromValue = fromValue >=> (prettyValidate . PosMaintRptID)

-- FieldSpec {fieldNumber = 722, fieldName = "PosMaintStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPTED_WITH_WARNINGS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "COMPLETED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "COMPLETED_WITH_WARNINGS"}]}
newtype PosMaintStatus = PosMaintStatus {unPosMaintStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintStatus

instance IsField PosMaintStatus where
  fieldTag Proxy = 722
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosMaintStatus
  fieldFromValue = fromValue >=> (prettyValidate . PosMaintStatus)

-- FieldSpec {fieldNumber = 723, fieldName = "PosMaintResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUCCESSFUL_COMPLETION"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype PosMaintResult = PosMaintResult {unPosMaintResult :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosMaintResult

instance IsField PosMaintResult where
  fieldTag Proxy = 723
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosMaintResult
  fieldFromValue = fromValue >=> (prettyValidate . PosMaintResult)

-- FieldSpec {fieldNumber = 724, fieldName = "PosReqType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "POSITIONS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TRADES"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EXERCISES"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ASSIGNMENTS"}]}
newtype PosReqType = PosReqType {unPosReqType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosReqType

instance IsField PosReqType where
  fieldTag Proxy = 724
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosReqType
  fieldFromValue = fromValue >=> (prettyValidate . PosReqType)

-- FieldSpec {fieldNumber = 725, fieldName = "ResponseTransportType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "INBAND"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "OUT_OF_BAND"}]}
newtype ResponseTransportType = ResponseTransportType {unResponseTransportType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ResponseTransportType

instance IsField ResponseTransportType where
  fieldTag Proxy = 725
  fieldIsData Proxy = False
  fieldToValue = toValue . unResponseTransportType
  fieldFromValue = fromValue >=> (prettyValidate . ResponseTransportType)

-- FieldSpec {fieldNumber = 726, fieldName = "ResponseDestination", fieldType = FieldTypeString, fieldValues = []}
newtype ResponseDestination = ResponseDestination {unResponseDestination :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ResponseDestination

instance IsField ResponseDestination where
  fieldTag Proxy = 726
  fieldIsData Proxy = False
  fieldToValue = toValue . unResponseDestination
  fieldFromValue = fromValue >=> (prettyValidate . ResponseDestination)

-- FieldSpec {fieldNumber = 727, fieldName = "TotalNumPosReports", fieldType = FieldTypeInt, fieldValues = []}
newtype TotalNumPosReports = TotalNumPosReports {unTotalNumPosReports :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalNumPosReports

instance IsField TotalNumPosReports where
  fieldTag Proxy = 727
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalNumPosReports
  fieldFromValue = fromValue >=> (prettyValidate . TotalNumPosReports)

-- FieldSpec {fieldNumber = 728, fieldName = "PosReqResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "VALID_REQUEST"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNSUPPORTED_REQUEST"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NOT_AUTHORIZED_TO_REQUEST_POSITIONS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "REQUEST_FOR_POSITION_NOT_SUPPORTED"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype PosReqResult = PosReqResult {unPosReqResult :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosReqResult

instance IsField PosReqResult where
  fieldTag Proxy = 728
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosReqResult
  fieldFromValue = fromValue >=> (prettyValidate . PosReqResult)

-- FieldSpec {fieldNumber = 729, fieldName = "PosReqStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "COMPLETED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "COMPLETED_WITH_WARNINGS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REJECTED"}]}
newtype PosReqStatus = PosReqStatus {unPosReqStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PosReqStatus

instance IsField PosReqStatus where
  fieldTag Proxy = 729
  fieldIsData Proxy = False
  fieldToValue = toValue . unPosReqStatus
  fieldFromValue = fromValue >=> (prettyValidate . PosReqStatus)

-- FieldSpec {fieldNumber = 730, fieldName = "SettlPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype SettlPrice = SettlPrice {unSettlPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPrice

instance IsField SettlPrice where
  fieldTag Proxy = 730
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPrice
  fieldFromValue = fromValue >=> (prettyValidate . SettlPrice)

-- FieldSpec {fieldNumber = 731, fieldName = "SettlPriceType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FINAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "THEORETICAL"}]}
newtype SettlPriceType = SettlPriceType {unSettlPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPriceType

instance IsField SettlPriceType where
  fieldTag Proxy = 731
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPriceType
  fieldFromValue = fromValue >=> (prettyValidate . SettlPriceType)

-- FieldSpec {fieldNumber = 732, fieldName = "UnderlyingSettlPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingSettlPrice = UnderlyingSettlPrice {unUnderlyingSettlPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSettlPrice

instance IsField UnderlyingSettlPrice where
  fieldTag Proxy = 732
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSettlPrice
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSettlPrice)

-- FieldSpec {fieldNumber = 733, fieldName = "UnderlyingSettlPriceType", fieldType = FieldTypeInt, fieldValues = []}
newtype UnderlyingSettlPriceType = UnderlyingSettlPriceType {unUnderlyingSettlPriceType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSettlPriceType

instance IsField UnderlyingSettlPriceType where
  fieldTag Proxy = 733
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSettlPriceType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSettlPriceType)

-- FieldSpec {fieldNumber = 734, fieldName = "PriorSettlPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype PriorSettlPrice = PriorSettlPrice {unPriorSettlPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PriorSettlPrice

instance IsField PriorSettlPrice where
  fieldTag Proxy = 734
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriorSettlPrice
  fieldFromValue = fromValue >=> (prettyValidate . PriorSettlPrice)

-- FieldSpec {fieldNumber = 735, fieldName = "NoQuoteQualifiers", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoQuoteQualifiers = NoQuoteQualifiers {unNoQuoteQualifiers :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoQuoteQualifiers

instance IsField NoQuoteQualifiers where
  fieldTag Proxy = 735
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoQuoteQualifiers
  fieldFromValue = fromValue >=> (prettyValidate . NoQuoteQualifiers)

-- FieldSpec {fieldNumber = 736, fieldName = "AllocSettlCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype AllocSettlCurrency = AllocSettlCurrency {unAllocSettlCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocSettlCurrency

instance IsField AllocSettlCurrency where
  fieldTag Proxy = 736
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocSettlCurrency
  fieldFromValue = fromValue >=> (prettyValidate . AllocSettlCurrency)

-- FieldSpec {fieldNumber = 737, fieldName = "AllocSettlCurrAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllocSettlCurrAmt = AllocSettlCurrAmt {unAllocSettlCurrAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocSettlCurrAmt

instance IsField AllocSettlCurrAmt where
  fieldTag Proxy = 737
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocSettlCurrAmt
  fieldFromValue = fromValue >=> (prettyValidate . AllocSettlCurrAmt)

-- FieldSpec {fieldNumber = 738, fieldName = "InterestAtMaturity", fieldType = FieldTypeAMT, fieldValues = []}
newtype InterestAtMaturity = InterestAtMaturity {unInterestAtMaturity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InterestAtMaturity

instance IsField InterestAtMaturity where
  fieldTag Proxy = 738
  fieldIsData Proxy = False
  fieldToValue = toValue . unInterestAtMaturity
  fieldFromValue = fromValue >=> (prettyValidate . InterestAtMaturity)

-- FieldSpec {fieldNumber = 739, fieldName = "LegDatedDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegDatedDate = LegDatedDate {unLegDatedDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegDatedDate

instance IsField LegDatedDate where
  fieldTag Proxy = 739
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegDatedDate
  fieldFromValue = fromValue >=> (prettyValidate . LegDatedDate)

-- FieldSpec {fieldNumber = 740, fieldName = "LegPool", fieldType = FieldTypeString, fieldValues = []}
newtype LegPool = LegPool {unLegPool :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegPool

instance IsField LegPool where
  fieldTag Proxy = 740
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegPool
  fieldFromValue = fromValue >=> (prettyValidate . LegPool)

-- FieldSpec {fieldNumber = 741, fieldName = "AllocInterestAtMaturity", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllocInterestAtMaturity = AllocInterestAtMaturity {unAllocInterestAtMaturity :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocInterestAtMaturity

instance IsField AllocInterestAtMaturity where
  fieldTag Proxy = 741
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocInterestAtMaturity
  fieldFromValue = fromValue >=> (prettyValidate . AllocInterestAtMaturity)

-- FieldSpec {fieldNumber = 742, fieldName = "AllocAccruedInterestAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllocAccruedInterestAmt = AllocAccruedInterestAmt {unAllocAccruedInterestAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocAccruedInterestAmt

instance IsField AllocAccruedInterestAmt where
  fieldTag Proxy = 742
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocAccruedInterestAmt
  fieldFromValue = fromValue >=> (prettyValidate . AllocAccruedInterestAmt)

-- FieldSpec {fieldNumber = 743, fieldName = "DeliveryDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype DeliveryDate = DeliveryDate {unDeliveryDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliveryDate

instance IsField DeliveryDate where
  fieldTag Proxy = 743
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliveryDate
  fieldFromValue = fromValue >=> (prettyValidate . DeliveryDate)

-- FieldSpec {fieldNumber = 744, fieldName = "AssignmentMethod", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "RANDOM"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "PRO_RATA"}]}
newtype AssignmentMethod = AssignmentMethod {unAssignmentMethod :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AssignmentMethod

instance IsField AssignmentMethod where
  fieldTag Proxy = 744
  fieldIsData Proxy = False
  fieldToValue = toValue . unAssignmentMethod
  fieldFromValue = fromValue >=> (prettyValidate . AssignmentMethod)

-- FieldSpec {fieldNumber = 745, fieldName = "AssignmentUnit", fieldType = FieldTypeQTY, fieldValues = []}
newtype AssignmentUnit = AssignmentUnit {unAssignmentUnit :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AssignmentUnit

instance IsField AssignmentUnit where
  fieldTag Proxy = 745
  fieldIsData Proxy = False
  fieldToValue = toValue . unAssignmentUnit
  fieldFromValue = fromValue >=> (prettyValidate . AssignmentUnit)

-- FieldSpec {fieldNumber = 746, fieldName = "OpenInterest", fieldType = FieldTypeAMT, fieldValues = []}
newtype OpenInterest = OpenInterest {unOpenInterest :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OpenInterest

instance IsField OpenInterest where
  fieldTag Proxy = 746
  fieldIsData Proxy = False
  fieldToValue = toValue . unOpenInterest
  fieldFromValue = fromValue >=> (prettyValidate . OpenInterest)

-- FieldSpec {fieldNumber = 747, fieldName = "ExerciseMethod", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "AUTOMATIC"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MANUAL"}]}
newtype ExerciseMethod = ExerciseMethod {unExerciseMethod :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExerciseMethod

instance IsField ExerciseMethod where
  fieldTag Proxy = 747
  fieldIsData Proxy = False
  fieldToValue = toValue . unExerciseMethod
  fieldFromValue = fromValue >=> (prettyValidate . ExerciseMethod)

-- FieldSpec {fieldNumber = 748, fieldName = "TotNumTradeReports", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNumTradeReports = TotNumTradeReports {unTotNumTradeReports :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNumTradeReports

instance IsField TotNumTradeReports where
  fieldTag Proxy = 748
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNumTradeReports
  fieldFromValue = fromValue >=> (prettyValidate . TotNumTradeReports)

-- FieldSpec {fieldNumber = 749, fieldName = "TradeRequestResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUCCESSFUL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNKNOWN_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INVALID_TYPE_OF_TRADE_REQUESTED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVALID_PARTIES"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_TRANSPORT_TYPE_REQUESTED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_DESTINATION_REQUESTED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "TRADE_REQUEST_TYPE_NOT_SUPPORTED"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "NOT_AUTHORIZED"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype TradeRequestResult = TradeRequestResult {unTradeRequestResult :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeRequestResult

instance IsField TradeRequestResult where
  fieldTag Proxy = 749
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeRequestResult
  fieldFromValue = fromValue >=> (prettyValidate . TradeRequestResult)

-- FieldSpec {fieldNumber = 750, fieldName = "TradeRequestStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "COMPLETED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REJECTED"}]}
newtype TradeRequestStatus = TradeRequestStatus {unTradeRequestStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeRequestStatus

instance IsField TradeRequestStatus where
  fieldTag Proxy = 750
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeRequestStatus
  fieldFromValue = fromValue >=> (prettyValidate . TradeRequestStatus)

-- FieldSpec {fieldNumber = 751, fieldName = "TradeReportRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUCCESSFUL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_PARTY_ONFORMATION"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "UNKNOWN_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "UNAUTHORIZED_TO_REPORT_TRADES"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_TRADE_TYPE"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype TradeReportRejectReason = TradeReportRejectReason {unTradeReportRejectReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportRejectReason

instance IsField TradeReportRejectReason where
  fieldTag Proxy = 751
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeReportRejectReason
  fieldFromValue = fromValue >=> (prettyValidate . TradeReportRejectReason)

-- FieldSpec {fieldNumber = 752, fieldName = "SideMultiLegReportingType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SINGLE_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MULTILEG_SECURITY"}]}
newtype SideMultiLegReportingType = SideMultiLegReportingType {unSideMultiLegReportingType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SideMultiLegReportingType

instance IsField SideMultiLegReportingType where
  fieldTag Proxy = 752
  fieldIsData Proxy = False
  fieldToValue = toValue . unSideMultiLegReportingType
  fieldFromValue = fromValue >=> (prettyValidate . SideMultiLegReportingType)

-- FieldSpec {fieldNumber = 753, fieldName = "NoPosAmt", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoPosAmt = NoPosAmt {unNoPosAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoPosAmt

instance IsField NoPosAmt where
  fieldTag Proxy = 753
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoPosAmt
  fieldFromValue = fromValue >=> (prettyValidate . NoPosAmt)

-- FieldSpec {fieldNumber = 754, fieldName = "AutoAcceptIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype AutoAcceptIndicator = AutoAcceptIndicator {unAutoAcceptIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity AutoAcceptIndicator

instance IsField AutoAcceptIndicator where
  fieldTag Proxy = 754
  fieldIsData Proxy = False
  fieldToValue = toValue . unAutoAcceptIndicator
  fieldFromValue = fromValue >=> (prettyValidate . AutoAcceptIndicator)

-- FieldSpec {fieldNumber = 755, fieldName = "AllocReportID", fieldType = FieldTypeString, fieldValues = []}
newtype AllocReportID = AllocReportID {unAllocReportID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocReportID

instance IsField AllocReportID where
  fieldTag Proxy = 755
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocReportID
  fieldFromValue = fromValue >=> (prettyValidate . AllocReportID)

-- FieldSpec {fieldNumber = 756, fieldName = "NoNested2PartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNested2PartyIDs = NoNested2PartyIDs {unNoNested2PartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNested2PartyIDs

instance IsField NoNested2PartyIDs where
  fieldTag Proxy = 756
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNested2PartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNested2PartyIDs)

-- FieldSpec {fieldNumber = 757, fieldName = "Nested2PartyID", fieldType = FieldTypeString, fieldValues = []}
newtype Nested2PartyID = Nested2PartyID {unNested2PartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartyID

instance IsField Nested2PartyID where
  fieldTag Proxy = 757
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartyID
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartyID)

-- FieldSpec {fieldNumber = 758, fieldName = "Nested2PartyIDSource", fieldType = FieldTypeChar, fieldValues = []}
newtype Nested2PartyIDSource = Nested2PartyIDSource {unNested2PartyIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartyIDSource

instance IsField Nested2PartyIDSource where
  fieldTag Proxy = 758
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartyIDSource
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartyIDSource)

-- FieldSpec {fieldNumber = 759, fieldName = "Nested2PartyRole", fieldType = FieldTypeInt, fieldValues = []}
newtype Nested2PartyRole = Nested2PartyRole {unNested2PartyRole :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartyRole

instance IsField Nested2PartyRole where
  fieldTag Proxy = 759
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartyRole
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartyRole)

-- FieldSpec {fieldNumber = 760, fieldName = "Nested2PartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype Nested2PartySubID = Nested2PartySubID {unNested2PartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartySubID

instance IsField Nested2PartySubID where
  fieldTag Proxy = 760
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartySubID
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartySubID)

-- FieldSpec {fieldNumber = 761, fieldName = "BenchmarkSecurityIDSource", fieldType = FieldTypeString, fieldValues = []}
newtype BenchmarkSecurityIDSource = BenchmarkSecurityIDSource {unBenchmarkSecurityIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BenchmarkSecurityIDSource

instance IsField BenchmarkSecurityIDSource where
  fieldTag Proxy = 761
  fieldIsData Proxy = False
  fieldToValue = toValue . unBenchmarkSecurityIDSource
  fieldFromValue = fromValue >=> (prettyValidate . BenchmarkSecurityIDSource)

-- FieldSpec {fieldNumber = 762, fieldName = "SecuritySubType", fieldType = FieldTypeString, fieldValues = []}
newtype SecuritySubType = SecuritySubType {unSecuritySubType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecuritySubType

instance IsField SecuritySubType where
  fieldTag Proxy = 762
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecuritySubType
  fieldFromValue = fromValue >=> (prettyValidate . SecuritySubType)

-- FieldSpec {fieldNumber = 763, fieldName = "UnderlyingSecuritySubType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingSecuritySubType = UnderlyingSecuritySubType {unUnderlyingSecuritySubType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingSecuritySubType

instance IsField UnderlyingSecuritySubType where
  fieldTag Proxy = 763
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingSecuritySubType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingSecuritySubType)

-- FieldSpec {fieldNumber = 764, fieldName = "LegSecuritySubType", fieldType = FieldTypeString, fieldValues = []}
newtype LegSecuritySubType = LegSecuritySubType {unLegSecuritySubType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegSecuritySubType

instance IsField LegSecuritySubType where
  fieldTag Proxy = 764
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegSecuritySubType
  fieldFromValue = fromValue >=> (prettyValidate . LegSecuritySubType)

-- FieldSpec {fieldNumber = 765, fieldName = "AllowableOneSidednessPct", fieldType = FieldTypePercentage, fieldValues = []}
newtype AllowableOneSidednessPct = AllowableOneSidednessPct {unAllowableOneSidednessPct :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllowableOneSidednessPct

instance IsField AllowableOneSidednessPct where
  fieldTag Proxy = 765
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllowableOneSidednessPct
  fieldFromValue = fromValue >=> (prettyValidate . AllowableOneSidednessPct)

-- FieldSpec {fieldNumber = 766, fieldName = "AllowableOneSidednessValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype AllowableOneSidednessValue = AllowableOneSidednessValue {unAllowableOneSidednessValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllowableOneSidednessValue

instance IsField AllowableOneSidednessValue where
  fieldTag Proxy = 766
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllowableOneSidednessValue
  fieldFromValue = fromValue >=> (prettyValidate . AllowableOneSidednessValue)

-- FieldSpec {fieldNumber = 767, fieldName = "AllowableOneSidednessCurr", fieldType = FieldTypeCurrency, fieldValues = []}
newtype AllowableOneSidednessCurr = AllowableOneSidednessCurr {unAllowableOneSidednessCurr :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllowableOneSidednessCurr

instance IsField AllowableOneSidednessCurr where
  fieldTag Proxy = 767
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllowableOneSidednessCurr
  fieldFromValue = fromValue >=> (prettyValidate . AllowableOneSidednessCurr)

-- FieldSpec {fieldNumber = 768, fieldName = "NoTrdRegTimestamps", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoTrdRegTimestamps = NoTrdRegTimestamps {unNoTrdRegTimestamps :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoTrdRegTimestamps

instance IsField NoTrdRegTimestamps where
  fieldTag Proxy = 768
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoTrdRegTimestamps
  fieldFromValue = fromValue >=> (prettyValidate . NoTrdRegTimestamps)

-- FieldSpec {fieldNumber = 769, fieldName = "TrdRegTimestamp", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype TrdRegTimestamp = TrdRegTimestamp {unTrdRegTimestamp :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdRegTimestamp

instance IsField TrdRegTimestamp where
  fieldTag Proxy = 769
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdRegTimestamp
  fieldFromValue = fromValue >=> (prettyValidate . TrdRegTimestamp)

-- FieldSpec {fieldNumber = 770, fieldName = "TrdRegTimestampType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXECUTION_TIME"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TIME_IN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TIME_OUT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "BROKER_RECEIPT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "BROKER_EXECUTION"}]}
newtype TrdRegTimestampType = TrdRegTimestampType {unTrdRegTimestampType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdRegTimestampType

instance IsField TrdRegTimestampType where
  fieldTag Proxy = 770
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdRegTimestampType
  fieldFromValue = fromValue >=> (prettyValidate . TrdRegTimestampType)

-- FieldSpec {fieldNumber = 771, fieldName = "TrdRegTimestampOrigin", fieldType = FieldTypeString, fieldValues = []}
newtype TrdRegTimestampOrigin = TrdRegTimestampOrigin {unTrdRegTimestampOrigin :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdRegTimestampOrigin

instance IsField TrdRegTimestampOrigin where
  fieldTag Proxy = 771
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdRegTimestampOrigin
  fieldFromValue = fromValue >=> (prettyValidate . TrdRegTimestampOrigin)

-- FieldSpec {fieldNumber = 772, fieldName = "ConfirmRefID", fieldType = FieldTypeString, fieldValues = []}
newtype ConfirmRefID = ConfirmRefID {unConfirmRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmRefID

instance IsField ConfirmRefID where
  fieldTag Proxy = 772
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmRefID
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmRefID)

-- FieldSpec {fieldNumber = 773, fieldName = "ConfirmType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STATUS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CONFIRMATION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CONFIRMATION_REQUEST_REJECTED"}]}
newtype ConfirmType = ConfirmType {unConfirmType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmType

instance IsField ConfirmType where
  fieldTag Proxy = 773
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmType
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmType)

-- FieldSpec {fieldNumber = 774, fieldName = "ConfirmRejReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MISMATCHED_ACCOUNT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MISSING_SETTLEMENT_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype ConfirmRejReason = ConfirmRejReason {unConfirmRejReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmRejReason

instance IsField ConfirmRejReason where
  fieldTag Proxy = 774
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmRejReason
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmRejReason)

-- FieldSpec {fieldNumber = 775, fieldName = "BookingType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REGULAR_BOOKING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CFD"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TOTAL_RETURN_SWAP"}]}
newtype BookingType = BookingType {unBookingType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity BookingType

instance IsField BookingType where
  fieldTag Proxy = 775
  fieldIsData Proxy = False
  fieldToValue = toValue . unBookingType
  fieldFromValue = fromValue >=> (prettyValidate . BookingType)

-- FieldSpec {fieldNumber = 776, fieldName = "IndividualAllocRejCode", fieldType = FieldTypeInt, fieldValues = []}
newtype IndividualAllocRejCode = IndividualAllocRejCode {unIndividualAllocRejCode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity IndividualAllocRejCode

instance IsField IndividualAllocRejCode where
  fieldTag Proxy = 776
  fieldIsData Proxy = False
  fieldToValue = toValue . unIndividualAllocRejCode
  fieldFromValue = fromValue >=> (prettyValidate . IndividualAllocRejCode)

-- FieldSpec {fieldNumber = 777, fieldName = "SettlInstMsgID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlInstMsgID = SettlInstMsgID {unSettlInstMsgID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstMsgID

instance IsField SettlInstMsgID where
  fieldTag Proxy = 777
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstMsgID
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstMsgID)

-- FieldSpec {fieldNumber = 778, fieldName = "NoSettlInst", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSettlInst = NoSettlInst {unNoSettlInst :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSettlInst

instance IsField NoSettlInst where
  fieldTag Proxy = 778
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSettlInst
  fieldFromValue = fromValue >=> (prettyValidate . NoSettlInst)

-- FieldSpec {fieldNumber = 779, fieldName = "LastUpdateTime", fieldType = FieldTypeUTCTimestamp, fieldValues = []}
newtype LastUpdateTime = LastUpdateTime {unLastUpdateTime :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastUpdateTime

instance IsField LastUpdateTime where
  fieldTag Proxy = 779
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastUpdateTime
  fieldFromValue = fromValue >=> (prettyValidate . LastUpdateTime)

-- FieldSpec {fieldNumber = 780, fieldName = "AllocSettlInstType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "USE_DEFAULT_INSTRUCTIONS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DERIVE_FROM_PARAMETERS_PROVIDED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "FULL_DETAILS_PROVIDED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SSIDBI_DS_PROVIDED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PHONE_FOR_INSTRUCTIONS"}]}
newtype AllocSettlInstType = AllocSettlInstType {unAllocSettlInstType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocSettlInstType

instance IsField AllocSettlInstType where
  fieldTag Proxy = 780
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocSettlInstType
  fieldFromValue = fromValue >=> (prettyValidate . AllocSettlInstType)

-- FieldSpec {fieldNumber = 781, fieldName = "NoSettlPartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSettlPartyIDs = NoSettlPartyIDs {unNoSettlPartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSettlPartyIDs

instance IsField NoSettlPartyIDs where
  fieldTag Proxy = 781
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSettlPartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoSettlPartyIDs)

-- FieldSpec {fieldNumber = 782, fieldName = "SettlPartyID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlPartyID = SettlPartyID {unSettlPartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartyID

instance IsField SettlPartyID where
  fieldTag Proxy = 782
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartyID
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartyID)

-- FieldSpec {fieldNumber = 783, fieldName = "SettlPartyIDSource", fieldType = FieldTypeChar, fieldValues = []}
newtype SettlPartyIDSource = SettlPartyIDSource {unSettlPartyIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartyIDSource

instance IsField SettlPartyIDSource where
  fieldTag Proxy = 783
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartyIDSource
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartyIDSource)

-- FieldSpec {fieldNumber = 784, fieldName = "SettlPartyRole", fieldType = FieldTypeInt, fieldValues = []}
newtype SettlPartyRole = SettlPartyRole {unSettlPartyRole :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartyRole

instance IsField SettlPartyRole where
  fieldTag Proxy = 784
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartyRole
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartyRole)

-- FieldSpec {fieldNumber = 785, fieldName = "SettlPartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlPartySubID = SettlPartySubID {unSettlPartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartySubID

instance IsField SettlPartySubID where
  fieldTag Proxy = 785
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartySubID
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartySubID)

-- FieldSpec {fieldNumber = 786, fieldName = "SettlPartySubIDType", fieldType = FieldTypeInt, fieldValues = []}
newtype SettlPartySubIDType = SettlPartySubIDType {unSettlPartySubIDType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlPartySubIDType

instance IsField SettlPartySubIDType where
  fieldTag Proxy = 786
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlPartySubIDType
  fieldFromValue = fromValue >=> (prettyValidate . SettlPartySubIDType)

-- FieldSpec {fieldNumber = 787, fieldName = "DlvyInstType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SECURITIES"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CASH"}]}
newtype DlvyInstType = DlvyInstType {unDlvyInstType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DlvyInstType

instance IsField DlvyInstType where
  fieldTag Proxy = 787
  fieldIsData Proxy = False
  fieldToValue = toValue . unDlvyInstType
  fieldFromValue = fromValue >=> (prettyValidate . DlvyInstType)

-- FieldSpec {fieldNumber = 788, fieldName = "TerminationType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "OVERNIGHT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TERM"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FLEXIBLE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OPEN"}]}
newtype TerminationType = TerminationType {unTerminationType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TerminationType

instance IsField TerminationType where
  fieldTag Proxy = 788
  fieldIsData Proxy = False
  fieldToValue = toValue . unTerminationType
  fieldFromValue = fromValue >=> (prettyValidate . TerminationType)

-- FieldSpec {fieldNumber = 789, fieldName = "NextExpectedMsgSeqNum", fieldType = FieldTypeSeqNum, fieldValues = []}
newtype NextExpectedMsgSeqNum = NextExpectedMsgSeqNum {unNextExpectedMsgSeqNum :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NextExpectedMsgSeqNum

instance IsField NextExpectedMsgSeqNum where
  fieldTag Proxy = 789
  fieldIsData Proxy = False
  fieldToValue = toValue . unNextExpectedMsgSeqNum
  fieldFromValue = fromValue >=> (prettyValidate . NextExpectedMsgSeqNum)

-- FieldSpec {fieldNumber = 790, fieldName = "OrdStatusReqID", fieldType = FieldTypeString, fieldValues = []}
newtype OrdStatusReqID = OrdStatusReqID {unOrdStatusReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrdStatusReqID

instance IsField OrdStatusReqID where
  fieldTag Proxy = 790
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrdStatusReqID
  fieldFromValue = fromValue >=> (prettyValidate . OrdStatusReqID)

-- FieldSpec {fieldNumber = 791, fieldName = "SettlInstReqID", fieldType = FieldTypeString, fieldValues = []}
newtype SettlInstReqID = SettlInstReqID {unSettlInstReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstReqID

instance IsField SettlInstReqID where
  fieldTag Proxy = 791
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstReqID
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstReqID)

-- FieldSpec {fieldNumber = 792, fieldName = "SettlInstReqRejCode", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNABLE_TO_PROCESS_REQUEST"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_ACCOUNT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype SettlInstReqRejCode = SettlInstReqRejCode {unSettlInstReqRejCode :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstReqRejCode

instance IsField SettlInstReqRejCode where
  fieldTag Proxy = 792
  fieldIsData Proxy = False
  fieldToValue = toValue . unSettlInstReqRejCode
  fieldFromValue = fromValue >=> (prettyValidate . SettlInstReqRejCode)

-- FieldSpec {fieldNumber = 793, fieldName = "SecondaryAllocID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryAllocID = SecondaryAllocID {unSecondaryAllocID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryAllocID

instance IsField SecondaryAllocID where
  fieldTag Proxy = 793
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryAllocID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryAllocID)

-- FieldSpec {fieldNumber = 794, fieldName = "AllocReportType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SELLSIDE_CALCULATED_USING_PRELIMINARY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "WAREHOUSE_RECAP"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "REQUEST_TO_INTERMEDIARY"}]}
newtype AllocReportType = AllocReportType {unAllocReportType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocReportType

instance IsField AllocReportType where
  fieldTag Proxy = 794
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocReportType
  fieldFromValue = fromValue >=> (prettyValidate . AllocReportType)

-- FieldSpec {fieldNumber = 795, fieldName = "AllocReportRefID", fieldType = FieldTypeString, fieldValues = []}
newtype AllocReportRefID = AllocReportRefID {unAllocReportRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocReportRefID

instance IsField AllocReportRefID where
  fieldTag Proxy = 795
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocReportRefID
  fieldFromValue = fromValue >=> (prettyValidate . AllocReportRefID)

-- FieldSpec {fieldNumber = 796, fieldName = "AllocCancReplaceReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ORIGINAL_DETAILS_INCOMPLETE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CHANGE_IN_UNDERLYING_ORDER_DETAILS"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype AllocCancReplaceReason = AllocCancReplaceReason {unAllocCancReplaceReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocCancReplaceReason

instance IsField AllocCancReplaceReason where
  fieldTag Proxy = 796
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocCancReplaceReason
  fieldFromValue = fromValue >=> (prettyValidate . AllocCancReplaceReason)

-- FieldSpec {fieldNumber = 797, fieldName = "CopyMsgIndicator", fieldType = FieldTypeBoolean, fieldValues = []}
newtype CopyMsgIndicator = CopyMsgIndicator {unCopyMsgIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity CopyMsgIndicator

instance IsField CopyMsgIndicator where
  fieldTag Proxy = 797
  fieldIsData Proxy = False
  fieldToValue = toValue . unCopyMsgIndicator
  fieldFromValue = fromValue >=> (prettyValidate . CopyMsgIndicator)

-- FieldSpec {fieldNumber = 798, fieldName = "AllocAccountType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CARRIED_CUSTOMER_SIDE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CARRIED_NON_CUSTOMER_SIDE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "HOUSE_TRADER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "FLOOR_TRADER"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "CARRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "HOUSE_TRADER_CROSS_MARGINED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "JOINT_BACK_OFFICE_ACCOUNT"}]}
newtype AllocAccountType = AllocAccountType {unAllocAccountType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocAccountType

instance IsField AllocAccountType where
  fieldTag Proxy = 798
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocAccountType
  fieldFromValue = fromValue >=> (prettyValidate . AllocAccountType)

-- FieldSpec {fieldNumber = 799, fieldName = "OrderAvgPx", fieldType = FieldTypePrice, fieldValues = []}
newtype OrderAvgPx = OrderAvgPx {unOrderAvgPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderAvgPx

instance IsField OrderAvgPx where
  fieldTag Proxy = 799
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderAvgPx
  fieldFromValue = fromValue >=> (prettyValidate . OrderAvgPx)

-- FieldSpec {fieldNumber = 800, fieldName = "OrderBookingQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype OrderBookingQty = OrderBookingQty {unOrderBookingQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderBookingQty

instance IsField OrderBookingQty where
  fieldTag Proxy = 800
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderBookingQty
  fieldFromValue = fromValue >=> (prettyValidate . OrderBookingQty)

-- FieldSpec {fieldNumber = 801, fieldName = "NoSettlPartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoSettlPartySubIDs = NoSettlPartySubIDs {unNoSettlPartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoSettlPartySubIDs

instance IsField NoSettlPartySubIDs where
  fieldTag Proxy = 801
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoSettlPartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoSettlPartySubIDs)

-- FieldSpec {fieldNumber = 802, fieldName = "NoPartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoPartySubIDs = NoPartySubIDs {unNoPartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoPartySubIDs

instance IsField NoPartySubIDs where
  fieldTag Proxy = 802
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoPartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoPartySubIDs)

-- FieldSpec {fieldNumber = 803, fieldName = "PartySubIDType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIRM"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PERSON"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SYSTEM"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "APPLICATION"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "FULL_LEGAL_NAME_OF_FIRM"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "POSTAL_ADDRESS"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "PHONE_NUMBER"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "EMAIL_ADDRESS"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "CONTACT_NAME"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "SECURITIES_ACCOUNT_NUMBER"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "REGISTRATION_NUMBER"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "REGISTERED_ADDRESS_FOR_CONFIRMATION"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "REGULATORY_STATUS"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "REGISTRATION_NAME"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "CASH_ACCOUNT_NUMBER"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "BIC"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "CSD_PARTICIPANT_MEMBER_CODE"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "REGISTERED_ADDRESS"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "FUND_ACCOUNT_NAME"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "TELEX_NUMBER"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "FAX_NUMBER"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "SECURITIES_ACCOUNT_NAME"},FieldValueSpec {fieldValueEnum = "23", fieldValueDescription = "CASH_ACCOUNT_NAME"},FieldValueSpec {fieldValueEnum = "24", fieldValueDescription = "DEPARTMENT"},FieldValueSpec {fieldValueEnum = "25", fieldValueDescription = "LOCATION_DESK"},FieldValueSpec {fieldValueEnum = "26", fieldValueDescription = "POSITION_ACCOUNT_TYPE"}]}
newtype PartySubIDType = PartySubIDType {unPartySubIDType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PartySubIDType

instance IsField PartySubIDType where
  fieldTag Proxy = 803
  fieldIsData Proxy = False
  fieldToValue = toValue . unPartySubIDType
  fieldFromValue = fromValue >=> (prettyValidate . PartySubIDType)

-- FieldSpec {fieldNumber = 804, fieldName = "NoNestedPartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNestedPartySubIDs = NoNestedPartySubIDs {unNoNestedPartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNestedPartySubIDs

instance IsField NoNestedPartySubIDs where
  fieldTag Proxy = 804
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNestedPartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNestedPartySubIDs)

-- FieldSpec {fieldNumber = 805, fieldName = "NestedPartySubIDType", fieldType = FieldTypeInt, fieldValues = []}
newtype NestedPartySubIDType = NestedPartySubIDType {unNestedPartySubIDType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartySubIDType

instance IsField NestedPartySubIDType where
  fieldTag Proxy = 805
  fieldIsData Proxy = False
  fieldToValue = toValue . unNestedPartySubIDType
  fieldFromValue = fromValue >=> (prettyValidate . NestedPartySubIDType)

-- FieldSpec {fieldNumber = 806, fieldName = "NoNested2PartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNested2PartySubIDs = NoNested2PartySubIDs {unNoNested2PartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNested2PartySubIDs

instance IsField NoNested2PartySubIDs where
  fieldTag Proxy = 806
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNested2PartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNested2PartySubIDs)

-- FieldSpec {fieldNumber = 807, fieldName = "Nested2PartySubIDType", fieldType = FieldTypeInt, fieldValues = []}
newtype Nested2PartySubIDType = Nested2PartySubIDType {unNested2PartySubIDType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested2PartySubIDType

instance IsField Nested2PartySubIDType where
  fieldTag Proxy = 807
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested2PartySubIDType
  fieldFromValue = fromValue >=> (prettyValidate . Nested2PartySubIDType)

-- FieldSpec {fieldNumber = 808, fieldName = "AllocIntermedReqType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PENDING_ACCEPT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PENDING_RELEASE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PENDING_REVERSAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ACCEPT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "BLOCK_LEVEL_REJECT"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "ACCOUNT_LEVEL_REJECT"}]}
newtype AllocIntermedReqType = AllocIntermedReqType {unAllocIntermedReqType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocIntermedReqType

instance IsField AllocIntermedReqType where
  fieldTag Proxy = 808
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocIntermedReqType
  fieldFromValue = fromValue >=> (prettyValidate . AllocIntermedReqType)

-- FieldSpec {fieldNumber = 810, fieldName = "UnderlyingPx", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingPx = UnderlyingPx {unUnderlyingPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingPx

instance IsField UnderlyingPx where
  fieldTag Proxy = 810
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingPx
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingPx)

-- FieldSpec {fieldNumber = 811, fieldName = "PriceDelta", fieldType = FieldTypeFloat, fieldValues = []}
newtype PriceDelta = PriceDelta {unPriceDelta :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PriceDelta

instance IsField PriceDelta where
  fieldTag Proxy = 811
  fieldIsData Proxy = False
  fieldToValue = toValue . unPriceDelta
  fieldFromValue = fromValue >=> (prettyValidate . PriceDelta)

-- FieldSpec {fieldNumber = 812, fieldName = "ApplQueueMax", fieldType = FieldTypeInt, fieldValues = []}
newtype ApplQueueMax = ApplQueueMax {unApplQueueMax :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ApplQueueMax

instance IsField ApplQueueMax where
  fieldTag Proxy = 812
  fieldIsData Proxy = False
  fieldToValue = toValue . unApplQueueMax
  fieldFromValue = fromValue >=> (prettyValidate . ApplQueueMax)

-- FieldSpec {fieldNumber = 813, fieldName = "ApplQueueDepth", fieldType = FieldTypeInt, fieldValues = []}
newtype ApplQueueDepth = ApplQueueDepth {unApplQueueDepth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ApplQueueDepth

instance IsField ApplQueueDepth where
  fieldTag Proxy = 813
  fieldIsData Proxy = False
  fieldToValue = toValue . unApplQueueDepth
  fieldFromValue = fromValue >=> (prettyValidate . ApplQueueDepth)

-- FieldSpec {fieldNumber = 814, fieldName = "ApplQueueResolution", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NO_ACTION_TAKEN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "QUEUE_FLUSHED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OVERLAY_LAST"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "END_SESSION"}]}
newtype ApplQueueResolution = ApplQueueResolution {unApplQueueResolution :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ApplQueueResolution

instance IsField ApplQueueResolution where
  fieldTag Proxy = 814
  fieldIsData Proxy = False
  fieldToValue = toValue . unApplQueueResolution
  fieldFromValue = fromValue >=> (prettyValidate . ApplQueueResolution)

-- FieldSpec {fieldNumber = 815, fieldName = "ApplQueueAction", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NO_ACTION_TAKEN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "QUEUE_FLUSHED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OVERLAY_LAST"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "END_SESSION"}]}
newtype ApplQueueAction = ApplQueueAction {unApplQueueAction :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ApplQueueAction

instance IsField ApplQueueAction where
  fieldTag Proxy = 815
  fieldIsData Proxy = False
  fieldToValue = toValue . unApplQueueAction
  fieldFromValue = fromValue >=> (prettyValidate . ApplQueueAction)

-- FieldSpec {fieldNumber = 816, fieldName = "NoAltMDSource", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoAltMDSource = NoAltMDSource {unNoAltMDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoAltMDSource

instance IsField NoAltMDSource where
  fieldTag Proxy = 816
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoAltMDSource
  fieldFromValue = fromValue >=> (prettyValidate . NoAltMDSource)

-- FieldSpec {fieldNumber = 817, fieldName = "AltMDSourceID", fieldType = FieldTypeString, fieldValues = []}
newtype AltMDSourceID = AltMDSourceID {unAltMDSourceID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AltMDSourceID

instance IsField AltMDSourceID where
  fieldTag Proxy = 817
  fieldIsData Proxy = False
  fieldToValue = toValue . unAltMDSourceID
  fieldFromValue = fromValue >=> (prettyValidate . AltMDSourceID)

-- FieldSpec {fieldNumber = 818, fieldName = "SecondaryTradeReportID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryTradeReportID = SecondaryTradeReportID {unSecondaryTradeReportID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryTradeReportID

instance IsField SecondaryTradeReportID where
  fieldTag Proxy = 818
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryTradeReportID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryTradeReportID)

-- FieldSpec {fieldNumber = 819, fieldName = "AvgPxIndicator", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NO_AVERAGE_PRICING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TRADE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "LAST_TRADE"}]}
newtype AvgPxIndicator = AvgPxIndicator {unAvgPxIndicator :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AvgPxIndicator

instance IsField AvgPxIndicator where
  fieldTag Proxy = 819
  fieldIsData Proxy = False
  fieldToValue = toValue . unAvgPxIndicator
  fieldFromValue = fromValue >=> (prettyValidate . AvgPxIndicator)

-- FieldSpec {fieldNumber = 820, fieldName = "TradeLinkID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeLinkID = TradeLinkID {unTradeLinkID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeLinkID

instance IsField TradeLinkID where
  fieldTag Proxy = 820
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeLinkID
  fieldFromValue = fromValue >=> (prettyValidate . TradeLinkID)

-- FieldSpec {fieldNumber = 821, fieldName = "OrderInputDevice", fieldType = FieldTypeString, fieldValues = []}
newtype OrderInputDevice = OrderInputDevice {unOrderInputDevice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderInputDevice

instance IsField OrderInputDevice where
  fieldTag Proxy = 821
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderInputDevice
  fieldFromValue = fromValue >=> (prettyValidate . OrderInputDevice)

-- FieldSpec {fieldNumber = 822, fieldName = "UnderlyingTradingSessionID", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingTradingSessionID = UnderlyingTradingSessionID {unUnderlyingTradingSessionID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingTradingSessionID

instance IsField UnderlyingTradingSessionID where
  fieldTag Proxy = 822
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingTradingSessionID
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingTradingSessionID)

-- FieldSpec {fieldNumber = 823, fieldName = "UnderlyingTradingSessionSubID", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingTradingSessionSubID = UnderlyingTradingSessionSubID {unUnderlyingTradingSessionSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingTradingSessionSubID

instance IsField UnderlyingTradingSessionSubID where
  fieldTag Proxy = 823
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingTradingSessionSubID
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingTradingSessionSubID)

-- FieldSpec {fieldNumber = 824, fieldName = "TradeLegRefID", fieldType = FieldTypeString, fieldValues = []}
newtype TradeLegRefID = TradeLegRefID {unTradeLegRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeLegRefID

instance IsField TradeLegRefID where
  fieldTag Proxy = 824
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeLegRefID
  fieldFromValue = fromValue >=> (prettyValidate . TradeLegRefID)

-- FieldSpec {fieldNumber = 825, fieldName = "ExchangeRule", fieldType = FieldTypeString, fieldValues = []}
newtype ExchangeRule = ExchangeRule {unExchangeRule :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExchangeRule

instance IsField ExchangeRule where
  fieldTag Proxy = 825
  fieldIsData Proxy = False
  fieldToValue = toValue . unExchangeRule
  fieldFromValue = fromValue >=> (prettyValidate . ExchangeRule)

-- FieldSpec {fieldNumber = 826, fieldName = "TradeAllocIndicator", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ALLOCATION_NOT_REQUIRED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ALLOCATION_REQUIRED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "USE_ALLOCATION_PROVIDED_WITH_THE_TRADE"}]}
newtype TradeAllocIndicator = TradeAllocIndicator {unTradeAllocIndicator :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeAllocIndicator

instance IsField TradeAllocIndicator where
  fieldTag Proxy = 826
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeAllocIndicator
  fieldFromValue = fromValue >=> (prettyValidate . TradeAllocIndicator)

-- FieldSpec {fieldNumber = 827, fieldName = "ExpirationCycle", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "EXPIRE_ON_TRADING_SESSION_CLOSE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXPIRE_ON_TRADING_SESSION_OPEN"}]}
newtype ExpirationCycle = ExpirationCycle {unExpirationCycle :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ExpirationCycle

instance IsField ExpirationCycle where
  fieldTag Proxy = 827
  fieldIsData Proxy = False
  fieldToValue = toValue . unExpirationCycle
  fieldFromValue = fromValue >=> (prettyValidate . ExpirationCycle)

-- FieldSpec {fieldNumber = 828, fieldName = "TrdType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REGULAR_TRADE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BLOCK_TRADE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "EFP"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TRANSFER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "LATE_TRADE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "T_TRADE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "WEIGHTED_AVERAGE_PRICE_TRADE"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "BUNCHED_TRADE"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LATE_BUNCHED_TRADE"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "PRIOR_REFERENCE_PRICE_TRADE"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "AFTER_HOURS_TRADE"}]}
newtype TrdType = TrdType {unTrdType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdType

instance IsField TrdType where
  fieldTag Proxy = 828
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdType
  fieldFromValue = fromValue >=> (prettyValidate . TrdType)

-- FieldSpec {fieldNumber = 829, fieldName = "TrdSubType", fieldType = FieldTypeInt, fieldValues = []}
newtype TrdSubType = TrdSubType {unTrdSubType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdSubType

instance IsField TrdSubType where
  fieldTag Proxy = 829
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdSubType
  fieldFromValue = fromValue >=> (prettyValidate . TrdSubType)

-- FieldSpec {fieldNumber = 830, fieldName = "TransferReason", fieldType = FieldTypeString, fieldValues = []}
newtype TransferReason = TransferReason {unTransferReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TransferReason

instance IsField TransferReason where
  fieldTag Proxy = 830
  fieldIsData Proxy = False
  fieldToValue = toValue . unTransferReason
  fieldFromValue = fromValue >=> (prettyValidate . TransferReason)

-- FieldSpec {fieldNumber = 832, fieldName = "TotNumAssignmentReports", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNumAssignmentReports = TotNumAssignmentReports {unTotNumAssignmentReports :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNumAssignmentReports

instance IsField TotNumAssignmentReports where
  fieldTag Proxy = 832
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNumAssignmentReports
  fieldFromValue = fromValue >=> (prettyValidate . TotNumAssignmentReports)

-- FieldSpec {fieldNumber = 833, fieldName = "AsgnRptID", fieldType = FieldTypeString, fieldValues = []}
newtype AsgnRptID = AsgnRptID {unAsgnRptID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AsgnRptID

instance IsField AsgnRptID where
  fieldTag Proxy = 833
  fieldIsData Proxy = False
  fieldToValue = toValue . unAsgnRptID
  fieldFromValue = fromValue >=> (prettyValidate . AsgnRptID)

-- FieldSpec {fieldNumber = 834, fieldName = "ThresholdAmount", fieldType = FieldTypePriceOffset, fieldValues = []}
newtype ThresholdAmount = ThresholdAmount {unThresholdAmount :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ThresholdAmount

instance IsField ThresholdAmount where
  fieldTag Proxy = 834
  fieldIsData Proxy = False
  fieldToValue = toValue . unThresholdAmount
  fieldFromValue = fromValue >=> (prettyValidate . ThresholdAmount)

-- FieldSpec {fieldNumber = 835, fieldName = "PegMoveType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FLOATING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIXED"}]}
newtype PegMoveType = PegMoveType {unPegMoveType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PegMoveType

instance IsField PegMoveType where
  fieldTag Proxy = 835
  fieldIsData Proxy = False
  fieldToValue = toValue . unPegMoveType
  fieldFromValue = fromValue >=> (prettyValidate . PegMoveType)

-- FieldSpec {fieldNumber = 836, fieldName = "PegOffsetType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PRICE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BASIS_POINTS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TICKS"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PRICE_TIER"}]}
newtype PegOffsetType = PegOffsetType {unPegOffsetType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PegOffsetType

instance IsField PegOffsetType where
  fieldTag Proxy = 836
  fieldIsData Proxy = False
  fieldToValue = toValue . unPegOffsetType
  fieldFromValue = fromValue >=> (prettyValidate . PegOffsetType)

-- FieldSpec {fieldNumber = 837, fieldName = "PegLimitType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "OR_BETTER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STRICT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OR_WORSE"}]}
newtype PegLimitType = PegLimitType {unPegLimitType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PegLimitType

instance IsField PegLimitType where
  fieldTag Proxy = 837
  fieldIsData Proxy = False
  fieldToValue = toValue . unPegLimitType
  fieldFromValue = fromValue >=> (prettyValidate . PegLimitType)

-- FieldSpec {fieldNumber = 838, fieldName = "PegRoundDirection", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MORE_AGGRESSIVE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MORE_PASSIVE"}]}
newtype PegRoundDirection = PegRoundDirection {unPegRoundDirection :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PegRoundDirection

instance IsField PegRoundDirection where
  fieldTag Proxy = 838
  fieldIsData Proxy = False
  fieldToValue = toValue . unPegRoundDirection
  fieldFromValue = fromValue >=> (prettyValidate . PegRoundDirection)

-- FieldSpec {fieldNumber = 839, fieldName = "PeggedPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype PeggedPrice = PeggedPrice {unPeggedPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PeggedPrice

instance IsField PeggedPrice where
  fieldTag Proxy = 839
  fieldIsData Proxy = False
  fieldToValue = toValue . unPeggedPrice
  fieldFromValue = fromValue >=> (prettyValidate . PeggedPrice)

-- FieldSpec {fieldNumber = 840, fieldName = "PegScope", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOCAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NATIONAL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GLOBAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NATIONAL_EXCLUDING_LOCAL"}]}
newtype PegScope = PegScope {unPegScope :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PegScope

instance IsField PegScope where
  fieldTag Proxy = 840
  fieldIsData Proxy = False
  fieldToValue = toValue . unPegScope
  fieldFromValue = fromValue >=> (prettyValidate . PegScope)

-- FieldSpec {fieldNumber = 841, fieldName = "DiscretionMoveType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FLOATING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIXED"}]}
newtype DiscretionMoveType = DiscretionMoveType {unDiscretionMoveType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionMoveType

instance IsField DiscretionMoveType where
  fieldTag Proxy = 841
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionMoveType
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionMoveType)

-- FieldSpec {fieldNumber = 842, fieldName = "DiscretionOffsetType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PRICE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BASIS_POINTS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TICKS"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PRICE_TIER"}]}
newtype DiscretionOffsetType = DiscretionOffsetType {unDiscretionOffsetType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionOffsetType

instance IsField DiscretionOffsetType where
  fieldTag Proxy = 842
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionOffsetType
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionOffsetType)

-- FieldSpec {fieldNumber = 843, fieldName = "DiscretionLimitType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "OR_BETTER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "STRICT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OR_WORSE"}]}
newtype DiscretionLimitType = DiscretionLimitType {unDiscretionLimitType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionLimitType

instance IsField DiscretionLimitType where
  fieldTag Proxy = 843
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionLimitType
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionLimitType)

-- FieldSpec {fieldNumber = 844, fieldName = "DiscretionRoundDirection", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MORE_AGGRESSIVE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MORE_PASSIVE"}]}
newtype DiscretionRoundDirection = DiscretionRoundDirection {unDiscretionRoundDirection :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionRoundDirection

instance IsField DiscretionRoundDirection where
  fieldTag Proxy = 844
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionRoundDirection
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionRoundDirection)

-- FieldSpec {fieldNumber = 845, fieldName = "DiscretionPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype DiscretionPrice = DiscretionPrice {unDiscretionPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionPrice

instance IsField DiscretionPrice where
  fieldTag Proxy = 845
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionPrice
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionPrice)

-- FieldSpec {fieldNumber = 846, fieldName = "DiscretionScope", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOCAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NATIONAL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GLOBAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NATIONAL_EXCLUDING_LOCAL"}]}
newtype DiscretionScope = DiscretionScope {unDiscretionScope :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionScope

instance IsField DiscretionScope where
  fieldTag Proxy = 846
  fieldIsData Proxy = False
  fieldToValue = toValue . unDiscretionScope
  fieldFromValue = fromValue >=> (prettyValidate . DiscretionScope)

-- FieldSpec {fieldNumber = 847, fieldName = "TargetStrategy", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "VWAP"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PARTICIPATE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MININIZE_MARKET_IMPACT"}]}
newtype TargetStrategy = TargetStrategy {unTargetStrategy :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetStrategy

instance IsField TargetStrategy where
  fieldTag Proxy = 847
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetStrategy
  fieldFromValue = fromValue >=> (prettyValidate . TargetStrategy)

-- FieldSpec {fieldNumber = 848, fieldName = "TargetStrategyParameters", fieldType = FieldTypeString, fieldValues = []}
newtype TargetStrategyParameters = TargetStrategyParameters {unTargetStrategyParameters :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetStrategyParameters

instance IsField TargetStrategyParameters where
  fieldTag Proxy = 848
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetStrategyParameters
  fieldFromValue = fromValue >=> (prettyValidate . TargetStrategyParameters)

-- FieldSpec {fieldNumber = 849, fieldName = "ParticipationRate", fieldType = FieldTypePercentage, fieldValues = []}
newtype ParticipationRate = ParticipationRate {unParticipationRate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ParticipationRate

instance IsField ParticipationRate where
  fieldTag Proxy = 849
  fieldIsData Proxy = False
  fieldToValue = toValue . unParticipationRate
  fieldFromValue = fromValue >=> (prettyValidate . ParticipationRate)

-- FieldSpec {fieldNumber = 850, fieldName = "TargetStrategyPerformance", fieldType = FieldTypeFloat, fieldValues = []}
newtype TargetStrategyPerformance = TargetStrategyPerformance {unTargetStrategyPerformance :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TargetStrategyPerformance

instance IsField TargetStrategyPerformance where
  fieldTag Proxy = 850
  fieldIsData Proxy = False
  fieldToValue = toValue . unTargetStrategyPerformance
  fieldFromValue = fromValue >=> (prettyValidate . TargetStrategyPerformance)

-- FieldSpec {fieldNumber = 851, fieldName = "LastLiquidityInd", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ADDED_LIQUIDITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REMOVED_LIQUIDITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "LIQUIDITY_ROUTED_OUT"}]}
newtype LastLiquidityInd = LastLiquidityInd {unLastLiquidityInd :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastLiquidityInd

instance IsField LastLiquidityInd where
  fieldTag Proxy = 851
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastLiquidityInd
  fieldFromValue = fromValue >=> (prettyValidate . LastLiquidityInd)

-- FieldSpec {fieldNumber = 852, fieldName = "PublishTrdIndicator", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype PublishTrdIndicator = PublishTrdIndicator {unPublishTrdIndicator :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity PublishTrdIndicator

instance IsField PublishTrdIndicator where
  fieldTag Proxy = 852
  fieldIsData Proxy = False
  fieldToValue = toValue . unPublishTrdIndicator
  fieldFromValue = fromValue >=> (prettyValidate . PublishTrdIndicator)

-- FieldSpec {fieldNumber = 853, fieldName = "ShortSaleReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "DEALER_SOLD_SHORT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DEALER_SOLD_SHORT_EXEMPT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SELLING_CUSTOMER_SOLD_SHORT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SELLING_CUSTOMER_SOLD_SHORT_EXEMPT"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "QUALIFIED_SERVICE_REPRESENTATIVE"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT"}]}
newtype ShortSaleReason = ShortSaleReason {unShortSaleReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ShortSaleReason

instance IsField ShortSaleReason where
  fieldTag Proxy = 853
  fieldIsData Proxy = False
  fieldToValue = toValue . unShortSaleReason
  fieldFromValue = fromValue >=> (prettyValidate . ShortSaleReason)

-- FieldSpec {fieldNumber = 854, fieldName = "QtyType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNITS"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CONTRACTS"}]}
newtype QtyType = QtyType {unQtyType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity QtyType

instance IsField QtyType where
  fieldTag Proxy = 854
  fieldIsData Proxy = False
  fieldToValue = toValue . unQtyType
  fieldFromValue = fromValue >=> (prettyValidate . QtyType)

-- FieldSpec {fieldNumber = 855, fieldName = "SecondaryTrdType", fieldType = FieldTypeInt, fieldValues = []}
newtype SecondaryTrdType = SecondaryTrdType {unSecondaryTrdType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryTrdType

instance IsField SecondaryTrdType where
  fieldTag Proxy = 855
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryTrdType
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryTrdType)

-- FieldSpec {fieldNumber = 856, fieldName = "TradeReportType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUBMIT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ALLEGED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ACCEPT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "DECLINE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ADDENDUM"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "NO"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "TRADE_REPORT_CANCEL"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "LOCKED_IN"}]}
newtype TradeReportType = TradeReportType {unTradeReportType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TradeReportType

instance IsField TradeReportType where
  fieldTag Proxy = 856
  fieldIsData Proxy = False
  fieldToValue = toValue . unTradeReportType
  fieldFromValue = fromValue >=> (prettyValidate . TradeReportType)

-- FieldSpec {fieldNumber = 857, fieldName = "AllocNoOrdersType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NOT_SPECIFIED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "EXPLICIT_LIST_PROVIDED"}]}
newtype AllocNoOrdersType = AllocNoOrdersType {unAllocNoOrdersType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AllocNoOrdersType

instance IsField AllocNoOrdersType where
  fieldTag Proxy = 857
  fieldIsData Proxy = False
  fieldToValue = toValue . unAllocNoOrdersType
  fieldFromValue = fromValue >=> (prettyValidate . AllocNoOrdersType)

-- FieldSpec {fieldNumber = 858, fieldName = "SharedCommission", fieldType = FieldTypeAMT, fieldValues = []}
newtype SharedCommission = SharedCommission {unSharedCommission :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SharedCommission

instance IsField SharedCommission where
  fieldTag Proxy = 858
  fieldIsData Proxy = False
  fieldToValue = toValue . unSharedCommission
  fieldFromValue = fromValue >=> (prettyValidate . SharedCommission)

-- FieldSpec {fieldNumber = 859, fieldName = "ConfirmReqID", fieldType = FieldTypeString, fieldValues = []}
newtype ConfirmReqID = ConfirmReqID {unConfirmReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ConfirmReqID

instance IsField ConfirmReqID where
  fieldTag Proxy = 859
  fieldIsData Proxy = False
  fieldToValue = toValue . unConfirmReqID
  fieldFromValue = fromValue >=> (prettyValidate . ConfirmReqID)

-- FieldSpec {fieldNumber = 860, fieldName = "AvgParPx", fieldType = FieldTypePrice, fieldValues = []}
newtype AvgParPx = AvgParPx {unAvgParPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AvgParPx

instance IsField AvgParPx where
  fieldTag Proxy = 860
  fieldIsData Proxy = False
  fieldToValue = toValue . unAvgParPx
  fieldFromValue = fromValue >=> (prettyValidate . AvgParPx)

-- FieldSpec {fieldNumber = 861, fieldName = "ReportedPx", fieldType = FieldTypePrice, fieldValues = []}
newtype ReportedPx = ReportedPx {unReportedPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity ReportedPx

instance IsField ReportedPx where
  fieldTag Proxy = 861
  fieldIsData Proxy = False
  fieldToValue = toValue . unReportedPx
  fieldFromValue = fromValue >=> (prettyValidate . ReportedPx)

-- FieldSpec {fieldNumber = 862, fieldName = "NoCapacities", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoCapacities = NoCapacities {unNoCapacities :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoCapacities

instance IsField NoCapacities where
  fieldTag Proxy = 862
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoCapacities
  fieldFromValue = fromValue >=> (prettyValidate . NoCapacities)

-- FieldSpec {fieldNumber = 863, fieldName = "OrderCapacityQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype OrderCapacityQty = OrderCapacityQty {unOrderCapacityQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity OrderCapacityQty

instance IsField OrderCapacityQty where
  fieldTag Proxy = 863
  fieldIsData Proxy = False
  fieldToValue = toValue . unOrderCapacityQty
  fieldFromValue = fromValue >=> (prettyValidate . OrderCapacityQty)

-- FieldSpec {fieldNumber = 864, fieldName = "NoEvents", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoEvents = NoEvents {unNoEvents :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoEvents

instance IsField NoEvents where
  fieldTag Proxy = 864
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoEvents
  fieldFromValue = fromValue >=> (prettyValidate . NoEvents)

-- FieldSpec {fieldNumber = 865, fieldName = "EventType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PUT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CALL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TENDER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "SINKING_FUND_CALL"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype EventType = EventType {unEventType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EventType

instance IsField EventType where
  fieldTag Proxy = 865
  fieldIsData Proxy = False
  fieldToValue = toValue . unEventType
  fieldFromValue = fromValue >=> (prettyValidate . EventType)

-- FieldSpec {fieldNumber = 866, fieldName = "EventDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype EventDate = EventDate {unEventDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EventDate

instance IsField EventDate where
  fieldTag Proxy = 866
  fieldIsData Proxy = False
  fieldToValue = toValue . unEventDate
  fieldFromValue = fromValue >=> (prettyValidate . EventDate)

-- FieldSpec {fieldNumber = 867, fieldName = "EventPx", fieldType = FieldTypePrice, fieldValues = []}
newtype EventPx = EventPx {unEventPx :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EventPx

instance IsField EventPx where
  fieldTag Proxy = 867
  fieldIsData Proxy = False
  fieldToValue = toValue . unEventPx
  fieldFromValue = fromValue >=> (prettyValidate . EventPx)

-- FieldSpec {fieldNumber = 868, fieldName = "EventText", fieldType = FieldTypeString, fieldValues = []}
newtype EventText = EventText {unEventText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EventText

instance IsField EventText where
  fieldTag Proxy = 868
  fieldIsData Proxy = False
  fieldToValue = toValue . unEventText
  fieldFromValue = fromValue >=> (prettyValidate . EventText)

-- FieldSpec {fieldNumber = 869, fieldName = "PctAtRisk", fieldType = FieldTypePercentage, fieldValues = []}
newtype PctAtRisk = PctAtRisk {unPctAtRisk :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity PctAtRisk

instance IsField PctAtRisk where
  fieldTag Proxy = 869
  fieldIsData Proxy = False
  fieldToValue = toValue . unPctAtRisk
  fieldFromValue = fromValue >=> (prettyValidate . PctAtRisk)

-- FieldSpec {fieldNumber = 870, fieldName = "NoInstrAttrib", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoInstrAttrib = NoInstrAttrib {unNoInstrAttrib :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoInstrAttrib

instance IsField NoInstrAttrib where
  fieldTag Proxy = 870
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoInstrAttrib
  fieldFromValue = fromValue >=> (prettyValidate . NoInstrAttrib)

-- FieldSpec {fieldNumber = 871, fieldName = "InstrAttribType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FLAT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ZERO_COUPON"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INTEREST_BEARING"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NO_PERIODIC_PAYMENTS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "VARIABLE_RATE"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "LESS_FEE_FOR_PUT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "STEPPED_COUPON"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "COUPON_PERIOD"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "WHEN"},FieldValueSpec {fieldValueEnum = "10", fieldValueDescription = "ORIGINAL_ISSUE_DISCOUNT"},FieldValueSpec {fieldValueEnum = "11", fieldValueDescription = "CALLABLE"},FieldValueSpec {fieldValueEnum = "12", fieldValueDescription = "ESCROWED_TO_MATURITY"},FieldValueSpec {fieldValueEnum = "13", fieldValueDescription = "ESCROWED_TO_REDEMPTION_DATE"},FieldValueSpec {fieldValueEnum = "14", fieldValueDescription = "PRE_REFUNDED"},FieldValueSpec {fieldValueEnum = "15", fieldValueDescription = "IN_DEFAULT"},FieldValueSpec {fieldValueEnum = "16", fieldValueDescription = "UNRATED"},FieldValueSpec {fieldValueEnum = "17", fieldValueDescription = "TAXABLE"},FieldValueSpec {fieldValueEnum = "18", fieldValueDescription = "INDEXED"},FieldValueSpec {fieldValueEnum = "19", fieldValueDescription = "SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX"},FieldValueSpec {fieldValueEnum = "20", fieldValueDescription = "ORIGINAL_ISSUE_DISCOUNT_PRICE"},FieldValueSpec {fieldValueEnum = "21", fieldValueDescription = "CALLABLE_BELOW_MATURITY_VALUE"},FieldValueSpec {fieldValueEnum = "22", fieldValueDescription = "CALLABLE_WITHOUT_NOTICE"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "TEXT"}]}
newtype InstrAttribType = InstrAttribType {unInstrAttribType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InstrAttribType

instance IsField InstrAttribType where
  fieldTag Proxy = 871
  fieldIsData Proxy = False
  fieldToValue = toValue . unInstrAttribType
  fieldFromValue = fromValue >=> (prettyValidate . InstrAttribType)

-- FieldSpec {fieldNumber = 872, fieldName = "InstrAttribValue", fieldType = FieldTypeString, fieldValues = []}
newtype InstrAttribValue = InstrAttribValue {unInstrAttribValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InstrAttribValue

instance IsField InstrAttribValue where
  fieldTag Proxy = 872
  fieldIsData Proxy = False
  fieldToValue = toValue . unInstrAttribValue
  fieldFromValue = fromValue >=> (prettyValidate . InstrAttribValue)

-- FieldSpec {fieldNumber = 873, fieldName = "DatedDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype DatedDate = DatedDate {unDatedDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DatedDate

instance IsField DatedDate where
  fieldTag Proxy = 873
  fieldIsData Proxy = False
  fieldToValue = toValue . unDatedDate
  fieldFromValue = fromValue >=> (prettyValidate . DatedDate)

-- FieldSpec {fieldNumber = 874, fieldName = "InterestAccrualDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype InterestAccrualDate = InterestAccrualDate {unInterestAccrualDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity InterestAccrualDate

instance IsField InterestAccrualDate where
  fieldTag Proxy = 874
  fieldIsData Proxy = False
  fieldToValue = toValue . unInterestAccrualDate
  fieldFromValue = fromValue >=> (prettyValidate . InterestAccrualDate)

-- FieldSpec {fieldNumber = 875, fieldName = "CPProgram", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PROGRAM3A3"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PROGRAM42"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype CPProgram = CPProgram {unCPProgram :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CPProgram

instance IsField CPProgram where
  fieldTag Proxy = 875
  fieldIsData Proxy = False
  fieldToValue = toValue . unCPProgram
  fieldFromValue = fromValue >=> (prettyValidate . CPProgram)

-- FieldSpec {fieldNumber = 876, fieldName = "CPRegType", fieldType = FieldTypeString, fieldValues = []}
newtype CPRegType = CPRegType {unCPRegType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CPRegType

instance IsField CPRegType where
  fieldTag Proxy = 876
  fieldIsData Proxy = False
  fieldToValue = toValue . unCPRegType
  fieldFromValue = fromValue >=> (prettyValidate . CPRegType)

-- FieldSpec {fieldNumber = 877, fieldName = "UnderlyingCPProgram", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingCPProgram = UnderlyingCPProgram {unUnderlyingCPProgram :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCPProgram

instance IsField UnderlyingCPProgram where
  fieldTag Proxy = 877
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCPProgram
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCPProgram)

-- FieldSpec {fieldNumber = 878, fieldName = "UnderlyingCPRegType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingCPRegType = UnderlyingCPRegType {unUnderlyingCPRegType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCPRegType

instance IsField UnderlyingCPRegType where
  fieldTag Proxy = 878
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCPRegType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCPRegType)

-- FieldSpec {fieldNumber = 879, fieldName = "UnderlyingQty", fieldType = FieldTypeQTY, fieldValues = []}
newtype UnderlyingQty = UnderlyingQty {unUnderlyingQty :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingQty

instance IsField UnderlyingQty where
  fieldTag Proxy = 879
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingQty
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingQty)

-- FieldSpec {fieldNumber = 880, fieldName = "TrdMatchID", fieldType = FieldTypeString, fieldValues = []}
newtype TrdMatchID = TrdMatchID {unTrdMatchID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdMatchID

instance IsField TrdMatchID where
  fieldTag Proxy = 880
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdMatchID
  fieldFromValue = fromValue >=> (prettyValidate . TrdMatchID)

-- FieldSpec {fieldNumber = 881, fieldName = "SecondaryTradeReportRefID", fieldType = FieldTypeString, fieldValues = []}
newtype SecondaryTradeReportRefID = SecondaryTradeReportRefID {unSecondaryTradeReportRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity SecondaryTradeReportRefID

instance IsField SecondaryTradeReportRefID where
  fieldTag Proxy = 881
  fieldIsData Proxy = False
  fieldToValue = toValue . unSecondaryTradeReportRefID
  fieldFromValue = fromValue >=> (prettyValidate . SecondaryTradeReportRefID)

-- FieldSpec {fieldNumber = 882, fieldName = "UnderlyingDirtyPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingDirtyPrice = UnderlyingDirtyPrice {unUnderlyingDirtyPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingDirtyPrice

instance IsField UnderlyingDirtyPrice where
  fieldTag Proxy = 882
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingDirtyPrice
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingDirtyPrice)

-- FieldSpec {fieldNumber = 883, fieldName = "UnderlyingEndPrice", fieldType = FieldTypePrice, fieldValues = []}
newtype UnderlyingEndPrice = UnderlyingEndPrice {unUnderlyingEndPrice :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingEndPrice

instance IsField UnderlyingEndPrice where
  fieldTag Proxy = 883
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingEndPrice
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingEndPrice)

-- FieldSpec {fieldNumber = 884, fieldName = "UnderlyingStartValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype UnderlyingStartValue = UnderlyingStartValue {unUnderlyingStartValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStartValue

instance IsField UnderlyingStartValue where
  fieldTag Proxy = 884
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStartValue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStartValue)

-- FieldSpec {fieldNumber = 885, fieldName = "UnderlyingCurrentValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype UnderlyingCurrentValue = UnderlyingCurrentValue {unUnderlyingCurrentValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingCurrentValue

instance IsField UnderlyingCurrentValue where
  fieldTag Proxy = 885
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingCurrentValue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingCurrentValue)

-- FieldSpec {fieldNumber = 886, fieldName = "UnderlyingEndValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype UnderlyingEndValue = UnderlyingEndValue {unUnderlyingEndValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingEndValue

instance IsField UnderlyingEndValue where
  fieldTag Proxy = 886
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingEndValue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingEndValue)

-- FieldSpec {fieldNumber = 887, fieldName = "NoUnderlyingStips", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoUnderlyingStips = NoUnderlyingStips {unNoUnderlyingStips :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoUnderlyingStips

instance IsField NoUnderlyingStips where
  fieldTag Proxy = 887
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoUnderlyingStips
  fieldFromValue = fromValue >=> (prettyValidate . NoUnderlyingStips)

-- FieldSpec {fieldNumber = 888, fieldName = "UnderlyingStipType", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingStipType = UnderlyingStipType {unUnderlyingStipType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStipType

instance IsField UnderlyingStipType where
  fieldTag Proxy = 888
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStipType
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStipType)

-- FieldSpec {fieldNumber = 889, fieldName = "UnderlyingStipValue", fieldType = FieldTypeString, fieldValues = []}
newtype UnderlyingStipValue = UnderlyingStipValue {unUnderlyingStipValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStipValue

instance IsField UnderlyingStipValue where
  fieldTag Proxy = 889
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStipValue
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStipValue)

-- FieldSpec {fieldNumber = 890, fieldName = "MaturityNetMoney", fieldType = FieldTypeAMT, fieldValues = []}
newtype MaturityNetMoney = MaturityNetMoney {unMaturityNetMoney :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MaturityNetMoney

instance IsField MaturityNetMoney where
  fieldTag Proxy = 890
  fieldIsData Proxy = False
  fieldToValue = toValue . unMaturityNetMoney
  fieldFromValue = fromValue >=> (prettyValidate . MaturityNetMoney)

-- FieldSpec {fieldNumber = 891, fieldName = "MiscFeeBasis", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ABSOLUTE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PER_UNIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PERCENTAGE"}]}
newtype MiscFeeBasis = MiscFeeBasis {unMiscFeeBasis :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MiscFeeBasis

instance IsField MiscFeeBasis where
  fieldTag Proxy = 891
  fieldIsData Proxy = False
  fieldToValue = toValue . unMiscFeeBasis
  fieldFromValue = fromValue >=> (prettyValidate . MiscFeeBasis)

-- FieldSpec {fieldNumber = 892, fieldName = "TotNoAllocs", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNoAllocs = TotNoAllocs {unTotNoAllocs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNoAllocs

instance IsField TotNoAllocs where
  fieldTag Proxy = 892
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNoAllocs
  fieldFromValue = fromValue >=> (prettyValidate . TotNoAllocs)

-- FieldSpec {fieldNumber = 893, fieldName = "LastFragment", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
newtype LastFragment = LastFragment {unLastFragment :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity LastFragment

instance IsField LastFragment where
  fieldTag Proxy = 893
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastFragment
  fieldFromValue = fromValue >=> (prettyValidate . LastFragment)

-- FieldSpec {fieldNumber = 894, fieldName = "CollReqID", fieldType = FieldTypeString, fieldValues = []}
newtype CollReqID = CollReqID {unCollReqID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollReqID

instance IsField CollReqID where
  fieldTag Proxy = 894
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollReqID
  fieldFromValue = fromValue >=> (prettyValidate . CollReqID)

-- FieldSpec {fieldNumber = 895, fieldName = "CollAsgnReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "INITIAL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SCHEDULED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TIME_WARNING"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MARGIN_DEFICIENCY"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "MARGIN_EXCESS"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "FORWARD_COLLATERAL_DEMAND"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "EVENT_OF_DEFAULT"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "ADVERSE_TAX_EVENT"}]}
newtype CollAsgnReason = CollAsgnReason {unCollAsgnReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnReason

instance IsField CollAsgnReason where
  fieldTag Proxy = 895
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollAsgnReason
  fieldFromValue = fromValue >=> (prettyValidate . CollAsgnReason)

-- FieldSpec {fieldNumber = 896, fieldName = "CollInquiryQualifier", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "TRADE_DATE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "GC_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COLLATERAL_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "SUBSTITUTION_ELIGIBLE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NOT_ASSIGNED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PARTIALLY_ASSIGNED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "FULLY_ASSIGNED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "OUTSTANDING_TRADES"}]}
newtype CollInquiryQualifier = CollInquiryQualifier {unCollInquiryQualifier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollInquiryQualifier

instance IsField CollInquiryQualifier where
  fieldTag Proxy = 896
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollInquiryQualifier
  fieldFromValue = fromValue >=> (prettyValidate . CollInquiryQualifier)

-- FieldSpec {fieldNumber = 897, fieldName = "NoTrades", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoTrades = NoTrades {unNoTrades :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoTrades

instance IsField NoTrades where
  fieldTag Proxy = 897
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoTrades
  fieldFromValue = fromValue >=> (prettyValidate . NoTrades)

-- FieldSpec {fieldNumber = 898, fieldName = "MarginRatio", fieldType = FieldTypePercentage, fieldValues = []}
newtype MarginRatio = MarginRatio {unMarginRatio :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MarginRatio

instance IsField MarginRatio where
  fieldTag Proxy = 898
  fieldIsData Proxy = False
  fieldToValue = toValue . unMarginRatio
  fieldFromValue = fromValue >=> (prettyValidate . MarginRatio)

-- FieldSpec {fieldNumber = 899, fieldName = "MarginExcess", fieldType = FieldTypeAMT, fieldValues = []}
newtype MarginExcess = MarginExcess {unMarginExcess :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity MarginExcess

instance IsField MarginExcess where
  fieldTag Proxy = 899
  fieldIsData Proxy = False
  fieldToValue = toValue . unMarginExcess
  fieldFromValue = fromValue >=> (prettyValidate . MarginExcess)

-- FieldSpec {fieldNumber = 900, fieldName = "TotalNetValue", fieldType = FieldTypeAMT, fieldValues = []}
newtype TotalNetValue = TotalNetValue {unTotalNetValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotalNetValue

instance IsField TotalNetValue where
  fieldTag Proxy = 900
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotalNetValue
  fieldFromValue = fromValue >=> (prettyValidate . TotalNetValue)

-- FieldSpec {fieldNumber = 901, fieldName = "CashOutstanding", fieldType = FieldTypeAMT, fieldValues = []}
newtype CashOutstanding = CashOutstanding {unCashOutstanding :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CashOutstanding

instance IsField CashOutstanding where
  fieldTag Proxy = 901
  fieldIsData Proxy = False
  fieldToValue = toValue . unCashOutstanding
  fieldFromValue = fromValue >=> (prettyValidate . CashOutstanding)

-- FieldSpec {fieldNumber = 902, fieldName = "CollAsgnID", fieldType = FieldTypeString, fieldValues = []}
newtype CollAsgnID = CollAsgnID {unCollAsgnID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnID

instance IsField CollAsgnID where
  fieldTag Proxy = 902
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollAsgnID
  fieldFromValue = fromValue >=> (prettyValidate . CollAsgnID)

-- FieldSpec {fieldNumber = 903, fieldName = "CollAsgnTransType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "RELEASE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "REVERSE"}]}
newtype CollAsgnTransType = CollAsgnTransType {unCollAsgnTransType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnTransType

instance IsField CollAsgnTransType where
  fieldTag Proxy = 903
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollAsgnTransType
  fieldFromValue = fromValue >=> (prettyValidate . CollAsgnTransType)

-- FieldSpec {fieldNumber = 904, fieldName = "CollRespID", fieldType = FieldTypeString, fieldValues = []}
newtype CollRespID = CollRespID {unCollRespID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollRespID

instance IsField CollRespID where
  fieldTag Proxy = 904
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollRespID
  fieldFromValue = fromValue >=> (prettyValidate . CollRespID)

-- FieldSpec {fieldNumber = 905, fieldName = "CollAsgnRespType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "RECEIVED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DECLINED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "REJECTED"}]}
newtype CollAsgnRespType = CollAsgnRespType {unCollAsgnRespType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnRespType

instance IsField CollAsgnRespType where
  fieldTag Proxy = 905
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollAsgnRespType
  fieldFromValue = fromValue >=> (prettyValidate . CollAsgnRespType)

-- FieldSpec {fieldNumber = 906, fieldName = "CollAsgnRejectReason", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNKNOWN_DEAL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNKNOWN_OR_INVALID_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "UNAUTHORIZED_TRANSACTION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INSUFFICIENT_COLLATERAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_TYPE_OF_COLLATERAL"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "EXCESSIVE_SUBSTITUTION"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype CollAsgnRejectReason = CollAsgnRejectReason {unCollAsgnRejectReason :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnRejectReason

instance IsField CollAsgnRejectReason where
  fieldTag Proxy = 906
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollAsgnRejectReason
  fieldFromValue = fromValue >=> (prettyValidate . CollAsgnRejectReason)

-- FieldSpec {fieldNumber = 907, fieldName = "CollAsgnRefID", fieldType = FieldTypeString, fieldValues = []}
newtype CollAsgnRefID = CollAsgnRefID {unCollAsgnRefID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollAsgnRefID

instance IsField CollAsgnRefID where
  fieldTag Proxy = 907
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollAsgnRefID
  fieldFromValue = fromValue >=> (prettyValidate . CollAsgnRefID)

-- FieldSpec {fieldNumber = 908, fieldName = "CollRptID", fieldType = FieldTypeString, fieldValues = []}
newtype CollRptID = CollRptID {unCollRptID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollRptID

instance IsField CollRptID where
  fieldTag Proxy = 908
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollRptID
  fieldFromValue = fromValue >=> (prettyValidate . CollRptID)

-- FieldSpec {fieldNumber = 909, fieldName = "CollInquiryID", fieldType = FieldTypeString, fieldValues = []}
newtype CollInquiryID = CollInquiryID {unCollInquiryID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollInquiryID

instance IsField CollInquiryID where
  fieldTag Proxy = 909
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollInquiryID
  fieldFromValue = fromValue >=> (prettyValidate . CollInquiryID)

-- FieldSpec {fieldNumber = 910, fieldName = "CollStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "UNASSIGNED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PARTIALLY_ASSIGNED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ASSIGNMENT_PROPOSED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ASSIGNED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CHALLENGED"}]}
newtype CollStatus = CollStatus {unCollStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollStatus

instance IsField CollStatus where
  fieldTag Proxy = 910
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollStatus
  fieldFromValue = fromValue >=> (prettyValidate . CollStatus)

-- FieldSpec {fieldNumber = 911, fieldName = "TotNumReports", fieldType = FieldTypeInt, fieldValues = []}
newtype TotNumReports = TotNumReports {unTotNumReports :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TotNumReports

instance IsField TotNumReports where
  fieldTag Proxy = 911
  fieldIsData Proxy = False
  fieldToValue = toValue . unTotNumReports
  fieldFromValue = fromValue >=> (prettyValidate . TotNumReports)

-- FieldSpec {fieldNumber = 912, fieldName = "LastRptRequested", fieldType = FieldTypeBoolean, fieldValues = []}
newtype LastRptRequested = LastRptRequested {unLastRptRequested :: Bool}
  deriving stock (Show, Eq, Generic)

instance Validity LastRptRequested

instance IsField LastRptRequested where
  fieldTag Proxy = 912
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastRptRequested
  fieldFromValue = fromValue >=> (prettyValidate . LastRptRequested)

-- FieldSpec {fieldNumber = 913, fieldName = "AgreementDesc", fieldType = FieldTypeString, fieldValues = []}
newtype AgreementDesc = AgreementDesc {unAgreementDesc :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AgreementDesc

instance IsField AgreementDesc where
  fieldTag Proxy = 913
  fieldIsData Proxy = False
  fieldToValue = toValue . unAgreementDesc
  fieldFromValue = fromValue >=> (prettyValidate . AgreementDesc)

-- FieldSpec {fieldNumber = 914, fieldName = "AgreementID", fieldType = FieldTypeString, fieldValues = []}
newtype AgreementID = AgreementID {unAgreementID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AgreementID

instance IsField AgreementID where
  fieldTag Proxy = 914
  fieldIsData Proxy = False
  fieldToValue = toValue . unAgreementID
  fieldFromValue = fromValue >=> (prettyValidate . AgreementID)

-- FieldSpec {fieldNumber = 915, fieldName = "AgreementDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype AgreementDate = AgreementDate {unAgreementDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AgreementDate

instance IsField AgreementDate where
  fieldTag Proxy = 915
  fieldIsData Proxy = False
  fieldToValue = toValue . unAgreementDate
  fieldFromValue = fromValue >=> (prettyValidate . AgreementDate)

-- FieldSpec {fieldNumber = 916, fieldName = "StartDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype StartDate = StartDate {unStartDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StartDate

instance IsField StartDate where
  fieldTag Proxy = 916
  fieldIsData Proxy = False
  fieldToValue = toValue . unStartDate
  fieldFromValue = fromValue >=> (prettyValidate . StartDate)

-- FieldSpec {fieldNumber = 917, fieldName = "EndDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype EndDate = EndDate {unEndDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EndDate

instance IsField EndDate where
  fieldTag Proxy = 917
  fieldIsData Proxy = False
  fieldToValue = toValue . unEndDate
  fieldFromValue = fromValue >=> (prettyValidate . EndDate)

-- FieldSpec {fieldNumber = 918, fieldName = "AgreementCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype AgreementCurrency = AgreementCurrency {unAgreementCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AgreementCurrency

instance IsField AgreementCurrency where
  fieldTag Proxy = 918
  fieldIsData Proxy = False
  fieldToValue = toValue . unAgreementCurrency
  fieldFromValue = fromValue >=> (prettyValidate . AgreementCurrency)

-- FieldSpec {fieldNumber = 919, fieldName = "DeliveryType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "VERSUS_PAYMENT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FREE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TRI_PARTY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "HOLD_IN_CUSTODY"}]}
newtype DeliveryType = DeliveryType {unDeliveryType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity DeliveryType

instance IsField DeliveryType where
  fieldTag Proxy = 919
  fieldIsData Proxy = False
  fieldToValue = toValue . unDeliveryType
  fieldFromValue = fromValue >=> (prettyValidate . DeliveryType)

-- FieldSpec {fieldNumber = 920, fieldName = "EndAccruedInterestAmt", fieldType = FieldTypeAMT, fieldValues = []}
newtype EndAccruedInterestAmt = EndAccruedInterestAmt {unEndAccruedInterestAmt :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EndAccruedInterestAmt

instance IsField EndAccruedInterestAmt where
  fieldTag Proxy = 920
  fieldIsData Proxy = False
  fieldToValue = toValue . unEndAccruedInterestAmt
  fieldFromValue = fromValue >=> (prettyValidate . EndAccruedInterestAmt)

-- FieldSpec {fieldNumber = 921, fieldName = "StartCash", fieldType = FieldTypeAMT, fieldValues = []}
newtype StartCash = StartCash {unStartCash :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StartCash

instance IsField StartCash where
  fieldTag Proxy = 921
  fieldIsData Proxy = False
  fieldToValue = toValue . unStartCash
  fieldFromValue = fromValue >=> (prettyValidate . StartCash)

-- FieldSpec {fieldNumber = 922, fieldName = "EndCash", fieldType = FieldTypeAMT, fieldValues = []}
newtype EndCash = EndCash {unEndCash :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity EndCash

instance IsField EndCash where
  fieldTag Proxy = 922
  fieldIsData Proxy = False
  fieldToValue = toValue . unEndCash
  fieldFromValue = fromValue >=> (prettyValidate . EndCash)

-- FieldSpec {fieldNumber = 923, fieldName = "UserRequestID", fieldType = FieldTypeString, fieldValues = []}
newtype UserRequestID = UserRequestID {unUserRequestID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UserRequestID

instance IsField UserRequestID where
  fieldTag Proxy = 923
  fieldIsData Proxy = False
  fieldToValue = toValue . unUserRequestID
  fieldFromValue = fromValue >=> (prettyValidate . UserRequestID)

-- FieldSpec {fieldNumber = 924, fieldName = "UserRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOG_ON_USER"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "LOG_OFF_USER"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CHANGE_PASSWORD_FOR_USER"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "REQUEST_INDIVIDUAL_USER_STATUS"}]}
newtype UserRequestType = UserRequestType {unUserRequestType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UserRequestType

instance IsField UserRequestType where
  fieldTag Proxy = 924
  fieldIsData Proxy = False
  fieldToValue = toValue . unUserRequestType
  fieldFromValue = fromValue >=> (prettyValidate . UserRequestType)

-- FieldSpec {fieldNumber = 925, fieldName = "NewPassword", fieldType = FieldTypeString, fieldValues = []}
newtype NewPassword = NewPassword {unNewPassword :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NewPassword

instance IsField NewPassword where
  fieldTag Proxy = 925
  fieldIsData Proxy = False
  fieldToValue = toValue . unNewPassword
  fieldFromValue = fromValue >=> (prettyValidate . NewPassword)

-- FieldSpec {fieldNumber = 926, fieldName = "UserStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOGGED_IN"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NOT_LOGGED_IN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "USER_NOT_RECOGNISED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PASSWORD_INCORRECT"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PASSWORD_CHANGED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "OTHER"}]}
newtype UserStatus = UserStatus {unUserStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UserStatus

instance IsField UserStatus where
  fieldTag Proxy = 926
  fieldIsData Proxy = False
  fieldToValue = toValue . unUserStatus
  fieldFromValue = fromValue >=> (prettyValidate . UserStatus)

-- FieldSpec {fieldNumber = 927, fieldName = "UserStatusText", fieldType = FieldTypeString, fieldValues = []}
newtype UserStatusText = UserStatusText {unUserStatusText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UserStatusText

instance IsField UserStatusText where
  fieldTag Proxy = 927
  fieldIsData Proxy = False
  fieldToValue = toValue . unUserStatusText
  fieldFromValue = fromValue >=> (prettyValidate . UserStatusText)

-- FieldSpec {fieldNumber = 928, fieldName = "StatusValue", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CONNECTED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NOT_CONNECTED_UNEXPECTED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "NOT_CONNECTED_EXPECTED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "IN_PROCESS"}]}
newtype StatusValue = StatusValue {unStatusValue :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StatusValue

instance IsField StatusValue where
  fieldTag Proxy = 928
  fieldIsData Proxy = False
  fieldToValue = toValue . unStatusValue
  fieldFromValue = fromValue >=> (prettyValidate . StatusValue)

-- FieldSpec {fieldNumber = 929, fieldName = "StatusText", fieldType = FieldTypeString, fieldValues = []}
newtype StatusText = StatusText {unStatusText :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StatusText

instance IsField StatusText where
  fieldTag Proxy = 929
  fieldIsData Proxy = False
  fieldToValue = toValue . unStatusText
  fieldFromValue = fromValue >=> (prettyValidate . StatusText)

-- FieldSpec {fieldNumber = 930, fieldName = "RefCompID", fieldType = FieldTypeString, fieldValues = []}
newtype RefCompID = RefCompID {unRefCompID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefCompID

instance IsField RefCompID where
  fieldTag Proxy = 930
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefCompID
  fieldFromValue = fromValue >=> (prettyValidate . RefCompID)

-- FieldSpec {fieldNumber = 931, fieldName = "RefSubID", fieldType = FieldTypeString, fieldValues = []}
newtype RefSubID = RefSubID {unRefSubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity RefSubID

instance IsField RefSubID where
  fieldTag Proxy = 931
  fieldIsData Proxy = False
  fieldToValue = toValue . unRefSubID
  fieldFromValue = fromValue >=> (prettyValidate . RefSubID)

-- FieldSpec {fieldNumber = 932, fieldName = "NetworkResponseID", fieldType = FieldTypeString, fieldValues = []}
newtype NetworkResponseID = NetworkResponseID {unNetworkResponseID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetworkResponseID

instance IsField NetworkResponseID where
  fieldTag Proxy = 932
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetworkResponseID
  fieldFromValue = fromValue >=> (prettyValidate . NetworkResponseID)

-- FieldSpec {fieldNumber = 933, fieldName = "NetworkRequestID", fieldType = FieldTypeString, fieldValues = []}
newtype NetworkRequestID = NetworkRequestID {unNetworkRequestID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetworkRequestID

instance IsField NetworkRequestID where
  fieldTag Proxy = 933
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetworkRequestID
  fieldFromValue = fromValue >=> (prettyValidate . NetworkRequestID)

-- FieldSpec {fieldNumber = 934, fieldName = "LastNetworkResponseID", fieldType = FieldTypeString, fieldValues = []}
newtype LastNetworkResponseID = LastNetworkResponseID {unLastNetworkResponseID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LastNetworkResponseID

instance IsField LastNetworkResponseID where
  fieldTag Proxy = 934
  fieldIsData Proxy = False
  fieldToValue = toValue . unLastNetworkResponseID
  fieldFromValue = fromValue >=> (prettyValidate . LastNetworkResponseID)

-- FieldSpec {fieldNumber = 935, fieldName = "NetworkRequestType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SNAPSHOT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SUBSCRIBE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "STOP_SUBSCRIBING"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "LEVEL_OF_DETAIL"}]}
newtype NetworkRequestType = NetworkRequestType {unNetworkRequestType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetworkRequestType

instance IsField NetworkRequestType where
  fieldTag Proxy = 935
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetworkRequestType
  fieldFromValue = fromValue >=> (prettyValidate . NetworkRequestType)

-- FieldSpec {fieldNumber = 936, fieldName = "NoCompIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoCompIDs = NoCompIDs {unNoCompIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoCompIDs

instance IsField NoCompIDs where
  fieldTag Proxy = 936
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoCompIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoCompIDs)

-- FieldSpec {fieldNumber = 937, fieldName = "NetworkStatusResponseType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FULL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INCREMENTAL_UPDATE"}]}
newtype NetworkStatusResponseType = NetworkStatusResponseType {unNetworkStatusResponseType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NetworkStatusResponseType

instance IsField NetworkStatusResponseType where
  fieldTag Proxy = 937
  fieldIsData Proxy = False
  fieldToValue = toValue . unNetworkStatusResponseType
  fieldFromValue = fromValue >=> (prettyValidate . NetworkStatusResponseType)

-- FieldSpec {fieldNumber = 938, fieldName = "NoCollInquiryQualifier", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoCollInquiryQualifier = NoCollInquiryQualifier {unNoCollInquiryQualifier :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoCollInquiryQualifier

instance IsField NoCollInquiryQualifier where
  fieldTag Proxy = 938
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoCollInquiryQualifier
  fieldFromValue = fromValue >=> (prettyValidate . NoCollInquiryQualifier)

-- FieldSpec {fieldNumber = 939, fieldName = "TrdRptStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REJECTED"}]}
newtype TrdRptStatus = TrdRptStatus {unTrdRptStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TrdRptStatus

instance IsField TrdRptStatus where
  fieldTag Proxy = 939
  fieldIsData Proxy = False
  fieldToValue = toValue . unTrdRptStatus
  fieldFromValue = fromValue >=> (prettyValidate . TrdRptStatus)

-- FieldSpec {fieldNumber = 940, fieldName = "AffirmStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "RECEIVED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CONFIRM_REJECTED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "AFFIRMED"}]}
newtype AffirmStatus = AffirmStatus {unAffirmStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity AffirmStatus

instance IsField AffirmStatus where
  fieldTag Proxy = 940
  fieldIsData Proxy = False
  fieldToValue = toValue . unAffirmStatus
  fieldFromValue = fromValue >=> (prettyValidate . AffirmStatus)

-- FieldSpec {fieldNumber = 941, fieldName = "UnderlyingStrikeCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype UnderlyingStrikeCurrency = UnderlyingStrikeCurrency {unUnderlyingStrikeCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity UnderlyingStrikeCurrency

instance IsField UnderlyingStrikeCurrency where
  fieldTag Proxy = 941
  fieldIsData Proxy = False
  fieldToValue = toValue . unUnderlyingStrikeCurrency
  fieldFromValue = fromValue >=> (prettyValidate . UnderlyingStrikeCurrency)

-- FieldSpec {fieldNumber = 942, fieldName = "LegStrikeCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype LegStrikeCurrency = LegStrikeCurrency {unLegStrikeCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegStrikeCurrency

instance IsField LegStrikeCurrency where
  fieldTag Proxy = 942
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegStrikeCurrency
  fieldFromValue = fromValue >=> (prettyValidate . LegStrikeCurrency)

-- FieldSpec {fieldNumber = 943, fieldName = "TimeBracket", fieldType = FieldTypeString, fieldValues = []}
newtype TimeBracket = TimeBracket {unTimeBracket :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity TimeBracket

instance IsField TimeBracket where
  fieldTag Proxy = 943
  fieldIsData Proxy = False
  fieldToValue = toValue . unTimeBracket
  fieldFromValue = fromValue >=> (prettyValidate . TimeBracket)

-- FieldSpec {fieldNumber = 944, fieldName = "CollAction", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "RETAIN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ADD"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REMOVE"}]}
newtype CollAction = CollAction {unCollAction :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollAction

instance IsField CollAction where
  fieldTag Proxy = 944
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollAction
  fieldFromValue = fromValue >=> (prettyValidate . CollAction)

-- FieldSpec {fieldNumber = 945, fieldName = "CollInquiryStatus", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ACCEPTED_WITH_WARNINGS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COMPLETED"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "COMPLETED_WITH_WARNINGS"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "REJECTED"}]}
newtype CollInquiryStatus = CollInquiryStatus {unCollInquiryStatus :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollInquiryStatus

instance IsField CollInquiryStatus where
  fieldTag Proxy = 945
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollInquiryStatus
  fieldFromValue = fromValue >=> (prettyValidate . CollInquiryStatus)

-- FieldSpec {fieldNumber = 946, fieldName = "CollInquiryResult", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "SUCCESSFUL"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "INVALID_OR_UNKNOWN_INSTRUMENT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INVALID_OR_UNKNOWN_COLLATERAL_TYPE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVALID_PARTIES"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "INVALID_TRANSPORT_TYPE_REQUESTED"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "INVALID_DESTINATION_REQUESTED"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED"},FieldValueSpec {fieldValueEnum = "9", fieldValueDescription = "UNAUTHORIZED_FOR_COLLATERAL_INQUIRY"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
newtype CollInquiryResult = CollInquiryResult {unCollInquiryResult :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity CollInquiryResult

instance IsField CollInquiryResult where
  fieldTag Proxy = 946
  fieldIsData Proxy = False
  fieldToValue = toValue . unCollInquiryResult
  fieldFromValue = fromValue >=> (prettyValidate . CollInquiryResult)

-- FieldSpec {fieldNumber = 947, fieldName = "StrikeCurrency", fieldType = FieldTypeCurrency, fieldValues = []}
newtype StrikeCurrency = StrikeCurrency {unStrikeCurrency :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity StrikeCurrency

instance IsField StrikeCurrency where
  fieldTag Proxy = 947
  fieldIsData Proxy = False
  fieldToValue = toValue . unStrikeCurrency
  fieldFromValue = fromValue >=> (prettyValidate . StrikeCurrency)

-- FieldSpec {fieldNumber = 948, fieldName = "NoNested3PartyIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNested3PartyIDs = NoNested3PartyIDs {unNoNested3PartyIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNested3PartyIDs

instance IsField NoNested3PartyIDs where
  fieldTag Proxy = 948
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNested3PartyIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNested3PartyIDs)

-- FieldSpec {fieldNumber = 949, fieldName = "Nested3PartyID", fieldType = FieldTypeString, fieldValues = []}
newtype Nested3PartyID = Nested3PartyID {unNested3PartyID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartyID

instance IsField Nested3PartyID where
  fieldTag Proxy = 949
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartyID
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartyID)

-- FieldSpec {fieldNumber = 950, fieldName = "Nested3PartyIDSource", fieldType = FieldTypeChar, fieldValues = []}
newtype Nested3PartyIDSource = Nested3PartyIDSource {unNested3PartyIDSource :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartyIDSource

instance IsField Nested3PartyIDSource where
  fieldTag Proxy = 950
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartyIDSource
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartyIDSource)

-- FieldSpec {fieldNumber = 951, fieldName = "Nested3PartyRole", fieldType = FieldTypeInt, fieldValues = []}
newtype Nested3PartyRole = Nested3PartyRole {unNested3PartyRole :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartyRole

instance IsField Nested3PartyRole where
  fieldTag Proxy = 951
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartyRole
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartyRole)

-- FieldSpec {fieldNumber = 952, fieldName = "NoNested3PartySubIDs", fieldType = FieldTypeNumInGroup, fieldValues = []}
newtype NoNested3PartySubIDs = NoNested3PartySubIDs {unNoNested3PartySubIDs :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity NoNested3PartySubIDs

instance IsField NoNested3PartySubIDs where
  fieldTag Proxy = 952
  fieldIsData Proxy = False
  fieldToValue = toValue . unNoNested3PartySubIDs
  fieldFromValue = fromValue >=> (prettyValidate . NoNested3PartySubIDs)

-- FieldSpec {fieldNumber = 953, fieldName = "Nested3PartySubID", fieldType = FieldTypeString, fieldValues = []}
newtype Nested3PartySubID = Nested3PartySubID {unNested3PartySubID :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartySubID

instance IsField Nested3PartySubID where
  fieldTag Proxy = 953
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartySubID
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartySubID)

-- FieldSpec {fieldNumber = 954, fieldName = "Nested3PartySubIDType", fieldType = FieldTypeInt, fieldValues = []}
newtype Nested3PartySubIDType = Nested3PartySubIDType {unNested3PartySubIDType :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity Nested3PartySubIDType

instance IsField Nested3PartySubIDType where
  fieldTag Proxy = 954
  fieldIsData Proxy = False
  fieldToValue = toValue . unNested3PartySubIDType
  fieldFromValue = fromValue >=> (prettyValidate . Nested3PartySubIDType)

-- FieldSpec {fieldNumber = 955, fieldName = "LegContractSettlMonth", fieldType = FieldTypeMonthYear, fieldValues = []}
newtype LegContractSettlMonth = LegContractSettlMonth {unLegContractSettlMonth :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegContractSettlMonth

instance IsField LegContractSettlMonth where
  fieldTag Proxy = 955
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegContractSettlMonth
  fieldFromValue = fromValue >=> (prettyValidate . LegContractSettlMonth)

-- FieldSpec {fieldNumber = 956, fieldName = "LegInterestAccrualDate", fieldType = FieldTypeLocalMktDate, fieldValues = []}
newtype LegInterestAccrualDate = LegInterestAccrualDate {unLegInterestAccrualDate :: ByteString}
  deriving stock (Show, Eq, Generic)

instance Validity LegInterestAccrualDate

instance IsField LegInterestAccrualDate where
  fieldTag Proxy = 956
  fieldIsData Proxy = False
  fieldToValue = toValue . unLegInterestAccrualDate
  fieldFromValue = fromValue >=> (prettyValidate . LegInterestAccrualDate)
