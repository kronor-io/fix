{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.ExerciseMethod where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 747, fieldName = "ExerciseMethod", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "AUTOMATIC"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MANUAL"}]}
data ExerciseMethod
  = ExerciseMethod_AUTOMATIC
  | ExerciseMethod_MANUAL
  deriving stock (Show, Eq, Generic)

instance Validity ExerciseMethod

instance IsField ExerciseMethod where
  fieldTag Proxy = 747
  fieldIsData Proxy = False
  fieldToValue = \case
    ExerciseMethod_AUTOMATIC -> "A"
    ExerciseMethod_MANUAL -> "M"
  fieldFromValue = \case
    "A" -> Right ExerciseMethod_AUTOMATIC
    "M" -> Right ExerciseMethod_MANUAL
    v -> Left ("Unknown ExerciseMethod: " <> show v)
