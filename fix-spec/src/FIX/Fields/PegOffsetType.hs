{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.PegOffsetType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 836
--   , fieldName = "PegOffsetType"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "0" , fieldValueDescription = "PRICE" }
--       , FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "BASIS_POINTS" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "TICKS" }
--       , FieldValueSpec
--           { fieldValueEnum = "3"
--           , fieldValueDescription = "PRICE_TIER_LEVEL"
--           }
--       ]
--   }
data PegOffsetType
  = PegOffsetTypePrice
  | PegOffsetTypeBasisPoints
  | PegOffsetTypeTicks
  | PegOffsetTypePriceTierLevel
  deriving stock (Show, Eq, Generic)

instance Validity PegOffsetType

instance IsField PegOffsetType where
  fieldTag Proxy = 836
  fieldIsData Proxy = False
  fieldToValue = \case
    PegOffsetTypePrice -> "0"
    PegOffsetTypeBasisPoints -> "1"
    PegOffsetTypeTicks -> "2"
    PegOffsetTypePriceTierLevel -> "3"
  fieldFromValue = \case
    "0" -> Right PegOffsetTypePrice
    "1" -> Right PegOffsetTypeBasisPoints
    "2" -> Right PegOffsetTypeTicks
    "3" -> Right PegOffsetTypePriceTierLevel
    v -> Left ("Unknown PegOffsetType: " <> show v)
