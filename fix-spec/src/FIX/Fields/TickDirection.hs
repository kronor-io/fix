{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.TickDirection where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 274, fieldName = "TickDirection", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PLUS_TICK"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ZERO_PLUS_TICK"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MINUS_TICK"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "ZERO_MINUS_TICK"}]}
data TickDirection
  = TickDirection_PLUS_TICK
  | TickDirection_ZERO_PLUS_TICK
  | TickDirection_MINUS_TICK
  | TickDirection_ZERO_MINUS_TICK
  deriving stock (Show, Eq, Generic)

instance Validity TickDirection

instance IsField TickDirection where
  fieldTag Proxy = 274
  fieldIsData Proxy = False
  fieldToValue = \case
    TickDirection_PLUS_TICK -> "0"
    TickDirection_ZERO_PLUS_TICK -> "1"
    TickDirection_MINUS_TICK -> "2"
    TickDirection_ZERO_MINUS_TICK -> "3"
  fieldFromValue = \case
    "0" -> Right TickDirection_PLUS_TICK
    "1" -> Right TickDirection_ZERO_PLUS_TICK
    "2" -> Right TickDirection_MINUS_TICK
    "3" -> Right TickDirection_ZERO_MINUS_TICK
    v -> Left ("Unknown TickDirection: " <> show v)
