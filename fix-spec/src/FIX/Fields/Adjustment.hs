{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.Adjustment where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 334, fieldName = "Adjustment", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ERROR"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CORRECTION"}]}
data Adjustment
  = Adjustment_CANCEL
  | Adjustment_ERROR
  | Adjustment_CORRECTION
  deriving stock (Show, Eq, Generic)

instance Validity Adjustment

instance IsField Adjustment where
  fieldTag Proxy = 334
  fieldIsData Proxy = False
  fieldToValue = \case
    Adjustment_CANCEL -> "1"
    Adjustment_ERROR -> "2"
    Adjustment_CORRECTION -> "3"
  fieldFromValue = \case
    "1" -> Right Adjustment_CANCEL
    "2" -> Right Adjustment_ERROR
    "3" -> Right Adjustment_CORRECTION
    v -> Left ("Unknown Adjustment: " <> show v)
