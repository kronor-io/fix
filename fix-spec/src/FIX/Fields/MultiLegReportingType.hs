{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.MultiLegReportingType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 442
--   , fieldName = "MultiLegReportingType"
--   , fieldType = FieldTypeChar
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "1"
--           , fieldValueDescription = "SINGLE_SECURITY"
--           }
--       , FieldValueSpec
--           { fieldValueEnum = "2"
--           , fieldValueDescription = "INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY"
--           }
--       , FieldValueSpec
--           { fieldValueEnum = "3"
--           , fieldValueDescription = "MULTI_LEG_SECURITY"
--           }
--       ]
--   }
data MultiLegReportingType
  = MultiLegReportingTypeSingleSecurity
  | MultiLegReportingTypeIndividualLegOfAMultiLegSecurity
  | MultiLegReportingTypeMultiLegSecurity
  deriving stock (Show, Eq, Generic)

instance Validity MultiLegReportingType

instance IsField MultiLegReportingType where
  fieldTag Proxy = 442
  fieldIsData Proxy = False
  fieldToValue = \case
    MultiLegReportingTypeSingleSecurity -> "1"
    MultiLegReportingTypeIndividualLegOfAMultiLegSecurity -> "2"
    MultiLegReportingTypeMultiLegSecurity -> "3"
  fieldFromValue = \case
    "1" -> Right MultiLegReportingTypeSingleSecurity
    "2" -> Right MultiLegReportingTypeIndividualLegOfAMultiLegSecurity
    "3" -> Right MultiLegReportingTypeMultiLegSecurity
    v -> Left ("Unknown MultiLegReportingType: " <> show v)
