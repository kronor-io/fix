{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.QuoteRespType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 694, fieldName = "QuoteRespType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "HIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COUNTER"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "EXPIRED"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "COVER"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "DONE_AWAY"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PASS"}]}
data QuoteRespType
  = QuoteRespType_HIT
  | QuoteRespType_COUNTER
  | QuoteRespType_EXPIRED
  | QuoteRespType_COVER
  | QuoteRespType_DONE_AWAY
  | QuoteRespType_PASS
  deriving stock (Show, Eq, Generic)

instance Validity QuoteRespType

instance IsField QuoteRespType where
  fieldTag Proxy = 694
  fieldIsData Proxy = False
  fieldToValue = \case
    QuoteRespType_HIT -> "1"
    QuoteRespType_COUNTER -> "2"
    QuoteRespType_EXPIRED -> "3"
    QuoteRespType_COVER -> "4"
    QuoteRespType_DONE_AWAY -> "5"
    QuoteRespType_PASS -> "6"
  fieldFromValue = \case
    "1" -> Right QuoteRespType_HIT
    "2" -> Right QuoteRespType_COUNTER
    "3" -> Right QuoteRespType_EXPIRED
    "4" -> Right QuoteRespType_COVER
    "5" -> Right QuoteRespType_DONE_AWAY
    "6" -> Right QuoteRespType_PASS
    v -> Left ("Unknown QuoteRespType: " <> show v)
