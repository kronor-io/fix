{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.BidDescriptorType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 399, fieldName = "BidDescriptorType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SECTOR"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "COUNTRY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INDEX"}]}
data BidDescriptorType
  = BidDescriptorType_SECTOR
  | BidDescriptorType_COUNTRY
  | BidDescriptorType_INDEX
  deriving stock (Show, Eq, Generic)

instance Validity BidDescriptorType

instance IsField BidDescriptorType where
  fieldTag Proxy = 399
  fieldIsData Proxy = False
  fieldToValue = \case
    BidDescriptorType_SECTOR -> "1"
    BidDescriptorType_COUNTRY -> "2"
    BidDescriptorType_INDEX -> "3"
  fieldFromValue = \case
    "1" -> Right BidDescriptorType_SECTOR
    "2" -> Right BidDescriptorType_COUNTRY
    "3" -> Right BidDescriptorType_INDEX
    v -> Left ("Unknown BidDescriptorType: " <> show v)
