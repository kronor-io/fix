{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.CollAction where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 944, fieldName = "CollAction", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "RETAIN"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ADD"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REMOVE"}]}
data CollAction
  = CollAction_RETAIN
  | CollAction_ADD
  | CollAction_REMOVE
  deriving stock (Show, Eq, Generic)

instance Validity CollAction

instance IsField CollAction where
  fieldTag Proxy = 944
  fieldIsData Proxy = False
  fieldToValue = \case
    CollAction_RETAIN -> "0"
    CollAction_ADD -> "1"
    CollAction_REMOVE -> "2"
  fieldFromValue = \case
    "0" -> Right CollAction_RETAIN
    "1" -> Right CollAction_ADD
    "2" -> Right CollAction_REMOVE
    v -> Left ("Unknown CollAction: " <> show v)
