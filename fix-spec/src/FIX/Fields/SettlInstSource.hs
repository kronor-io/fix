{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.SettlInstSource where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 165, fieldName = "SettlInstSource", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BROKER_CREDIT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INSTITUTION"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "INVESTOR"}]}
data SettlInstSource
  = SettlInstSource_BROKER_CREDIT
  | SettlInstSource_INSTITUTION
  | SettlInstSource_INVESTOR
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstSource

instance IsField SettlInstSource where
  fieldTag Proxy = 165
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlInstSource_BROKER_CREDIT -> "1"
    SettlInstSource_INSTITUTION -> "2"
    SettlInstSource_INVESTOR -> "3"
  fieldFromValue = \case
    "1" -> Right SettlInstSource_BROKER_CREDIT
    "2" -> Right SettlInstSource_INSTITUTION
    "3" -> Right SettlInstSource_INVESTOR
    v -> Left ("Unknown SettlInstSource: " <> show v)
