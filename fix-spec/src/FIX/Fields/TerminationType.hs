{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.TerminationType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 788, fieldName = "TerminationType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "OVERNIGHT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TERM"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FLEXIBLE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OPEN"}]}
data TerminationType
  = TerminationType_OVERNIGHT
  | TerminationType_TERM
  | TerminationType_FLEXIBLE
  | TerminationType_OPEN
  deriving stock (Show, Eq, Generic)

instance Validity TerminationType

instance IsField TerminationType where
  fieldTag Proxy = 788
  fieldIsData Proxy = False
  fieldToValue = \case
    TerminationType_OVERNIGHT -> "1"
    TerminationType_TERM -> "2"
    TerminationType_FLEXIBLE -> "3"
    TerminationType_OPEN -> "4"
  fieldFromValue = \case
    "1" -> Right TerminationType_OVERNIGHT
    "2" -> Right TerminationType_TERM
    "3" -> Right TerminationType_FLEXIBLE
    "4" -> Right TerminationType_OPEN
    v -> Left ("Unknown TerminationType: " <> show v)
