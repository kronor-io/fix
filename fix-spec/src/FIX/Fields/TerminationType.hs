{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.TerminationType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 788
--   , fieldName = "TerminationType"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "OVERNIGHT" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "TERM" }
--       , FieldValueSpec
--           { fieldValueEnum = "3" , fieldValueDescription = "FLEXIBLE" }
--       , FieldValueSpec
--           { fieldValueEnum = "4" , fieldValueDescription = "OPEN" }
--       ]
--   }
data TerminationType
  = TerminationTypeOvernight
  | TerminationTypeTerm
  | TerminationTypeFlexible
  | TerminationTypeOpen
  deriving stock (Show, Eq, Generic)

instance Validity TerminationType

instance IsField TerminationType where
  fieldTag Proxy = 788
  fieldIsData Proxy = False
  fieldToValue = \case
    TerminationTypeOvernight -> "1"
    TerminationTypeTerm -> "2"
    TerminationTypeFlexible -> "3"
    TerminationTypeOpen -> "4"
  fieldFromValue = \case
    "1" -> Right TerminationTypeOvernight
    "2" -> Right TerminationTypeTerm
    "3" -> Right TerminationTypeFlexible
    "4" -> Right TerminationTypeOpen
    v -> Left ("Unknown TerminationType: " <> show v)
