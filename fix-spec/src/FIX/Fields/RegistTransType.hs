{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.RegistTransType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 514, fieldName = "RegistTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"}]}
data RegistTransType
  = RegistTransType_NEW
  | RegistTransType_REPLACE
  | RegistTransType_CANCEL
  deriving stock (Show, Eq, Generic)

instance Validity RegistTransType

instance IsField RegistTransType where
  fieldTag Proxy = 514
  fieldIsData Proxy = False
  fieldToValue = \case
    RegistTransType_NEW -> "0"
    RegistTransType_REPLACE -> "1"
    RegistTransType_CANCEL -> "2"
  fieldFromValue = \case
    "0" -> Right RegistTransType_NEW
    "1" -> Right RegistTransType_REPLACE
    "2" -> Right RegistTransType_CANCEL
    v -> Left ("Unknown RegistTransType: " <> show v)
