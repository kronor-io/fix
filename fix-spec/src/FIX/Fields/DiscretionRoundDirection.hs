{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.DiscretionRoundDirection where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 844, fieldName = "DiscretionRoundDirection", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MORE_AGGRESSIVE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MORE_PASSIVE"}]}
data DiscretionRoundDirection
  = DiscretionRoundDirection_MORE_AGGRESSIVE
  | DiscretionRoundDirection_MORE_PASSIVE
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionRoundDirection

instance IsField DiscretionRoundDirection where
  fieldTag Proxy = 844
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionRoundDirection_MORE_AGGRESSIVE -> "1"
    DiscretionRoundDirection_MORE_PASSIVE -> "2"
  fieldFromValue = \case
    "1" -> Right DiscretionRoundDirection_MORE_AGGRESSIVE
    "2" -> Right DiscretionRoundDirection_MORE_PASSIVE
    v -> Left ("Unknown DiscretionRoundDirection: " <> show v)
