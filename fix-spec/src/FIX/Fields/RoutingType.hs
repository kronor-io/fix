{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.RoutingType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 216, fieldName = "RoutingType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "TARGET_FIRM"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TARGET_LIST"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "BLOCK_FIRM"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "BLOCK_LIST"}]}
data RoutingType
  = RoutingType_TARGET_FIRM
  | RoutingType_TARGET_LIST
  | RoutingType_BLOCK_FIRM
  | RoutingType_BLOCK_LIST
  deriving stock (Show, Eq, Generic)

instance Validity RoutingType

instance IsField RoutingType where
  fieldTag Proxy = 216
  fieldIsData Proxy = False
  fieldToValue = \case
    RoutingType_TARGET_FIRM -> "1"
    RoutingType_TARGET_LIST -> "2"
    RoutingType_BLOCK_FIRM -> "3"
    RoutingType_BLOCK_LIST -> "4"
  fieldFromValue = \case
    "1" -> Right RoutingType_TARGET_FIRM
    "2" -> Right RoutingType_TARGET_LIST
    "3" -> Right RoutingType_BLOCK_FIRM
    "4" -> Right RoutingType_BLOCK_LIST
    v -> Left ("Unknown RoutingType: " <> show v)
