{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.RoutingType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 216
--   , fieldName = "RoutingType"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "TARGET_FIRM" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "TARGET_LIST" }
--       , FieldValueSpec
--           { fieldValueEnum = "3" , fieldValueDescription = "BLOCK_FIRM" }
--       , FieldValueSpec
--           { fieldValueEnum = "4" , fieldValueDescription = "BLOCK_LIST" }
--       ]
--   }
data RoutingType
  = RoutingTypeTargetFirm
  | RoutingTypeTargetList
  | RoutingTypeBlockFirm
  | RoutingTypeBlockList
  deriving stock (Show, Eq, Generic)

instance Validity RoutingType

instance IsField RoutingType where
  fieldTag Proxy = 216
  fieldIsData Proxy = False
  fieldToValue = \case
    RoutingTypeTargetFirm -> "1"
    RoutingTypeTargetList -> "2"
    RoutingTypeBlockFirm -> "3"
    RoutingTypeBlockList -> "4"
  fieldFromValue = \case
    "1" -> Right RoutingTypeTargetFirm
    "2" -> Right RoutingTypeTargetList
    "3" -> Right RoutingTypeBlockFirm
    "4" -> Right RoutingTypeBlockList
    v -> Left ("Unknown RoutingType: " <> show v)
