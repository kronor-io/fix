{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.CorporateAction where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 292, fieldName = "CorporateAction", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "EX_DIVIDEND"},FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "EX_DISTRIBUTION"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "EX_RIGHTS"},FieldValueSpec {fieldValueEnum = "D", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "E", fieldValueDescription = "EX_INTEREST"}]}
data CorporateAction
  = CorporateAction_EX_DIVIDEND
  | CorporateAction_EX_DISTRIBUTION
  | CorporateAction_EX_RIGHTS
  | CorporateAction_NEW
  | CorporateAction_EX_INTEREST
  deriving stock (Show, Eq, Generic)

instance Validity CorporateAction

instance IsField CorporateAction where
  fieldTag Proxy = 292
  fieldIsData Proxy = False
  fieldToValue = \case
    CorporateAction_EX_DIVIDEND -> "A"
    CorporateAction_EX_DISTRIBUTION -> "B"
    CorporateAction_EX_RIGHTS -> "C"
    CorporateAction_NEW -> "D"
    CorporateAction_EX_INTEREST -> "E"
  fieldFromValue = \case
    "A" -> Right CorporateAction_EX_DIVIDEND
    "B" -> Right CorporateAction_EX_DISTRIBUTION
    "C" -> Right CorporateAction_EX_RIGHTS
    "D" -> Right CorporateAction_NEW
    "E" -> Right CorporateAction_EX_INTEREST
    v -> Left ("Unknown CorporateAction: " <> show v)
