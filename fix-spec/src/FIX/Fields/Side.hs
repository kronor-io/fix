{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.Side where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 54
--   , fieldName = "Side"
--   , fieldType = FieldTypeChar
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "BUY" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "SELL" }
--       , FieldValueSpec
--           { fieldValueEnum = "3" , fieldValueDescription = "BUY_MINUS" }
--       , FieldValueSpec
--           { fieldValueEnum = "4" , fieldValueDescription = "SELL_PLUS" }
--       , FieldValueSpec
--           { fieldValueEnum = "5" , fieldValueDescription = "SELL_SHORT" }
--       , FieldValueSpec
--           { fieldValueEnum = "6"
--           , fieldValueDescription = "SELL_SHORT_EXEMPT"
--           }
--       , FieldValueSpec
--           { fieldValueEnum = "7" , fieldValueDescription = "UNDISCLOSED" }
--       , FieldValueSpec
--           { fieldValueEnum = "8" , fieldValueDescription = "CROSS" }
--       , FieldValueSpec
--           { fieldValueEnum = "9" , fieldValueDescription = "CROSS_SHORT" }
--       , FieldValueSpec
--           { fieldValueEnum = "A"
--           , fieldValueDescription = "CROSS_SHORT_EXEMPT"
--           }
--       , FieldValueSpec
--           { fieldValueEnum = "B" , fieldValueDescription = "AS_DEFINED" }
--       , FieldValueSpec
--           { fieldValueEnum = "C" , fieldValueDescription = "OPPOSITE" }
--       , FieldValueSpec
--           { fieldValueEnum = "D" , fieldValueDescription = "SUBSCRIBE" }
--       , FieldValueSpec
--           { fieldValueEnum = "E" , fieldValueDescription = "REDEEM" }
--       , FieldValueSpec
--           { fieldValueEnum = "F" , fieldValueDescription = "LEND" }
--       , FieldValueSpec
--           { fieldValueEnum = "G" , fieldValueDescription = "BORROW" }
--       ]
--   }
data Side
  = SideBuy
  | SideSell
  | SideBuyMinus
  | SideSellPlus
  | SideSellShort
  | SideSellShortExempt
  | SideUndisclosed
  | SideCross
  | SideCrossShort
  | SideCrossShortExempt
  | SideAsDefined
  | SideOpposite
  | SideSubscribe
  | SideRedeem
  | SideLend
  | SideBorrow
  deriving stock (Show, Eq, Generic)

instance Validity Side

instance IsField Side where
  fieldTag Proxy = 54
  fieldIsData Proxy = False
  fieldToValue = \case
    SideBuy -> "1"
    SideSell -> "2"
    SideBuyMinus -> "3"
    SideSellPlus -> "4"
    SideSellShort -> "5"
    SideSellShortExempt -> "6"
    SideUndisclosed -> "7"
    SideCross -> "8"
    SideCrossShort -> "9"
    SideCrossShortExempt -> "A"
    SideAsDefined -> "B"
    SideOpposite -> "C"
    SideSubscribe -> "D"
    SideRedeem -> "E"
    SideLend -> "F"
    SideBorrow -> "G"
  fieldFromValue = \case
    "1" -> Right SideBuy
    "2" -> Right SideSell
    "3" -> Right SideBuyMinus
    "4" -> Right SideSellPlus
    "5" -> Right SideSellShort
    "6" -> Right SideSellShortExempt
    "7" -> Right SideUndisclosed
    "8" -> Right SideCross
    "9" -> Right SideCrossShort
    "A" -> Right SideCrossShortExempt
    "B" -> Right SideAsDefined
    "C" -> Right SideOpposite
    "D" -> Right SideSubscribe
    "E" -> Right SideRedeem
    "F" -> Right SideLend
    "G" -> Right SideBorrow
    v -> Left ("Unknown Side: " <> show v)
