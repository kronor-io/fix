{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.CrossType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 549, fieldName = "CrossType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CROSS_AON"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CROSS_IOC"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "CROSS_ONE_SIDE"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "CROSS_SAME_PRICE"}]}
data CrossType
  = CrossType_CROSS_AON
  | CrossType_CROSS_IOC
  | CrossType_CROSS_ONE_SIDE
  | CrossType_CROSS_SAME_PRICE
  deriving stock (Show, Eq, Generic)

instance Validity CrossType

instance IsField CrossType where
  fieldTag Proxy = 549
  fieldIsData Proxy = False
  fieldToValue = \case
    CrossType_CROSS_AON -> "1"
    CrossType_CROSS_IOC -> "2"
    CrossType_CROSS_ONE_SIDE -> "3"
    CrossType_CROSS_SAME_PRICE -> "4"
  fieldFromValue = \case
    "1" -> Right CrossType_CROSS_AON
    "2" -> Right CrossType_CROSS_IOC
    "3" -> Right CrossType_CROSS_ONE_SIDE
    "4" -> Right CrossType_CROSS_SAME_PRICE
    v -> Left ("Unknown CrossType: " <> show v)
