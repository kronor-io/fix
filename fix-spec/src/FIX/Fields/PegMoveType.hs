{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.PegMoveType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 835, fieldName = "PegMoveType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FLOATING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIXED"}]}
data PegMoveType
  = PegMoveType_FLOATING
  | PegMoveType_FIXED
  deriving stock (Show, Eq, Generic)

instance Validity PegMoveType

instance IsField PegMoveType where
  fieldTag Proxy = 835
  fieldIsData Proxy = False
  fieldToValue = \case
    PegMoveType_FLOATING -> "0"
    PegMoveType_FIXED -> "1"
  fieldFromValue = \case
    "0" -> Right PegMoveType_FLOATING
    "1" -> Right PegMoveType_FIXED
    v -> Left ("Unknown PegMoveType: " <> show v)
