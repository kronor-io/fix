{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.IOITransType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 28, fieldName = "IOITransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REPLACE"}]}
data IOITransType
  = IOITransType_NEW
  | IOITransType_CANCEL
  | IOITransType_REPLACE
  deriving stock (Show, Eq, Generic)

instance Validity IOITransType

instance IsField IOITransType where
  fieldTag Proxy = 28
  fieldIsData Proxy = False
  fieldToValue = \case
    IOITransType_NEW -> "N"
    IOITransType_CANCEL -> "C"
    IOITransType_REPLACE -> "R"
  fieldFromValue = \case
    "N" -> Right IOITransType_NEW
    "C" -> Right IOITransType_CANCEL
    "R" -> Right IOITransType_REPLACE
    v -> Left ("Unknown IOITransType: " <> show v)
