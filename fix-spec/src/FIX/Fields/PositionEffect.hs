{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.PositionEffect where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 77
--   , fieldName = "PositionEffect"
--   , fieldType = FieldTypeChar
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "O" , fieldValueDescription = "OPEN" }
--       , FieldValueSpec
--           { fieldValueEnum = "C" , fieldValueDescription = "CLOSE" }
--       , FieldValueSpec
--           { fieldValueEnum = "R" , fieldValueDescription = "ROLLED" }
--       , FieldValueSpec
--           { fieldValueEnum = "F" , fieldValueDescription = "FIFO" }
--       ]
--   }
data PositionEffect
  = PositionEffectOpen
  | PositionEffectClose
  | PositionEffectRolled
  | PositionEffectFifo
  deriving stock (Show, Eq, Generic)

instance Validity PositionEffect

instance IsField PositionEffect where
  fieldTag Proxy = 77
  fieldIsData Proxy = False
  fieldToValue = \case
    PositionEffectOpen -> "O"
    PositionEffectClose -> "C"
    PositionEffectRolled -> "R"
    PositionEffectFifo -> "F"
  fieldFromValue = \case
    "O" -> Right PositionEffectOpen
    "C" -> Right PositionEffectClose
    "R" -> Right PositionEffectRolled
    "F" -> Right PositionEffectFifo
    v -> Left ("Unknown PositionEffect: " <> show v)
