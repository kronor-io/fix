{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.PositionEffect where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 77, fieldName = "PositionEffect", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "O", fieldValueDescription = "OPEN"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CLOSE"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "ROLLED"},FieldValueSpec {fieldValueEnum = "F", fieldValueDescription = "FIFO"}]}
data PositionEffect
  = PositionEffect_OPEN
  | PositionEffect_CLOSE
  | PositionEffect_ROLLED
  | PositionEffect_FIFO
  deriving stock (Show, Eq, Generic)

instance Validity PositionEffect

instance IsField PositionEffect where
  fieldTag Proxy = 77
  fieldIsData Proxy = False
  fieldToValue = \case
    PositionEffect_OPEN -> "O"
    PositionEffect_CLOSE -> "C"
    PositionEffect_ROLLED -> "R"
    PositionEffect_FIFO -> "F"
  fieldFromValue = \case
    "O" -> Right PositionEffect_OPEN
    "C" -> Right PositionEffect_CLOSE
    "R" -> Right PositionEffect_ROLLED
    "F" -> Right PositionEffect_FIFO
    v -> Left ("Unknown PositionEffect: " <> show v)
