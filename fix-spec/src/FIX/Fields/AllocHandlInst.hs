{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.AllocHandlInst where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 209, fieldName = "AllocHandlInst", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "MATCH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "FORWARD"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "FORWARD_AND_MATCH"}]}
data AllocHandlInst
  = AllocHandlInst_MATCH
  | AllocHandlInst_FORWARD
  | AllocHandlInst_FORWARD_AND_MATCH
  deriving stock (Show, Eq, Generic)

instance Validity AllocHandlInst

instance IsField AllocHandlInst where
  fieldTag Proxy = 209
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocHandlInst_MATCH -> "1"
    AllocHandlInst_FORWARD -> "2"
    AllocHandlInst_FORWARD_AND_MATCH -> "3"
  fieldFromValue = \case
    "1" -> Right AllocHandlInst_MATCH
    "2" -> Right AllocHandlInst_FORWARD
    "3" -> Right AllocHandlInst_FORWARD_AND_MATCH
    v -> Left ("Unknown AllocHandlInst: " <> show v)
