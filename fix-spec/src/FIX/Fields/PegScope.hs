{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.PegScope where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 840, fieldName = "PegScope", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOCAL"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NATIONAL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GLOBAL"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "NATIONAL_EXCLUDING_LOCAL"}]}
data PegScope
  = PegScope_LOCAL
  | PegScope_NATIONAL
  | PegScope_GLOBAL
  | PegScope_NATIONAL_EXCLUDING_LOCAL
  deriving stock (Show, Eq, Generic)

instance Validity PegScope

instance IsField PegScope where
  fieldTag Proxy = 840
  fieldIsData Proxy = False
  fieldToValue = \case
    PegScope_LOCAL -> "1"
    PegScope_NATIONAL -> "2"
    PegScope_GLOBAL -> "3"
    PegScope_NATIONAL_EXCLUDING_LOCAL -> "4"
  fieldFromValue = \case
    "1" -> Right PegScope_LOCAL
    "2" -> Right PegScope_NATIONAL
    "3" -> Right PegScope_GLOBAL
    "4" -> Right PegScope_NATIONAL_EXCLUDING_LOCAL
    v -> Left ("Unknown PegScope: " <> show v)
