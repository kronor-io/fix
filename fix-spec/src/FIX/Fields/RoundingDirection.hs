{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.RoundingDirection where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 468, fieldName = "RoundingDirection", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "ROUND_TO_NEAREST"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ROUND_DOWN"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ROUND_UP"}]}
data RoundingDirection
  = RoundingDirection_ROUND_TO_NEAREST
  | RoundingDirection_ROUND_DOWN
  | RoundingDirection_ROUND_UP
  deriving stock (Show, Eq, Generic)

instance Validity RoundingDirection

instance IsField RoundingDirection where
  fieldTag Proxy = 468
  fieldIsData Proxy = False
  fieldToValue = \case
    RoundingDirection_ROUND_TO_NEAREST -> "0"
    RoundingDirection_ROUND_DOWN -> "1"
    RoundingDirection_ROUND_UP -> "2"
  fieldFromValue = \case
    "0" -> Right RoundingDirection_ROUND_TO_NEAREST
    "1" -> Right RoundingDirection_ROUND_DOWN
    "2" -> Right RoundingDirection_ROUND_UP
    v -> Left ("Unknown RoundingDirection: " <> show v)
