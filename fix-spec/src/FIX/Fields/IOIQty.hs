{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.IOIQty where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 27, fieldName = "IOIQty", fieldType = FieldTypeString, fieldValues = [FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SMALL"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MEDIUM"},FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LARGE"}]}
data IOIQty
  = IOIQty_SMALL
  | IOIQty_MEDIUM
  | IOIQty_LARGE
  deriving stock (Show, Eq, Generic)

instance Validity IOIQty

instance IsField IOIQty where
  fieldTag Proxy = 27
  fieldIsData Proxy = False
  fieldToValue = \case
    IOIQty_SMALL -> "S"
    IOIQty_MEDIUM -> "M"
    IOIQty_LARGE -> "L"
  fieldFromValue = \case
    "S" -> Right IOIQty_SMALL
    "M" -> Right IOIQty_MEDIUM
    "L" -> Right IOIQty_LARGE
    v -> Left ("Unknown IOIQty: " <> show v)
