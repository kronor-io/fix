{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.AcctIDSource where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 660, fieldName = "AcctIDSource", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BIC"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "SID_CODE"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TFM"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "OMGEO"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "DTCC_CODE"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data AcctIDSource
  = AcctIDSource_BIC
  | AcctIDSource_SID_CODE
  | AcctIDSource_TFM
  | AcctIDSource_OMGEO
  | AcctIDSource_DTCC_CODE
  | AcctIDSource_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity AcctIDSource

instance IsField AcctIDSource where
  fieldTag Proxy = 660
  fieldIsData Proxy = False
  fieldToValue = \case
    AcctIDSource_BIC -> "1"
    AcctIDSource_SID_CODE -> "2"
    AcctIDSource_TFM -> "3"
    AcctIDSource_OMGEO -> "4"
    AcctIDSource_DTCC_CODE -> "5"
    AcctIDSource_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right AcctIDSource_BIC
    "2" -> Right AcctIDSource_SID_CODE
    "3" -> Right AcctIDSource_TFM
    "4" -> Right AcctIDSource_OMGEO
    "5" -> Right AcctIDSource_DTCC_CODE
    "99" -> Right AcctIDSource_OTHER
    v -> Left ("Unknown AcctIDSource: " <> show v)
