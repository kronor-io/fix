{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.IOIQltyInd where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 25, fieldName = "IOIQltyInd", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "L", fieldValueDescription = "LOW"},FieldValueSpec {fieldValueEnum = "M", fieldValueDescription = "MEDIUM"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "HIGH"}]}
data IOIQltyInd
  = IOIQltyInd_LOW
  | IOIQltyInd_MEDIUM
  | IOIQltyInd_HIGH
  deriving stock (Show, Eq, Generic)

instance Validity IOIQltyInd

instance IsField IOIQltyInd where
  fieldTag Proxy = 25
  fieldIsData Proxy = False
  fieldToValue = \case
    IOIQltyInd_LOW -> "L"
    IOIQltyInd_MEDIUM -> "M"
    IOIQltyInd_HIGH -> "H"
  fieldFromValue = \case
    "L" -> Right IOIQltyInd_LOW
    "M" -> Right IOIQltyInd_MEDIUM
    "H" -> Right IOIQltyInd_HIGH
    v -> Left ("Unknown IOIQltyInd: " <> show v)
