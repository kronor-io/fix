{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.StandInstDbType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 169, fieldName = "StandInstDbType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "OTHER"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "DTCSID"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "THOMSON_ALERT"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "A_GLOBAL_CUSTODIAN"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "ACCOUNT_NET"}]}
data StandInstDbType
  = StandInstDbType_OTHER
  | StandInstDbType_DTCSID
  | StandInstDbType_THOMSON_ALERT
  | StandInstDbType_A_GLOBAL_CUSTODIAN
  | StandInstDbType_ACCOUNT_NET
  deriving stock (Show, Eq, Generic)

instance Validity StandInstDbType

instance IsField StandInstDbType where
  fieldTag Proxy = 169
  fieldIsData Proxy = False
  fieldToValue = \case
    StandInstDbType_OTHER -> "0"
    StandInstDbType_DTCSID -> "1"
    StandInstDbType_THOMSON_ALERT -> "2"
    StandInstDbType_A_GLOBAL_CUSTODIAN -> "3"
    StandInstDbType_ACCOUNT_NET -> "4"
  fieldFromValue = \case
    "0" -> Right StandInstDbType_OTHER
    "1" -> Right StandInstDbType_DTCSID
    "2" -> Right StandInstDbType_THOMSON_ALERT
    "3" -> Right StandInstDbType_A_GLOBAL_CUSTODIAN
    "4" -> Right StandInstDbType_ACCOUNT_NET
    v -> Left ("Unknown StandInstDbType: " <> show v)
