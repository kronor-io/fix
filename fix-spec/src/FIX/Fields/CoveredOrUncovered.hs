{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.CoveredOrUncovered where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 203, fieldName = "CoveredOrUncovered", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "COVERED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNCOVERED"}]}
data CoveredOrUncovered
  = CoveredOrUncovered_COVERED
  | CoveredOrUncovered_UNCOVERED
  deriving stock (Show, Eq, Generic)

instance Validity CoveredOrUncovered

instance IsField CoveredOrUncovered where
  fieldTag Proxy = 203
  fieldIsData Proxy = False
  fieldToValue = \case
    CoveredOrUncovered_COVERED -> "0"
    CoveredOrUncovered_UNCOVERED -> "1"
  fieldFromValue = \case
    "0" -> Right CoveredOrUncovered_COVERED
    "1" -> Right CoveredOrUncovered_UNCOVERED
    v -> Left ("Unknown CoveredOrUncovered: " <> show v)
