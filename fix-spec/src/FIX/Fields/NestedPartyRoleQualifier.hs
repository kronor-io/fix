{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.NestedPartyRoleQualifier where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 2384
--   , fieldName = "NestedPartyRoleQualifier"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "22" , fieldValueDescription = "Algorithm" }
--       , FieldValueSpec
--           { fieldValueEnum = "24"
--           , fieldValueDescription = "Natural Person"
--           }
--       ]
--   }
data NestedPartyRoleQualifier
  = NestedPartyRoleQualifierAlgorithm
  | NestedPartyRoleQualifierNaturalPerson
  deriving stock (Show, Eq, Generic)

instance Validity NestedPartyRoleQualifier

instance IsField NestedPartyRoleQualifier where
  fieldTag Proxy = 2384
  fieldIsData Proxy = False
  fieldToValue = \case
    NestedPartyRoleQualifierAlgorithm -> "22"
    NestedPartyRoleQualifierNaturalPerson -> "24"
  fieldFromValue = \case
    "22" -> Right NestedPartyRoleQualifierAlgorithm
    "24" -> Right NestedPartyRoleQualifierNaturalPerson
    v -> Left ("Unknown NestedPartyRoleQualifier: " <> show v)
