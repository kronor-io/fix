{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.AllocType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 626, fieldName = "AllocType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CALCULATED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PRELIMINARY"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "READY_TO_BOOK"},FieldValueSpec {fieldValueEnum = "7", fieldValueDescription = "WAREHOUSE_INSTRUCTION"},FieldValueSpec {fieldValueEnum = "8", fieldValueDescription = "REQUEST_TO_INTERMEDIARY"}]}
data AllocType
  = AllocType_CALCULATED
  | AllocType_PRELIMINARY
  | AllocType_READY_TO_BOOK
  | AllocType_WAREHOUSE_INSTRUCTION
  | AllocType_REQUEST_TO_INTERMEDIARY
  deriving stock (Show, Eq, Generic)

instance Validity AllocType

instance IsField AllocType where
  fieldTag Proxy = 626
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocType_CALCULATED -> "1"
    AllocType_PRELIMINARY -> "2"
    AllocType_READY_TO_BOOK -> "5"
    AllocType_WAREHOUSE_INSTRUCTION -> "7"
    AllocType_REQUEST_TO_INTERMEDIARY -> "8"
  fieldFromValue = \case
    "1" -> Right AllocType_CALCULATED
    "2" -> Right AllocType_PRELIMINARY
    "5" -> Right AllocType_READY_TO_BOOK
    "7" -> Right AllocType_WAREHOUSE_INSTRUCTION
    "8" -> Right AllocType_REQUEST_TO_INTERMEDIARY
    v -> Left ("Unknown AllocType: " <> show v)
