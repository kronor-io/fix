{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.MatchStatus where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 573, fieldName = "MatchStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "COMPARED"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "UNCOMPARED"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ADVISORY_OR_ALERT"}]}
data MatchStatus
  = MatchStatus_COMPARED
  | MatchStatus_UNCOMPARED
  | MatchStatus_ADVISORY_OR_ALERT
  deriving stock (Show, Eq, Generic)

instance Validity MatchStatus

instance IsField MatchStatus where
  fieldTag Proxy = 573
  fieldIsData Proxy = False
  fieldToValue = \case
    MatchStatus_COMPARED -> "0"
    MatchStatus_UNCOMPARED -> "1"
    MatchStatus_ADVISORY_OR_ALERT -> "2"
  fieldFromValue = \case
    "0" -> Right MatchStatus_COMPARED
    "1" -> Right MatchStatus_UNCOMPARED
    "2" -> Right MatchStatus_ADVISORY_OR_ALERT
    v -> Left ("Unknown MatchStatus: " <> show v)
