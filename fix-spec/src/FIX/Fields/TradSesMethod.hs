{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.TradSesMethod where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 338, fieldName = "TradSesMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "ELECTRONIC"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "OPEN_OUTCRY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "TWO_PARTY"}]}
data TradSesMethod
  = TradSesMethod_ELECTRONIC
  | TradSesMethod_OPEN_OUTCRY
  | TradSesMethod_TWO_PARTY
  deriving stock (Show, Eq, Generic)

instance Validity TradSesMethod

instance IsField TradSesMethod where
  fieldTag Proxy = 338
  fieldIsData Proxy = False
  fieldToValue = \case
    TradSesMethod_ELECTRONIC -> "1"
    TradSesMethod_OPEN_OUTCRY -> "2"
    TradSesMethod_TWO_PARTY -> "3"
  fieldFromValue = \case
    "1" -> Right TradSesMethod_ELECTRONIC
    "2" -> Right TradSesMethod_OPEN_OUTCRY
    "3" -> Right TradSesMethod_TWO_PARTY
    v -> Left ("Unknown TradSesMethod: " <> show v)
