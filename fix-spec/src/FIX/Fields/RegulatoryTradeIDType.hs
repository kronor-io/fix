{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.RegulatoryTradeIDType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 1906
--   , fieldName = "RegulatoryTradeIDType"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "0" , fieldValueDescription = "CURRENT" }
--       , FieldValueSpec
--           { fieldValueEnum = "5" , fieldValueDescription = "TVTIC" }
--       , FieldValueSpec
--           { fieldValueEnum = "6"
--           , fieldValueDescription = "REPORT_TRACKING_NUMBER"
--           }
--       ]
--   }
data RegulatoryTradeIDType
  = RegulatoryTradeIDTypeCurrent
  | RegulatoryTradeIDTypeTvtic
  | RegulatoryTradeIDTypeReportTrackingNumber
  deriving stock (Show, Eq, Generic)

instance Validity RegulatoryTradeIDType

instance IsField RegulatoryTradeIDType where
  fieldTag Proxy = 1906
  fieldIsData Proxy = False
  fieldToValue = \case
    RegulatoryTradeIDTypeCurrent -> "0"
    RegulatoryTradeIDTypeTvtic -> "5"
    RegulatoryTradeIDTypeReportTrackingNumber -> "6"
  fieldFromValue = \case
    "0" -> Right RegulatoryTradeIDTypeCurrent
    "5" -> Right RegulatoryTradeIDTypeTvtic
    "6" -> Right RegulatoryTradeIDTypeReportTrackingNumber
    v -> Left ("Unknown RegulatoryTradeIDType: " <> show v)
