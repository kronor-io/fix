{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.RegistStatus where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 506, fieldName = "RegistStatus", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "A", fieldValueDescription = "ACCEPTED"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REJECTED"},FieldValueSpec {fieldValueEnum = "H", fieldValueDescription = "HELD"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "REMINDER"}]}
data RegistStatus
  = RegistStatus_ACCEPTED
  | RegistStatus_REJECTED
  | RegistStatus_HELD
  | RegistStatus_REMINDER
  deriving stock (Show, Eq, Generic)

instance Validity RegistStatus

instance IsField RegistStatus where
  fieldTag Proxy = 506
  fieldIsData Proxy = False
  fieldToValue = \case
    RegistStatus_ACCEPTED -> "A"
    RegistStatus_REJECTED -> "R"
    RegistStatus_HELD -> "H"
    RegistStatus_REMINDER -> "N"
  fieldFromValue = \case
    "A" -> Right RegistStatus_ACCEPTED
    "R" -> Right RegistStatus_REJECTED
    "H" -> Right RegistStatus_HELD
    "N" -> Right RegistStatus_REMINDER
    v -> Left ("Unknown RegistStatus: " <> show v)
