{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.FinancialStatus where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 291, fieldName = "FinancialStatus", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BANKRUPT"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PENDING_DELISTING"}]}
data FinancialStatus
  = FinancialStatus_BANKRUPT
  | FinancialStatus_PENDING_DELISTING
  deriving stock (Show, Eq, Generic)

instance Validity FinancialStatus

instance IsField FinancialStatus where
  fieldTag Proxy = 291
  fieldIsData Proxy = False
  fieldToValue = \case
    FinancialStatus_BANKRUPT -> "1"
    FinancialStatus_PENDING_DELISTING -> "2"
  fieldFromValue = \case
    "1" -> Right FinancialStatus_BANKRUPT
    "2" -> Right FinancialStatus_PENDING_DELISTING
    v -> Left ("Unknown FinancialStatus: " <> show v)
