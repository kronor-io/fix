{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.Scope where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 546, fieldName = "Scope", fieldType = FieldTypeMultipleValueString, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "LOCAL_MARKET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "NATIONAL"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "GLOBAL"}]}
data Scope
  = Scope_LOCAL_MARKET
  | Scope_NATIONAL
  | Scope_GLOBAL
  deriving stock (Show, Eq, Generic)

instance Validity Scope

instance IsField Scope where
  fieldTag Proxy = 546
  fieldIsData Proxy = False
  fieldToValue = \case
    Scope_LOCAL_MARKET -> "1"
    Scope_NATIONAL -> "2"
    Scope_GLOBAL -> "3"
  fieldFromValue = \case
    "1" -> Right Scope_LOCAL_MARKET
    "2" -> Right Scope_NATIONAL
    "3" -> Right Scope_GLOBAL
    v -> Left ("Unknown Scope: " <> show v)
