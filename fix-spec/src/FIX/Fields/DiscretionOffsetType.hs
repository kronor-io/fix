{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.DiscretionOffsetType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 842
--   , fieldName = "DiscretionOffsetType"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "0" , fieldValueDescription = "PRICE" }
--       , FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "BASIS_POINTS" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "TICKS" }
--       , FieldValueSpec
--           { fieldValueEnum = "3"
--           , fieldValueDescription = "PRICE_TIER_LEVEL"
--           }
--       ]
--   }
data DiscretionOffsetType
  = DiscretionOffsetTypePrice
  | DiscretionOffsetTypeBasisPoints
  | DiscretionOffsetTypeTicks
  | DiscretionOffsetTypePriceTierLevel
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionOffsetType

instance IsField DiscretionOffsetType where
  fieldTag Proxy = 842
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionOffsetTypePrice -> "0"
    DiscretionOffsetTypeBasisPoints -> "1"
    DiscretionOffsetTypeTicks -> "2"
    DiscretionOffsetTypePriceTierLevel -> "3"
  fieldFromValue = \case
    "0" -> Right DiscretionOffsetTypePrice
    "1" -> Right DiscretionOffsetTypeBasisPoints
    "2" -> Right DiscretionOffsetTypeTicks
    "3" -> Right DiscretionOffsetTypePriceTierLevel
    v -> Left ("Unknown DiscretionOffsetType: " <> show v)
