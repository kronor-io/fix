{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.DiscretionOffsetType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 842, fieldName = "DiscretionOffsetType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PRICE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "BASIS_POINTS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "TICKS"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PRICE_TIER"}]}
data DiscretionOffsetType
  = DiscretionOffsetType_PRICE
  | DiscretionOffsetType_BASIS_POINTS
  | DiscretionOffsetType_TICKS
  | DiscretionOffsetType_PRICE_TIER
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionOffsetType

instance IsField DiscretionOffsetType where
  fieldTag Proxy = 842
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionOffsetType_PRICE -> "0"
    DiscretionOffsetType_BASIS_POINTS -> "1"
    DiscretionOffsetType_TICKS -> "2"
    DiscretionOffsetType_PRICE_TIER -> "3"
  fieldFromValue = \case
    "0" -> Right DiscretionOffsetType_PRICE
    "1" -> Right DiscretionOffsetType_BASIS_POINTS
    "2" -> Right DiscretionOffsetType_TICKS
    "3" -> Right DiscretionOffsetType_PRICE_TIER
    v -> Left ("Unknown DiscretionOffsetType: " <> show v)
