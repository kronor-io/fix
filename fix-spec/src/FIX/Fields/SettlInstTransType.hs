{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.SettlInstTransType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 163, fieldName = "SettlInstTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "C", fieldValueDescription = "CANCEL"},FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "RESTATE"}]}
data SettlInstTransType
  = SettlInstTransType_NEW
  | SettlInstTransType_CANCEL
  | SettlInstTransType_REPLACE
  | SettlInstTransType_RESTATE
  deriving stock (Show, Eq, Generic)

instance Validity SettlInstTransType

instance IsField SettlInstTransType where
  fieldTag Proxy = 163
  fieldIsData Proxy = False
  fieldToValue = \case
    SettlInstTransType_NEW -> "N"
    SettlInstTransType_CANCEL -> "C"
    SettlInstTransType_REPLACE -> "R"
    SettlInstTransType_RESTATE -> "T"
  fieldFromValue = \case
    "N" -> Right SettlInstTransType_NEW
    "C" -> Right SettlInstTransType_CANCEL
    "R" -> Right SettlInstTransType_REPLACE
    "T" -> Right SettlInstTransType_RESTATE
    v -> Left ("Unknown SettlInstTransType: " <> show v)
