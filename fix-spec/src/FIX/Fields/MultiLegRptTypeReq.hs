{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.MultiLegRptTypeReq where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 563, fieldName = "MultiLegRptTypeReq", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "REPORT_BY_MULITLEG_SECURITY_ONLY"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "REPORT_BY_INSTRUMENT_LEGS_ONLY"}]}
data MultiLegRptTypeReq
  = MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY
  | MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS
  | MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_ONLY
  deriving stock (Show, Eq, Generic)

instance Validity MultiLegRptTypeReq

instance IsField MultiLegRptTypeReq where
  fieldTag Proxy = 563
  fieldIsData Proxy = False
  fieldToValue = \case
    MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY -> "0"
    MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS -> "1"
    MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_ONLY -> "2"
  fieldFromValue = \case
    "0" -> Right MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY
    "1" -> Right MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_INSTRUMENT_LEGS
    "2" -> Right MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_ONLY
    v -> Left ("Unknown MultiLegRptTypeReq: " <> show v)
