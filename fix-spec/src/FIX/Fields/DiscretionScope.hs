{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.DiscretionScope where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 846
--   , fieldName = "DiscretionScope"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "LOCAL" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "NATIONAL" }
--       , FieldValueSpec
--           { fieldValueEnum = "3" , fieldValueDescription = "GLOBAL" }
--       , FieldValueSpec
--           { fieldValueEnum = "4"
--           , fieldValueDescription = "NATIONAL_EXCLUDING_LOCAL"
--           }
--       ]
--   }
data DiscretionScope
  = DiscretionScopeLocal
  | DiscretionScopeNational
  | DiscretionScopeGlobal
  | DiscretionScopeNationalExcludingLocal
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionScope

instance IsField DiscretionScope where
  fieldTag Proxy = 846
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionScopeLocal -> "1"
    DiscretionScopeNational -> "2"
    DiscretionScopeGlobal -> "3"
    DiscretionScopeNationalExcludingLocal -> "4"
  fieldFromValue = \case
    "1" -> Right DiscretionScopeLocal
    "2" -> Right DiscretionScopeNational
    "3" -> Right DiscretionScopeGlobal
    "4" -> Right DiscretionScopeNationalExcludingLocal
    v -> Left ("Unknown DiscretionScope: " <> show v)
