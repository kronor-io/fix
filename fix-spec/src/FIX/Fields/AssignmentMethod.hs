{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.AssignmentMethod where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 744, fieldName = "AssignmentMethod", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "R", fieldValueDescription = "RANDOM"},FieldValueSpec {fieldValueEnum = "P", fieldValueDescription = "PRO_RATA"}]}
data AssignmentMethod
  = AssignmentMethod_RANDOM
  | AssignmentMethod_PRO_RATA
  deriving stock (Show, Eq, Generic)

instance Validity AssignmentMethod

instance IsField AssignmentMethod where
  fieldTag Proxy = 744
  fieldIsData Proxy = False
  fieldToValue = \case
    AssignmentMethod_RANDOM -> "R"
    AssignmentMethod_PRO_RATA -> "P"
  fieldFromValue = \case
    "R" -> Right AssignmentMethod_RANDOM
    "P" -> Right AssignmentMethod_PRO_RATA
    v -> Left ("Unknown AssignmentMethod: " <> show v)
