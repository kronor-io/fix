{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.PutOrCall where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 201, fieldName = "PutOrCall", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "PUT"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CALL"}]}
data PutOrCall
  = PutOrCall_PUT
  | PutOrCall_CALL
  deriving stock (Show, Eq, Generic)

instance Validity PutOrCall

instance IsField PutOrCall where
  fieldTag Proxy = 201
  fieldIsData Proxy = False
  fieldToValue = \case
    PutOrCall_PUT -> "0"
    PutOrCall_CALL -> "1"
  fieldFromValue = \case
    "0" -> Right PutOrCall_PUT
    "1" -> Right PutOrCall_CALL
    v -> Left ("Unknown PutOrCall: " <> show v)
