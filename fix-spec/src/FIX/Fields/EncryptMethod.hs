{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.EncryptMethod where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec {fieldNumber = 98, fieldName = "EncryptMethod", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NONE"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PKCS"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "DES"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "PKCSDES"},FieldValueSpec {fieldValueEnum = "4", fieldValueDescription = "PGPDES"},FieldValueSpec {fieldValueEnum = "5", fieldValueDescription = "PGPDESMD5"},FieldValueSpec {fieldValueEnum = "6", fieldValueDescription = "PEM"}]}
data EncryptMethod
  = EncryptMethodNone
  | EncryptMethodPkcs
  | EncryptMethodDes
  | EncryptMethodPkcsdes
  | EncryptMethodPgpdes
  | EncryptMethodPgpdesmd5
  | EncryptMethodPem
  deriving stock (Show, Eq, Generic)

instance Validity EncryptMethod

instance IsField EncryptMethod where
  fieldTag Proxy = 98
  fieldIsData Proxy = False
  fieldToValue = \case
    EncryptMethodNone -> "0"
    EncryptMethodPkcs -> "1"
    EncryptMethodDes -> "2"
    EncryptMethodPkcsdes -> "3"
    EncryptMethodPgpdes -> "4"
    EncryptMethodPgpdesmd5 -> "5"
    EncryptMethodPem -> "6"
  fieldFromValue = \case
    "0" -> Right EncryptMethodNone
    "1" -> Right EncryptMethodPkcs
    "2" -> Right EncryptMethodDes
    "3" -> Right EncryptMethodPkcsdes
    "4" -> Right EncryptMethodPgpdes
    "5" -> Right EncryptMethodPgpdesmd5
    "6" -> Right EncryptMethodPem
    v -> Left ("Unknown EncryptMethod: " <> show v)
