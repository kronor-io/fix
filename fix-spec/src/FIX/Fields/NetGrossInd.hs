{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.NetGrossInd where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 430, fieldName = "NetGrossInd", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "NET"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "GROSS"}]}
data NetGrossInd
  = NetGrossInd_NET
  | NetGrossInd_GROSS
  deriving stock (Show, Eq, Generic)

instance Validity NetGrossInd

instance IsField NetGrossInd where
  fieldTag Proxy = 430
  fieldIsData Proxy = False
  fieldToValue = \case
    NetGrossInd_NET -> "1"
    NetGrossInd_GROSS -> "2"
  fieldFromValue = \case
    "1" -> Right NetGrossInd_NET
    "2" -> Right NetGrossInd_GROSS
    v -> Left ("Unknown NetGrossInd: " <> show v)
