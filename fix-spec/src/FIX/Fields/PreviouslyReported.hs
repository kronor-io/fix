{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.PreviouslyReported where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 570, fieldName = "PreviouslyReported", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data PreviouslyReported
  = PreviouslyReported_YES
  | PreviouslyReported_NO
  deriving stock (Show, Eq, Generic)

instance Validity PreviouslyReported

instance IsField PreviouslyReported where
  fieldTag Proxy = 570
  fieldIsData Proxy = False
  fieldToValue = \case
    PreviouslyReported_YES -> "Y"
    PreviouslyReported_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right PreviouslyReported_YES
    "N" -> Right PreviouslyReported_NO
    v -> Left ("Unknown PreviouslyReported: " <> show v)
