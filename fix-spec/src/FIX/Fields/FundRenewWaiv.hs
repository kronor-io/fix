{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.FundRenewWaiv where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 497
--   , fieldName = "FundRenewWaiv"
--   , fieldType = FieldTypeChar
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "Y" , fieldValueDescription = "YES" }
--       , FieldValueSpec
--           { fieldValueEnum = "N" , fieldValueDescription = "NO" }
--       ]
--   }
data FundRenewWaiv
  = FundRenewWaivYes
  | FundRenewWaivNo
  deriving stock (Show, Eq, Generic)

instance Validity FundRenewWaiv

instance IsField FundRenewWaiv where
  fieldTag Proxy = 497
  fieldIsData Proxy = False
  fieldToValue = \case
    FundRenewWaivYes -> "Y"
    FundRenewWaivNo -> "N"
  fieldFromValue = \case
    "Y" -> Right FundRenewWaivYes
    "N" -> Right FundRenewWaivNo
    v -> Left ("Unknown FundRenewWaiv: " <> show v)
