{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.EmailType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 94, fieldName = "EmailType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "ADMIN_REPLY"}]}
data EmailType
  = EmailType_NEW
  | EmailType_REPLY
  | EmailType_ADMIN_REPLY
  deriving stock (Show, Eq, Generic)

instance Validity EmailType

instance IsField EmailType where
  fieldTag Proxy = 94
  fieldIsData Proxy = False
  fieldToValue = \case
    EmailType_NEW -> "0"
    EmailType_REPLY -> "1"
    EmailType_ADMIN_REPLY -> "2"
  fieldFromValue = \case
    "0" -> Right EmailType_NEW
    "1" -> Right EmailType_REPLY
    "2" -> Right EmailType_ADMIN_REPLY
    v -> Left ("Unknown EmailType: " <> show v)
