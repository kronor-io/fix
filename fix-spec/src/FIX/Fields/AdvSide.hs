{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.AdvSide where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 4, fieldName = "AdvSide", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "B", fieldValueDescription = "BUY"},FieldValueSpec {fieldValueEnum = "S", fieldValueDescription = "SELL"},FieldValueSpec {fieldValueEnum = "X", fieldValueDescription = "CROSS"},FieldValueSpec {fieldValueEnum = "T", fieldValueDescription = "TRADE"}]}
data AdvSide
  = AdvSide_BUY
  | AdvSide_SELL
  | AdvSide_CROSS
  | AdvSide_TRADE
  deriving stock (Show, Eq, Generic)

instance Validity AdvSide

instance IsField AdvSide where
  fieldTag Proxy = 4
  fieldIsData Proxy = False
  fieldToValue = \case
    AdvSide_BUY -> "B"
    AdvSide_SELL -> "S"
    AdvSide_CROSS -> "X"
    AdvSide_TRADE -> "T"
  fieldFromValue = \case
    "B" -> Right AdvSide_BUY
    "S" -> Right AdvSide_SELL
    "X" -> Right AdvSide_CROSS
    "T" -> Right AdvSide_TRADE
    v -> Left ("Unknown AdvSide: " <> show v)
