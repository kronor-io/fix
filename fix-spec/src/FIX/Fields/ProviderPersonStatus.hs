{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.ProviderPersonStatus where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 7627
--   , fieldName = "ProviderPersonStatus"
--   , fieldType = FieldTypeString
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "US" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "NON_US" }
--       ]
--   }
data ProviderPersonStatus
  = ProviderPersonStatusUs
  | ProviderPersonStatusNonUs
  deriving stock (Show, Eq, Generic)

instance Validity ProviderPersonStatus

instance IsField ProviderPersonStatus where
  fieldTag Proxy = 7627
  fieldIsData Proxy = False
  fieldToValue = \case
    ProviderPersonStatusUs -> "1"
    ProviderPersonStatusNonUs -> "2"
  fieldFromValue = \case
    "1" -> Right ProviderPersonStatusUs
    "2" -> Right ProviderPersonStatusNonUs
    v -> Left ("Unknown ProviderPersonStatus: " <> show v)
