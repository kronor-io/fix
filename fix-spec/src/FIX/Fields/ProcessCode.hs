{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.ProcessCode where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 81
--   , fieldName = "ProcessCode"
--   , fieldType = FieldTypeChar
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "0" , fieldValueDescription = "REGULAR" }
--       , FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "SOFT_DOLLAR" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "STEP_IN" }
--       , FieldValueSpec
--           { fieldValueEnum = "3" , fieldValueDescription = "STEP_OUT" }
--       , FieldValueSpec
--           { fieldValueEnum = "4"
--           , fieldValueDescription = "SOFT_DOLLAR_STEP_IN"
--           }
--       , FieldValueSpec
--           { fieldValueEnum = "5"
--           , fieldValueDescription = "SOFT_DOLLAR_STEP_OUT"
--           }
--       , FieldValueSpec
--           { fieldValueEnum = "6" , fieldValueDescription = "PLAN_SPONSOR" }
--       ]
--   }
data ProcessCode
  = ProcessCodeRegular
  | ProcessCodeSoftDollar
  | ProcessCodeStepIn
  | ProcessCodeStepOut
  | ProcessCodeSoftDollarStepIn
  | ProcessCodeSoftDollarStepOut
  | ProcessCodePlanSponsor
  deriving stock (Show, Eq, Generic)

instance Validity ProcessCode

instance IsField ProcessCode where
  fieldTag Proxy = 81
  fieldIsData Proxy = False
  fieldToValue = \case
    ProcessCodeRegular -> "0"
    ProcessCodeSoftDollar -> "1"
    ProcessCodeStepIn -> "2"
    ProcessCodeStepOut -> "3"
    ProcessCodeSoftDollarStepIn -> "4"
    ProcessCodeSoftDollarStepOut -> "5"
    ProcessCodePlanSponsor -> "6"
  fieldFromValue = \case
    "0" -> Right ProcessCodeRegular
    "1" -> Right ProcessCodeSoftDollar
    "2" -> Right ProcessCodeStepIn
    "3" -> Right ProcessCodeStepOut
    "4" -> Right ProcessCodeSoftDollarStepIn
    "5" -> Right ProcessCodeSoftDollarStepOut
    "6" -> Right ProcessCodePlanSponsor
    v -> Left ("Unknown ProcessCode: " <> show v)
