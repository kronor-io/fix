{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.DiscretionLimitType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 843
--   , fieldName = "DiscretionLimitType"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "0" , fieldValueDescription = "OR_BETTER" }
--       , FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "STRICT" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "OR_WORSE" }
--       ]
--   }
data DiscretionLimitType
  = DiscretionLimitTypeOrBetter
  | DiscretionLimitTypeStrict
  | DiscretionLimitTypeOrWorse
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionLimitType

instance IsField DiscretionLimitType where
  fieldTag Proxy = 843
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionLimitTypeOrBetter -> "0"
    DiscretionLimitTypeStrict -> "1"
    DiscretionLimitTypeOrWorse -> "2"
  fieldFromValue = \case
    "0" -> Right DiscretionLimitTypeOrBetter
    "1" -> Right DiscretionLimitTypeStrict
    "2" -> Right DiscretionLimitTypeOrWorse
    v -> Left ("Unknown DiscretionLimitType: " <> show v)
