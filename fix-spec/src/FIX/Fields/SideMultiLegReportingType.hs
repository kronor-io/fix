{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.SideMultiLegReportingType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 752, fieldName = "SideMultiLegReportingType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "SINGLE_SECURITY"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MULTILEG_SECURITY"}]}
data SideMultiLegReportingType
  = SideMultiLegReportingType_SINGLE_SECURITY
  | SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY
  | SideMultiLegReportingType_MULTILEG_SECURITY
  deriving stock (Show, Eq, Generic)

instance Validity SideMultiLegReportingType

instance IsField SideMultiLegReportingType where
  fieldTag Proxy = 752
  fieldIsData Proxy = False
  fieldToValue = \case
    SideMultiLegReportingType_SINGLE_SECURITY -> "1"
    SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY -> "2"
    SideMultiLegReportingType_MULTILEG_SECURITY -> "3"
  fieldFromValue = \case
    "1" -> Right SideMultiLegReportingType_SINGLE_SECURITY
    "2" -> Right SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY
    "3" -> Right SideMultiLegReportingType_MULTILEG_SECURITY
    v -> Left ("Unknown SideMultiLegReportingType: " <> show v)
