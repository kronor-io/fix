{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.AllocTransType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 71, fieldName = "AllocTransType", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "NEW"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "REPLACE"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "CANCEL"}]}
data AllocTransType
  = AllocTransType_NEW
  | AllocTransType_REPLACE
  | AllocTransType_CANCEL
  deriving stock (Show, Eq, Generic)

instance Validity AllocTransType

instance IsField AllocTransType where
  fieldTag Proxy = 71
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocTransType_NEW -> "0"
    AllocTransType_REPLACE -> "1"
    AllocTransType_CANCEL -> "2"
  fieldFromValue = \case
    "0" -> Right AllocTransType_NEW
    "1" -> Right AllocTransType_REPLACE
    "2" -> Right AllocTransType_CANCEL
    v -> Left ("Unknown AllocTransType: " <> show v)
