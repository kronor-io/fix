{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.CashMargin where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 544
--   , fieldName = "CashMargin"
--   , fieldType = FieldTypeChar
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "CASH" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "MARGIN_OPEN" }
--       , FieldValueSpec
--           { fieldValueEnum = "3" , fieldValueDescription = "MARGIN_CLOSE" }
--       ]
--   }
data CashMargin
  = CashMarginCash
  | CashMarginMarginOpen
  | CashMarginMarginClose
  deriving stock (Show, Eq, Generic)

instance Validity CashMargin

instance IsField CashMargin where
  fieldTag Proxy = 544
  fieldIsData Proxy = False
  fieldToValue = \case
    CashMarginCash -> "1"
    CashMarginMarginOpen -> "2"
    CashMarginMarginClose -> "3"
  fieldFromValue = \case
    "1" -> Right CashMarginCash
    "2" -> Right CashMarginMarginOpen
    "3" -> Right CashMarginMarginClose
    v -> Left ("Unknown CashMargin: " <> show v)
