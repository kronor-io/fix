{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.CashMargin where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 544, fieldName = "CashMargin", fieldType = FieldTypeChar, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "CASH"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "MARGIN_OPEN"},FieldValueSpec {fieldValueEnum = "3", fieldValueDescription = "MARGIN_CLOSE"}]}
data CashMargin
  = CashMargin_CASH
  | CashMargin_MARGIN_OPEN
  | CashMargin_MARGIN_CLOSE
  deriving stock (Show, Eq, Generic)

instance Validity CashMargin

instance IsField CashMargin where
  fieldTag Proxy = 544
  fieldIsData Proxy = False
  fieldToValue = \case
    CashMargin_CASH -> "1"
    CashMargin_MARGIN_OPEN -> "2"
    CashMargin_MARGIN_CLOSE -> "3"
  fieldFromValue = \case
    "1" -> Right CashMargin_CASH
    "2" -> Right CashMargin_MARGIN_OPEN
    "3" -> Right CashMargin_MARGIN_CLOSE
    v -> Left ("Unknown CashMargin: " <> show v)
