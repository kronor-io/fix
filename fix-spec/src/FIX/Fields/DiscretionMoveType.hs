{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.DiscretionMoveType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 841, fieldName = "DiscretionMoveType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FLOATING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FIXED"}]}
data DiscretionMoveType
  = DiscretionMoveType_FLOATING
  | DiscretionMoveType_FIXED
  deriving stock (Show, Eq, Generic)

instance Validity DiscretionMoveType

instance IsField DiscretionMoveType where
  fieldTag Proxy = 841
  fieldIsData Proxy = False
  fieldToValue = \case
    DiscretionMoveType_FLOATING -> "0"
    DiscretionMoveType_FIXED -> "1"
  fieldFromValue = \case
    "0" -> Right DiscretionMoveType_FLOATING
    "1" -> Right DiscretionMoveType_FIXED
    v -> Left ("Unknown DiscretionMoveType: " <> show v)
