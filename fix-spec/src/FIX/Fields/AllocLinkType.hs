{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.AllocLinkType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module "HLint: ignore" #-}

-- FieldSpec {fieldNumber = 197, fieldName = "AllocLinkType", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "0", fieldValueDescription = "FX_NETTING"},FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "FX_SWAP"}]}
data AllocLinkType
  = AllocLinkType_FX_NETTING
  | AllocLinkType_FX_SWAP
  deriving stock (Show, Eq, Generic)

instance Validity AllocLinkType

instance IsField AllocLinkType where
  fieldTag Proxy = 197
  fieldIsData Proxy = False
  fieldToValue = \case
    AllocLinkType_FX_NETTING -> "0"
    AllocLinkType_FX_SWAP -> "1"
  fieldFromValue = \case
    "0" -> Right AllocLinkType_FX_NETTING
    "1" -> Right AllocLinkType_FX_SWAP
    v -> Left ("Unknown AllocLinkType: " <> show v)
