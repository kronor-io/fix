{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.EventType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 865
--   , fieldName = "EventType"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "PUT" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "CALL" }
--       , FieldValueSpec
--           { fieldValueEnum = "3" , fieldValueDescription = "TENDER" }
--       , FieldValueSpec
--           { fieldValueEnum = "4"
--           , fieldValueDescription = "SINKING_FUND_CALL"
--           }
--       , FieldValueSpec
--           { fieldValueEnum = "99" , fieldValueDescription = "OTHER" }
--       ]
--   }
data EventType
  = EventTypePut
  | EventTypeCall
  | EventTypeTender
  | EventTypeSinkingFundCall
  | EventTypeOther
  deriving stock (Show, Eq, Generic)

instance Validity EventType

instance IsField EventType where
  fieldTag Proxy = 865
  fieldIsData Proxy = False
  fieldToValue = \case
    EventTypePut -> "1"
    EventTypeCall -> "2"
    EventTypeTender -> "3"
    EventTypeSinkingFundCall -> "4"
    EventTypeOther -> "99"
  fieldFromValue = \case
    "1" -> Right EventTypePut
    "2" -> Right EventTypeCall
    "3" -> Right EventTypeTender
    "4" -> Right EventTypeSinkingFundCall
    "99" -> Right EventTypeOther
    v -> Left ("Unknown EventType: " <> show v)
