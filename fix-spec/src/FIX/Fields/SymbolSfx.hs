{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.SymbolSfx where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 65
--   , fieldName = "SymbolSfx"
--   , fieldType = FieldTypeString
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "WI" , fieldValueDescription = "WHEN_ISSUED" }
--       , FieldValueSpec
--           { fieldValueEnum = "CD"
--           , fieldValueDescription = "A_EUCP_WITH_LUMP_SUM_INTEREST"
--           }
--       ]
--   }
data SymbolSfx
  = SymbolSfxWhenIssued
  | SymbolSfxAEucpWithLumpSumInterest
  deriving stock (Show, Eq, Generic)

instance Validity SymbolSfx

instance IsField SymbolSfx where
  fieldTag Proxy = 65
  fieldIsData Proxy = False
  fieldToValue = \case
    SymbolSfxWhenIssued -> "WI"
    SymbolSfxAEucpWithLumpSumInterest -> "CD"
  fieldFromValue = \case
    "WI" -> Right SymbolSfxWhenIssued
    "CD" -> Right SymbolSfxAEucpWithLumpSumInterest
    v -> Left ("Unknown SymbolSfx: " <> show v)
