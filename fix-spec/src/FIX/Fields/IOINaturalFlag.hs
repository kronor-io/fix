{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.IOINaturalFlag where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 130, fieldName = "IOINaturalFlag", fieldType = FieldTypeBoolean, fieldValues = [FieldValueSpec {fieldValueEnum = "Y", fieldValueDescription = "YES"},FieldValueSpec {fieldValueEnum = "N", fieldValueDescription = "NO"}]}
data IOINaturalFlag
  = IOINaturalFlag_YES
  | IOINaturalFlag_NO
  deriving stock (Show, Eq, Generic)

instance Validity IOINaturalFlag

instance IsField IOINaturalFlag where
  fieldTag Proxy = 130
  fieldIsData Proxy = False
  fieldToValue = \case
    IOINaturalFlag_YES -> "Y"
    IOINaturalFlag_NO -> "N"
  fieldFromValue = \case
    "Y" -> Right IOINaturalFlag_YES
    "N" -> Right IOINaturalFlag_NO
    v -> Left ("Unknown IOINaturalFlag: " <> show v)
