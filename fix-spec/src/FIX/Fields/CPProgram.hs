{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.CPProgram where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 875
--   , fieldName = "CPProgram"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "PROGRAM3A3" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "PROGRAM42" }
--       , FieldValueSpec
--           { fieldValueEnum = "99" , fieldValueDescription = "OTHER" }
--       ]
--   }
data CPProgram
  = CPProgramProgram3a3
  | CPProgramProgram42
  | CPProgramOther
  deriving stock (Show, Eq, Generic)

instance Validity CPProgram

instance IsField CPProgram where
  fieldTag Proxy = 875
  fieldIsData Proxy = False
  fieldToValue = \case
    CPProgramProgram3a3 -> "1"
    CPProgramProgram42 -> "2"
    CPProgramOther -> "99"
  fieldFromValue = \case
    "1" -> Right CPProgramProgram3a3
    "2" -> Right CPProgramProgram42
    "99" -> Right CPProgramOther
    v -> Left ("Unknown CPProgram: " <> show v)
