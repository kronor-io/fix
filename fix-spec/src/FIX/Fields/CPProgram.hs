{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.CPProgram where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core (IsField (..), IsFieldType (..))
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- FieldSpec {fieldNumber = 875, fieldName = "CPProgram", fieldType = FieldTypeInt, fieldValues = [FieldValueSpec {fieldValueEnum = "1", fieldValueDescription = "PROGRAM3A3"},FieldValueSpec {fieldValueEnum = "2", fieldValueDescription = "PROGRAM42"},FieldValueSpec {fieldValueEnum = "99", fieldValueDescription = "OTHER"}]}
data CPProgram
  = CPProgram_PROGRAM3A3
  | CPProgram_PROGRAM42
  | CPProgram_OTHER
  deriving stock (Show, Eq, Generic)

instance Validity CPProgram

instance IsField CPProgram where
  fieldTag Proxy = 875
  fieldIsData Proxy = False
  fieldToValue = \case
    CPProgram_PROGRAM3A3 -> "1"
    CPProgram_PROGRAM42 -> "2"
    CPProgram_OTHER -> "99"
  fieldFromValue = \case
    "1" -> Right CPProgram_PROGRAM3A3
    "2" -> Right CPProgram_PROGRAM42
    "99" -> Right CPProgram_OTHER
    v -> Left ("Unknown CPProgram: " <> show v)
