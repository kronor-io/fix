{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Fields.PegLimitType where

import Control.Monad
import Data.ByteString (ByteString)
import Data.Proxy
import Data.Validity
import FIX.Core
import GHC.Generics (Generic)

{-# ANN module ("HLint: ignore" :: String) #-}

-- | FieldSpec
--   { fieldNumber = 837
--   , fieldName = "PegLimitType"
--   , fieldType = FieldTypeInt
--   , fieldValues =
--       [ FieldValueSpec
--           { fieldValueEnum = "0" , fieldValueDescription = "OR_BETTER" }
--       , FieldValueSpec
--           { fieldValueEnum = "1" , fieldValueDescription = "STRICT" }
--       , FieldValueSpec
--           { fieldValueEnum = "2" , fieldValueDescription = "OR_WORSE" }
--       ]
--   }
data PegLimitType
  = PegLimitTypeOrBetter
  | PegLimitTypeStrict
  | PegLimitTypeOrWorse
  deriving stock (Show, Eq, Generic)

instance Validity PegLimitType

instance IsField PegLimitType where
  fieldTag Proxy = 837
  fieldIsData Proxy = False
  fieldToValue = \case
    PegLimitTypeOrBetter -> "0"
    PegLimitTypeStrict -> "1"
    PegLimitTypeOrWorse -> "2"
  fieldFromValue = \case
    "0" -> Right PegLimitTypeOrBetter
    "1" -> Right PegLimitTypeStrict
    "2" -> Right PegLimitTypeOrWorse
    v -> Left ("Unknown PegLimitType: " <> show v)
