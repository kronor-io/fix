{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.BusinessMessageReject where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.BusinessRejectReason
import FIX.Fields.BusinessRejectRefID
import FIX.Fields.MsgType
import FIX.Fields.RefMsgType
import FIX.Fields.RefSeqNum
import FIX.Fields.Text
import FIX.Groups.Class
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "BusinessMessageReject"
--   , messageType = "j"
--   , messageCategory = "app"
--   , messagePieces =
--       [ MessagePieceField "RefSeqNum" False
--       , MessagePieceField "RefMsgType" True
--       , MessagePieceField "BusinessRejectRefID" False
--       , MessagePieceField "BusinessRejectReason" True
--       , MessagePieceField "Text" False
--       ]
--   }
data BusinessMessageReject = BusinessMessageReject
  { businessMessageRejectRefSeqNum :: !(Maybe RefSeqNum),
    businessMessageRejectRefMsgType :: !RefMsgType,
    businessMessageRejectBusinessRejectRefID :: !(Maybe BusinessRejectRefID),
    businessMessageRejectBusinessRejectReason :: !BusinessRejectReason,
    businessMessageRejectText :: !(Maybe Text)
  }
  deriving stock (Show, Eq, Generic)

instance Validity BusinessMessageReject

instance IsComponent BusinessMessageReject where
  toComponentFields ((BusinessMessageReject {..})) =
    mconcat
      [ optionalFieldB businessMessageRejectRefSeqNum,
        requiredFieldB businessMessageRejectRefMsgType,
        optionalFieldB businessMessageRejectBusinessRejectRefID,
        requiredFieldB businessMessageRejectBusinessRejectReason,
        optionalFieldB businessMessageRejectText
      ]
  fromComponentFields = do
    businessMessageRejectRefSeqNum <- optionalFieldP
    businessMessageRejectRefMsgType <- requiredFieldP
    businessMessageRejectBusinessRejectRefID <- optionalFieldP
    businessMessageRejectBusinessRejectReason <- requiredFieldP
    businessMessageRejectText <- optionalFieldP
    pure (BusinessMessageReject {..})

instance IsMessage BusinessMessageReject where
  messageType Proxy = MsgTypeBusinessMessageReject

makeBusinessMessageReject :: RefMsgType -> (BusinessRejectReason -> BusinessMessageReject)
makeBusinessMessageReject businessMessageRejectRefMsgType businessMessageRejectBusinessRejectReason =
  let businessMessageRejectRefSeqNum = Nothing
      businessMessageRejectBusinessRejectRefID = Nothing
      businessMessageRejectText = Nothing
   in (BusinessMessageReject {..})
