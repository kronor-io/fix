{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.SecurityDefinition where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Components.Instrument
import FIX.Components.InstrumentExtension
import FIX.Fields.Currency
import FIX.Fields.EncodedText
import FIX.Fields.ExpirationCycle
import FIX.Fields.MinTradeVol
import FIX.Fields.MsgType
import FIX.Fields.RoundLot
import FIX.Fields.SecurityReqID
import FIX.Fields.SecurityResponseID
import FIX.Fields.SecurityResponseType
import FIX.Fields.Text
import FIX.Fields.TradingSessionID
import FIX.Fields.TradingSessionSubID
import FIX.Groups.Class
import FIX.Groups.SecurityDefinitionLegsGroupElem
import FIX.Groups.SecurityDefinitionUnderlyingsGroupElem
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "SecurityDefinition"
--   , messageType = "d"
--   , messageCategory = "app"
--   , messagePieces =
--       [ MessagePieceField "SecurityReqID" True
--       , MessagePieceField "SecurityResponseID" True
--       , MessagePieceField "SecurityResponseType" True
--       , MessagePieceComponent "Instrument" False
--       , MessagePieceComponent "InstrumentExtension" True
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "SecurityDefinitionUnderlyings"
--             , groupNumberField = "NoUnderlyings"
--             , groupPieces =
--                 [ MessagePieceComponent "UnderlyingInstrument" True ]
--             }
--           False
--       , MessagePieceField "Currency" False
--       , MessagePieceField "TradingSessionID" False
--       , MessagePieceField "TradingSessionSubID" False
--       , MessagePieceField "Text" False
--       , MessagePieceField "EncodedText" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "SecurityDefinitionLegs"
--             , groupNumberField = "NoLegs"
--             , groupPieces = [ MessagePieceComponent "InstrumentLeg" True ]
--             }
--           False
--       , MessagePieceField "ExpirationCycle" False
--       , MessagePieceField "RoundLot" False
--       , MessagePieceField "MinTradeVol" False
--       ]
--   }
data SecurityDefinition = SecurityDefinition
  { securityDefinitionSecurityReqID :: !SecurityReqID,
    securityDefinitionSecurityResponseID :: !SecurityResponseID,
    securityDefinitionSecurityResponseType :: !SecurityResponseType,
    securityDefinitionInstrument :: !(Maybe Instrument),
    securityDefinitionInstrumentExtension :: !InstrumentExtension,
    securityDefinitionSecurityDefinitionUnderlyingsGroup :: ![SecurityDefinitionUnderlyingsGroupElem],
    securityDefinitionCurrency :: !(Maybe Currency),
    securityDefinitionTradingSessionID :: !(Maybe TradingSessionID),
    securityDefinitionTradingSessionSubID :: !(Maybe TradingSessionSubID),
    securityDefinitionText :: !(Maybe Text),
    securityDefinitionEncodedText :: !(Maybe EncodedText),
    securityDefinitionSecurityDefinitionLegsGroup :: ![SecurityDefinitionLegsGroupElem],
    securityDefinitionExpirationCycle :: !(Maybe ExpirationCycle),
    securityDefinitionRoundLot :: !(Maybe RoundLot),
    securityDefinitionMinTradeVol :: !(Maybe MinTradeVol)
  }
  deriving stock (Show, Eq, Generic)

instance Validity SecurityDefinition

instance IsComponent SecurityDefinition where
  toComponentFields ((SecurityDefinition {..})) =
    mconcat
      [ requiredFieldB securityDefinitionSecurityReqID,
        requiredFieldB securityDefinitionSecurityResponseID,
        requiredFieldB securityDefinitionSecurityResponseType,
        optionalComponentB securityDefinitionInstrument,
        requiredComponentB securityDefinitionInstrumentExtension,
        optionalGroupB securityDefinitionSecurityDefinitionUnderlyingsGroup,
        optionalFieldB securityDefinitionCurrency,
        optionalFieldB securityDefinitionTradingSessionID,
        optionalFieldB securityDefinitionTradingSessionSubID,
        optionalFieldB securityDefinitionText,
        optionalFieldB securityDefinitionEncodedText,
        optionalGroupB securityDefinitionSecurityDefinitionLegsGroup,
        optionalFieldB securityDefinitionExpirationCycle,
        optionalFieldB securityDefinitionRoundLot,
        optionalFieldB securityDefinitionMinTradeVol
      ]
  fromComponentFields = do
    securityDefinitionSecurityReqID <- requiredFieldP
    securityDefinitionSecurityResponseID <- requiredFieldP
    securityDefinitionSecurityResponseType <- requiredFieldP
    securityDefinitionInstrument <- optionalComponentP
    securityDefinitionInstrumentExtension <- requiredComponentP
    securityDefinitionSecurityDefinitionUnderlyingsGroup <- optionalGroupP
    securityDefinitionCurrency <- optionalFieldP
    securityDefinitionTradingSessionID <- optionalFieldP
    securityDefinitionTradingSessionSubID <- optionalFieldP
    securityDefinitionText <- optionalFieldP
    securityDefinitionEncodedText <- optionalFieldP
    securityDefinitionSecurityDefinitionLegsGroup <- optionalGroupP
    securityDefinitionExpirationCycle <- optionalFieldP
    securityDefinitionRoundLot <- optionalFieldP
    securityDefinitionMinTradeVol <- optionalFieldP
    pure (SecurityDefinition {..})

instance IsMessage SecurityDefinition where
  messageType Proxy = MsgTypeSecurityDefinition

makeSecurityDefinition :: SecurityReqID -> (SecurityResponseID -> (SecurityResponseType -> (InstrumentExtension -> SecurityDefinition)))
makeSecurityDefinition securityDefinitionSecurityReqID securityDefinitionSecurityResponseID securityDefinitionSecurityResponseType securityDefinitionInstrumentExtension =
  let securityDefinitionInstrument = Nothing
      securityDefinitionSecurityDefinitionUnderlyingsGroup = []
      securityDefinitionCurrency = Nothing
      securityDefinitionTradingSessionID = Nothing
      securityDefinitionTradingSessionSubID = Nothing
      securityDefinitionText = Nothing
      securityDefinitionEncodedText = Nothing
      securityDefinitionSecurityDefinitionLegsGroup = []
      securityDefinitionExpirationCycle = Nothing
      securityDefinitionRoundLot = Nothing
      securityDefinitionMinTradeVol = Nothing
   in (SecurityDefinition {..})
