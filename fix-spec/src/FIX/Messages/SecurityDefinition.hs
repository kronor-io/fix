{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.SecurityDefinition where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.SecurityReqID
import FIX.Fields.SecurityResponseID
import FIX.Fields.SecurityResponseType
import FIX.Groups.Class
import FIX.Groups.UnderlyingsGroupElem
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "SecurityDefinition"
--   , messageType = "d"
--   , messageCategory = "app"
--   , messagePieces =
--       [ MessagePieceField "SecurityReqID" True
--       , MessagePieceField "SecurityResponseID" True
--       , MessagePieceField "SecurityResponseType" True
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NoUnderlyings"
--             , groupNumberField = "NoUnderlyings"
--             , groupPieces =
--                 [ MessagePieceField "UnderlyingSymbol" True
--                 , MessagePieceField "UnderlyingSecurityID" True
--                 , MessagePieceField "UnderlyingMaturityDate" True
--                 , MessagePieceField "UnderlyingSecurityDesc" True
--                 ]
--             }
--           False
--       ]
--   }
data SecurityDefinition = SecurityDefinition
  { securityDefinitionSecurityReqID :: !SecurityReqID,
    securityDefinitionSecurityResponseID :: !SecurityResponseID,
    securityDefinitionSecurityResponseType :: !SecurityResponseType,
    securityDefinitionUnderlyingsGroup :: ![UnderlyingsGroupElem]
  }
  deriving stock (Show, Eq, Generic)

instance Validity SecurityDefinition

instance IsComponent SecurityDefinition where
  toComponentFields ((SecurityDefinition {..})) =
    mconcat
      [ requiredFieldB securityDefinitionSecurityReqID,
        requiredFieldB securityDefinitionSecurityResponseID,
        requiredFieldB securityDefinitionSecurityResponseType,
        optionalGroupB securityDefinitionUnderlyingsGroup
      ]
  fromComponentFields = do
    securityDefinitionSecurityReqID <- requiredFieldP
    securityDefinitionSecurityResponseID <- requiredFieldP
    securityDefinitionSecurityResponseType <- requiredFieldP
    securityDefinitionUnderlyingsGroup <- optionalGroupP
    pure (SecurityDefinition {..})

instance IsMessage SecurityDefinition where
  messageType Proxy = MsgTypeSecurityDefinition

makeSecurityDefinition :: SecurityReqID -> (SecurityResponseID -> (SecurityResponseType -> SecurityDefinition))
makeSecurityDefinition securityDefinitionSecurityReqID securityDefinitionSecurityResponseID securityDefinitionSecurityResponseType =
  let securityDefinitionUnderlyingsGroup = []
   in (SecurityDefinition {..})
