{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.Reject where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.EncodedText
import FIX.Fields.MsgType
import FIX.Fields.RefMsgType
import FIX.Fields.RefSeqNum
import FIX.Fields.RefTagID
import FIX.Fields.SessionRejectReason
import FIX.Fields.Text
import FIX.Groups.Class
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "Reject"
--   , messageType = "3"
--   , messageCategory = "admin"
--   , messagePieces =
--       [ MessagePieceField "RefSeqNum" True
--       , MessagePieceField "RefTagID" False
--       , MessagePieceField "RefMsgType" False
--       , MessagePieceField "SessionRejectReason" False
--       , MessagePieceField "Text" False
--       , MessagePieceField "EncodedText" False
--       ]
--   }
data Reject = Reject
  { rejectRefSeqNum :: !RefSeqNum,
    rejectRefTagID :: !(Maybe RefTagID),
    rejectRefMsgType :: !(Maybe RefMsgType),
    rejectSessionRejectReason :: !(Maybe SessionRejectReason),
    rejectText :: !(Maybe Text),
    rejectEncodedText :: !(Maybe EncodedText)
  }
  deriving stock (Show, Eq, Generic)

instance Validity Reject

instance IsComponent Reject where
  toComponentFields ((Reject {..})) =
    mconcat
      [ requiredFieldB rejectRefSeqNum,
        optionalFieldB rejectRefTagID,
        optionalFieldB rejectRefMsgType,
        optionalFieldB rejectSessionRejectReason,
        optionalFieldB rejectText,
        optionalFieldB rejectEncodedText
      ]
  fromComponentFields = do
    rejectRefSeqNum <- requiredFieldP
    rejectRefTagID <- optionalFieldP
    rejectRefMsgType <- optionalFieldP
    rejectSessionRejectReason <- optionalFieldP
    rejectText <- optionalFieldP
    rejectEncodedText <- optionalFieldP
    pure (Reject {..})

instance IsMessage Reject where
  messageType Proxy = MsgTypeReject

makeReject :: RefSeqNum -> Reject
makeReject rejectRefSeqNum =
  let rejectRefTagID = Nothing
      rejectRefMsgType = Nothing
      rejectSessionRejectReason = Nothing
      rejectText = Nothing
      rejectEncodedText = Nothing
   in (Reject {..})
