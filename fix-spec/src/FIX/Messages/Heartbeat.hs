{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.Heartbeat where

import Data.Maybe (catMaybes)
import Data.Proxy
import Data.Validity
import FIX.Core (IsMessage (..), optionalFieldB, optionalFieldP, requiredFieldB, requiredFieldP)
import FIX.Fields.MsgType
import FIX.Fields.TestReqID
import GHC.Generics (Generic)

-- | MessageSpec {messageName = "Heartbeat", messageType = "0", messageCategory = "admin", messagePieces = [MessagePieceField "TestReqID" False]}
data Heartbeat = Heartbeat {heartbeatTestReqID :: !(Maybe TestReqID)}
  deriving stock (Show, Eq, Generic)

instance Validity Heartbeat

instance IsMessage MsgType Heartbeat where
  messageType Proxy = MsgType_HEARTBEAT
  toMessageFields ((Heartbeat {..})) = catMaybes [optionalFieldB heartbeatTestReqID]
  fromMessageFields = do
    heartbeatTestReqID <- optionalFieldP
    pure (Heartbeat {..})
