{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.SequenceReset where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.NewSeqNo
import FIX.Groups.Class
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "SequenceReset"
--   , messageType = "4"
--   , messageCategory = "admin"
--   , messagePieces = [ MessagePieceField "NewSeqNo" True ]
--   }
data SequenceReset = SequenceReset {sequenceResetNewSeqNo :: !NewSeqNo}
  deriving stock (Show, Eq, Generic)

instance Validity SequenceReset

instance IsComponent SequenceReset where
  toComponentFields ((SequenceReset {..})) = mconcat [requiredFieldB sequenceResetNewSeqNo]
  fromComponentFields = do
    sequenceResetNewSeqNo <- requiredFieldP
    pure (SequenceReset {..})

instance IsMessage SequenceReset where
  messageType Proxy = MsgTypeSequenceReset

makeSequenceReset :: NewSeqNo -> SequenceReset
makeSequenceReset sequenceResetNewSeqNo =
  let
   in (SequenceReset {..})
