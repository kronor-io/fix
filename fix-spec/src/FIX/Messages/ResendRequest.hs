{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.ResendRequest where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.BeginSeqNo
import FIX.Fields.EndSeqNo
import FIX.Fields.MsgType
import FIX.Groups.Class
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "ResendRequest"
--   , messageType = "2"
--   , messageCategory = "admin"
--   , messagePieces =
--       [ MessagePieceField "BeginSeqNo" True
--       , MessagePieceField "EndSeqNo" True
--       ]
--   }
data ResendRequest = ResendRequest
  { resendRequestBeginSeqNo :: !BeginSeqNo,
    resendRequestEndSeqNo :: !EndSeqNo
  }
  deriving stock (Show, Eq, Generic)

instance Validity ResendRequest

instance IsComponent ResendRequest where
  toComponentFields ((ResendRequest {..})) =
    mconcat
      [ requiredFieldB resendRequestBeginSeqNo,
        requiredFieldB resendRequestEndSeqNo
      ]
  fromComponentFields = do
    resendRequestBeginSeqNo <- requiredFieldP
    resendRequestEndSeqNo <- requiredFieldP
    pure (ResendRequest {..})

instance IsMessage ResendRequest where
  messageType Proxy = MsgTypeResendRequest

makeResendRequest :: BeginSeqNo -> (EndSeqNo -> ResendRequest)
makeResendRequest resendRequestBeginSeqNo resendRequestEndSeqNo =
  let
   in (ResendRequest {..})
