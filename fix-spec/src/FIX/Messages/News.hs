{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.News where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.EncodedHeadline
import FIX.Fields.Headline
import FIX.Fields.MsgType
import FIX.Fields.OrigTime
import FIX.Fields.RawData
import FIX.Fields.URLLink
import FIX.Fields.Urgency
import FIX.Groups.Class
import FIX.Groups.NewsLegsGroupElem
import FIX.Groups.NewsLinesOfTextGroupElem
import FIX.Groups.NewsRelatedSymGroupElem
import FIX.Groups.NewsRoutingIDsGroupElem
import FIX.Groups.NewsUnderlyingsGroupElem
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "News"
--   , messageType = "B"
--   , messageCategory = "app"
--   , messagePieces =
--       [ MessagePieceField "OrigTime" False
--       , MessagePieceField "Urgency" False
--       , MessagePieceField "Headline" True
--       , MessagePieceField "EncodedHeadline" False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewsRoutingIDs"
--             , groupNumberField = "NoRoutingIDs"
--             , groupPieces =
--                 [ MessagePieceField "RoutingType" True
--                 , MessagePieceField "RoutingID" False
--                 ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewsRelatedSym"
--             , groupNumberField = "NoRelatedSym"
--             , groupPieces = [ MessagePieceComponent "Instrument" True ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewsLegs"
--             , groupNumberField = "NoLegs"
--             , groupPieces = [ MessagePieceComponent "InstrumentLeg" True ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewsUnderlyings"
--             , groupNumberField = "NoUnderlyings"
--             , groupPieces =
--                 [ MessagePieceComponent "UnderlyingInstrument" True ]
--             }
--           False
--       , MessagePieceGroup
--           GroupSpec
--             { groupName = "NewsLinesOfText"
--             , groupNumberField = "LinesOfText"
--             , groupPieces =
--                 [ MessagePieceField "Text" True
--                 , MessagePieceField "EncodedText" False
--                 ]
--             }
--           True
--       , MessagePieceField "URLLink" False
--       , MessagePieceField "RawData" False
--       ]
--   }
data News = News
  { newsOrigTime :: !(Maybe OrigTime),
    newsUrgency :: !(Maybe Urgency),
    newsHeadline :: !Headline,
    newsEncodedHeadline :: !(Maybe EncodedHeadline),
    newsNewsRoutingIDsGroup :: ![NewsRoutingIDsGroupElem],
    newsNewsRelatedSymGroup :: ![NewsRelatedSymGroupElem],
    newsNewsLegsGroup :: ![NewsLegsGroupElem],
    newsNewsUnderlyingsGroup :: ![NewsUnderlyingsGroupElem],
    newsNewsLinesOfTextGroup :: !(NonEmpty NewsLinesOfTextGroupElem),
    newsURLLink :: !(Maybe URLLink),
    newsRawData :: !(Maybe RawData)
  }
  deriving stock (Show, Eq, Generic)

instance Validity News

instance IsComponent News where
  toComponentFields ((News {..})) =
    mconcat
      [ optionalFieldB newsOrigTime,
        optionalFieldB newsUrgency,
        requiredFieldB newsHeadline,
        optionalFieldB newsEncodedHeadline,
        optionalGroupB newsNewsRoutingIDsGroup,
        optionalGroupB newsNewsRelatedSymGroup,
        optionalGroupB newsNewsLegsGroup,
        optionalGroupB newsNewsUnderlyingsGroup,
        requiredGroupB newsNewsLinesOfTextGroup,
        optionalFieldB newsURLLink,
        optionalFieldB newsRawData
      ]
  fromComponentFields = do
    newsOrigTime <- optionalFieldP
    newsUrgency <- optionalFieldP
    newsHeadline <- requiredFieldP
    newsEncodedHeadline <- optionalFieldP
    newsNewsRoutingIDsGroup <- optionalGroupP
    newsNewsRelatedSymGroup <- optionalGroupP
    newsNewsLegsGroup <- optionalGroupP
    newsNewsUnderlyingsGroup <- optionalGroupP
    newsNewsLinesOfTextGroup <- requiredGroupP
    newsURLLink <- optionalFieldP
    newsRawData <- optionalFieldP
    pure (News {..})

instance IsMessage News where
  messageType Proxy = MsgTypeNews

makeNews :: Headline -> (NonEmpty NewsLinesOfTextGroupElem -> News)
makeNews newsHeadline newsNewsLinesOfTextGroup =
  let newsOrigTime = Nothing
      newsUrgency = Nothing
      newsEncodedHeadline = Nothing
      newsNewsRoutingIDsGroup = []
      newsNewsRelatedSymGroup = []
      newsNewsLegsGroup = []
      newsNewsUnderlyingsGroup = []
      newsURLLink = Nothing
      newsRawData = Nothing
   in (News {..})
