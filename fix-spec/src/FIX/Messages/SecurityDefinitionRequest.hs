{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.SecurityDefinitionRequest where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.SecurityReqID
import FIX.Fields.SecurityRequestType
import FIX.Fields.Symbol
import FIX.Groups.Class
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "SecurityDefinitionRequest"
--   , messageType = "c"
--   , messageCategory = "app"
--   , messagePieces =
--       [ MessagePieceField "SecurityReqID" True
--       , MessagePieceField "SecurityRequestType" True
--       , MessagePieceField "Symbol" True
--       ]
--   }
data SecurityDefinitionRequest = SecurityDefinitionRequest
  { securityDefinitionRequestSecurityReqID :: !SecurityReqID,
    securityDefinitionRequestSecurityRequestType :: !SecurityRequestType,
    securityDefinitionRequestSymbol :: !Symbol
  }
  deriving stock (Show, Eq, Generic)

instance Validity SecurityDefinitionRequest

instance IsComponent SecurityDefinitionRequest where
  toComponentFields ((SecurityDefinitionRequest {..})) =
    mconcat
      [ requiredFieldB securityDefinitionRequestSecurityReqID,
        requiredFieldB securityDefinitionRequestSecurityRequestType,
        requiredFieldB securityDefinitionRequestSymbol
      ]
  fromComponentFields = do
    securityDefinitionRequestSecurityReqID <- requiredFieldP
    securityDefinitionRequestSecurityRequestType <- requiredFieldP
    securityDefinitionRequestSymbol <- requiredFieldP
    pure (SecurityDefinitionRequest {..})

instance IsMessage SecurityDefinitionRequest where
  messageType Proxy = MsgTypeSecurityDefinitionRequest

makeSecurityDefinitionRequest :: SecurityReqID -> (SecurityRequestType -> (Symbol -> SecurityDefinitionRequest))
makeSecurityDefinitionRequest securityDefinitionRequestSecurityReqID securityDefinitionRequestSecurityRequestType securityDefinitionRequestSymbol =
  let
   in (SecurityDefinitionRequest {..})
