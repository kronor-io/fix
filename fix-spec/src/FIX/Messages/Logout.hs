{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.Logout where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.EncodedText
import FIX.Fields.MsgType
import FIX.Fields.Text
import FIX.Groups.Class
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "Logout"
--   , messageType = "5"
--   , messageCategory = "admin"
--   , messagePieces =
--       [ MessagePieceField "Text" False
--       , MessagePieceField "EncodedText" False
--       ]
--   }
data Logout = Logout
  { logoutText :: !(Maybe Text),
    logoutEncodedText :: !(Maybe EncodedText)
  }
  deriving stock (Show, Eq, Generic)

instance Validity Logout

instance IsComponent Logout where
  toComponentFields ((Logout {..})) =
    mconcat
      [ optionalFieldB logoutText,
        optionalFieldB logoutEncodedText
      ]
  fromComponentFields = do
    logoutText <- optionalFieldP
    logoutEncodedText <- optionalFieldP
    pure (Logout {..})

instance IsMessage Logout where
  messageType Proxy = MsgTypeLogout

makeLogout :: Logout
makeLogout =
  let logoutText = Nothing
      logoutEncodedText = Nothing
   in (Logout {..})
