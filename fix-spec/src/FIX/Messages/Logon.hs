{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.Logon where

import Data.Proxy
import Data.Validity
import FIX.Core (IsMessage (..))
import FIX.Fields.EncryptMethod
import FIX.Fields.HeartBtInt
import FIX.Fields.MaxMessageSize
import FIX.Fields.MsgType
import FIX.Fields.NextExpectedMsgSeqNum
import FIX.Fields.Password
import FIX.Fields.RawData
import FIX.Fields.RawDataLength
import FIX.Fields.ResetSeqNumFlag
import FIX.Fields.TestMessageIndicator
import FIX.Fields.Username
import GHC.Generics (Generic)

-- | MessageSpec {messageName = "Logon", messageType = "A", messageCategory = "admin", messagePieces = [MessagePieceField "EncryptMethod" True,MessagePieceField "HeartBtInt" True,MessagePieceField "RawDataLength" False,MessagePieceField "RawData" False,MessagePieceField "ResetSeqNumFlag" False,MessagePieceField "NextExpectedMsgSeqNum" False,MessagePieceField "MaxMessageSize" False,MessagePieceGroup "NoMsgTypes" False [MessagePieceField "RefMsgType" False,MessagePieceField "MsgDirection" False],MessagePieceField "TestMessageIndicator" False,MessagePieceField "Username" False,MessagePieceField "Password" False]}
data Logon = Logon
  { logonEncryptMethod :: !EncryptMethod,
    logonHeartBtInt :: !HeartBtInt,
    logonRawDataLength :: !(Maybe RawDataLength),
    logonRawData :: !(Maybe RawData),
    logonResetSeqNumFlag :: !(Maybe ResetSeqNumFlag),
    logonNextExpectedMsgSeqNum :: !(Maybe NextExpectedMsgSeqNum),
    logonMaxMessageSize :: !(Maybe MaxMessageSize),
    logonTestMessageIndicator :: !(Maybe TestMessageIndicator),
    logonUsername :: !(Maybe Username),
    logonPassword :: !(Maybe Password)
  }
  deriving stock (Show, Eq, Generic)

instance Validity Logon

instance IsMessage MsgType Logon where
  messageType Proxy = MsgType_LOGON
