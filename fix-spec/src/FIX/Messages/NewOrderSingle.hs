{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.NewOrderSingle where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.Account
import FIX.Fields.ClOrdID
import FIX.Fields.Currency
import FIX.Fields.DayCount
import FIX.Fields.Issuer
import FIX.Fields.MaturityDate
import FIX.Fields.MaturityDate2
import FIX.Fields.MsgType
import FIX.Fields.OptionDate
import FIX.Fields.OrdType
import FIX.Fields.OrderQty
import FIX.Fields.OrderQty2
import FIX.Fields.Price
import FIX.Fields.ProductType
import FIX.Fields.QuoteID
import FIX.Fields.SettlDate
import FIX.Fields.SettlDate2
import FIX.Fields.Side
import FIX.Fields.Symbol
import FIX.Fields.TransactTime
import FIX.Groups.Class
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "NewOrderSingle"
--   , messageType = "D"
--   , messageCategory = "app"
--   , messagePieces =
--       [ MessagePieceField "Account" True
--       , MessagePieceField "ClOrdID" True
--       , MessagePieceField "ProductType" False
--       , MessagePieceField "Currency" True
--       , MessagePieceField "OrderQty" True
--       , MessagePieceField "OrdType" True
--       , MessagePieceField "Side" True
--       , MessagePieceField "DayCount" False
--       , MessagePieceField "Symbol" True
--       , MessagePieceField "MaturityDate" False
--       , MessagePieceField "MaturityDate2" False
--       , MessagePieceField "TransactTime" True
--       , MessagePieceField "SettlDate" True
--       , MessagePieceField "Issuer" False
--       , MessagePieceField "QuoteID" True
--       , MessagePieceField "Price" False
--       , MessagePieceField "OrderQty2" False
--       , MessagePieceField "SettlDate2" False
--       , MessagePieceField "OptionDate" False
--       ]
--   }
data NewOrderSingle = NewOrderSingle
  { newOrderSingleAccount :: !Account,
    newOrderSingleClOrdID :: !ClOrdID,
    newOrderSingleProductType :: !(Maybe ProductType),
    newOrderSingleCurrency :: !Currency,
    newOrderSingleOrderQty :: !OrderQty,
    newOrderSingleOrdType :: !OrdType,
    newOrderSingleSide :: !Side,
    newOrderSingleDayCount :: !(Maybe DayCount),
    newOrderSingleSymbol :: !Symbol,
    newOrderSingleMaturityDate :: !(Maybe MaturityDate),
    newOrderSingleMaturityDate2 :: !(Maybe MaturityDate2),
    newOrderSingleTransactTime :: !TransactTime,
    newOrderSingleSettlDate :: !SettlDate,
    newOrderSingleIssuer :: !(Maybe Issuer),
    newOrderSingleQuoteID :: !QuoteID,
    newOrderSinglePrice :: !(Maybe Price),
    newOrderSingleOrderQty2 :: !(Maybe OrderQty2),
    newOrderSingleSettlDate2 :: !(Maybe SettlDate2),
    newOrderSingleOptionDate :: !(Maybe OptionDate)
  }
  deriving stock (Show, Eq, Generic)

instance Validity NewOrderSingle

instance IsComponent NewOrderSingle where
  toComponentFields ((NewOrderSingle {..})) =
    mconcat
      [ requiredFieldB newOrderSingleAccount,
        requiredFieldB newOrderSingleClOrdID,
        optionalFieldB newOrderSingleProductType,
        requiredFieldB newOrderSingleCurrency,
        requiredFieldB newOrderSingleOrderQty,
        requiredFieldB newOrderSingleOrdType,
        requiredFieldB newOrderSingleSide,
        optionalFieldB newOrderSingleDayCount,
        requiredFieldB newOrderSingleSymbol,
        optionalFieldB newOrderSingleMaturityDate,
        optionalFieldB newOrderSingleMaturityDate2,
        requiredFieldB newOrderSingleTransactTime,
        requiredFieldB newOrderSingleSettlDate,
        optionalFieldB newOrderSingleIssuer,
        requiredFieldB newOrderSingleQuoteID,
        optionalFieldB newOrderSinglePrice,
        optionalFieldB newOrderSingleOrderQty2,
        optionalFieldB newOrderSingleSettlDate2,
        optionalFieldB newOrderSingleOptionDate
      ]
  fromComponentFields = do
    newOrderSingleAccount <- requiredFieldP
    newOrderSingleClOrdID <- requiredFieldP
    newOrderSingleProductType <- optionalFieldP
    newOrderSingleCurrency <- requiredFieldP
    newOrderSingleOrderQty <- requiredFieldP
    newOrderSingleOrdType <- requiredFieldP
    newOrderSingleSide <- requiredFieldP
    newOrderSingleDayCount <- optionalFieldP
    newOrderSingleSymbol <- requiredFieldP
    newOrderSingleMaturityDate <- optionalFieldP
    newOrderSingleMaturityDate2 <- optionalFieldP
    newOrderSingleTransactTime <- requiredFieldP
    newOrderSingleSettlDate <- requiredFieldP
    newOrderSingleIssuer <- optionalFieldP
    newOrderSingleQuoteID <- requiredFieldP
    newOrderSinglePrice <- optionalFieldP
    newOrderSingleOrderQty2 <- optionalFieldP
    newOrderSingleSettlDate2 <- optionalFieldP
    newOrderSingleOptionDate <- optionalFieldP
    pure (NewOrderSingle {..})

instance IsMessage NewOrderSingle where
  messageType Proxy = MsgTypeNewOrderSingle

makeNewOrderSingle :: Account -> (ClOrdID -> (Currency -> (OrderQty -> (OrdType -> (Side -> (Symbol -> (TransactTime -> (SettlDate -> (QuoteID -> NewOrderSingle)))))))))
makeNewOrderSingle newOrderSingleAccount newOrderSingleClOrdID newOrderSingleCurrency newOrderSingleOrderQty newOrderSingleOrdType newOrderSingleSide newOrderSingleSymbol newOrderSingleTransactTime newOrderSingleSettlDate newOrderSingleQuoteID =
  let newOrderSingleProductType = Nothing
      newOrderSingleDayCount = Nothing
      newOrderSingleMaturityDate = Nothing
      newOrderSingleMaturityDate2 = Nothing
      newOrderSingleIssuer = Nothing
      newOrderSinglePrice = Nothing
      newOrderSingleOrderQty2 = Nothing
      newOrderSingleSettlDate2 = Nothing
      newOrderSingleOptionDate = Nothing
   in (NewOrderSingle {..})
