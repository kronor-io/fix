{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.TestRequest where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.TestReqID
import FIX.Groups.Class
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "TestRequest"
--   , messageType = "1"
--   , messageCategory = "admin"
--   , messagePieces = [ MessagePieceField "TestReqID" True ]
--   }
data TestRequest = TestRequest {testRequestTestReqID :: !TestReqID}
  deriving stock (Show, Eq, Generic)

instance Validity TestRequest

instance IsComponent TestRequest where
  toComponentFields ((TestRequest {..})) = mconcat [requiredFieldB testRequestTestReqID]
  fromComponentFields = do
    testRequestTestReqID <- requiredFieldP
    pure (TestRequest {..})

instance IsMessage TestRequest where
  messageType Proxy = MsgTypeTestRequest

makeTestRequest :: TestReqID -> TestRequest
makeTestRequest testRequestTestReqID =
  let
   in (TestRequest {..})
