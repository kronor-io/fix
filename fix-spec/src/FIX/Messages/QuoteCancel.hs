{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

-- | This module has been GENERATED by fix-codegen.
-- Any manual edits will be undone the next time fix-codegen is run.
module FIX.Messages.QuoteCancel where

import Data.List.NonEmpty (NonEmpty)
import Data.Proxy
import Data.Validity
import FIX.Components.Class
import FIX.Fields.MsgType
import FIX.Fields.ProductType
import FIX.Fields.QuoteCancelType
import FIX.Fields.QuoteID
import FIX.Fields.QuoteReqID
import FIX.Groups.Class
import FIX.Messages.Class
import GHC.Generics (Generic)

-- | MessageSpec
--   { messageName = "QuoteCancel"
--   , messageType = "Z"
--   , messageCategory = "app"
--   , messagePieces =
--       [ MessagePieceField "QuoteID" True
--       , MessagePieceField "QuoteReqID" False
--       , MessagePieceField "QuoteCancelType" True
--       , MessagePieceField "ProductType" False
--       ]
--   }
data QuoteCancel = QuoteCancel
  { quoteCancelQuoteID :: !QuoteID,
    quoteCancelQuoteReqID :: !(Maybe QuoteReqID),
    quoteCancelQuoteCancelType :: !QuoteCancelType,
    quoteCancelProductType :: !(Maybe ProductType)
  }
  deriving stock (Show, Eq, Generic)

instance Validity QuoteCancel

instance IsComponent QuoteCancel where
  toComponentFields ((QuoteCancel {..})) =
    mconcat
      [ requiredFieldB quoteCancelQuoteID,
        optionalFieldB quoteCancelQuoteReqID,
        requiredFieldB quoteCancelQuoteCancelType,
        optionalFieldB quoteCancelProductType
      ]
  fromComponentFields = do
    quoteCancelQuoteID <- requiredFieldP
    quoteCancelQuoteReqID <- optionalFieldP
    quoteCancelQuoteCancelType <- requiredFieldP
    quoteCancelProductType <- optionalFieldP
    pure (QuoteCancel {..})

instance IsMessage QuoteCancel where
  messageType Proxy = MsgTypeQuoteCancel

makeQuoteCancel :: QuoteID -> (QuoteCancelType -> QuoteCancel)
makeQuoteCancel quoteCancelQuoteID quoteCancelQuoteCancelType =
  let quoteCancelQuoteReqID = Nothing
      quoteCancelProductType = Nothing
   in (QuoteCancel {..})
